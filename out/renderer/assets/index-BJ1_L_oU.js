function _mergeNamespaces(n2, m2) {
  for (var i = 0; i < m2.length; i++) {
    const e2 = m2[i];
    if (typeof e2 !== "string" && !Array.isArray(e2)) {
      for (const k2 in e2) {
        if (k2 !== "default" && !(k2 in n2)) {
          const d2 = Object.getOwnPropertyDescriptor(e2, k2);
          if (d2) {
            Object.defineProperty(n2, k2, d2.get ? d2 : {
              enumerable: true,
              get: () => e2[k2]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a.prototype = f2.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$2 = Symbol.for("react.element"), n$2 = Symbol.for("react.portal"), p$3 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r$2 = Symbol.for("react.profiler"), t$2 = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$2 = Symbol.for("react.forward_ref"), w$1 = Symbol.for("react.suspense"), x$1 = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$2 = Symbol.iterator;
function A$2(a) {
  if (null === a || "object" !== typeof a)
    return null;
  a = z$2 && a[z$2] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var B$1 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$1 = Object.assign, D$1 = {};
function E$1(a, b2, e2) {
  this.props = a;
  this.context = b2;
  this.refs = D$1;
  this.updater = e2 || B$1;
}
E$1.prototype.isReactComponent = {};
E$1.prototype.setState = function(a, b2) {
  if ("object" !== typeof a && "function" !== typeof a && null != a)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a, b2, "setState");
};
E$1.prototype.forceUpdate = function(a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function F() {
}
F.prototype = E$1.prototype;
function G$1(a, b2, e2) {
  this.props = a;
  this.context = b2;
  this.refs = D$1;
  this.updater = e2 || B$1;
}
var H$1 = G$1.prototype = new F();
H$1.constructor = G$1;
C$1(H$1, E$1.prototype);
H$1.isPureReactComponent = true;
var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
function M$1(a, b2, e2) {
  var d2, c2 = {}, k2 = null, h3 = null;
  if (null != b2)
    for (d2 in void 0 !== b2.ref && (h3 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
      J.call(b2, d2) && !L$1.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    c2.children = e2;
  else if (1 < g2) {
    for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
      f2[m2] = arguments[m2 + 2];
    c2.children = f2;
  }
  if (a && a.defaultProps)
    for (d2 in g2 = a.defaultProps, g2)
      void 0 === c2[d2] && (c2[d2] = g2[d2]);
  return { $$typeof: l$2, type: a, key: k2, ref: h3, props: c2, _owner: K$1.current };
}
function N$1(a, b2) {
  return { $$typeof: l$2, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
}
function O$1(a) {
  return "object" === typeof a && null !== a && a.$$typeof === l$2;
}
function escape$3(a) {
  var b2 = { "=": "=0", ":": "=2" };
  return "$" + a.replace(/[=:]/g, function(a2) {
    return b2[a2];
  });
}
var P$1 = /\/+/g;
function Q$1(a, b2) {
  return "object" === typeof a && null !== a && null != a.key ? escape$3("" + a.key) : b2.toString(36);
}
function R$1(a, b2, e2, d2, c2) {
  var k2 = typeof a;
  if ("undefined" === k2 || "boolean" === k2)
    a = null;
  var h3 = false;
  if (null === a)
    h3 = true;
  else
    switch (k2) {
      case "string":
      case "number":
        h3 = true;
        break;
      case "object":
        switch (a.$$typeof) {
          case l$2:
          case n$2:
            h3 = true;
        }
    }
  if (h3)
    return h3 = a, c2 = c2(h3), a = "" === d2 ? "." + Q$1(h3, 0) : d2, I$1(c2) ? (e2 = "", null != a && (e2 = a.replace(P$1, "$&/") + "/"), R$1(c2, b2, e2, "", function(a2) {
      return a2;
    })) : null != c2 && (O$1(c2) && (c2 = N$1(c2, e2 + (!c2.key || h3 && h3.key === c2.key ? "" : ("" + c2.key).replace(P$1, "$&/") + "/") + a)), b2.push(c2)), 1;
  h3 = 0;
  d2 = "" === d2 ? "." : d2 + ":";
  if (I$1(a))
    for (var g2 = 0; g2 < a.length; g2++) {
      k2 = a[g2];
      var f2 = d2 + Q$1(k2, g2);
      h3 += R$1(k2, b2, e2, f2, c2);
    }
  else if (f2 = A$2(a), "function" === typeof f2)
    for (a = f2.call(a), g2 = 0; !(k2 = a.next()).done; )
      k2 = k2.value, f2 = d2 + Q$1(k2, g2++), h3 += R$1(k2, b2, e2, f2, c2);
  else if ("object" === k2)
    throw b2 = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
  return h3;
}
function S$1(a, b2, e2) {
  if (null == a)
    return a;
  var d2 = [], c2 = 0;
  R$1(a, d2, "", "", function(a2) {
    return b2.call(e2, a2, c2++);
  });
  return d2;
}
function T$1(a) {
  if (-1 === a._status) {
    var b2 = a._result;
    b2 = b2();
    b2.then(function(b3) {
      if (0 === a._status || -1 === a._status)
        a._status = 1, a._result = b3;
    }, function(b3) {
      if (0 === a._status || -1 === a._status)
        a._status = 2, a._result = b3;
    });
    -1 === a._status && (a._status = 0, a._result = b2);
  }
  if (1 === a._status)
    return a._result.default;
  throw a._result;
}
var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
react_production_min.Children = { map: S$1, forEach: function(a, b2, e2) {
  S$1(a, function() {
    b2.apply(this, arguments);
  }, e2);
}, count: function(a) {
  var b2 = 0;
  S$1(a, function() {
    b2++;
  });
  return b2;
}, toArray: function(a) {
  return S$1(a, function(a2) {
    return a2;
  }) || [];
}, only: function(a) {
  if (!O$1(a))
    throw Error("React.Children.only expected to receive a single React element child.");
  return a;
} };
react_production_min.Component = E$1;
react_production_min.Fragment = p$3;
react_production_min.Profiler = r$2;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$2;
react_production_min.Suspense = w$1;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.cloneElement = function(a, b2, e2) {
  if (null === a || void 0 === a)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
  var d2 = C$1({}, a.props), c2 = a.key, k2 = a.ref, h3 = a._owner;
  if (null != b2) {
    void 0 !== b2.ref && (k2 = b2.ref, h3 = K$1.current);
    void 0 !== b2.key && (c2 = "" + b2.key);
    if (a.type && a.type.defaultProps)
      var g2 = a.type.defaultProps;
    for (f2 in b2)
      J.call(b2, f2) && !L$1.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    d2.children = e2;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m2 = 0; m2 < f2; m2++)
      g2[m2] = arguments[m2 + 2];
    d2.children = g2;
  }
  return { $$typeof: l$2, type: a.type, key: c2, ref: k2, props: d2, _owner: h3 };
};
react_production_min.createContext = function(a) {
  a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a.Provider = { $$typeof: t$2, _context: a };
  return a.Consumer = a;
};
react_production_min.createElement = M$1;
react_production_min.createFactory = function(a) {
  var b2 = M$1.bind(null, a);
  b2.type = a;
  return b2;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a) {
  return { $$typeof: v$2, render: a };
};
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(a) {
  return { $$typeof: y$1, _payload: { _status: -1, _result: a }, _init: T$1 };
};
react_production_min.memo = function(a, b2) {
  return { $$typeof: x$1, type: a, compare: void 0 === b2 ? null : b2 };
};
react_production_min.startTransition = function(a) {
  var b2 = V$1.transition;
  V$1.transition = {};
  try {
    a();
  } finally {
    V$1.transition = b2;
  }
};
react_production_min.unstable_act = function() {
  throw Error("act(...) is not supported in production builds of React.");
};
react_production_min.useCallback = function(a, b2) {
  return U$1.current.useCallback(a, b2);
};
react_production_min.useContext = function(a) {
  return U$1.current.useContext(a);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a) {
  return U$1.current.useDeferredValue(a);
};
react_production_min.useEffect = function(a, b2) {
  return U$1.current.useEffect(a, b2);
};
react_production_min.useId = function() {
  return U$1.current.useId();
};
react_production_min.useImperativeHandle = function(a, b2, e2) {
  return U$1.current.useImperativeHandle(a, b2, e2);
};
react_production_min.useInsertionEffect = function(a, b2) {
  return U$1.current.useInsertionEffect(a, b2);
};
react_production_min.useLayoutEffect = function(a, b2) {
  return U$1.current.useLayoutEffect(a, b2);
};
react_production_min.useMemo = function(a, b2) {
  return U$1.current.useMemo(a, b2);
};
react_production_min.useReducer = function(a, b2, e2) {
  return U$1.current.useReducer(a, b2, e2);
};
react_production_min.useRef = function(a) {
  return U$1.current.useRef(a);
};
react_production_min.useState = function(a) {
  return U$1.current.useState(a);
};
react_production_min.useSyncExternalStore = function(a, b2, e2) {
  return U$1.current.useSyncExternalStore(a, b2, e2);
};
react_production_min.useTransition = function() {
  return U$1.current.useTransition();
};
react_production_min.version = "18.2.0";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React
}, [reactExports]);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, k$1 = Symbol.for("react.element"), l$1 = Symbol.for("react.fragment"), m$2 = Object.prototype.hasOwnProperty, n$1 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$2 = { key: true, ref: true, __self: true, __source: true };
function q$1(c2, a, g2) {
  var b2, d2 = {}, e2 = null, h3 = null;
  void 0 !== g2 && (e2 = "" + g2);
  void 0 !== a.key && (e2 = "" + a.key);
  void 0 !== a.ref && (h3 = a.ref);
  for (b2 in a)
    m$2.call(a, b2) && !p$2.hasOwnProperty(b2) && (d2[b2] = a[b2]);
  if (c2 && c2.defaultProps)
    for (b2 in a = c2.defaultProps, a)
      void 0 === d2[b2] && (d2[b2] = a[b2]);
  return { $$typeof: k$1, type: c2, key: e2, ref: h3, props: d2, _owner: n$1.current };
}
reactJsxRuntime_production_min.Fragment = l$1;
reactJsxRuntime_production_min.jsx = q$1;
reactJsxRuntime_production_min.jsxs = q$1;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var client = {};
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  function f2(a, b2) {
    var c2 = a.length;
    a.push(b2);
    a:
      for (; 0 < c2; ) {
        var d2 = c2 - 1 >>> 1, e2 = a[d2];
        if (0 < g2(e2, b2))
          a[d2] = b2, a[c2] = e2, c2 = d2;
        else
          break a;
      }
  }
  function h3(a) {
    return 0 === a.length ? null : a[0];
  }
  function k2(a) {
    if (0 === a.length)
      return null;
    var b2 = a[0], c2 = a.pop();
    if (c2 !== b2) {
      a[0] = c2;
      a:
        for (var d2 = 0, e2 = a.length, w2 = e2 >>> 1; d2 < w2; ) {
          var m2 = 2 * (d2 + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
          if (0 > g2(C2, c2))
            n2 < e2 && 0 > g2(x2, C2) ? (a[d2] = x2, a[n2] = c2, d2 = n2) : (a[d2] = C2, a[m2] = c2, d2 = m2);
          else if (n2 < e2 && 0 > g2(x2, c2))
            a[d2] = x2, a[n2] = c2, d2 = n2;
          else
            break a;
        }
    }
    return b2;
  }
  function g2(a, b2) {
    var c2 = a.sortIndex - b2.sortIndex;
    return 0 !== c2 ? c2 : a.id - b2.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q2 = p2.now();
    exports.unstable_now = function() {
      return p2.now() - q2;
    };
  }
  var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G2(a) {
    for (var b2 = h3(t2); null !== b2; ) {
      if (null === b2.callback)
        k2(t2);
      else if (b2.startTime <= a)
        k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
      else
        break;
      b2 = h3(t2);
    }
  }
  function H2(a) {
    B2 = false;
    G2(a);
    if (!A2)
      if (null !== h3(r2))
        A2 = true, I2(J2);
      else {
        var b2 = h3(t2);
        null !== b2 && K2(H2, b2.startTime - a);
      }
  }
  function J2(a, b2) {
    A2 = false;
    B2 && (B2 = false, E2(L2), L2 = -1);
    z2 = true;
    var c2 = y2;
    try {
      G2(b2);
      for (v2 = h3(r2); null !== v2 && (!(v2.expirationTime > b2) || a && !M2()); ) {
        var d2 = v2.callback;
        if ("function" === typeof d2) {
          v2.callback = null;
          y2 = v2.priorityLevel;
          var e2 = d2(v2.expirationTime <= b2);
          b2 = exports.unstable_now();
          "function" === typeof e2 ? v2.callback = e2 : v2 === h3(r2) && k2(r2);
          G2(b2);
        } else
          k2(r2);
        v2 = h3(r2);
      }
      if (null !== v2)
        var w2 = true;
      else {
        var m2 = h3(t2);
        null !== m2 && K2(H2, m2.startTime - b2);
        w2 = false;
      }
      return w2;
    } finally {
      v2 = null, y2 = c2, z2 = false;
    }
  }
  var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
  function M2() {
    return exports.unstable_now() - Q2 < P2 ? false : true;
  }
  function R2() {
    if (null !== O2) {
      var a = exports.unstable_now();
      Q2 = a;
      var b2 = true;
      try {
        b2 = O2(true, a);
      } finally {
        b2 ? S2() : (N2 = false, O2 = null);
      }
    } else
      N2 = false;
  }
  var S2;
  if ("function" === typeof F2)
    S2 = function() {
      F2(R2);
    };
  else if ("undefined" !== typeof MessageChannel) {
    var T2 = new MessageChannel(), U2 = T2.port2;
    T2.port1.onmessage = R2;
    S2 = function() {
      U2.postMessage(null);
    };
  } else
    S2 = function() {
      D2(R2, 0);
    };
  function I2(a) {
    O2 = a;
    N2 || (N2 = true, S2());
  }
  function K2(a, b2) {
    L2 = D2(function() {
      a(exports.unstable_now());
    }, b2);
  }
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports.unstable_continueExecution = function() {
    A2 || z2 || (A2 = true, I2(J2));
  };
  exports.unstable_forceFrameRate = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return y2;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return h3(r2);
  };
  exports.unstable_next = function(a) {
    switch (y2) {
      case 1:
      case 2:
      case 3:
        var b2 = 3;
        break;
      default:
        b2 = y2;
    }
    var c2 = y2;
    y2 = b2;
    try {
      return a();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = function() {
  };
  exports.unstable_runWithPriority = function(a, b2) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c2 = y2;
    y2 = a;
    try {
      return b2();
    } finally {
      y2 = c2;
    }
  };
  exports.unstable_scheduleCallback = function(a, b2, c2) {
    var d2 = exports.unstable_now();
    "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
    switch (a) {
      case 1:
        var e2 = -1;
        break;
      case 2:
        e2 = 250;
        break;
      case 5:
        e2 = 1073741823;
        break;
      case 4:
        e2 = 1e4;
        break;
      default:
        e2 = 5e3;
    }
    e2 = c2 + e2;
    a = { id: u2++, callback: b2, priorityLevel: a, startTime: c2, expirationTime: e2, sortIndex: -1 };
    c2 > d2 ? (a.sortIndex = c2, f2(t2, a), null === h3(r2) && a === h3(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a.sortIndex = e2, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
    return a;
  };
  exports.unstable_shouldYield = M2;
  exports.unstable_wrapCallback = function(a) {
    var b2 = y2;
    return function() {
      var c2 = y2;
      y2 = b2;
      try {
        return a.apply(this, arguments);
      } finally {
        y2 = c2;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p$1(a) {
  for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++)
    b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
  return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a, b2) {
  ha(a, b2);
  ha(a + "Capture", b2);
}
function ha(a, b2) {
  ea[a] = b2;
  for (a = 0; a < b2.length; a++)
    da.add(b2[a]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a) {
  if (ja.call(ma, a))
    return true;
  if (ja.call(la, a))
    return false;
  if (ka.test(a))
    return ma[a] = true;
  la[a] = true;
  return false;
}
function pa(a, b2, c2, d2) {
  if (null !== c2 && 0 === c2.type)
    return false;
  switch (typeof b2) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d2)
        return false;
      if (null !== c2)
        return !c2.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;
    default:
      return false;
  }
}
function qa(a, b2, c2, d2) {
  if (null === b2 || "undefined" === typeof b2 || pa(a, b2, c2, d2))
    return true;
  if (d2)
    return false;
  if (null !== c2)
    switch (c2.type) {
      case 3:
        return !b2;
      case 4:
        return false === b2;
      case 5:
        return isNaN(b2);
      case 6:
        return isNaN(b2) || 1 > b2;
    }
  return false;
}
function v$1(a, b2, c2, d2, e2, f2, g2) {
  this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
  this.attributeName = d2;
  this.attributeNamespace = e2;
  this.mustUseProperty = c2;
  this.propertyName = a;
  this.type = b2;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z$1 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
  z$1[a] = new v$1(a, 0, false, a, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
  var b2 = a[0];
  z$1[b2] = new v$1(b2, 1, false, a[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
  z$1[a] = new v$1(a, 2, false, a.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
  z$1[a] = new v$1(a, 2, false, a, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
  z$1[a] = new v$1(a, 3, false, a.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a) {
  z$1[a] = new v$1(a, 3, true, a, null, false, false);
});
["capture", "download"].forEach(function(a) {
  z$1[a] = new v$1(a, 4, false, a, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a) {
  z$1[a] = new v$1(a, 6, false, a, null, false, false);
});
["rowSpan", "start"].forEach(function(a) {
  z$1[a] = new v$1(a, 5, false, a.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
  var b2 = a.replace(
    ra,
    sa
  );
  z$1[b2] = new v$1(b2, 1, false, a, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z$1[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
  var b2 = a.replace(ra, sa);
  z$1[b2] = new v$1(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a) {
  z$1[a] = new v$1(a, 1, false, a.toLowerCase(), null, false, false);
});
z$1.xlinkHref = new v$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a) {
  z$1[a] = new v$1(a, 1, false, a.toLowerCase(), null, true, true);
});
function ta(a, b2, c2, d2) {
  var e2 = z$1.hasOwnProperty(b2) ? z$1[b2] : null;
  if (null !== e2 ? 0 !== e2.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
    qa(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? oa(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2)));
}
var ua$1 = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a) {
  if (null === a || "object" !== typeof a)
    return null;
  a = Ja && a[Ja] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}
var A$1 = Object.assign, La;
function Ma(a) {
  if (void 0 === La)
    try {
      throw Error();
    } catch (c2) {
      var b2 = c2.stack.trim().match(/\n( *(at )?)/);
      La = b2 && b2[1] || "";
    }
  return "\n" + La + a;
}
var Na = false;
function Oa(a, b2) {
  if (!a || Na)
    return "";
  Na = true;
  var c2 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b2)
      if (b2 = function() {
        throw Error();
      }, Object.defineProperty(b2.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b2, []);
        } catch (l2) {
          var d2 = l2;
        }
        Reflect.construct(a, [], b2);
      } else {
        try {
          b2.call();
        } catch (l2) {
          d2 = l2;
        }
        a.call(b2.prototype);
      }
    else {
      try {
        throw Error();
      } catch (l2) {
        d2 = l2;
      }
      a();
    }
  } catch (l2) {
    if (l2 && d2 && "string" === typeof l2.stack) {
      for (var e2 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e2.length - 1, h3 = f2.length - 1; 1 <= g2 && 0 <= h3 && e2[g2] !== f2[h3]; )
        h3--;
      for (; 1 <= g2 && 0 <= h3; g2--, h3--)
        if (e2[g2] !== f2[h3]) {
          if (1 !== g2 || 1 !== h3) {
            do
              if (g2--, h3--, 0 > h3 || e2[g2] !== f2[h3]) {
                var k2 = "\n" + e2[g2].replace(" at new ", " at ");
                a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                return k2;
              }
            while (1 <= g2 && 0 <= h3);
          }
          break;
        }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c2;
  }
  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
}
function Pa(a) {
  switch (a.tag) {
    case 5:
      return Ma(a.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a = Oa(a.type, false), a;
    case 11:
      return a = Oa(a.type.render, false), a;
    case 1:
      return a = Oa(a.type, true), a;
    default:
      return "";
  }
}
function Qa(a) {
  if (null == a)
    return null;
  if ("function" === typeof a)
    return a.displayName || a.name || null;
  if ("string" === typeof a)
    return a;
  switch (a) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a)
    switch (a.$$typeof) {
      case Ca:
        return (a.displayName || "Context") + ".Consumer";
      case Ba:
        return (a._context.displayName || "Context") + ".Provider";
      case Da:
        var b2 = a.render;
        a = a.displayName;
        a || (a = b2.displayName || b2.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        return a;
      case Ga:
        return b2 = a.displayName || null, null !== b2 ? b2 : Qa(a.type) || "Memo";
      case Ha:
        b2 = a._payload;
        a = a._init;
        try {
          return Qa(a(b2));
        } catch (c2) {
        }
    }
  return null;
}
function Ra(a) {
  var b2 = a.type;
  switch (a.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b2.displayName || "Context") + ".Consumer";
    case 10:
      return (b2._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a = b2.render, a = a.displayName || a.name || "", b2.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b2;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b2);
    case 8:
      return b2 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b2)
        return b2.displayName || b2.name || null;
      if ("string" === typeof b2)
        return b2;
  }
  return null;
}
function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a;
    case "object":
      return a;
    default:
      return "";
  }
}
function Ta(a) {
  var b2 = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
}
function Ua(a) {
  var b2 = Ta(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
  if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
    var e2 = c2.get, f2 = c2.set;
    Object.defineProperty(a, b2, { configurable: true, get: function() {
      return e2.call(this);
    }, set: function(a2) {
      d2 = "" + a2;
      f2.call(this, a2);
    } });
    Object.defineProperty(a, b2, { enumerable: c2.enumerable });
    return { getValue: function() {
      return d2;
    }, setValue: function(a2) {
      d2 = "" + a2;
    }, stopTracking: function() {
      a._valueTracker = null;
      delete a[b2];
    } };
  }
}
function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
  if (!a)
    return false;
  var b2 = a._valueTracker;
  if (!b2)
    return true;
  var c2 = b2.getValue();
  var d2 = "";
  a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d2;
  return a !== c2 ? (b2.setValue(a), true) : false;
}
function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a)
    return null;
  try {
    return a.activeElement || a.body;
  } catch (b2) {
    return a.body;
  }
}
function Ya(a, b2) {
  var c2 = b2.checked;
  return A$1({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
}
function Za(a, b2) {
  var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
  c2 = Sa(null != b2.value ? b2.value : c2);
  a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
}
function ab(a, b2) {
  b2 = b2.checked;
  null != b2 && ta(a, "checked", b2, false);
}
function bb(a, b2) {
  ab(a, b2);
  var c2 = Sa(b2.value), d2 = b2.type;
  if (null != c2)
    if ("number" === d2) {
      if (0 === c2 && "" === a.value || a.value != c2)
        a.value = "" + c2;
    } else
      a.value !== "" + c2 && (a.value = "" + c2);
  else if ("submit" === d2 || "reset" === d2) {
    a.removeAttribute("value");
    return;
  }
  b2.hasOwnProperty("value") ? cb(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a, b2.type, Sa(b2.defaultValue));
  null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
}
function db(a, b2, c2) {
  if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
    var d2 = b2.type;
    if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
      return;
    b2 = "" + a._wrapperState.initialValue;
    c2 || b2 === a.value || (a.value = b2);
    a.defaultValue = b2;
  }
  c2 = a.name;
  "" !== c2 && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c2 && (a.name = c2);
}
function cb(a, b2, c2) {
  if ("number" !== b2 || Xa(a.ownerDocument) !== a)
    null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
}
var eb = Array.isArray;
function fb(a, b2, c2, d2) {
  a = a.options;
  if (b2) {
    b2 = {};
    for (var e2 = 0; e2 < c2.length; e2++)
      b2["$" + c2[e2]] = true;
    for (c2 = 0; c2 < a.length; c2++)
      e2 = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e2 && (a[c2].selected = e2), e2 && d2 && (a[c2].defaultSelected = true);
  } else {
    c2 = "" + Sa(c2);
    b2 = null;
    for (e2 = 0; e2 < a.length; e2++) {
      if (a[e2].value === c2) {
        a[e2].selected = true;
        d2 && (a[e2].defaultSelected = true);
        return;
      }
      null !== b2 || a[e2].disabled || (b2 = a[e2]);
    }
    null !== b2 && (b2.selected = true);
  }
}
function gb(a, b2) {
  if (null != b2.dangerouslySetInnerHTML)
    throw Error(p$1(91));
  return A$1({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}
function hb(a, b2) {
  var c2 = b2.value;
  if (null == c2) {
    c2 = b2.children;
    b2 = b2.defaultValue;
    if (null != c2) {
      if (null != b2)
        throw Error(p$1(92));
      if (eb(c2)) {
        if (1 < c2.length)
          throw Error(p$1(93));
        c2 = c2[0];
      }
      b2 = c2;
    }
    null == b2 && (b2 = "");
    c2 = b2;
  }
  a._wrapperState = { initialValue: Sa(c2) };
}
function ib(a, b2) {
  var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
  null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
  null != d2 && (a.defaultValue = "" + d2);
}
function jb(a) {
  var b2 = a.textContent;
  b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
}
function kb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a, b2) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
}
var mb, nb = function(a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b2, c2, d2, e2);
    });
  } : a;
}(function(a, b2) {
  if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a)
    a.innerHTML = b2;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
    for (b2 = mb.firstChild; a.firstChild; )
      a.removeChild(a.firstChild);
    for (; b2.firstChild; )
      a.appendChild(b2.firstChild);
  }
});
function ob(a, b2) {
  if (b2) {
    var c2 = a.firstChild;
    if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
      c2.nodeValue = b2;
      return;
    }
  }
  a.textContent = b2;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a) {
  qb.forEach(function(b2) {
    b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
    pb[b2] = pb[a];
  });
});
function rb(a, b2, c2) {
  return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a) && pb[a] ? ("" + b2).trim() : b2 + "px";
}
function sb(a, b2) {
  a = a.style;
  for (var c2 in b2)
    if (b2.hasOwnProperty(c2)) {
      var d2 = 0 === c2.indexOf("--"), e2 = rb(c2, b2[c2], d2);
      "float" === c2 && (c2 = "cssFloat");
      d2 ? a.setProperty(c2, e2) : a[c2] = e2;
    }
}
var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a, b2) {
  if (b2) {
    if (tb[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
      throw Error(p$1(137, a));
    if (null != b2.dangerouslySetInnerHTML) {
      if (null != b2.children)
        throw Error(p$1(60));
      if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
        throw Error(p$1(61));
    }
    if (null != b2.style && "object" !== typeof b2.style)
      throw Error(p$1(62));
  }
}
function vb(a, b2) {
  if (-1 === a.indexOf("-"))
    return "string" === typeof b2.is;
  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null, zb = null, Ab = null;
function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb)
      throw Error(p$1(280));
    var b2 = a.stateNode;
    b2 && (b2 = Db(b2), yb(a.stateNode, a.type, b2));
  }
}
function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}
function Fb() {
  if (zb) {
    var a = zb, b2 = Ab;
    Ab = zb = null;
    Bb(a);
    if (b2)
      for (a = 0; a < b2.length; a++)
        Bb(b2[a]);
  }
}
function Gb(a, b2) {
  return a(b2);
}
function Hb() {
}
var Ib = false;
function Jb(a, b2, c2) {
  if (Ib)
    return a(b2, c2);
  Ib = true;
  try {
    return Gb(a, b2, c2);
  } finally {
    if (Ib = false, null !== zb || null !== Ab)
      Hb(), Fb();
  }
}
function Kb(a, b2) {
  var c2 = a.stateNode;
  if (null === c2)
    return null;
  var d2 = Db(c2);
  if (null === d2)
    return null;
  c2 = d2[b2];
  a:
    switch (b2) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
        a = !d2;
        break a;
      default:
        a = false;
    }
  if (a)
    return null;
  if (c2 && "function" !== typeof c2)
    throw Error(p$1(231, b2, typeof c2));
  return c2;
}
var Lb = false;
if (ia)
  try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a) {
    Lb = false;
  }
function Nb(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b2.apply(c2, l2);
  } catch (m2) {
    this.onError(m2);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
  Ob = true;
  Pb = a;
} };
function Tb(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else
      throw Error(p$1(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a) {
  var b2 = a, c2 = a;
  if (a.alternate)
    for (; b2.return; )
      b2 = b2.return;
  else {
    a = b2;
    do
      b2 = a, 0 !== (b2.flags & 4098) && (c2 = b2.return), a = b2.return;
    while (a);
  }
  return 3 === b2.tag ? c2 : null;
}
function Wb(a) {
  if (13 === a.tag) {
    var b2 = a.memoizedState;
    null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
    if (null !== b2)
      return b2.dehydrated;
  }
  return null;
}
function Xb(a) {
  if (Vb(a) !== a)
    throw Error(p$1(188));
}
function Yb(a) {
  var b2 = a.alternate;
  if (!b2) {
    b2 = Vb(a);
    if (null === b2)
      throw Error(p$1(188));
    return b2 !== a ? null : a;
  }
  for (var c2 = a, d2 = b2; ; ) {
    var e2 = c2.return;
    if (null === e2)
      break;
    var f2 = e2.alternate;
    if (null === f2) {
      d2 = e2.return;
      if (null !== d2) {
        c2 = d2;
        continue;
      }
      break;
    }
    if (e2.child === f2.child) {
      for (f2 = e2.child; f2; ) {
        if (f2 === c2)
          return Xb(e2), a;
        if (f2 === d2)
          return Xb(e2), b2;
        f2 = f2.sibling;
      }
      throw Error(p$1(188));
    }
    if (c2.return !== d2.return)
      c2 = e2, d2 = f2;
    else {
      for (var g2 = false, h3 = e2.child; h3; ) {
        if (h3 === c2) {
          g2 = true;
          c2 = e2;
          d2 = f2;
          break;
        }
        if (h3 === d2) {
          g2 = true;
          d2 = e2;
          c2 = f2;
          break;
        }
        h3 = h3.sibling;
      }
      if (!g2) {
        for (h3 = f2.child; h3; ) {
          if (h3 === c2) {
            g2 = true;
            c2 = f2;
            d2 = e2;
            break;
          }
          if (h3 === d2) {
            g2 = true;
            d2 = f2;
            c2 = e2;
            break;
          }
          h3 = h3.sibling;
        }
        if (!g2)
          throw Error(p$1(189));
      }
    }
    if (c2.alternate !== d2)
      throw Error(p$1(190));
  }
  if (3 !== c2.tag)
    throw Error(p$1(188));
  return c2.stateNode.current === c2 ? a : b2;
}
function Zb(a) {
  a = Yb(a);
  return null !== a ? $b(a) : null;
}
function $b(a) {
  if (5 === a.tag || 6 === a.tag)
    return a;
  for (a = a.child; null !== a; ) {
    var b2 = $b(a);
    if (null !== b2)
      return b2;
    a = a.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a) {
  if (lc && "function" === typeof lc.onCommitFiberRoot)
    try {
      lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
    } catch (b2) {
    }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a) {
  a >>>= 0;
  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a) {
  switch (a & -a) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a;
  }
}
function uc(a, b2) {
  var c2 = a.pendingLanes;
  if (0 === c2)
    return 0;
  var d2 = 0, e2 = a.suspendedLanes, f2 = a.pingedLanes, g2 = c2 & 268435455;
  if (0 !== g2) {
    var h3 = g2 & ~e2;
    0 !== h3 ? d2 = tc(h3) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
  } else
    g2 = c2 & ~e2, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
  if (0 === d2)
    return 0;
  if (0 !== b2 && b2 !== d2 && 0 === (b2 & e2) && (e2 = d2 & -d2, f2 = b2 & -b2, e2 >= f2 || 16 === e2 && 0 !== (f2 & 4194240)))
    return b2;
  0 !== (d2 & 4) && (d2 |= c2 & 16);
  b2 = a.entangledLanes;
  if (0 !== b2)
    for (a = a.entanglements, b2 &= d2; 0 < b2; )
      c2 = 31 - oc(b2), e2 = 1 << c2, d2 |= a[c2], b2 &= ~e2;
  return d2;
}
function vc(a, b2) {
  switch (a) {
    case 1:
    case 2:
    case 4:
      return b2 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b2 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a, b2) {
  for (var c2 = a.suspendedLanes, d2 = a.pingedLanes, e2 = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h3 = 1 << g2, k2 = e2[g2];
    if (-1 === k2) {
      if (0 === (h3 & c2) || 0 !== (h3 & d2))
        e2[g2] = vc(h3, b2);
    } else
      k2 <= b2 && (a.expiredLanes |= h3);
    f2 &= ~h3;
  }
}
function xc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a;
}
function zc(a) {
  for (var b2 = [], c2 = 0; 31 > c2; c2++)
    b2.push(a);
  return b2;
}
function Ac(a, b2, c2) {
  a.pendingLanes |= b2;
  536870912 !== b2 && (a.suspendedLanes = 0, a.pingedLanes = 0);
  a = a.eventTimes;
  b2 = 31 - oc(b2);
  a[b2] = c2;
}
function Bc(a, b2) {
  var c2 = a.pendingLanes & ~b2;
  a.pendingLanes = b2;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= b2;
  a.mutableReadLanes &= b2;
  a.entangledLanes &= b2;
  b2 = a.entanglements;
  var d2 = a.eventTimes;
  for (a = a.expirationTimes; 0 < c2; ) {
    var e2 = 31 - oc(c2), f2 = 1 << e2;
    b2[e2] = 0;
    d2[e2] = -1;
    a[e2] = -1;
    c2 &= ~f2;
  }
}
function Cc(a, b2) {
  var c2 = a.entangledLanes |= b2;
  for (a = a.entanglements; c2; ) {
    var d2 = 31 - oc(c2), e2 = 1 << d2;
    e2 & b2 | a[d2] & b2 && (a[d2] |= b2);
    c2 &= ~e2;
  }
}
var C = 0;
function Dc(a) {
  a &= -a;
  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a, b2) {
  switch (a) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b2.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b2.pointerId);
  }
}
function Tc(a, b2, c2, d2, e2, f2) {
  if (null === a || a.nativeEvent !== f2)
    return a = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e2] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a;
  a.eventSystemFlags |= d2;
  b2 = a.targetContainers;
  null !== e2 && -1 === b2.indexOf(e2) && b2.push(e2);
  return a;
}
function Uc(a, b2, c2, d2, e2) {
  switch (b2) {
    case "focusin":
      return Lc = Tc(Lc, a, b2, c2, d2, e2), true;
    case "dragenter":
      return Mc = Tc(Mc, a, b2, c2, d2, e2), true;
    case "mouseover":
      return Nc = Tc(Nc, a, b2, c2, d2, e2), true;
    case "pointerover":
      var f2 = e2.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a, b2, c2, d2, e2));
      return true;
    case "gotpointercapture":
      return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b2, c2, d2, e2)), true;
  }
  return false;
}
function Vc(a) {
  var b2 = Wc(a.target);
  if (null !== b2) {
    var c2 = Vb(b2);
    if (null !== c2) {
      if (b2 = c2.tag, 13 === b2) {
        if (b2 = Wb(c2), null !== b2) {
          a.blockedOn = b2;
          Ic(a.priority, function() {
            Gc(c2);
          });
          return;
        }
      } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
        a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a.blockedOn = null;
}
function Xc(a) {
  if (null !== a.blockedOn)
    return false;
  for (var b2 = a.targetContainers; 0 < b2.length; ) {
    var c2 = Yc(a.domEventName, a.eventSystemFlags, b2[0], a.nativeEvent);
    if (null === c2) {
      c2 = a.nativeEvent;
      var d2 = new c2.constructor(c2.type, c2);
      wb = d2;
      c2.target.dispatchEvent(d2);
      wb = null;
    } else
      return b2 = Cb(c2), null !== b2 && Fc(b2), a.blockedOn = c2, false;
    b2.shift();
  }
  return true;
}
function Zc(a, b2, c2) {
  Xc(a) && c2.delete(b2);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a, b2) {
  a.blockedOn === b2 && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a) {
  function b2(b3) {
    return ad(b3, a);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a);
    for (var c2 = 1; c2 < Kc.length; c2++) {
      var d2 = Kc[c2];
      d2.blockedOn === a && (d2.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a);
  null !== Mc && ad(Mc, a);
  null !== Nc && ad(Nc, a);
  Oc.forEach(b2);
  Pc.forEach(b2);
  for (c2 = 0; c2 < Qc.length; c2++)
    d2 = Qc[c2], d2.blockedOn === a && (d2.blockedOn = null);
  for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
    Vc(c2), null === c2.blockedOn && Qc.shift();
}
var cd = ua$1.ReactCurrentBatchConfig, dd = true;
function ed(a, b2, c2, d2) {
  var e2 = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a, b2, c2, d2);
  } finally {
    C = e2, cd.transition = f2;
  }
}
function gd(a, b2, c2, d2) {
  var e2 = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a, b2, c2, d2);
  } finally {
    C = e2, cd.transition = f2;
  }
}
function fd(a, b2, c2, d2) {
  if (dd) {
    var e2 = Yc(a, b2, c2, d2);
    if (null === e2)
      hd(a, b2, d2, id$2, c2), Sc(a, d2);
    else if (Uc(e2, a, b2, c2, d2))
      d2.stopPropagation();
    else if (Sc(a, d2), b2 & 4 && -1 < Rc.indexOf(a)) {
      for (; null !== e2; ) {
        var f2 = Cb(e2);
        null !== f2 && Ec(f2);
        f2 = Yc(a, b2, c2, d2);
        null === f2 && hd(a, b2, d2, id$2, c2);
        if (f2 === e2)
          break;
        e2 = f2;
      }
      null !== e2 && d2.stopPropagation();
    } else
      hd(a, b2, d2, null, c2);
  }
}
var id$2 = null;
function Yc(a, b2, c2, d2) {
  id$2 = null;
  a = xb(d2);
  a = Wc(a);
  if (null !== a)
    if (b2 = Vb(a), null === b2)
      a = null;
    else if (c2 = b2.tag, 13 === c2) {
      a = Wb(b2);
      if (null !== a)
        return a;
      a = null;
    } else if (3 === c2) {
      if (b2.stateNode.current.memoizedState.isDehydrated)
        return 3 === b2.tag ? b2.stateNode.containerInfo : null;
      a = null;
    } else
      b2 !== a && (a = null);
  id$2 = a;
  return null;
}
function jd(a) {
  switch (a) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a, b2 = ld, c2 = b2.length, d2, e2 = "value" in kd ? kd.value : kd.textContent, f2 = e2.length;
  for (a = 0; a < c2 && b2[a] === e2[a]; a++)
    ;
  var g2 = c2 - a;
  for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++)
    ;
  return md = e2.slice(a, 1 < d2 ? 1 - d2 : void 0);
}
function od(a) {
  var b2 = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a) {
  function b2(b3, d2, e2, f2, g2) {
    this._reactName = b3;
    this._targetInst = e2;
    this.type = d2;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c2 in a)
      a.hasOwnProperty(c2) && (b3 = a[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A$1(b2.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a2 = this.nativeEvent;
    a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a2 = this.nativeEvent;
    a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b2;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
  return a.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
  return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
}, movementX: function(a) {
  if ("movementX" in a)
    return a.movementX;
  a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
  return wd;
}, movementY: function(a) {
  return "movementY" in a ? a.movementY : xd;
} }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a) {
  return "clipboardData" in a ? a.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a) {
  var b2 = this.nativeEvent;
  return b2.getModifierState ? b2.getModifierState(a) : (a = Od[a]) ? !!b2[a] : false;
}
function zd() {
  return Pd;
}
var Qd = A$1({}, ud, { key: function(a) {
  if (a.key) {
    var b2 = Md[a.key] || a.key;
    if ("Unidentified" !== b2)
      return b2;
  }
  return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
  return "keypress" === a.type ? od(a) : 0;
}, keyCode: function(a) {
  return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
}, which: function(a) {
  return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
} }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td$1 = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
  deltaX: function(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a, b2) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b2.keyCode);
    case "keydown":
      return 229 !== b2.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}
var ie = false;
function je(a, b2) {
  switch (a) {
    case "compositionend":
      return he(b2);
    case "keypress":
      if (32 !== b2.which)
        return null;
      fe = true;
      return ee;
    case "textInput":
      return a = b2.data, a === ee && fe ? null : a;
    default:
      return null;
  }
}
function ke(a, b2) {
  if (ie)
    return "compositionend" === a || !ae && ge(a, b2) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
  switch (a) {
    case "paste":
      return null;
    case "keypress":
      if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
        if (b2.char && 1 < b2.char.length)
          return b2.char;
        if (b2.which)
          return String.fromCharCode(b2.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b2.locale ? null : b2.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b2 ? !!le[a.type] : "textarea" === b2 ? true : false;
}
function ne(a, b2, c2, d2) {
  Eb(d2);
  b2 = oe(b2, "onChange");
  0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a.push({ event: c2, listeners: b2 }));
}
var pe = null, qe = null;
function re(a) {
  se(a, 0);
}
function te(a) {
  var b2 = ue(a);
  if (Wa(b2))
    return a;
}
function ve(a, b2) {
  if ("change" === a)
    return b2;
}
var we = false;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else
    xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b2 = [];
    ne(b2, qe, a, xb(a));
    Jb(re, b2);
  }
}
function Ce(a, b2, c2) {
  "focusin" === a ? (Ae(), pe = b2, qe = c2, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}
function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a)
    return te(qe);
}
function Ee(a, b2) {
  if ("click" === a)
    return te(b2);
}
function Fe(a, b2) {
  if ("input" === a || "change" === a)
    return te(b2);
}
function Ge(a, b2) {
  return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a, b2) {
  if (He(a, b2))
    return true;
  if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2)
    return false;
  var c2 = Object.keys(a), d2 = Object.keys(b2);
  if (c2.length !== d2.length)
    return false;
  for (d2 = 0; d2 < c2.length; d2++) {
    var e2 = c2[d2];
    if (!ja.call(b2, e2) || !He(a[e2], b2[e2]))
      return false;
  }
  return true;
}
function Je(a) {
  for (; a && a.firstChild; )
    a = a.firstChild;
  return a;
}
function Ke(a, b2) {
  var c2 = Je(a);
  a = 0;
  for (var d2; c2; ) {
    if (3 === c2.nodeType) {
      d2 = a + c2.textContent.length;
      if (a <= b2 && d2 >= b2)
        return { node: c2, offset: b2 - a };
      a = d2;
    }
    a: {
      for (; c2; ) {
        if (c2.nextSibling) {
          c2 = c2.nextSibling;
          break a;
        }
        c2 = c2.parentNode;
      }
      c2 = void 0;
    }
    c2 = Je(c2);
  }
}
function Le(a, b2) {
  return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? Le(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
}
function Me() {
  for (var a = window, b2 = Xa(); b2 instanceof a.HTMLIFrameElement; ) {
    try {
      var c2 = "string" === typeof b2.contentWindow.location.href;
    } catch (d2) {
      c2 = false;
    }
    if (c2)
      a = b2.contentWindow;
    else
      break;
    b2 = Xa(a.document);
  }
  return b2;
}
function Ne(a) {
  var b2 = a && a.nodeName && a.nodeName.toLowerCase();
  return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
}
function Oe(a) {
  var b2 = Me(), c2 = a.focusedElem, d2 = a.selectionRange;
  if (b2 !== c2 && c2 && c2.ownerDocument && Le(c2.ownerDocument.documentElement, c2)) {
    if (null !== d2 && Ne(c2)) {
      if (b2 = d2.start, a = d2.end, void 0 === a && (a = b2), "selectionStart" in c2)
        c2.selectionStart = b2, c2.selectionEnd = Math.min(a, c2.value.length);
      else if (a = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a.getSelection) {
        a = a.getSelection();
        var e2 = c2.textContent.length, f2 = Math.min(d2.start, e2);
        d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e2);
        !a.extend && f2 > d2 && (e2 = d2, d2 = f2, f2 = e2);
        e2 = Ke(c2, f2);
        var g2 = Ke(
          c2,
          d2
        );
        e2 && g2 && (1 !== a.rangeCount || a.anchorNode !== e2.node || a.anchorOffset !== e2.offset || a.focusNode !== g2.node || a.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e2.node, e2.offset), a.removeAllRanges(), f2 > d2 ? (a.addRange(b2), a.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a.addRange(b2)));
      }
    }
    b2 = [];
    for (a = c2; a = a.parentNode; )
      1 === a.nodeType && b2.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
    "function" === typeof c2.focus && c2.focus();
    for (c2 = 0; c2 < b2.length; c2++)
      a = b2[c2], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a, b2, c2) {
  var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
  Te || null == Qe || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Ne(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se && Ie(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a.push({ event: b2, listeners: d2 }), b2.target = Qe)));
}
function Ve(a, b2) {
  var c2 = {};
  c2[a.toLowerCase()] = b2.toLowerCase();
  c2["Webkit" + a] = "webkit" + b2;
  c2["Moz" + a] = "moz" + b2;
  return c2;
}
var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a) {
  if (Xe[a])
    return Xe[a];
  if (!We[a])
    return a;
  var b2 = We[a], c2;
  for (c2 in b2)
    if (b2.hasOwnProperty(c2) && c2 in Ye)
      return Xe[a] = b2[c2];
  return a;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a, b2) {
  df.set(a, b2);
  fa(b2, [a]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a, b2, c2) {
  var d2 = a.type || "unknown-event";
  a.currentTarget = c2;
  Ub(d2, b2, void 0, a);
  a.currentTarget = null;
}
function se(a, b2) {
  b2 = 0 !== (b2 & 4);
  for (var c2 = 0; c2 < a.length; c2++) {
    var d2 = a[c2], e2 = d2.event;
    d2 = d2.listeners;
    a: {
      var f2 = void 0;
      if (b2)
        for (var g2 = d2.length - 1; 0 <= g2; g2--) {
          var h3 = d2[g2], k2 = h3.instance, l2 = h3.currentTarget;
          h3 = h3.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h3, l2);
          f2 = k2;
        }
      else
        for (g2 = 0; g2 < d2.length; g2++) {
          h3 = d2[g2];
          k2 = h3.instance;
          l2 = h3.currentTarget;
          h3 = h3.listener;
          if (k2 !== f2 && e2.isPropagationStopped())
            break a;
          nf(e2, h3, l2);
          f2 = k2;
        }
    }
  }
  if (Qb)
    throw a = Rb, Qb = false, Rb = null, a;
}
function D(a, b2) {
  var c2 = b2[of];
  void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
  var d2 = a + "__bubble";
  c2.has(d2) || (pf(b2, a, 2, false), c2.add(d2));
}
function qf(a, b2, c2) {
  var d2 = 0;
  b2 && (d2 |= 4);
  pf(c2, a, d2, b2);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a) {
  if (!a[rf]) {
    a[rf] = true;
    da.forEach(function(b3) {
      "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a), qf(b3, true, a));
    });
    var b2 = 9 === a.nodeType ? a : a.ownerDocument;
    null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
  }
}
function pf(a, b2, c2, d2) {
  switch (jd(b2)) {
    case 1:
      var e2 = ed;
      break;
    case 4:
      e2 = gd;
      break;
    default:
      e2 = fd;
  }
  c2 = e2.bind(null, b2, c2, a);
  e2 = void 0;
  !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e2 = true);
  d2 ? void 0 !== e2 ? a.addEventListener(b2, c2, { capture: true, passive: e2 }) : a.addEventListener(b2, c2, true) : void 0 !== e2 ? a.addEventListener(b2, c2, { passive: e2 }) : a.addEventListener(b2, c2, false);
}
function hd(a, b2, c2, d2, e2) {
  var f2 = d2;
  if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
    a:
      for (; ; ) {
        if (null === d2)
          return;
        var g2 = d2.tag;
        if (3 === g2 || 4 === g2) {
          var h3 = d2.stateNode.containerInfo;
          if (h3 === e2 || 8 === h3.nodeType && h3.parentNode === e2)
            break;
          if (4 === g2)
            for (g2 = d2.return; null !== g2; ) {
              var k2 = g2.tag;
              if (3 === k2 || 4 === k2) {
                if (k2 = g2.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h3; ) {
            g2 = Wc(h3);
            if (null === g2)
              return;
            k2 = g2.tag;
            if (5 === k2 || 6 === k2) {
              d2 = f2 = g2;
              continue a;
            }
            h3 = h3.parentNode;
          }
        }
        d2 = d2.return;
      }
  Jb(function() {
    var d3 = f2, e3 = xb(c2), g3 = [];
    a: {
      var h4 = df.get(a);
      if (void 0 !== h4) {
        var k3 = td, n2 = a;
        switch (a) {
          case "keypress":
            if (0 === od(c2))
              break a;
          case "keydown":
          case "keyup":
            k3 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k3 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k3 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k3 = Fd;
            break;
          case "click":
            if (2 === c2.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k3 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k3 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k3 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k3 = Hd;
            break;
          case cf:
            k3 = Xd;
            break;
          case "scroll":
            k3 = vd;
            break;
          case "wheel":
            k3 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k3 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k3 = Td$1;
        }
        var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h4 ? h4 + "Capture" : null : h4;
        t2 = [];
        for (var w2 = d3, u2; null !== w2; ) {
          u2 = w2;
          var F2 = u2.stateNode;
          5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
          if (J2)
            break;
          w2 = w2.return;
        }
        0 < t2.length && (h4 = new k3(h4, n2, null, c2, e3), g3.push({ event: h4, listeners: t2 }));
      }
    }
    if (0 === (b2 & 7)) {
      a: {
        h4 = "mouseover" === a || "pointerover" === a;
        k3 = "mouseout" === a || "pointerout" === a;
        if (h4 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
          break a;
        if (k3 || h4) {
          h4 = e3.window === e3 ? e3 : (h4 = e3.ownerDocument) ? h4.defaultView || h4.parentWindow : window;
          if (k3) {
            if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
              n2 = null;
          } else
            k3 = null, n2 = d3;
          if (k3 !== n2) {
            t2 = Bd;
            F2 = "onMouseLeave";
            x2 = "onMouseEnter";
            w2 = "mouse";
            if ("pointerout" === a || "pointerover" === a)
              t2 = Td$1, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
            J2 = null == k3 ? h4 : ue(k3);
            u2 = null == n2 ? h4 : ue(n2);
            h4 = new t2(F2, w2 + "leave", k3, c2, e3);
            h4.target = J2;
            h4.relatedTarget = u2;
            F2 = null;
            Wc(e3) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e3), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
            J2 = F2;
            if (k3 && n2)
              b: {
                t2 = k3;
                x2 = n2;
                w2 = 0;
                for (u2 = t2; u2; u2 = vf(u2))
                  w2++;
                u2 = 0;
                for (F2 = x2; F2; F2 = vf(F2))
                  u2++;
                for (; 0 < w2 - u2; )
                  t2 = vf(t2), w2--;
                for (; 0 < u2 - w2; )
                  x2 = vf(x2), u2--;
                for (; w2--; ) {
                  if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                    break b;
                  t2 = vf(t2);
                  x2 = vf(x2);
                }
                t2 = null;
              }
            else
              t2 = null;
            null !== k3 && wf(g3, h4, k3, t2, false);
            null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
          }
        }
      }
      a: {
        h4 = d3 ? ue(d3) : window;
        k3 = h4.nodeName && h4.nodeName.toLowerCase();
        if ("select" === k3 || "input" === k3 && "file" === h4.type)
          var na = ve;
        else if (me(h4))
          if (we)
            na = Fe;
          else {
            na = De;
            var xa = Ce;
          }
        else
          (k3 = h4.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h4.type || "radio" === h4.type) && (na = Ee);
        if (na && (na = na(a, d3))) {
          ne(g3, na, c2, e3);
          break a;
        }
        xa && xa(a, h4, d3);
        "focusout" === a && (xa = h4._wrapperState) && xa.controlled && "number" === h4.type && cb(h4, "number", h4.value);
      }
      xa = d3 ? ue(d3) : window;
      switch (a) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable)
            Qe = xa, Re = d3, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c2, e3);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c2, e3);
      }
      var $a;
      if (ae)
        b: {
          switch (a) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
      else
        ie ? ge(a, c2) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c2.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c2.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d3, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c2, e3), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c2), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a, c2) : ke(a, c2))
        d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c2, e3), g3.push({ event: e3, listeners: d3 }), e3.data = $a);
    }
    se(g3, b2);
  });
}
function tf(a, b2, c2) {
  return { instance: a, listener: b2, currentTarget: c2 };
}
function oe(a, b2) {
  for (var c2 = b2 + "Capture", d2 = []; null !== a; ) {
    var e2 = a, f2 = e2.stateNode;
    5 === e2.tag && null !== f2 && (e2 = f2, f2 = Kb(a, c2), null != f2 && d2.unshift(tf(a, f2, e2)), f2 = Kb(a, b2), null != f2 && d2.push(tf(a, f2, e2)));
    a = a.return;
  }
  return d2;
}
function vf(a) {
  if (null === a)
    return null;
  do
    a = a.return;
  while (a && 5 !== a.tag);
  return a ? a : null;
}
function wf(a, b2, c2, d2, e2) {
  for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
    var h3 = c2, k2 = h3.alternate, l2 = h3.stateNode;
    if (null !== k2 && k2 === d2)
      break;
    5 === h3.tag && null !== l2 && (h3 = l2, e2 ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h3))) : e2 || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h3))));
    c2 = c2.return;
  }
  0 !== g2.length && a.push({ event: b2, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a) {
  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
}
function Af(a, b2, c2) {
  b2 = zf(b2);
  if (zf(a) !== b2 && c2)
    throw Error(p$1(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a, b2) {
  return "textarea" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
  return Hf.resolve(null).then(a).catch(If);
} : Ff;
function If(a) {
  setTimeout(function() {
    throw a;
  });
}
function Kf(a, b2) {
  var c2 = b2, d2 = 0;
  do {
    var e2 = c2.nextSibling;
    a.removeChild(c2);
    if (e2 && 8 === e2.nodeType)
      if (c2 = e2.data, "/$" === c2) {
        if (0 === d2) {
          a.removeChild(e2);
          bd(b2);
          return;
        }
        d2--;
      } else
        "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
    c2 = e2;
  } while (c2);
  bd(b2);
}
function Lf(a) {
  for (; null != a; a = a.nextSibling) {
    var b2 = a.nodeType;
    if (1 === b2 || 3 === b2)
      break;
    if (8 === b2) {
      b2 = a.data;
      if ("$" === b2 || "$!" === b2 || "$?" === b2)
        break;
      if ("/$" === b2)
        return null;
    }
  }
  return a;
}
function Mf(a) {
  a = a.previousSibling;
  for (var b2 = 0; a; ) {
    if (8 === a.nodeType) {
      var c2 = a.data;
      if ("$" === c2 || "$!" === c2 || "$?" === c2) {
        if (0 === b2)
          return a;
        b2--;
      } else
        "/$" === c2 && b2++;
    }
    a = a.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a) {
  var b2 = a[Of];
  if (b2)
    return b2;
  for (var c2 = a.parentNode; c2; ) {
    if (b2 = c2[uf] || c2[Of]) {
      c2 = b2.alternate;
      if (null !== b2.child || null !== c2 && null !== c2.child)
        for (a = Mf(a); null !== a; ) {
          if (c2 = a[Of])
            return c2;
          a = Mf(a);
        }
      return b2;
    }
    a = c2;
    c2 = a.parentNode;
  }
  return null;
}
function Cb(a) {
  a = a[Of] || a[uf];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function ue(a) {
  if (5 === a.tag || 6 === a.tag)
    return a.stateNode;
  throw Error(p$1(33));
}
function Db(a) {
  return a[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a) {
  return { current: a };
}
function E(a) {
  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a, b2) {
  Tf++;
  Sf[Tf] = a.current;
  a.current = b2;
}
var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a, b2) {
  var c2 = a.type.contextTypes;
  if (!c2)
    return Vf;
  var d2 = a.stateNode;
  if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
    return d2.__reactInternalMemoizedMaskedChildContext;
  var e2 = {}, f2;
  for (f2 in c2)
    e2[f2] = b2[f2];
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e2);
  return e2;
}
function Zf(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a, b2, c2) {
  if (H.current !== Vf)
    throw Error(p$1(168));
  G(H, b2);
  G(Wf, c2);
}
function bg(a, b2, c2) {
  var d2 = a.stateNode;
  b2 = b2.childContextTypes;
  if ("function" !== typeof d2.getChildContext)
    return c2;
  d2 = d2.getChildContext();
  for (var e2 in d2)
    if (!(e2 in b2))
      throw Error(p$1(108, Ra(a) || "Unknown", e2));
  return A$1({}, c2, d2);
}
function cg(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a);
  G(Wf, Wf.current);
  return true;
}
function dg(a, b2, c2) {
  var d2 = a.stateNode;
  if (!d2)
    throw Error(p$1(169));
  c2 ? (a = bg(a, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
  G(Wf, c2);
}
var eg = null, fg = false, gg = false;
function hg(a) {
  null === eg ? eg = [a] : eg.push(a);
}
function ig(a) {
  fg = true;
  hg(a);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a = 0, b2 = C;
    try {
      var c2 = eg;
      for (C = 1; a < c2.length; a++) {
        var d2 = c2[a];
        do
          d2 = d2(true);
        while (null !== d2);
      }
      eg = null;
      fg = false;
    } catch (e2) {
      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e2;
    } finally {
      C = b2, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a, b2) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a;
  ng = b2;
}
function ug(a, b2, c2) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a;
  var d2 = rg;
  a = sg;
  var e2 = 32 - oc(d2) - 1;
  d2 &= ~(1 << e2);
  c2 += 1;
  var f2 = 32 - oc(b2) + e2;
  if (30 < f2) {
    var g2 = e2 - e2 % 5;
    f2 = (d2 & (1 << g2) - 1).toString(32);
    d2 >>= g2;
    e2 -= g2;
    rg = 1 << 32 - oc(b2) + e2 | c2 << e2 | d2;
    sg = f2 + a;
  } else
    rg = 1 << f2 | c2 << e2 | d2, sg = a;
}
function vg(a) {
  null !== a.return && (tg(a, 1), ug(a, 1, 0));
}
function wg(a) {
  for (; a === mg; )
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a === qg; )
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I = false, zg = null;
function Ag(a, b2) {
  var c2 = Bg(5, null, null, 0);
  c2.elementType = "DELETED";
  c2.stateNode = b2;
  c2.return = a;
  b2 = a.deletions;
  null === b2 ? (a.deletions = [c2], a.flags |= 16) : b2.push(c2);
}
function Cg(a, b2) {
  switch (a.tag) {
    case 5:
      var c2 = a.type;
      b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
      return null !== b2 ? (a.stateNode = b2, xg = a, yg = Lf(b2.firstChild), true) : false;
    case 6:
      return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, xg = a, yg = null, true) : false;
    case 13:
      return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a, a.child = c2, xg = a, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a) {
  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function Eg(a) {
  if (I) {
    var b2 = yg;
    if (b2) {
      var c2 = b2;
      if (!Cg(a, b2)) {
        if (Dg(a))
          throw Error(p$1(418));
        b2 = Lf(c2.nextSibling);
        var d2 = xg;
        b2 && Cg(a, b2) ? Ag(d2, c2) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
      }
    } else {
      if (Dg(a))
        throw Error(p$1(418));
      a.flags = a.flags & -4097 | 2;
      I = false;
      xg = a;
    }
  }
}
function Fg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
    a = a.return;
  xg = a;
}
function Gg(a) {
  if (a !== xg)
    return false;
  if (!I)
    return Fg(a), I = true, false;
  var b2;
  (b2 = 3 !== a.tag) && !(b2 = 5 !== a.tag) && (b2 = a.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a.type, a.memoizedProps));
  if (b2 && (b2 = yg)) {
    if (Dg(a))
      throw Hg(), Error(p$1(418));
    for (; b2; )
      Ag(a, b2), b2 = Lf(b2.nextSibling);
  }
  Fg(a);
  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a)
      throw Error(p$1(317));
    a: {
      a = a.nextSibling;
      for (b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if ("/$" === c2) {
            if (0 === b2) {
              yg = Lf(a.nextSibling);
              break a;
            }
            b2--;
          } else
            "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
        }
        a = a.nextSibling;
      }
      yg = null;
    }
  } else
    yg = xg ? Lf(a.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a = yg; a; )
    a = Lf(a.nextSibling);
}
function Ig() {
  yg = xg = null;
  I = false;
}
function Jg(a) {
  null === zg ? zg = [a] : zg.push(a);
}
var Kg = ua$1.ReactCurrentBatchConfig;
function Lg(a, b2) {
  if (a && a.defaultProps) {
    b2 = A$1({}, b2);
    a = a.defaultProps;
    for (var c2 in a)
      void 0 === b2[c2] && (b2[c2] = a[c2]);
    return b2;
  }
  return b2;
}
var Mg = Uf(null), Ng = null, Og = null, Pg = null;
function Qg() {
  Pg = Og = Ng = null;
}
function Rg(a) {
  var b2 = Mg.current;
  E(Mg);
  a._currentValue = b2;
}
function Sg(a, b2, c2) {
  for (; null !== a; ) {
    var d2 = a.alternate;
    (a.childLanes & b2) !== b2 ? (a.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
    if (a === c2)
      break;
    a = a.return;
  }
}
function Tg(a, b2) {
  Ng = a;
  Pg = Og = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b2) && (Ug = true), a.firstContext = null);
}
function Vg(a) {
  var b2 = a._currentValue;
  if (Pg !== a)
    if (a = { context: a, memoizedValue: b2, next: null }, null === Og) {
      if (null === Ng)
        throw Error(p$1(308));
      Og = a;
      Ng.dependencies = { lanes: 0, firstContext: a };
    } else
      Og = Og.next = a;
  return b2;
}
var Wg = null;
function Xg(a) {
  null === Wg ? Wg = [a] : Wg.push(a);
}
function Yg(a, b2, c2, d2) {
  var e2 = b2.interleaved;
  null === e2 ? (c2.next = c2, Xg(b2)) : (c2.next = e2.next, e2.next = c2);
  b2.interleaved = c2;
  return Zg(a, d2);
}
function Zg(a, b2) {
  a.lanes |= b2;
  var c2 = a.alternate;
  null !== c2 && (c2.lanes |= b2);
  c2 = a;
  for (a = a.return; null !== a; )
    a.childLanes |= b2, c2 = a.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a, a = a.return;
  return 3 === c2.tag ? c2.stateNode : null;
}
var $g = false;
function ah(a) {
  a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function bh(a, b2) {
  a = a.updateQueue;
  b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function ch(a, b2) {
  return { eventTime: a, lane: b2, tag: 0, payload: null, callback: null, next: null };
}
function dh(a, b2, c2) {
  var d2 = a.updateQueue;
  if (null === d2)
    return null;
  d2 = d2.shared;
  if (0 !== (K & 2)) {
    var e2 = d2.pending;
    null === e2 ? b2.next = b2 : (b2.next = e2.next, e2.next = b2);
    d2.pending = b2;
    return Zg(a, c2);
  }
  e2 = d2.interleaved;
  null === e2 ? (b2.next = b2, Xg(d2)) : (b2.next = e2.next, e2.next = b2);
  d2.interleaved = b2;
  return Zg(a, c2);
}
function eh(a, b2, c2) {
  b2 = b2.updateQueue;
  if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
function fh(a, b2) {
  var c2 = a.updateQueue, d2 = a.alternate;
  if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
    var e2 = null, f2 = null;
    c2 = c2.firstBaseUpdate;
    if (null !== c2) {
      do {
        var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
        null === f2 ? e2 = f2 = g2 : f2 = f2.next = g2;
        c2 = c2.next;
      } while (null !== c2);
      null === f2 ? e2 = f2 = b2 : f2 = f2.next = b2;
    } else
      e2 = f2 = b2;
    c2 = { baseState: d2.baseState, firstBaseUpdate: e2, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
    a.updateQueue = c2;
    return;
  }
  a = c2.lastBaseUpdate;
  null === a ? c2.firstBaseUpdate = b2 : a.next = b2;
  c2.lastBaseUpdate = b2;
}
function gh(a, b2, c2, d2) {
  var e2 = a.updateQueue;
  $g = false;
  var f2 = e2.firstBaseUpdate, g2 = e2.lastBaseUpdate, h3 = e2.shared.pending;
  if (null !== h3) {
    e2.shared.pending = null;
    var k2 = h3, l2 = k2.next;
    k2.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k2;
    var m2 = a.alternate;
    null !== m2 && (m2 = m2.updateQueue, h3 = m2.lastBaseUpdate, h3 !== g2 && (null === h3 ? m2.firstBaseUpdate = l2 : h3.next = l2, m2.lastBaseUpdate = k2));
  }
  if (null !== f2) {
    var q2 = e2.baseState;
    g2 = 0;
    m2 = l2 = k2 = null;
    h3 = f2;
    do {
      var r2 = h3.lane, y2 = h3.eventTime;
      if ((d2 & r2) === r2) {
        null !== m2 && (m2 = m2.next = {
          eventTime: y2,
          lane: 0,
          tag: h3.tag,
          payload: h3.payload,
          callback: h3.callback,
          next: null
        });
        a: {
          var n2 = a, t2 = h3;
          r2 = b2;
          y2 = c2;
          switch (t2.tag) {
            case 1:
              n2 = t2.payload;
              if ("function" === typeof n2) {
                q2 = n2.call(y2, q2, r2);
                break a;
              }
              q2 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t2.payload;
              r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
              if (null === r2 || void 0 === r2)
                break a;
              q2 = A$1({}, q2, r2);
              break a;
            case 2:
              $g = true;
          }
        }
        null !== h3.callback && 0 !== h3.lane && (a.flags |= 64, r2 = e2.effects, null === r2 ? e2.effects = [h3] : r2.push(h3));
      } else
        y2 = { eventTime: y2, lane: r2, tag: h3.tag, payload: h3.payload, callback: h3.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
      h3 = h3.next;
      if (null === h3)
        if (h3 = e2.shared.pending, null === h3)
          break;
        else
          r2 = h3, h3 = r2.next, r2.next = null, e2.lastBaseUpdate = r2, e2.shared.pending = null;
    } while (1);
    null === m2 && (k2 = q2);
    e2.baseState = k2;
    e2.firstBaseUpdate = l2;
    e2.lastBaseUpdate = m2;
    b2 = e2.shared.interleaved;
    if (null !== b2) {
      e2 = b2;
      do
        g2 |= e2.lane, e2 = e2.next;
      while (e2 !== b2);
    } else
      null === f2 && (e2.shared.lanes = 0);
    hh |= g2;
    a.lanes = g2;
    a.memoizedState = q2;
  }
}
function ih(a, b2, c2) {
  a = b2.effects;
  b2.effects = null;
  if (null !== a)
    for (b2 = 0; b2 < a.length; b2++) {
      var d2 = a[b2], e2 = d2.callback;
      if (null !== e2) {
        d2.callback = null;
        d2 = c2;
        if ("function" !== typeof e2)
          throw Error(p$1(191, e2));
        e2.call(d2);
      }
    }
}
var jh = new aa.Component().refs;
function kh(a, b2, c2, d2) {
  b2 = a.memoizedState;
  c2 = c2(d2, b2);
  c2 = null === c2 || void 0 === c2 ? b2 : A$1({}, b2, c2);
  a.memoizedState = c2;
  0 === a.lanes && (a.updateQueue.baseState = c2);
}
var nh = { isMounted: function(a) {
  return (a = a._reactInternals) ? Vb(a) === a : false;
}, enqueueSetState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = L(), e2 = lh(a), f2 = ch(d2, e2);
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a, f2, e2);
  null !== b2 && (mh(b2, a, e2, d2), eh(b2, a, e2));
}, enqueueReplaceState: function(a, b2, c2) {
  a = a._reactInternals;
  var d2 = L(), e2 = lh(a), f2 = ch(d2, e2);
  f2.tag = 1;
  f2.payload = b2;
  void 0 !== c2 && null !== c2 && (f2.callback = c2);
  b2 = dh(a, f2, e2);
  null !== b2 && (mh(b2, a, e2, d2), eh(b2, a, e2));
}, enqueueForceUpdate: function(a, b2) {
  a = a._reactInternals;
  var c2 = L(), d2 = lh(a), e2 = ch(c2, d2);
  e2.tag = 2;
  void 0 !== b2 && null !== b2 && (e2.callback = b2);
  b2 = dh(a, e2, d2);
  null !== b2 && (mh(b2, a, d2, c2), eh(b2, a, d2));
} };
function oh(a, b2, c2, d2, e2, f2, g2) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie(c2, d2) || !Ie(e2, f2) : true;
}
function ph(a, b2, c2) {
  var d2 = false, e2 = Vf;
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e2 = Zf(b2) ? Xf : H.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a, e2) : Vf);
  b2 = new b2(c2, f2);
  a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
  b2.updater = nh;
  a.stateNode = b2;
  b2._reactInternals = a;
  d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e2, a.__reactInternalMemoizedMaskedChildContext = f2);
  return b2;
}
function qh(a, b2, c2, d2) {
  a = b2.state;
  "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
  "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
  b2.state !== a && nh.enqueueReplaceState(b2, b2.state, null);
}
function rh(a, b2, c2, d2) {
  var e2 = a.stateNode;
  e2.props = c2;
  e2.state = a.memoizedState;
  e2.refs = jh;
  ah(a);
  var f2 = b2.contextType;
  "object" === typeof f2 && null !== f2 ? e2.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H.current, e2.context = Yf(a, f2));
  e2.state = a.memoizedState;
  f2 = b2.getDerivedStateFromProps;
  "function" === typeof f2 && (kh(a, b2, f2, c2), e2.state = a.memoizedState);
  "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && nh.enqueueReplaceState(e2, e2.state, null), gh(a, c2, e2, d2), e2.state = a.memoizedState);
  "function" === typeof e2.componentDidMount && (a.flags |= 4194308);
}
function sh(a, b2, c2) {
  a = c2.ref;
  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c2._owner) {
      c2 = c2._owner;
      if (c2) {
        if (1 !== c2.tag)
          throw Error(p$1(309));
        var d2 = c2.stateNode;
      }
      if (!d2)
        throw Error(p$1(147, a));
      var e2 = d2, f2 = "" + a;
      if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
        return b2.ref;
      b2 = function(a2) {
        var b3 = e2.refs;
        b3 === jh && (b3 = e2.refs = {});
        null === a2 ? delete b3[f2] : b3[f2] = a2;
      };
      b2._stringRef = f2;
      return b2;
    }
    if ("string" !== typeof a)
      throw Error(p$1(284));
    if (!c2._owner)
      throw Error(p$1(290, a));
  }
  return a;
}
function th(a, b2) {
  a = Object.prototype.toString.call(b2);
  throw Error(p$1(31, "[object Object]" === a ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a));
}
function uh(a) {
  var b2 = a._init;
  return b2(a._payload);
}
function vh$1(a) {
  function b2(b3, c3) {
    if (a) {
      var d3 = b3.deletions;
      null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
    }
  }
  function c2(c3, d3) {
    if (!a)
      return null;
    for (; null !== d3; )
      b2(c3, d3), d3 = d3.sibling;
    return null;
  }
  function d2(a2, b3) {
    for (a2 = /* @__PURE__ */ new Map(); null !== b3; )
      null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
    return a2;
  }
  function e2(a2, b3) {
    a2 = wh(a2, b3);
    a2.index = 0;
    a2.sibling = null;
    return a2;
  }
  function f2(b3, c3, d3) {
    b3.index = d3;
    if (!a)
      return b3.flags |= 1048576, c3;
    d3 = b3.alternate;
    if (null !== d3)
      return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
    b3.flags |= 2;
    return c3;
  }
  function g2(b3) {
    a && null === b3.alternate && (b3.flags |= 2);
    return b3;
  }
  function h3(a2, b3, c3, d3) {
    if (null === b3 || 6 !== b3.tag)
      return b3 = xh(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e2(b3, c3);
    b3.return = a2;
    return b3;
  }
  function k2(a2, b3, c3, d3) {
    var f3 = c3.type;
    if (f3 === ya)
      return m2(a2, b3, c3.props.children, d3, c3.key);
    if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
      return d3 = e2(b3, c3.props), d3.ref = sh(a2, b3, c3), d3.return = a2, d3;
    d3 = yh(c3.type, c3.key, c3.props, null, a2.mode, d3);
    d3.ref = sh(a2, b3, c3);
    d3.return = a2;
    return d3;
  }
  function l2(a2, b3, c3, d3) {
    if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
      return b3 = zh(c3, a2.mode, d3), b3.return = a2, b3;
    b3 = e2(b3, c3.children || []);
    b3.return = a2;
    return b3;
  }
  function m2(a2, b3, c3, d3, f3) {
    if (null === b3 || 7 !== b3.tag)
      return b3 = Ah(c3, a2.mode, d3, f3), b3.return = a2, b3;
    b3 = e2(b3, c3);
    b3.return = a2;
    return b3;
  }
  function q2(a2, b3, c3) {
    if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
      return b3 = xh("" + b3, a2.mode, c3), b3.return = a2, b3;
    if ("object" === typeof b3 && null !== b3) {
      switch (b3.$$typeof) {
        case va:
          return c3 = yh(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = sh(a2, null, b3), c3.return = a2, c3;
        case wa:
          return b3 = zh(b3, a2.mode, c3), b3.return = a2, b3;
        case Ha:
          var d3 = b3._init;
          return q2(a2, d3(b3._payload), c3);
      }
      if (eb(b3) || Ka(b3))
        return b3 = Ah(b3, a2.mode, c3, null), b3.return = a2, b3;
      th(a2, b3);
    }
    return null;
  }
  function r2(a2, b3, c3, d3) {
    var e3 = null !== b3 ? b3.key : null;
    if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
      return null !== e3 ? null : h3(a2, b3, "" + c3, d3);
    if ("object" === typeof c3 && null !== c3) {
      switch (c3.$$typeof) {
        case va:
          return c3.key === e3 ? k2(a2, b3, c3, d3) : null;
        case wa:
          return c3.key === e3 ? l2(a2, b3, c3, d3) : null;
        case Ha:
          return e3 = c3._init, r2(
            a2,
            b3,
            e3(c3._payload),
            d3
          );
      }
      if (eb(c3) || Ka(c3))
        return null !== e3 ? null : m2(a2, b3, c3, d3, null);
      th(a2, c3);
    }
    return null;
  }
  function y2(a2, b3, c3, d3, e3) {
    if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
      return a2 = a2.get(c3) || null, h3(b3, a2, "" + d3, e3);
    if ("object" === typeof d3 && null !== d3) {
      switch (d3.$$typeof) {
        case va:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a2, d3, e3);
        case wa:
          return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e3);
        case Ha:
          var f3 = d3._init;
          return y2(a2, b3, c3, f3(d3._payload), e3);
      }
      if (eb(d3) || Ka(d3))
        return a2 = a2.get(c3) || null, m2(b3, a2, d3, e3, null);
      th(b3, d3);
    }
    return null;
  }
  function n2(e3, g3, h4, k3) {
    for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h4.length; w2++) {
      u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
      var n3 = r2(e3, u2, h4[w2], k3);
      if (null === n3) {
        null === u2 && (u2 = x2);
        break;
      }
      a && u2 && null === n3.alternate && b2(e3, u2);
      g3 = f2(n3, g3, w2);
      null === m3 ? l3 = n3 : m3.sibling = n3;
      m3 = n3;
      u2 = x2;
    }
    if (w2 === h4.length)
      return c2(e3, u2), I && tg(e3, w2), l3;
    if (null === u2) {
      for (; w2 < h4.length; w2++)
        u2 = q2(e3, h4[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
      I && tg(e3, w2);
      return l3;
    }
    for (u2 = d2(e3, u2); w2 < h4.length; w2++)
      x2 = y2(u2, e3, w2, h4[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
    a && u2.forEach(function(a2) {
      return b2(e3, a2);
    });
    I && tg(e3, w2);
    return l3;
  }
  function t2(e3, g3, h4, k3) {
    var l3 = Ka(h4);
    if ("function" !== typeof l3)
      throw Error(p$1(150));
    h4 = l3.call(h4);
    if (null == h4)
      throw Error(p$1(151));
    for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h4.next(); null !== m3 && !n3.done; w2++, n3 = h4.next()) {
      m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
      var t3 = r2(e3, m3, n3.value, k3);
      if (null === t3) {
        null === m3 && (m3 = x2);
        break;
      }
      a && m3 && null === t3.alternate && b2(e3, m3);
      g3 = f2(t3, g3, w2);
      null === u2 ? l3 = t3 : u2.sibling = t3;
      u2 = t3;
      m3 = x2;
    }
    if (n3.done)
      return c2(
        e3,
        m3
      ), I && tg(e3, w2), l3;
    if (null === m3) {
      for (; !n3.done; w2++, n3 = h4.next())
        n3 = q2(e3, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
      I && tg(e3, w2);
      return l3;
    }
    for (m3 = d2(e3, m3); !n3.done; w2++, n3 = h4.next())
      n3 = y2(m3, e3, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
    a && m3.forEach(function(a2) {
      return b2(e3, a2);
    });
    I && tg(e3, w2);
    return l3;
  }
  function J2(a2, d3, f3, h4) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k3 = f3.key, l3 = d3; null !== l3; ) {
              if (l3.key === k3) {
                k3 = f3.type;
                if (k3 === ya) {
                  if (7 === l3.tag) {
                    c2(a2, l3.sibling);
                    d3 = e2(l3, f3.props.children);
                    d3.return = a2;
                    a2 = d3;
                    break a;
                  }
                } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                  c2(a2, l3.sibling);
                  d3 = e2(l3, f3.props);
                  d3.ref = sh(a2, l3, f3);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                }
                c2(a2, l3);
                break;
              } else
                b2(a2, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d3 = Ah(f3.props.children, a2.mode, h4, f3.key), d3.return = a2, a2 = d3) : (h4 = yh(f3.type, f3.key, f3.props, null, a2.mode, h4), h4.ref = sh(a2, d3, f3), h4.return = a2, a2 = h4);
          }
          return g2(a2);
        case wa:
          a: {
            for (l3 = f3.key; null !== d3; ) {
              if (d3.key === l3)
                if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c2(a2, d3.sibling);
                  d3 = e2(d3, f3.children || []);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                } else {
                  c2(a2, d3);
                  break;
                }
              else
                b2(a2, d3);
              d3 = d3.sibling;
            }
            d3 = zh(f3, a2.mode, h4);
            d3.return = a2;
            a2 = d3;
          }
          return g2(a2);
        case Ha:
          return l3 = f3._init, J2(a2, d3, l3(f3._payload), h4);
      }
      if (eb(f3))
        return n2(a2, d3, f3, h4);
      if (Ka(f3))
        return t2(a2, d3, f3, h4);
      th(a2, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e2(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = xh(f3, a2.mode, h4), d3.return = a2, a2 = d3), g2(a2)) : c2(a2, d3);
  }
  return J2;
}
var Bh = vh$1(true), Ch = vh$1(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
function Hh(a) {
  if (a === Dh)
    throw Error(p$1(174));
  return a;
}
function Ih(a, b2) {
  G(Gh, b2);
  G(Fh, a);
  G(Eh, Dh);
  a = b2.nodeType;
  switch (a) {
    case 9:
    case 11:
      b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
      break;
    default:
      a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = lb(b2, a);
  }
  E(Eh);
  G(Eh, b2);
}
function Jh() {
  E(Eh);
  E(Fh);
  E(Gh);
}
function Kh(a) {
  Hh(Gh.current);
  var b2 = Hh(Eh.current);
  var c2 = lb(b2, a.type);
  b2 !== c2 && (G(Fh, a), G(Eh, c2));
}
function Lh(a) {
  Fh.current === a && (E(Eh), E(Fh));
}
var M = Uf(0);
function Mh(a) {
  for (var b2 = a; null !== b2; ) {
    if (13 === b2.tag) {
      var c2 = b2.memoizedState;
      if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
        return b2;
    } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
      if (0 !== (b2.flags & 128))
        return b2;
    } else if (null !== b2.child) {
      b2.child.return = b2;
      b2 = b2.child;
      continue;
    }
    if (b2 === a)
      break;
    for (; null === b2.sibling; ) {
      if (null === b2.return || b2.return === a)
        return null;
      b2 = b2.return;
    }
    b2.sibling.return = b2.return;
    b2 = b2.sibling;
  }
  return null;
}
var Nh = [];
function Oh() {
  for (var a = 0; a < Nh.length; a++)
    Nh[a]._workInProgressVersionPrimary = null;
  Nh.length = 0;
}
var Ph = ua$1.ReactCurrentDispatcher, Qh = ua$1.ReactCurrentBatchConfig, Rh = 0, N = null, O = null, P = null, Sh = false, Th$1 = false, Uh = 0, Vh = 0;
function Q() {
  throw Error(p$1(321));
}
function Wh(a, b2) {
  if (null === b2)
    return false;
  for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++)
    if (!He(a[c2], b2[c2]))
      return false;
  return true;
}
function Xh(a, b2, c2, d2, e2, f2) {
  Rh = f2;
  N = b2;
  b2.memoizedState = null;
  b2.updateQueue = null;
  b2.lanes = 0;
  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
  a = c2(d2, e2);
  if (Th$1) {
    f2 = 0;
    do {
      Th$1 = false;
      Uh = 0;
      if (25 <= f2)
        throw Error(p$1(301));
      f2 += 1;
      P = O = null;
      b2.updateQueue = null;
      Ph.current = $h;
      a = c2(d2, e2);
    } while (Th$1);
  }
  Ph.current = ai;
  b2 = null !== O && null !== O.next;
  Rh = 0;
  P = O = N = null;
  Sh = false;
  if (b2)
    throw Error(p$1(300));
  return a;
}
function bi() {
  var a = 0 !== Uh;
  Uh = 0;
  return a;
}
function ci() {
  var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === P ? N.memoizedState = P = a : P = P.next = a;
  return P;
}
function di() {
  if (null === O) {
    var a = N.alternate;
    a = null !== a ? a.memoizedState : null;
  } else
    a = O.next;
  var b2 = null === P ? N.memoizedState : P.next;
  if (null !== b2)
    P = b2, O = a;
  else {
    if (null === a)
      throw Error(p$1(310));
    O = a;
    a = { memoizedState: O.memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null };
    null === P ? N.memoizedState = P = a : P = P.next = a;
  }
  return P;
}
function ei(a, b2) {
  return "function" === typeof b2 ? b2(a) : b2;
}
function fi(a) {
  var b2 = di(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = O, e2 = d2.baseQueue, f2 = c2.pending;
  if (null !== f2) {
    if (null !== e2) {
      var g2 = e2.next;
      e2.next = f2.next;
      f2.next = g2;
    }
    d2.baseQueue = e2 = f2;
    c2.pending = null;
  }
  if (null !== e2) {
    f2 = e2.next;
    d2 = d2.baseState;
    var h3 = g2 = null, k2 = null, l2 = f2;
    do {
      var m2 = l2.lane;
      if ((Rh & m2) === m2)
        null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a(d2, l2.action);
      else {
        var q2 = {
          lane: m2,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k2 ? (h3 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
        N.lanes |= m2;
        hh |= m2;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k2 ? g2 = d2 : k2.next = h3;
    He(d2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = d2;
    b2.baseState = g2;
    b2.baseQueue = k2;
    c2.lastRenderedState = d2;
  }
  a = c2.interleaved;
  if (null !== a) {
    e2 = a;
    do
      f2 = e2.lane, N.lanes |= f2, hh |= f2, e2 = e2.next;
    while (e2 !== a);
  } else
    null === e2 && (c2.lanes = 0);
  return [b2.memoizedState, c2.dispatch];
}
function gi(a) {
  var b2 = di(), c2 = b2.queue;
  if (null === c2)
    throw Error(p$1(311));
  c2.lastRenderedReducer = a;
  var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
  if (null !== e2) {
    c2.pending = null;
    var g2 = e2 = e2.next;
    do
      f2 = a(f2, g2.action), g2 = g2.next;
    while (g2 !== e2);
    He(f2, b2.memoizedState) || (Ug = true);
    b2.memoizedState = f2;
    null === b2.baseQueue && (b2.baseState = f2);
    c2.lastRenderedState = f2;
  }
  return [f2, d2];
}
function hi() {
}
function ii(a, b2) {
  var c2 = N, d2 = di(), e2 = b2(), f2 = !He(d2.memoizedState, e2);
  f2 && (d2.memoizedState = e2, Ug = true);
  d2 = d2.queue;
  ji(ki.bind(null, c2, d2, a), [a]);
  if (d2.getSnapshot !== b2 || f2 || null !== P && P.memoizedState.tag & 1) {
    c2.flags |= 2048;
    li(9, mi.bind(null, c2, d2, e2, b2), void 0, null);
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(c2, b2, e2);
  }
  return e2;
}
function ni(a, b2, c2) {
  a.flags |= 16384;
  a = { getSnapshot: b2, value: c2 };
  b2 = N.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.stores = [a]) : (c2 = b2.stores, null === c2 ? b2.stores = [a] : c2.push(a));
}
function mi(a, b2, c2, d2) {
  b2.value = c2;
  b2.getSnapshot = d2;
  oi(b2) && pi(a);
}
function ki(a, b2, c2) {
  return c2(function() {
    oi(b2) && pi(a);
  });
}
function oi(a) {
  var b2 = a.getSnapshot;
  a = a.value;
  try {
    var c2 = b2();
    return !He(a, c2);
  } catch (d2) {
    return true;
  }
}
function pi(a) {
  var b2 = Zg(a, 1);
  null !== b2 && mh(b2, a, 1, -1);
}
function qi(a) {
  var b2 = ci();
  "function" === typeof a && (a = a());
  b2.memoizedState = b2.baseState = a;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a };
  b2.queue = a;
  a = a.dispatch = ri.bind(null, N, a);
  return [b2.memoizedState, a];
}
function li(a, b2, c2, d2) {
  a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
  b2 = N.updateQueue;
  null === b2 ? (b2 = { lastEffect: null, stores: null }, N.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
  return a;
}
function si() {
  return di().memoizedState;
}
function ti(a, b2, c2, d2) {
  var e2 = ci();
  N.flags |= a;
  e2.memoizedState = li(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
}
function ui(a, b2, c2, d2) {
  var e2 = di();
  d2 = void 0 === d2 ? null : d2;
  var f2 = void 0;
  if (null !== O) {
    var g2 = O.memoizedState;
    f2 = g2.destroy;
    if (null !== d2 && Wh(d2, g2.deps)) {
      e2.memoizedState = li(b2, c2, f2, d2);
      return;
    }
  }
  N.flags |= a;
  e2.memoizedState = li(1 | b2, c2, f2, d2);
}
function vi(a, b2) {
  return ti(8390656, 8, a, b2);
}
function ji(a, b2) {
  return ui(2048, 8, a, b2);
}
function wi(a, b2) {
  return ui(4, 2, a, b2);
}
function xi(a, b2) {
  return ui(4, 4, a, b2);
}
function yi(a, b2) {
  if ("function" === typeof b2)
    return a = a(), b2(a), function() {
      b2(null);
    };
  if (null !== b2 && void 0 !== b2)
    return a = a(), b2.current = a, function() {
      b2.current = null;
    };
}
function zi(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ui(4, 4, yi.bind(null, b2, a), c2);
}
function Ai() {
}
function Bi(a, b2) {
  var c2 = di();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  c2.memoizedState = [a, b2];
  return a;
}
function Ci(a, b2) {
  var c2 = di();
  b2 = void 0 === b2 ? null : b2;
  var d2 = c2.memoizedState;
  if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
    return d2[0];
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}
function Di(a, b2, c2) {
  if (0 === (Rh & 21))
    return a.baseState && (a.baseState = false, Ug = true), a.memoizedState = c2;
  He(c2, b2) || (c2 = yc(), N.lanes |= c2, hh |= c2, a.baseState = true);
  return b2;
}
function Ei(a, b2) {
  var c2 = C;
  C = 0 !== c2 && 4 > c2 ? c2 : 4;
  a(true);
  var d2 = Qh.transition;
  Qh.transition = {};
  try {
    a(false), b2();
  } finally {
    C = c2, Qh.transition = d2;
  }
}
function Fi() {
  return di().memoizedState;
}
function Gi(a, b2, c2) {
  var d2 = lh(a);
  c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a))
    Ii(b2, c2);
  else if (c2 = Yg(a, b2, c2, d2), null !== c2) {
    var e2 = L();
    mh(c2, a, d2, e2);
    Ji(c2, b2, d2);
  }
}
function ri(a, b2, c2) {
  var d2 = lh(a), e2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a))
    Ii(b2, e2);
  else {
    var f2 = a.alternate;
    if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
      try {
        var g2 = b2.lastRenderedState, h3 = f2(g2, c2);
        e2.hasEagerState = true;
        e2.eagerState = h3;
        if (He(h3, g2)) {
          var k2 = b2.interleaved;
          null === k2 ? (e2.next = e2, Xg(b2)) : (e2.next = k2.next, k2.next = e2);
          b2.interleaved = e2;
          return;
        }
      } catch (l2) {
      } finally {
      }
    c2 = Yg(a, b2, e2, d2);
    null !== c2 && (e2 = L(), mh(c2, a, d2, e2), Ji(c2, b2, d2));
  }
}
function Hi(a) {
  var b2 = a.alternate;
  return a === N || null !== b2 && b2 === N;
}
function Ii(a, b2) {
  Th$1 = Sh = true;
  var c2 = a.pending;
  null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
  a.pending = b2;
}
function Ji(a, b2, c2) {
  if (0 !== (c2 & 4194240)) {
    var d2 = b2.lanes;
    d2 &= a.pendingLanes;
    c2 |= d2;
    b2.lanes = c2;
    Cc(a, c2);
  }
}
var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a, b2) {
  ci().memoizedState = [a, void 0 === b2 ? null : b2];
  return a;
}, useContext: Vg, useEffect: vi, useImperativeHandle: function(a, b2, c2) {
  c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
  return ti(
    4194308,
    4,
    yi.bind(null, b2, a),
    c2
  );
}, useLayoutEffect: function(a, b2) {
  return ti(4194308, 4, a, b2);
}, useInsertionEffect: function(a, b2) {
  return ti(4, 2, a, b2);
}, useMemo: function(a, b2) {
  var c2 = ci();
  b2 = void 0 === b2 ? null : b2;
  a = a();
  c2.memoizedState = [a, b2];
  return a;
}, useReducer: function(a, b2, c2) {
  var d2 = ci();
  b2 = void 0 !== c2 ? c2(b2) : b2;
  d2.memoizedState = d2.baseState = b2;
  a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
  d2.queue = a;
  a = a.dispatch = Gi.bind(null, N, a);
  return [d2.memoizedState, a];
}, useRef: function(a) {
  var b2 = ci();
  a = { current: a };
  return b2.memoizedState = a;
}, useState: qi, useDebugValue: Ai, useDeferredValue: function(a) {
  return ci().memoizedState = a;
}, useTransition: function() {
  var a = qi(false), b2 = a[0];
  a = Ei.bind(null, a[1]);
  ci().memoizedState = a;
  return [b2, a];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a, b2, c2) {
  var d2 = N, e2 = ci();
  if (I) {
    if (void 0 === c2)
      throw Error(p$1(407));
    c2 = c2();
  } else {
    c2 = b2();
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(d2, b2, c2);
  }
  e2.memoizedState = c2;
  var f2 = { value: c2, getSnapshot: b2 };
  e2.queue = f2;
  vi(ki.bind(
    null,
    d2,
    f2,
    a
  ), [a]);
  d2.flags |= 2048;
  li(9, mi.bind(null, d2, f2, c2, b2), void 0, null);
  return c2;
}, useId: function() {
  var a = ci(), b2 = R.identifierPrefix;
  if (I) {
    var c2 = sg;
    var d2 = rg;
    c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
    b2 = ":" + b2 + "R" + c2;
    c2 = Uh++;
    0 < c2 && (b2 += "H" + c2.toString(32));
    b2 += ":";
  } else
    c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
  return a.memoizedState = b2;
}, unstable_isNewReconciler: false }, Zh = {
  readContext: Vg,
  useCallback: Bi,
  useContext: Vg,
  useEffect: ji,
  useImperativeHandle: zi,
  useInsertionEffect: wi,
  useLayoutEffect: xi,
  useMemo: Ci,
  useReducer: fi,
  useRef: si,
  useState: function() {
    return fi(ei);
  },
  useDebugValue: Ai,
  useDeferredValue: function(a) {
    var b2 = di();
    return Di(b2, O.memoizedState, a);
  },
  useTransition: function() {
    var a = fi(ei)[0], b2 = di().memoizedState;
    return [a, b2];
  },
  useMutableSource: hi,
  useSyncExternalStore: ii,
  useId: Fi,
  unstable_isNewReconciler: false
}, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
  return gi(ei);
}, useDebugValue: Ai, useDeferredValue: function(a) {
  var b2 = di();
  return null === O ? b2.memoizedState = a : Di(b2, O.memoizedState, a);
}, useTransition: function() {
  var a = gi(ei)[0], b2 = di().memoizedState;
  return [a, b2];
}, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
function Ki(a, b2) {
  try {
    var c2 = "", d2 = b2;
    do
      c2 += Pa(d2), d2 = d2.return;
    while (d2);
    var e2 = c2;
  } catch (f2) {
    e2 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a, source: b2, stack: e2, digest: null };
}
function Li(a, b2, c2) {
  return { value: a, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
}
function Mi(a, b2) {
  try {
    console.error(b2.value);
  } catch (c2) {
    setTimeout(function() {
      throw c2;
    });
  }
}
var Ni = "function" === typeof WeakMap ? WeakMap : Map;
function Oi(a, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  c2.payload = { element: null };
  var d2 = b2.value;
  c2.callback = function() {
    Pi || (Pi = true, Qi = d2);
    Mi(a, b2);
  };
  return c2;
}
function Ri(a, b2, c2) {
  c2 = ch(-1, c2);
  c2.tag = 3;
  var d2 = a.type.getDerivedStateFromError;
  if ("function" === typeof d2) {
    var e2 = b2.value;
    c2.payload = function() {
      return d2(e2);
    };
    c2.callback = function() {
      Mi(a, b2);
    };
  }
  var f2 = a.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
    Mi(a, b2);
    "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
    var c3 = b2.stack;
    this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
  });
  return c2;
}
function Ti(a, b2, c2) {
  var d2 = a.pingCache;
  if (null === d2) {
    d2 = a.pingCache = new Ni();
    var e2 = /* @__PURE__ */ new Set();
    d2.set(b2, e2);
  } else
    e2 = d2.get(b2), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d2.set(b2, e2));
  e2.has(c2) || (e2.add(c2), a = Ui.bind(null, a, b2, c2), b2.then(a, a));
}
function Vi(a) {
  do {
    var b2;
    if (b2 = 13 === a.tag)
      b2 = a.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
    if (b2)
      return a;
    a = a.return;
  } while (null !== a);
  return null;
}
function Wi(a, b2, c2, d2, e2) {
  if (0 === (a.mode & 1))
    return a === b2 ? a.flags |= 65536 : (a.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a;
  a.flags |= 65536;
  a.lanes = e2;
  return a;
}
var Xi = ua$1.ReactCurrentOwner, Ug = false;
function Yi(a, b2, c2, d2) {
  b2.child = null === a ? Ch(b2, null, c2, d2) : Bh(b2, a.child, c2, d2);
}
function Zi(a, b2, c2, d2, e2) {
  c2 = c2.render;
  var f2 = b2.ref;
  Tg(b2, e2);
  d2 = Xh(a, b2, c2, d2, f2, e2);
  c2 = bi();
  if (null !== a && !Ug)
    return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e2, $i(a, b2, e2);
  I && c2 && vg(b2);
  b2.flags |= 1;
  Yi(a, b2, d2, e2);
  return b2.child;
}
function aj(a, b2, c2, d2, e2) {
  if (null === a) {
    var f2 = c2.type;
    if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
      return b2.tag = 15, b2.type = f2, cj(a, b2, f2, d2, e2);
    a = yh(c2.type, null, d2, b2, b2.mode, e2);
    a.ref = b2.ref;
    a.return = b2;
    return b2.child = a;
  }
  f2 = a.child;
  if (0 === (a.lanes & e2)) {
    var g2 = f2.memoizedProps;
    c2 = c2.compare;
    c2 = null !== c2 ? c2 : Ie;
    if (c2(g2, d2) && a.ref === b2.ref)
      return $i(a, b2, e2);
  }
  b2.flags |= 1;
  a = wh(f2, d2);
  a.ref = b2.ref;
  a.return = b2;
  return b2.child = a;
}
function cj(a, b2, c2, d2, e2) {
  if (null !== a) {
    var f2 = a.memoizedProps;
    if (Ie(f2, d2) && a.ref === b2.ref)
      if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a.lanes & e2))
        0 !== (a.flags & 131072) && (Ug = true);
      else
        return b2.lanes = a.lanes, $i(a, b2, e2);
  }
  return dj(a, b2, c2, d2, e2);
}
function ej(a, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.children, f2 = null !== a ? a.memoizedState : null;
  if ("hidden" === d2.mode)
    if (0 === (b2.mode & 1))
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c2;
    else {
      if (0 === (c2 & 1073741824))
        return a = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b2.updateQueue = null, G(fj, gj), gj |= a, null;
      b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d2 = null !== f2 ? f2.baseLanes : c2;
      G(fj, gj);
      gj |= d2;
    }
  else
    null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G(fj, gj), gj |= d2;
  Yi(a, b2, e2, c2);
  return b2.child;
}
function hj(a, b2) {
  var c2 = b2.ref;
  if (null === a && null !== c2 || null !== a && a.ref !== c2)
    b2.flags |= 512, b2.flags |= 2097152;
}
function dj(a, b2, c2, d2, e2) {
  var f2 = Zf(c2) ? Xf : H.current;
  f2 = Yf(b2, f2);
  Tg(b2, e2);
  c2 = Xh(a, b2, c2, d2, f2, e2);
  d2 = bi();
  if (null !== a && !Ug)
    return b2.updateQueue = a.updateQueue, b2.flags &= -2053, a.lanes &= ~e2, $i(a, b2, e2);
  I && d2 && vg(b2);
  b2.flags |= 1;
  Yi(a, b2, c2, e2);
  return b2.child;
}
function ij(a, b2, c2, d2, e2) {
  if (Zf(c2)) {
    var f2 = true;
    cg(b2);
  } else
    f2 = false;
  Tg(b2, e2);
  if (null === b2.stateNode)
    jj(a, b2), ph(b2, c2, d2), rh(b2, c2, d2, e2), d2 = true;
  else if (null === a) {
    var g2 = b2.stateNode, h3 = b2.memoizedProps;
    g2.props = h3;
    var k2 = g2.context, l2 = c2.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H.current, l2 = Yf(b2, l2));
    var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h3 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
    $g = false;
    var r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e2);
    k2 = b2.memoizedState;
    h3 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h3 = $g || oh(b2, c2, h3, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h3) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
  } else {
    g2 = b2.stateNode;
    bh(a, b2);
    h3 = b2.memoizedProps;
    l2 = b2.type === b2.elementType ? h3 : Lg(b2.type, h3);
    g2.props = l2;
    q2 = b2.pendingProps;
    r2 = g2.context;
    k2 = c2.contextType;
    "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H.current, k2 = Yf(b2, k2));
    var y2 = c2.getDerivedStateFromProps;
    (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h3 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
    $g = false;
    r2 = b2.memoizedState;
    g2.state = r2;
    gh(b2, d2, g2, e2);
    var n2 = b2.memoizedState;
    h3 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h3 === a.memoizedProps && r2 === a.memoizedState || (b2.flags |= 1024), d2 = false);
  }
  return kj(a, b2, c2, d2, f2, e2);
}
function kj(a, b2, c2, d2, e2, f2) {
  hj(a, b2);
  var g2 = 0 !== (b2.flags & 128);
  if (!d2 && !g2)
    return e2 && dg(b2, c2, false), $i(a, b2, f2);
  d2 = b2.stateNode;
  Xi.current = b2;
  var h3 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
  b2.flags |= 1;
  null !== a && g2 ? (b2.child = Bh(b2, a.child, null, f2), b2.child = Bh(b2, null, h3, f2)) : Yi(a, b2, h3, f2);
  b2.memoizedState = d2.state;
  e2 && dg(b2, c2, true);
  return b2.child;
}
function lj(a) {
  var b2 = a.stateNode;
  b2.pendingContext ? ag(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a, b2.context, false);
  Ih(a, b2.containerInfo);
}
function mj(a, b2, c2, d2, e2) {
  Ig();
  Jg(e2);
  b2.flags |= 256;
  Yi(a, b2, c2, d2);
  return b2.child;
}
var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
function oj(a) {
  return { baseLanes: a, cachePool: null, transitions: null };
}
function pj(a, b2, c2) {
  var d2 = b2.pendingProps, e2 = M.current, f2 = false, g2 = 0 !== (b2.flags & 128), h3;
  (h3 = g2) || (h3 = null !== a && null === a.memoizedState ? false : 0 !== (e2 & 2));
  if (h3)
    f2 = true, b2.flags &= -129;
  else if (null === a || null !== a.memoizedState)
    e2 |= 1;
  G(M, e2 & 1);
  if (null === a) {
    Eg(b2);
    a = b2.memoizedState;
    if (null !== a && (a = a.dehydrated, null !== a))
      return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
    g2 = d2.children;
    a = d2.fallback;
    return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a = Ah(a, d2, c2, null), f2.return = b2, a.return = b2, f2.sibling = a, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a) : rj(b2, g2);
  }
  e2 = a.memoizedState;
  if (null !== e2 && (h3 = e2.dehydrated, null !== h3))
    return sj(a, b2, g2, d2, h3, e2, c2);
  if (f2) {
    f2 = d2.fallback;
    g2 = b2.mode;
    e2 = a.child;
    h3 = e2.sibling;
    var k2 = { mode: "hidden", children: d2.children };
    0 === (g2 & 1) && b2.child !== e2 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e2, k2), d2.subtreeFlags = e2.subtreeFlags & 14680064);
    null !== h3 ? f2 = wh(h3, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
    f2.return = b2;
    d2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    d2 = f2;
    f2 = b2.child;
    g2 = a.child.memoizedState;
    g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a.childLanes & ~c2;
    b2.memoizedState = nj;
    return d2;
  }
  f2 = a.child;
  a = f2.sibling;
  d2 = wh(f2, { mode: "visible", children: d2.children });
  0 === (b2.mode & 1) && (d2.lanes = c2);
  d2.return = b2;
  d2.sibling = null;
  null !== a && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a], b2.flags |= 16) : c2.push(a));
  b2.child = d2;
  b2.memoizedState = null;
  return d2;
}
function rj(a, b2) {
  b2 = qj({ mode: "visible", children: b2 }, a.mode, 0, null);
  b2.return = a;
  return a.child = b2;
}
function tj(a, b2, c2, d2) {
  null !== d2 && Jg(d2);
  Bh(b2, a.child, null, c2);
  a = rj(b2, b2.pendingProps.children);
  a.flags |= 2;
  b2.memoizedState = null;
  return a;
}
function sj(a, b2, c2, d2, e2, f2, g2) {
  if (c2) {
    if (b2.flags & 256)
      return b2.flags &= -257, d2 = Li(Error(p$1(422))), tj(a, b2, g2, d2);
    if (null !== b2.memoizedState)
      return b2.child = a.child, b2.flags |= 128, null;
    f2 = d2.fallback;
    e2 = b2.mode;
    d2 = qj({ mode: "visible", children: d2.children }, e2, 0, null);
    f2 = Ah(f2, e2, g2, null);
    f2.flags |= 2;
    d2.return = b2;
    f2.return = b2;
    d2.sibling = f2;
    b2.child = d2;
    0 !== (b2.mode & 1) && Bh(b2, a.child, null, g2);
    b2.child.memoizedState = oj(g2);
    b2.memoizedState = nj;
    return f2;
  }
  if (0 === (b2.mode & 1))
    return tj(a, b2, g2, null);
  if ("$!" === e2.data) {
    d2 = e2.nextSibling && e2.nextSibling.dataset;
    if (d2)
      var h3 = d2.dgst;
    d2 = h3;
    f2 = Error(p$1(419));
    d2 = Li(f2, d2, void 0);
    return tj(a, b2, g2, d2);
  }
  h3 = 0 !== (g2 & a.childLanes);
  if (Ug || h3) {
    d2 = R;
    if (null !== d2) {
      switch (g2 & -g2) {
        case 4:
          e2 = 2;
          break;
        case 16:
          e2 = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e2 = 32;
          break;
        case 536870912:
          e2 = 268435456;
          break;
        default:
          e2 = 0;
      }
      e2 = 0 !== (e2 & (d2.suspendedLanes | g2)) ? 0 : e2;
      0 !== e2 && e2 !== f2.retryLane && (f2.retryLane = e2, Zg(a, e2), mh(d2, a, e2, -1));
    }
    uj();
    d2 = Li(Error(p$1(421)));
    return tj(a, b2, g2, d2);
  }
  if ("$?" === e2.data)
    return b2.flags |= 128, b2.child = a.child, b2 = vj.bind(null, a), e2._reactRetry = b2, null;
  a = f2.treeContext;
  yg = Lf(e2.nextSibling);
  xg = b2;
  I = true;
  zg = null;
  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b2);
  b2 = rj(b2, d2.children);
  b2.flags |= 4096;
  return b2;
}
function wj(a, b2, c2) {
  a.lanes |= b2;
  var d2 = a.alternate;
  null !== d2 && (d2.lanes |= b2);
  Sg(a.return, b2, c2);
}
function xj(a, b2, c2, d2, e2) {
  var f2 = a.memoizedState;
  null === f2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e2 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e2);
}
function yj(a, b2, c2) {
  var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
  Yi(a, b2, d2.children, c2);
  d2 = M.current;
  if (0 !== (d2 & 2))
    d2 = d2 & 1 | 2, b2.flags |= 128;
  else {
    if (null !== a && 0 !== (a.flags & 128))
      a:
        for (a = b2.child; null !== a; ) {
          if (13 === a.tag)
            null !== a.memoizedState && wj(a, c2, b2);
          else if (19 === a.tag)
            wj(a, c2, b2);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b2)
            break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b2)
              break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
    d2 &= 1;
  }
  G(M, d2);
  if (0 === (b2.mode & 1))
    b2.memoizedState = null;
  else
    switch (e2) {
      case "forwards":
        c2 = b2.child;
        for (e2 = null; null !== c2; )
          a = c2.alternate, null !== a && null === Mh(a) && (e2 = c2), c2 = c2.sibling;
        c2 = e2;
        null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
        xj(b2, false, e2, c2, f2);
        break;
      case "backwards":
        c2 = null;
        e2 = b2.child;
        for (b2.child = null; null !== e2; ) {
          a = e2.alternate;
          if (null !== a && null === Mh(a)) {
            b2.child = e2;
            break;
          }
          a = e2.sibling;
          e2.sibling = c2;
          c2 = e2;
          e2 = a;
        }
        xj(b2, true, c2, null, f2);
        break;
      case "together":
        xj(b2, false, null, null, void 0);
        break;
      default:
        b2.memoizedState = null;
    }
  return b2.child;
}
function jj(a, b2) {
  0 === (b2.mode & 1) && null !== a && (a.alternate = null, b2.alternate = null, b2.flags |= 2);
}
function $i(a, b2, c2) {
  null !== a && (b2.dependencies = a.dependencies);
  hh |= b2.lanes;
  if (0 === (c2 & b2.childLanes))
    return null;
  if (null !== a && b2.child !== a.child)
    throw Error(p$1(153));
  if (null !== b2.child) {
    a = b2.child;
    c2 = wh(a, a.pendingProps);
    b2.child = c2;
    for (c2.return = b2; null !== a.sibling; )
      a = a.sibling, c2 = c2.sibling = wh(a, a.pendingProps), c2.return = b2;
    c2.sibling = null;
  }
  return b2.child;
}
function zj(a, b2, c2) {
  switch (b2.tag) {
    case 3:
      lj(b2);
      Ig();
      break;
    case 5:
      Kh(b2);
      break;
    case 1:
      Zf(b2.type) && cg(b2);
      break;
    case 4:
      Ih(b2, b2.stateNode.containerInfo);
      break;
    case 10:
      var d2 = b2.type._context, e2 = b2.memoizedProps.value;
      G(Mg, d2._currentValue);
      d2._currentValue = e2;
      break;
    case 13:
      d2 = b2.memoizedState;
      if (null !== d2) {
        if (null !== d2.dehydrated)
          return G(M, M.current & 1), b2.flags |= 128, null;
        if (0 !== (c2 & b2.child.childLanes))
          return pj(a, b2, c2);
        G(M, M.current & 1);
        a = $i(a, b2, c2);
        return null !== a ? a.sibling : null;
      }
      G(M, M.current & 1);
      break;
    case 19:
      d2 = 0 !== (c2 & b2.childLanes);
      if (0 !== (a.flags & 128)) {
        if (d2)
          return yj(a, b2, c2);
        b2.flags |= 128;
      }
      e2 = b2.memoizedState;
      null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
      G(M, M.current);
      if (d2)
        break;
      else
        return null;
    case 22:
    case 23:
      return b2.lanes = 0, ej(a, b2, c2);
  }
  return $i(a, b2, c2);
}
var Aj, Bj, Cj, Dj;
Aj = function(a, b2) {
  for (var c2 = b2.child; null !== c2; ) {
    if (5 === c2.tag || 6 === c2.tag)
      a.appendChild(c2.stateNode);
    else if (4 !== c2.tag && null !== c2.child) {
      c2.child.return = c2;
      c2 = c2.child;
      continue;
    }
    if (c2 === b2)
      break;
    for (; null === c2.sibling; ) {
      if (null === c2.return || c2.return === b2)
        return;
      c2 = c2.return;
    }
    c2.sibling.return = c2.return;
    c2 = c2.sibling;
  }
};
Bj = function() {
};
Cj = function(a, b2, c2, d2) {
  var e2 = a.memoizedProps;
  if (e2 !== d2) {
    a = b2.stateNode;
    Hh(Eh.current);
    var f2 = null;
    switch (c2) {
      case "input":
        e2 = Ya(a, e2);
        d2 = Ya(a, d2);
        f2 = [];
        break;
      case "select":
        e2 = A$1({}, e2, { value: void 0 });
        d2 = A$1({}, d2, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e2 = gb(a, e2);
        d2 = gb(a, d2);
        f2 = [];
        break;
      default:
        "function" !== typeof e2.onClick && "function" === typeof d2.onClick && (a.onclick = Bf);
    }
    ub(c2, d2);
    var g2;
    c2 = null;
    for (l2 in e2)
      if (!d2.hasOwnProperty(l2) && e2.hasOwnProperty(l2) && null != e2[l2])
        if ("style" === l2) {
          var h3 = e2[l2];
          for (g2 in h3)
            h3.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d2) {
      var k2 = d2[l2];
      h3 = null != e2 ? e2[l2] : void 0;
      if (d2.hasOwnProperty(l2) && k2 !== h3 && (null != k2 || null != h3))
        if ("style" === l2)
          if (h3) {
            for (g2 in h3)
              !h3.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
            for (g2 in k2)
              k2.hasOwnProperty(g2) && h3[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
          } else
            c2 || (f2 || (f2 = []), f2.push(
              l2,
              c2
            )), c2 = k2;
        else
          "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h3 = h3 ? h3.__html : void 0, null != k2 && h3 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D("scroll", a), f2 || h3 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
    }
    c2 && (f2 = f2 || []).push("style", c2);
    var l2 = f2;
    if (b2.updateQueue = l2)
      b2.flags |= 4;
  }
};
Dj = function(a, b2, c2, d2) {
  c2 !== d2 && (b2.flags |= 4);
};
function Ej(a, b2) {
  if (!I)
    switch (a.tailMode) {
      case "hidden":
        b2 = a.tail;
        for (var c2 = null; null !== b2; )
          null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
        null === c2 ? a.tail = null : c2.sibling = null;
        break;
      case "collapsed":
        c2 = a.tail;
        for (var d2 = null; null !== c2; )
          null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
        null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
    }
}
function S(a) {
  var b2 = null !== a.alternate && a.alternate.child === a.child, c2 = 0, d2 = 0;
  if (b2)
    for (var e2 = a.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags & 14680064, d2 |= e2.flags & 14680064, e2.return = a, e2 = e2.sibling;
  else
    for (e2 = a.child; null !== e2; )
      c2 |= e2.lanes | e2.childLanes, d2 |= e2.subtreeFlags, d2 |= e2.flags, e2.return = a, e2 = e2.sibling;
  a.subtreeFlags |= d2;
  a.childLanes = c2;
  return b2;
}
function Fj(a, b2, c2) {
  var d2 = b2.pendingProps;
  wg(b2);
  switch (b2.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S(b2), null;
    case 1:
      return Zf(b2.type) && $f(), S(b2), null;
    case 3:
      d2 = b2.stateNode;
      Jh();
      E(Wf);
      E(H);
      Oh();
      d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
      if (null === a || null === a.child)
        Gg(b2) ? b2.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
      Bj(a, b2);
      S(b2);
      return null;
    case 5:
      Lh(b2);
      var e2 = Hh(Gh.current);
      c2 = b2.type;
      if (null !== a && null != b2.stateNode)
        Cj(a, b2, c2, d2, e2), a.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      else {
        if (!d2) {
          if (null === b2.stateNode)
            throw Error(p$1(166));
          S(b2);
          return null;
        }
        a = Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.type;
          var f2 = b2.memoizedProps;
          d2[Of] = b2;
          d2[Pf] = f2;
          a = 0 !== (b2.mode & 1);
          switch (c2) {
            case "dialog":
              D("cancel", d2);
              D("close", d2);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d2);
              break;
            case "video":
            case "audio":
              for (e2 = 0; e2 < lf.length; e2++)
                D(lf[e2], d2);
              break;
            case "source":
              D("error", d2);
              break;
            case "img":
            case "image":
            case "link":
              D(
                "error",
                d2
              );
              D("load", d2);
              break;
            case "details":
              D("toggle", d2);
              break;
            case "input":
              Za(d2, f2);
              D("invalid", d2);
              break;
            case "select":
              d2._wrapperState = { wasMultiple: !!f2.multiple };
              D("invalid", d2);
              break;
            case "textarea":
              hb(d2, f2), D("invalid", d2);
          }
          ub(c2, f2);
          e2 = null;
          for (var g2 in f2)
            if (f2.hasOwnProperty(g2)) {
              var h3 = f2[g2];
              "children" === g2 ? "string" === typeof h3 ? d2.textContent !== h3 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h3, a), e2 = ["children", h3]) : "number" === typeof h3 && d2.textContent !== "" + h3 && (true !== f2.suppressHydrationWarning && Af(
                d2.textContent,
                h3,
                a
              ), e2 = ["children", "" + h3]) : ea.hasOwnProperty(g2) && null != h3 && "onScroll" === g2 && D("scroll", d2);
            }
          switch (c2) {
            case "input":
              Va(d2);
              db(d2, f2, true);
              break;
            case "textarea":
              Va(d2);
              jb(d2);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d2.onclick = Bf);
          }
          d2 = e2;
          b2.updateQueue = d2;
          null !== d2 && (b2.flags |= 4);
        } else {
          g2 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a && (a = kb(c2));
          "http://www.w3.org/1999/xhtml" === a ? "script" === c2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(c2, { is: d2.is }) : (a = g2.createElement(c2), "select" === c2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, c2);
          a[Of] = b2;
          a[Pf] = d2;
          Aj(a, b2, false, false);
          b2.stateNode = a;
          a: {
            g2 = vb(c2, d2);
            switch (c2) {
              case "dialog":
                D("cancel", a);
                D("close", a);
                e2 = d2;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a);
                e2 = d2;
                break;
              case "video":
              case "audio":
                for (e2 = 0; e2 < lf.length; e2++)
                  D(lf[e2], a);
                e2 = d2;
                break;
              case "source":
                D("error", a);
                e2 = d2;
                break;
              case "img":
              case "image":
              case "link":
                D(
                  "error",
                  a
                );
                D("load", a);
                e2 = d2;
                break;
              case "details":
                D("toggle", a);
                e2 = d2;
                break;
              case "input":
                Za(a, d2);
                e2 = Ya(a, d2);
                D("invalid", a);
                break;
              case "option":
                e2 = d2;
                break;
              case "select":
                a._wrapperState = { wasMultiple: !!d2.multiple };
                e2 = A$1({}, d2, { value: void 0 });
                D("invalid", a);
                break;
              case "textarea":
                hb(a, d2);
                e2 = gb(a, d2);
                D("invalid", a);
                break;
              default:
                e2 = d2;
            }
            ub(c2, e2);
            h3 = e2;
            for (f2 in h3)
              if (h3.hasOwnProperty(f2)) {
                var k2 = h3[f2];
                "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D("scroll", a) : null != k2 && ta(a, f2, k2, g2));
              }
            switch (c2) {
              case "input":
                Va(a);
                db(a, d2, false);
                break;
              case "textarea":
                Va(a);
                jb(a);
                break;
              case "option":
                null != d2.value && a.setAttribute("value", "" + Sa(d2.value));
                break;
              case "select":
                a.multiple = !!d2.multiple;
                f2 = d2.value;
                null != f2 ? fb(a, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                  a,
                  !!d2.multiple,
                  d2.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e2.onClick && (a.onclick = Bf);
            }
            switch (c2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d2 = !!d2.autoFocus;
                break a;
              case "img":
                d2 = true;
                break a;
              default:
                d2 = false;
            }
          }
          d2 && (b2.flags |= 4);
        }
        null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
      }
      S(b2);
      return null;
    case 6:
      if (a && null != b2.stateNode)
        Dj(a, b2, a.memoizedProps, d2);
      else {
        if ("string" !== typeof d2 && null === b2.stateNode)
          throw Error(p$1(166));
        c2 = Hh(Gh.current);
        Hh(Eh.current);
        if (Gg(b2)) {
          d2 = b2.stateNode;
          c2 = b2.memoizedProps;
          d2[Of] = b2;
          if (f2 = d2.nodeValue !== c2) {
            if (a = xg, null !== a)
              switch (a.tag) {
                case 3:
                  Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
                  break;
                case 5:
                  true !== a.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a.mode & 1));
              }
          }
          f2 && (b2.flags |= 4);
        } else
          d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
      }
      S(b2);
      return null;
    case 13:
      E(M);
      d2 = b2.memoizedState;
      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
        if (I && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
          Hg(), Ig(), b2.flags |= 98560, f2 = false;
        else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
          if (null === a) {
            if (!f2)
              throw Error(p$1(318));
            f2 = b2.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2)
              throw Error(p$1(317));
            f2[Of] = b2;
          } else
            Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
          S(b2);
          f2 = false;
        } else
          null !== zg && (Gj(zg), zg = null), f2 = true;
        if (!f2)
          return b2.flags & 65536 ? b2 : null;
      }
      if (0 !== (b2.flags & 128))
        return b2.lanes = c2, b2;
      d2 = null !== d2;
      d2 !== (null !== a && null !== a.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
      null !== b2.updateQueue && (b2.flags |= 4);
      S(b2);
      return null;
    case 4:
      return Jh(), Bj(a, b2), null === a && sf(b2.stateNode.containerInfo), S(b2), null;
    case 10:
      return Rg(b2.type._context), S(b2), null;
    case 17:
      return Zf(b2.type) && $f(), S(b2), null;
    case 19:
      E(M);
      f2 = b2.memoizedState;
      if (null === f2)
        return S(b2), null;
      d2 = 0 !== (b2.flags & 128);
      g2 = f2.rendering;
      if (null === g2)
        if (d2)
          Ej(f2, false);
        else {
          if (0 !== T || null !== a && 0 !== (a.flags & 128))
            for (a = b2.child; null !== a; ) {
              g2 = Mh(a);
              if (null !== g2) {
                b2.flags |= 128;
                Ej(f2, false);
                d2 = g2.updateQueue;
                null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                b2.subtreeFlags = 0;
                d2 = c2;
                for (c2 = b2.child; null !== c2; )
                  f2 = c2, a = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a = g2.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c2 = c2.sibling;
                G(M, M.current & 1 | 2);
                return b2.child;
              }
              a = a.sibling;
            }
          null !== f2.tail && B() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        }
      else {
        if (!d2)
          if (a = Mh(g2), null !== a) {
            if (b2.flags |= 128, d2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I)
              return S(b2), null;
          } else
            2 * B() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
      }
      if (null !== f2.tail)
        return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B(), b2.sibling = null, c2 = M.current, G(M, d2 ? c2 & 1 | 2 : c2 & 1), b2;
      S(b2);
      return null;
    case 22:
    case 23:
      return Ij(), d2 = null !== b2.memoizedState, null !== a && null !== a.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S(b2), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$1(156, b2.tag));
}
function Jj(a, b2) {
  wg(b2);
  switch (b2.tag) {
    case 1:
      return Zf(b2.type) && $f(), a = b2.flags, a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 3:
      return Jh(), E(Wf), E(H), Oh(), a = b2.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b2.flags = a & -65537 | 128, b2) : null;
    case 5:
      return Lh(b2), null;
    case 13:
      E(M);
      a = b2.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        if (null === b2.alternate)
          throw Error(p$1(340));
        Ig();
      }
      a = b2.flags;
      return a & 65536 ? (b2.flags = a & -65537 | 128, b2) : null;
    case 19:
      return E(M), null;
    case 4:
      return Jh(), null;
    case 10:
      return Rg(b2.type._context), null;
    case 22:
    case 23:
      return Ij(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Kj = false, U = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
function Mj(a, b2) {
  var c2 = a.ref;
  if (null !== c2)
    if ("function" === typeof c2)
      try {
        c2(null);
      } catch (d2) {
        W(a, b2, d2);
      }
    else
      c2.current = null;
}
function Nj(a, b2, c2) {
  try {
    c2();
  } catch (d2) {
    W(a, b2, d2);
  }
}
var Oj = false;
function Pj(a, b2) {
  Cf = dd;
  a = Me();
  if (Ne(a)) {
    if ("selectionStart" in a)
      var c2 = { start: a.selectionStart, end: a.selectionEnd };
    else
      a: {
        c2 = (c2 = a.ownerDocument) && c2.defaultView || window;
        var d2 = c2.getSelection && c2.getSelection();
        if (d2 && 0 !== d2.rangeCount) {
          c2 = d2.anchorNode;
          var e2 = d2.anchorOffset, f2 = d2.focusNode;
          d2 = d2.focusOffset;
          try {
            c2.nodeType, f2.nodeType;
          } catch (F2) {
            c2 = null;
            break a;
          }
          var g2 = 0, h3 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
          b:
            for (; ; ) {
              for (var y2; ; ) {
                q2 !== c2 || 0 !== e2 && 3 !== q2.nodeType || (h3 = g2 + e2);
                q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                3 === q2.nodeType && (g2 += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild))
                  break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a)
                  break b;
                r2 === c2 && ++l2 === e2 && (h3 = g2);
                r2 === f2 && ++m2 === d2 && (k2 = g2);
                if (null !== (y2 = q2.nextSibling))
                  break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
          c2 = -1 === h3 || -1 === k2 ? null : { start: h3, end: k2 };
        } else
          c2 = null;
      }
    c2 = c2 || { start: 0, end: 0 };
  } else
    c2 = null;
  Df = { focusedElem: a, selectionRange: c2 };
  dd = false;
  for (V = b2; null !== V; )
    if (b2 = V, a = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a)
      a.return = b2, V = a;
    else
      for (; null !== V; ) {
        b2 = V;
        try {
          var n2 = b2.alternate;
          if (0 !== (b2.flags & 1024))
            switch (b2.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n2) {
                  var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                  x2.__reactInternalSnapshotBeforeUpdate = w2;
                }
                break;
              case 3:
                var u2 = b2.stateNode.containerInfo;
                1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p$1(163));
            }
        } catch (F2) {
          W(b2, b2.return, F2);
        }
        a = b2.sibling;
        if (null !== a) {
          a.return = b2.return;
          V = a;
          break;
        }
        V = b2.return;
      }
  n2 = Oj;
  Oj = false;
  return n2;
}
function Qj(a, b2, c2) {
  var d2 = b2.updateQueue;
  d2 = null !== d2 ? d2.lastEffect : null;
  if (null !== d2) {
    var e2 = d2 = d2.next;
    do {
      if ((e2.tag & a) === a) {
        var f2 = e2.destroy;
        e2.destroy = void 0;
        void 0 !== f2 && Nj(b2, c2, f2);
      }
      e2 = e2.next;
    } while (e2 !== d2);
  }
}
function Rj(a, b2) {
  b2 = b2.updateQueue;
  b2 = null !== b2 ? b2.lastEffect : null;
  if (null !== b2) {
    var c2 = b2 = b2.next;
    do {
      if ((c2.tag & a) === a) {
        var d2 = c2.create;
        c2.destroy = d2();
      }
      c2 = c2.next;
    } while (c2 !== b2);
  }
}
function Sj(a) {
  var b2 = a.ref;
  if (null !== b2) {
    var c2 = a.stateNode;
    switch (a.tag) {
      case 5:
        a = c2;
        break;
      default:
        a = c2;
    }
    "function" === typeof b2 ? b2(a) : b2.current = a;
  }
}
function Tj(a) {
  var b2 = a.alternate;
  null !== b2 && (a.alternate = null, Tj(b2));
  a.child = null;
  a.deletions = null;
  a.sibling = null;
  5 === a.tag && (b2 = a.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
  a.stateNode = null;
  a.return = null;
  a.dependencies = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.stateNode = null;
  a.updateQueue = null;
}
function Uj(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Vj(a) {
  a:
    for (; ; ) {
      for (; null === a.sibling; ) {
        if (null === a.return || Uj(a.return))
          return null;
        a = a.return;
      }
      a.sibling.return = a.return;
      for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
        if (a.flags & 2)
          continue a;
        if (null === a.child || 4 === a.tag)
          continue a;
        else
          a.child.return = a, a = a.child;
      }
      if (!(a.flags & 2))
        return a.stateNode;
    }
}
function Wj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2)
    a = a.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
  else if (4 !== d2 && (a = a.child, null !== a))
    for (Wj(a, b2, c2), a = a.sibling; null !== a; )
      Wj(a, b2, c2), a = a.sibling;
}
function Xj(a, b2, c2) {
  var d2 = a.tag;
  if (5 === d2 || 6 === d2)
    a = a.stateNode, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
  else if (4 !== d2 && (a = a.child, null !== a))
    for (Xj(a, b2, c2), a = a.sibling; null !== a; )
      Xj(a, b2, c2), a = a.sibling;
}
var X = null, Yj = false;
function Zj(a, b2, c2) {
  for (c2 = c2.child; null !== c2; )
    ak(a, b2, c2), c2 = c2.sibling;
}
function ak(a, b2, c2) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount)
    try {
      lc.onCommitFiberUnmount(kc, c2);
    } catch (h3) {
    }
  switch (c2.tag) {
    case 5:
      U || Mj(c2, b2);
    case 6:
      var d2 = X, e2 = Yj;
      X = null;
      Zj(a, b2, c2);
      X = d2;
      Yj = e2;
      null !== X && (Yj ? (a = X, c2 = c2.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c2) : a.removeChild(c2)) : X.removeChild(c2.stateNode));
      break;
    case 18:
      null !== X && (Yj ? (a = X, c2 = c2.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c2) : 1 === a.nodeType && Kf(a, c2), bd(a)) : Kf(X, c2.stateNode));
      break;
    case 4:
      d2 = X;
      e2 = Yj;
      X = c2.stateNode.containerInfo;
      Yj = true;
      Zj(a, b2, c2);
      X = d2;
      Yj = e2;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
        e2 = d2 = d2.next;
        do {
          var f2 = e2, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
          e2 = e2.next;
        } while (e2 !== d2);
      }
      Zj(a, b2, c2);
      break;
    case 1:
      if (!U && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
        try {
          d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
        } catch (h3) {
          W(c2, b2, h3);
        }
      Zj(a, b2, c2);
      break;
    case 21:
      Zj(a, b2, c2);
      break;
    case 22:
      c2.mode & 1 ? (U = (d2 = U) || null !== c2.memoizedState, Zj(a, b2, c2), U = d2) : Zj(a, b2, c2);
      break;
    default:
      Zj(a, b2, c2);
  }
}
function bk(a) {
  var b2 = a.updateQueue;
  if (null !== b2) {
    a.updateQueue = null;
    var c2 = a.stateNode;
    null === c2 && (c2 = a.stateNode = new Lj());
    b2.forEach(function(b3) {
      var d2 = ck.bind(null, a, b3);
      c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
    });
  }
}
function dk(a, b2) {
  var c2 = b2.deletions;
  if (null !== c2)
    for (var d2 = 0; d2 < c2.length; d2++) {
      var e2 = c2[d2];
      try {
        var f2 = a, g2 = b2, h3 = g2;
        a:
          for (; null !== h3; ) {
            switch (h3.tag) {
              case 5:
                X = h3.stateNode;
                Yj = false;
                break a;
              case 3:
                X = h3.stateNode.containerInfo;
                Yj = true;
                break a;
              case 4:
                X = h3.stateNode.containerInfo;
                Yj = true;
                break a;
            }
            h3 = h3.return;
          }
        if (null === X)
          throw Error(p$1(160));
        ak(f2, g2, e2);
        X = null;
        Yj = false;
        var k2 = e2.alternate;
        null !== k2 && (k2.return = null);
        e2.return = null;
      } catch (l2) {
        W(e2, b2, l2);
      }
    }
  if (b2.subtreeFlags & 12854)
    for (b2 = b2.child; null !== b2; )
      ek(b2, a), b2 = b2.sibling;
}
function ek(a, b2) {
  var c2 = a.alternate, d2 = a.flags;
  switch (a.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      dk(b2, a);
      fk(a);
      if (d2 & 4) {
        try {
          Qj(3, a, a.return), Rj(3, a);
        } catch (t2) {
          W(a, a.return, t2);
        }
        try {
          Qj(5, a, a.return);
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 1:
      dk(b2, a);
      fk(a);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      break;
    case 5:
      dk(b2, a);
      fk(a);
      d2 & 512 && null !== c2 && Mj(c2, c2.return);
      if (a.flags & 32) {
        var e2 = a.stateNode;
        try {
          ob(e2, "");
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      if (d2 & 4 && (e2 = a.stateNode, null != e2)) {
        var f2 = a.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h3 = a.type, k2 = a.updateQueue;
        a.updateQueue = null;
        if (null !== k2)
          try {
            "input" === h3 && "radio" === f2.type && null != f2.name && ab(e2, f2);
            vb(h3, g2);
            var l2 = vb(h3, f2);
            for (g2 = 0; g2 < k2.length; g2 += 2) {
              var m2 = k2[g2], q2 = k2[g2 + 1];
              "style" === m2 ? sb(e2, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e2, q2) : "children" === m2 ? ob(e2, q2) : ta(e2, m2, q2, l2);
            }
            switch (h3) {
              case "input":
                bb(e2, f2);
                break;
              case "textarea":
                ib(e2, f2);
                break;
              case "select":
                var r2 = e2._wrapperState.wasMultiple;
                e2._wrapperState.wasMultiple = !!f2.multiple;
                var y2 = f2.value;
                null != y2 ? fb(e2, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                  e2,
                  !!f2.multiple,
                  f2.defaultValue,
                  true
                ) : fb(e2, !!f2.multiple, f2.multiple ? [] : "", false));
            }
            e2[Pf] = f2;
          } catch (t2) {
            W(a, a.return, t2);
          }
      }
      break;
    case 6:
      dk(b2, a);
      fk(a);
      if (d2 & 4) {
        if (null === a.stateNode)
          throw Error(p$1(162));
        e2 = a.stateNode;
        f2 = a.memoizedProps;
        try {
          e2.nodeValue = f2;
        } catch (t2) {
          W(a, a.return, t2);
        }
      }
      break;
    case 3:
      dk(b2, a);
      fk(a);
      if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
        try {
          bd(b2.containerInfo);
        } catch (t2) {
          W(a, a.return, t2);
        }
      break;
    case 4:
      dk(b2, a);
      fk(a);
      break;
    case 13:
      dk(b2, a);
      fk(a);
      e2 = a.child;
      e2.flags & 8192 && (f2 = null !== e2.memoizedState, e2.stateNode.isHidden = f2, !f2 || null !== e2.alternate && null !== e2.alternate.memoizedState || (gk = B()));
      d2 & 4 && bk(a);
      break;
    case 22:
      m2 = null !== c2 && null !== c2.memoizedState;
      a.mode & 1 ? (U = (l2 = U) || m2, dk(b2, a), U = l2) : dk(b2, a);
      fk(a);
      if (d2 & 8192) {
        l2 = null !== a.memoizedState;
        if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1))
          for (V = a, m2 = a.child; null !== m2; ) {
            for (q2 = V = m2; null !== V; ) {
              r2 = V;
              y2 = r2.child;
              switch (r2.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Qj(4, r2, r2.return);
                  break;
                case 1:
                  Mj(r2, r2.return);
                  var n2 = r2.stateNode;
                  if ("function" === typeof n2.componentWillUnmount) {
                    d2 = r2;
                    c2 = r2.return;
                    try {
                      b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                    } catch (t2) {
                      W(d2, c2, t2);
                    }
                  }
                  break;
                case 5:
                  Mj(r2, r2.return);
                  break;
                case 22:
                  if (null !== r2.memoizedState) {
                    hk(q2);
                    continue;
                  }
              }
              null !== y2 ? (y2.return = r2, V = y2) : hk(q2);
            }
            m2 = m2.sibling;
          }
        a:
          for (m2 = null, q2 = a; ; ) {
            if (5 === q2.tag) {
              if (null === m2) {
                m2 = q2;
                try {
                  e2 = q2.stateNode, l2 ? (f2 = e2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h3 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h3.style.display = rb("display", g2));
                } catch (t2) {
                  W(a, a.return, t2);
                }
              }
            } else if (6 === q2.tag) {
              if (null === m2)
                try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W(a, a.return, t2);
                }
            } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
              q2.child.return = q2;
              q2 = q2.child;
              continue;
            }
            if (q2 === a)
              break a;
            for (; null === q2.sibling; ) {
              if (null === q2.return || q2.return === a)
                break a;
              m2 === q2 && (m2 = null);
              q2 = q2.return;
            }
            m2 === q2 && (m2 = null);
            q2.sibling.return = q2.return;
            q2 = q2.sibling;
          }
      }
      break;
    case 19:
      dk(b2, a);
      fk(a);
      d2 & 4 && bk(a);
      break;
    case 21:
      break;
    default:
      dk(
        b2,
        a
      ), fk(a);
  }
}
function fk(a) {
  var b2 = a.flags;
  if (b2 & 2) {
    try {
      a: {
        for (var c2 = a.return; null !== c2; ) {
          if (Uj(c2)) {
            var d2 = c2;
            break a;
          }
          c2 = c2.return;
        }
        throw Error(p$1(160));
      }
      switch (d2.tag) {
        case 5:
          var e2 = d2.stateNode;
          d2.flags & 32 && (ob(e2, ""), d2.flags &= -33);
          var f2 = Vj(a);
          Xj(a, f2, e2);
          break;
        case 3:
        case 4:
          var g2 = d2.stateNode.containerInfo, h3 = Vj(a);
          Wj(a, h3, g2);
          break;
        default:
          throw Error(p$1(161));
      }
    } catch (k2) {
      W(a, a.return, k2);
    }
    a.flags &= -3;
  }
  b2 & 4096 && (a.flags &= -4097);
}
function ik(a, b2, c2) {
  V = a;
  jk(a);
}
function jk(a, b2, c2) {
  for (var d2 = 0 !== (a.mode & 1); null !== V; ) {
    var e2 = V, f2 = e2.child;
    if (22 === e2.tag && d2) {
      var g2 = null !== e2.memoizedState || Kj;
      if (!g2) {
        var h3 = e2.alternate, k2 = null !== h3 && null !== h3.memoizedState || U;
        h3 = Kj;
        var l2 = U;
        Kj = g2;
        if ((U = k2) && !l2)
          for (V = e2; null !== V; )
            g2 = V, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e2) : null !== k2 ? (k2.return = g2, V = k2) : kk(e2);
        for (; null !== f2; )
          V = f2, jk(f2), f2 = f2.sibling;
        V = e2;
        Kj = h3;
        U = l2;
      }
      lk(a);
    } else
      0 !== (e2.subtreeFlags & 8772) && null !== f2 ? (f2.return = e2, V = f2) : lk(a);
  }
}
function lk(a) {
  for (; null !== V; ) {
    var b2 = V;
    if (0 !== (b2.flags & 8772)) {
      var c2 = b2.alternate;
      try {
        if (0 !== (b2.flags & 8772))
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              U || Rj(5, b2);
              break;
            case 1:
              var d2 = b2.stateNode;
              if (b2.flags & 4 && !U)
                if (null === c2)
                  d2.componentDidMount();
                else {
                  var e2 = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                  d2.componentDidUpdate(e2, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                }
              var f2 = b2.updateQueue;
              null !== f2 && ih(b2, f2, d2);
              break;
            case 3:
              var g2 = b2.updateQueue;
              if (null !== g2) {
                c2 = null;
                if (null !== b2.child)
                  switch (b2.child.tag) {
                    case 5:
                      c2 = b2.child.stateNode;
                      break;
                    case 1:
                      c2 = b2.child.stateNode;
                  }
                ih(b2, g2, c2);
              }
              break;
            case 5:
              var h3 = b2.stateNode;
              if (null === c2 && b2.flags & 4) {
                c2 = h3;
                var k2 = b2.memoizedProps;
                switch (b2.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k2.autoFocus && c2.focus();
                    break;
                  case "img":
                    k2.src && (c2.src = k2.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b2.memoizedState) {
                var l2 = b2.alternate;
                if (null !== l2) {
                  var m2 = l2.memoizedState;
                  if (null !== m2) {
                    var q2 = m2.dehydrated;
                    null !== q2 && bd(q2);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p$1(163));
          }
        U || b2.flags & 512 && Sj(b2);
      } catch (r2) {
        W(b2, b2.return, r2);
      }
    }
    if (b2 === a) {
      V = null;
      break;
    }
    c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V = c2;
      break;
    }
    V = b2.return;
  }
}
function hk(a) {
  for (; null !== V; ) {
    var b2 = V;
    if (b2 === a) {
      V = null;
      break;
    }
    var c2 = b2.sibling;
    if (null !== c2) {
      c2.return = b2.return;
      V = c2;
      break;
    }
    V = b2.return;
  }
}
function kk(a) {
  for (; null !== V; ) {
    var b2 = V;
    try {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
          var c2 = b2.return;
          try {
            Rj(4, b2);
          } catch (k2) {
            W(b2, c2, k2);
          }
          break;
        case 1:
          var d2 = b2.stateNode;
          if ("function" === typeof d2.componentDidMount) {
            var e2 = b2.return;
            try {
              d2.componentDidMount();
            } catch (k2) {
              W(b2, e2, k2);
            }
          }
          var f2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W(b2, f2, k2);
          }
          break;
        case 5:
          var g2 = b2.return;
          try {
            Sj(b2);
          } catch (k2) {
            W(b2, g2, k2);
          }
      }
    } catch (k2) {
      W(b2, b2.return, k2);
    }
    if (b2 === a) {
      V = null;
      break;
    }
    var h3 = b2.sibling;
    if (null !== h3) {
      h3.return = b2.return;
      V = h3;
      break;
    }
    V = b2.return;
  }
}
var mk = Math.ceil, nk = ua$1.ReactCurrentDispatcher, ok = ua$1.ReactCurrentOwner, pk = ua$1.ReactCurrentBatchConfig, K = 0, R = null, Y = null, Z = 0, gj = 0, fj = Uf(0), T = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
function L() {
  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
}
function lh(a) {
  if (0 === (a.mode & 1))
    return 1;
  if (0 !== (K & 2) && 0 !== Z)
    return Z & -Z;
  if (null !== Kg.transition)
    return 0 === Ck && (Ck = yc()), Ck;
  a = C;
  if (0 !== a)
    return a;
  a = window.event;
  a = void 0 === a ? 16 : jd(a.type);
  return a;
}
function mh(a, b2, c2, d2) {
  if (50 < zk)
    throw zk = 0, Ak = null, Error(p$1(185));
  Ac(a, c2, d2);
  if (0 === (K & 2) || a !== R)
    a === R && (0 === (K & 2) && (rk |= c2), 4 === T && Dk(a, Z)), Ek(a, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Hj = B() + 500, fg && jg());
}
function Ek(a, b2) {
  var c2 = a.callbackNode;
  wc(a, b2);
  var d2 = uc(a, a === R ? Z : 0);
  if (0 === d2)
    null !== c2 && bc(c2), a.callbackNode = null, a.callbackPriority = 0;
  else if (b2 = d2 & -d2, a.callbackPriority !== b2) {
    null != c2 && bc(c2);
    if (1 === b2)
      0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function() {
        0 === (K & 6) && jg();
      }), c2 = null;
    else {
      switch (Dc(d2)) {
        case 1:
          c2 = fc;
          break;
        case 4:
          c2 = gc;
          break;
        case 16:
          c2 = hc;
          break;
        case 536870912:
          c2 = jc;
          break;
        default:
          c2 = hc;
      }
      c2 = Gk(c2, Hk.bind(null, a));
    }
    a.callbackPriority = b2;
    a.callbackNode = c2;
  }
}
function Hk(a, b2) {
  Bk = -1;
  Ck = 0;
  if (0 !== (K & 6))
    throw Error(p$1(327));
  var c2 = a.callbackNode;
  if (Ik() && a.callbackNode !== c2)
    return null;
  var d2 = uc(a, a === R ? Z : 0);
  if (0 === d2)
    return null;
  if (0 !== (d2 & 30) || 0 !== (d2 & a.expiredLanes) || b2)
    b2 = Jk(a, d2);
  else {
    b2 = d2;
    var e2 = K;
    K |= 2;
    var f2 = Kk();
    if (R !== a || Z !== b2)
      vk = null, Hj = B() + 500, Lk(a, b2);
    do
      try {
        Mk();
        break;
      } catch (h3) {
        Nk(a, h3);
      }
    while (1);
    Qg();
    nk.current = f2;
    K = e2;
    null !== Y ? b2 = 0 : (R = null, Z = 0, b2 = T);
  }
  if (0 !== b2) {
    2 === b2 && (e2 = xc(a), 0 !== e2 && (d2 = e2, b2 = Ok(a, e2)));
    if (1 === b2)
      throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
    if (6 === b2)
      Dk(a, d2);
    else {
      e2 = a.current.alternate;
      if (0 === (d2 & 30) && !Pk(e2) && (b2 = Jk(a, d2), 2 === b2 && (f2 = xc(a), 0 !== f2 && (d2 = f2, b2 = Ok(a, f2))), 1 === b2))
        throw c2 = qk, Lk(a, 0), Dk(a, d2), Ek(a, B()), c2;
      a.finishedWork = e2;
      a.finishedLanes = d2;
      switch (b2) {
        case 0:
        case 1:
          throw Error(p$1(345));
        case 2:
          Qk(a, uk, vk);
          break;
        case 3:
          Dk(a, d2);
          if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B(), 10 < b2)) {
            if (0 !== uc(a, 0))
              break;
            e2 = a.suspendedLanes;
            if ((e2 & d2) !== d2) {
              L();
              a.pingedLanes |= a.suspendedLanes & e2;
              break;
            }
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b2);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 4:
          Dk(a, d2);
          if ((d2 & 4194240) === d2)
            break;
          b2 = a.eventTimes;
          for (e2 = -1; 0 < d2; ) {
            var g2 = 31 - oc(d2);
            f2 = 1 << g2;
            g2 = b2[g2];
            g2 > e2 && (e2 = g2);
            d2 &= ~f2;
          }
          d2 = e2;
          d2 = B() - d2;
          d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
          if (10 < d2) {
            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d2);
            break;
          }
          Qk(a, uk, vk);
          break;
        case 5:
          Qk(a, uk, vk);
          break;
        default:
          throw Error(p$1(329));
      }
    }
  }
  Ek(a, B());
  return a.callbackNode === c2 ? Hk.bind(null, a) : null;
}
function Ok(a, b2) {
  var c2 = tk;
  a.current.memoizedState.isDehydrated && (Lk(a, b2).flags |= 256);
  a = Jk(a, b2);
  2 !== a && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
  return a;
}
function Gj(a) {
  null === uk ? uk = a : uk.push.apply(uk, a);
}
function Pk(a) {
  for (var b2 = a; ; ) {
    if (b2.flags & 16384) {
      var c2 = b2.updateQueue;
      if (null !== c2 && (c2 = c2.stores, null !== c2))
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e2 = c2[d2], f2 = e2.getSnapshot;
          e2 = e2.value;
          try {
            if (!He(f2(), e2))
              return false;
          } catch (g2) {
            return false;
          }
        }
    }
    c2 = b2.child;
    if (b2.subtreeFlags & 16384 && null !== c2)
      c2.return = b2, b2 = c2;
    else {
      if (b2 === a)
        break;
      for (; null === b2.sibling; ) {
        if (null === b2.return || b2.return === a)
          return true;
        b2 = b2.return;
      }
      b2.sibling.return = b2.return;
      b2 = b2.sibling;
    }
  }
  return true;
}
function Dk(a, b2) {
  b2 &= ~sk;
  b2 &= ~rk;
  a.suspendedLanes |= b2;
  a.pingedLanes &= ~b2;
  for (a = a.expirationTimes; 0 < b2; ) {
    var c2 = 31 - oc(b2), d2 = 1 << c2;
    a[c2] = -1;
    b2 &= ~d2;
  }
}
function Fk(a) {
  if (0 !== (K & 6))
    throw Error(p$1(327));
  Ik();
  var b2 = uc(a, 0);
  if (0 === (b2 & 1))
    return Ek(a, B()), null;
  var c2 = Jk(a, b2);
  if (0 !== a.tag && 2 === c2) {
    var d2 = xc(a);
    0 !== d2 && (b2 = d2, c2 = Ok(a, d2));
  }
  if (1 === c2)
    throw c2 = qk, Lk(a, 0), Dk(a, b2), Ek(a, B()), c2;
  if (6 === c2)
    throw Error(p$1(345));
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b2;
  Qk(a, uk, vk);
  Ek(a, B());
  return null;
}
function Rk(a, b2) {
  var c2 = K;
  K |= 1;
  try {
    return a(b2);
  } finally {
    K = c2, 0 === K && (Hj = B() + 500, fg && jg());
  }
}
function Sk(a) {
  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
  var b2 = K;
  K |= 1;
  var c2 = pk.transition, d2 = C;
  try {
    if (pk.transition = null, C = 1, a)
      return a();
  } finally {
    C = d2, pk.transition = c2, K = b2, 0 === (K & 6) && jg();
  }
}
function Ij() {
  gj = fj.current;
  E(fj);
}
function Lk(a, b2) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c2 = a.timeoutHandle;
  -1 !== c2 && (a.timeoutHandle = -1, Gf(c2));
  if (null !== Y)
    for (c2 = Y.return; null !== c2; ) {
      var d2 = c2;
      wg(d2);
      switch (d2.tag) {
        case 1:
          d2 = d2.type.childContextTypes;
          null !== d2 && void 0 !== d2 && $f();
          break;
        case 3:
          Jh();
          E(Wf);
          E(H);
          Oh();
          break;
        case 5:
          Lh(d2);
          break;
        case 4:
          Jh();
          break;
        case 13:
          E(M);
          break;
        case 19:
          E(M);
          break;
        case 10:
          Rg(d2.type._context);
          break;
        case 22:
        case 23:
          Ij();
      }
      c2 = c2.return;
    }
  R = a;
  Y = a = wh(a.current, null);
  Z = gj = b2;
  T = 0;
  qk = null;
  sk = rk = hh = 0;
  uk = tk = null;
  if (null !== Wg) {
    for (b2 = 0; b2 < Wg.length; b2++)
      if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
        c2.interleaved = null;
        var e2 = d2.next, f2 = c2.pending;
        if (null !== f2) {
          var g2 = f2.next;
          f2.next = e2;
          d2.next = g2;
        }
        c2.pending = d2;
      }
    Wg = null;
  }
  return a;
}
function Nk(a, b2) {
  do {
    var c2 = Y;
    try {
      Qg();
      Ph.current = ai;
      if (Sh) {
        for (var d2 = N.memoizedState; null !== d2; ) {
          var e2 = d2.queue;
          null !== e2 && (e2.pending = null);
          d2 = d2.next;
        }
        Sh = false;
      }
      Rh = 0;
      P = O = N = null;
      Th$1 = false;
      Uh = 0;
      ok.current = null;
      if (null === c2 || null === c2.return) {
        T = 1;
        qk = b2;
        Y = null;
        break;
      }
      a: {
        var f2 = a, g2 = c2.return, h3 = c2, k2 = b2;
        b2 = Z;
        h3.flags |= 32768;
        if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
          var l2 = k2, m2 = h3, q2 = m2.tag;
          if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
            var r2 = m2.alternate;
            r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
          }
          var y2 = Vi(g2);
          if (null !== y2) {
            y2.flags &= -257;
            Wi(y2, g2, h3, f2, b2);
            y2.mode & 1 && Ti(f2, l2, b2);
            b2 = y2;
            k2 = l2;
            var n2 = b2.updateQueue;
            if (null === n2) {
              var t2 = /* @__PURE__ */ new Set();
              t2.add(k2);
              b2.updateQueue = t2;
            } else
              n2.add(k2);
            break a;
          } else {
            if (0 === (b2 & 1)) {
              Ti(f2, l2, b2);
              uj();
              break a;
            }
            k2 = Error(p$1(426));
          }
        } else if (I && h3.mode & 1) {
          var J2 = Vi(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Wi(J2, g2, h3, f2, b2);
            Jg(Ki(k2, h3));
            break a;
          }
        }
        f2 = k2 = Ki(k2, h3);
        4 !== T && (T = 2);
        null === tk ? tk = [f2] : tk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b2 &= -b2;
              f2.lanes |= b2;
              var x2 = Oi(f2, k2, b2);
              fh(f2, x2);
              break a;
            case 1:
              h3 = k2;
              var w2 = f2.type, u2 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                f2.flags |= 65536;
                b2 &= -b2;
                f2.lanes |= b2;
                var F2 = Ri(f2, h3, b2);
                fh(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Tk(c2);
    } catch (na) {
      b2 = na;
      Y === c2 && null !== c2 && (Y = c2 = c2.return);
      continue;
    }
    break;
  } while (1);
}
function Kk() {
  var a = nk.current;
  nk.current = ai;
  return null === a ? ai : a;
}
function uj() {
  if (0 === T || 3 === T || 2 === T)
    T = 4;
  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
}
function Jk(a, b2) {
  var c2 = K;
  K |= 2;
  var d2 = Kk();
  if (R !== a || Z !== b2)
    vk = null, Lk(a, b2);
  do
    try {
      Uk();
      break;
    } catch (e2) {
      Nk(a, e2);
    }
  while (1);
  Qg();
  K = c2;
  nk.current = d2;
  if (null !== Y)
    throw Error(p$1(261));
  R = null;
  Z = 0;
  return T;
}
function Uk() {
  for (; null !== Y; )
    Vk(Y);
}
function Mk() {
  for (; null !== Y && !cc(); )
    Vk(Y);
}
function Vk(a) {
  var b2 = Wk(a.alternate, a, gj);
  a.memoizedProps = a.pendingProps;
  null === b2 ? Tk(a) : Y = b2;
  ok.current = null;
}
function Tk(a) {
  var b2 = a;
  do {
    var c2 = b2.alternate;
    a = b2.return;
    if (0 === (b2.flags & 32768)) {
      if (c2 = Fj(c2, b2, gj), null !== c2) {
        Y = c2;
        return;
      }
    } else {
      c2 = Jj(c2, b2);
      if (null !== c2) {
        c2.flags &= 32767;
        Y = c2;
        return;
      }
      if (null !== a)
        a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
      else {
        T = 6;
        Y = null;
        return;
      }
    }
    b2 = b2.sibling;
    if (null !== b2) {
      Y = b2;
      return;
    }
    Y = b2 = a;
  } while (null !== b2);
  0 === T && (T = 5);
}
function Qk(a, b2, c2) {
  var d2 = C, e2 = pk.transition;
  try {
    pk.transition = null, C = 1, Xk(a, b2, c2, d2);
  } finally {
    pk.transition = e2, C = d2;
  }
  return null;
}
function Xk(a, b2, c2, d2) {
  do
    Ik();
  while (null !== xk);
  if (0 !== (K & 6))
    throw Error(p$1(327));
  c2 = a.finishedWork;
  var e2 = a.finishedLanes;
  if (null === c2)
    return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c2 === a.current)
    throw Error(p$1(177));
  a.callbackNode = null;
  a.callbackPriority = 0;
  var f2 = c2.lanes | c2.childLanes;
  Bc(a, f2);
  a === R && (Y = R = null, Z = 0);
  0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
    Ik();
    return null;
  }));
  f2 = 0 !== (c2.flags & 15990);
  if (0 !== (c2.subtreeFlags & 15990) || f2) {
    f2 = pk.transition;
    pk.transition = null;
    var g2 = C;
    C = 1;
    var h3 = K;
    K |= 4;
    ok.current = null;
    Pj(a, c2);
    ek(c2, a);
    Oe(Df);
    dd = !!Cf;
    Df = Cf = null;
    a.current = c2;
    ik(c2);
    dc();
    K = h3;
    C = g2;
    pk.transition = f2;
  } else
    a.current = c2;
  wk && (wk = false, xk = a, yk = e2);
  f2 = a.pendingLanes;
  0 === f2 && (Si = null);
  mc(c2.stateNode);
  Ek(a, B());
  if (null !== b2)
    for (d2 = a.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
      e2 = b2[c2], d2(e2.value, { componentStack: e2.stack, digest: e2.digest });
  if (Pi)
    throw Pi = false, a = Qi, Qi = null, a;
  0 !== (yk & 1) && 0 !== a.tag && Ik();
  f2 = a.pendingLanes;
  0 !== (f2 & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
  jg();
  return null;
}
function Ik() {
  if (null !== xk) {
    var a = Dc(yk), b2 = pk.transition, c2 = C;
    try {
      pk.transition = null;
      C = 16 > a ? 16 : a;
      if (null === xk)
        var d2 = false;
      else {
        a = xk;
        xk = null;
        yk = 0;
        if (0 !== (K & 6))
          throw Error(p$1(331));
        var e2 = K;
        K |= 4;
        for (V = a.current; null !== V; ) {
          var f2 = V, g2 = f2.child;
          if (0 !== (V.flags & 16)) {
            var h3 = f2.deletions;
            if (null !== h3) {
              for (var k2 = 0; k2 < h3.length; k2++) {
                var l2 = h3[k2];
                for (V = l2; null !== V; ) {
                  var m2 = V;
                  switch (m2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(8, m2, f2);
                  }
                  var q2 = m2.child;
                  if (null !== q2)
                    q2.return = m2, V = q2;
                  else
                    for (; null !== V; ) {
                      m2 = V;
                      var r2 = m2.sibling, y2 = m2.return;
                      Tj(m2);
                      if (m2 === l2) {
                        V = null;
                        break;
                      }
                      if (null !== r2) {
                        r2.return = y2;
                        V = r2;
                        break;
                      }
                      V = y2;
                    }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t2 = n2.child;
                if (null !== t2) {
                  n2.child = null;
                  do {
                    var J2 = t2.sibling;
                    t2.sibling = null;
                    t2 = J2;
                  } while (null !== t2);
                }
              }
              V = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
            g2.return = f2, V = g2;
          else
            b:
              for (; null !== V; ) {
                f2 = V;
                if (0 !== (f2.flags & 2048))
                  switch (f2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, f2, f2.return);
                  }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V = x2;
                  break b;
                }
                V = f2.return;
              }
        }
        var w2 = a.current;
        for (V = w2; null !== V; ) {
          g2 = V;
          var u2 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
            u2.return = g2, V = u2;
          else
            b:
              for (g2 = w2; null !== V; ) {
                h3 = V;
                if (0 !== (h3.flags & 2048))
                  try {
                    switch (h3.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Rj(9, h3);
                    }
                  } catch (na) {
                    W(h3, h3.return, na);
                  }
                if (h3 === g2) {
                  V = null;
                  break b;
                }
                var F2 = h3.sibling;
                if (null !== F2) {
                  F2.return = h3.return;
                  V = F2;
                  break b;
                }
                V = h3.return;
              }
        }
        K = e2;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot)
          try {
            lc.onPostCommitFiberRoot(kc, a);
          } catch (na) {
          }
        d2 = true;
      }
      return d2;
    } finally {
      C = c2, pk.transition = b2;
    }
  }
  return false;
}
function Yk(a, b2, c2) {
  b2 = Ki(c2, b2);
  b2 = Oi(a, b2, 1);
  a = dh(a, b2, 1);
  b2 = L();
  null !== a && (Ac(a, 1, b2), Ek(a, b2));
}
function W(a, b2, c2) {
  if (3 === a.tag)
    Yk(a, a, c2);
  else
    for (; null !== b2; ) {
      if (3 === b2.tag) {
        Yk(b2, a, c2);
        break;
      } else if (1 === b2.tag) {
        var d2 = b2.stateNode;
        if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
          a = Ki(c2, a);
          a = Ri(b2, a, 1);
          b2 = dh(b2, a, 1);
          a = L();
          null !== b2 && (Ac(b2, 1, a), Ek(b2, a));
          break;
        }
      }
      b2 = b2.return;
    }
}
function Ui(a, b2, c2) {
  var d2 = a.pingCache;
  null !== d2 && d2.delete(b2);
  b2 = L();
  a.pingedLanes |= a.suspendedLanes & c2;
  R === a && (Z & c2) === c2 && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c2);
  Ek(a, b2);
}
function Zk(a, b2) {
  0 === b2 && (0 === (a.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c2 = L();
  a = Zg(a, b2);
  null !== a && (Ac(a, b2, c2), Ek(a, c2));
}
function vj(a) {
  var b2 = a.memoizedState, c2 = 0;
  null !== b2 && (c2 = b2.retryLane);
  Zk(a, c2);
}
function ck(a, b2) {
  var c2 = 0;
  switch (a.tag) {
    case 13:
      var d2 = a.stateNode;
      var e2 = a.memoizedState;
      null !== e2 && (c2 = e2.retryLane);
      break;
    case 19:
      d2 = a.stateNode;
      break;
    default:
      throw Error(p$1(314));
  }
  null !== d2 && d2.delete(b2);
  Zk(a, c2);
}
var Wk;
Wk = function(a, b2, c2) {
  if (null !== a)
    if (a.memoizedProps !== b2.pendingProps || Wf.current)
      Ug = true;
    else {
      if (0 === (a.lanes & c2) && 0 === (b2.flags & 128))
        return Ug = false, zj(a, b2, c2);
      Ug = 0 !== (a.flags & 131072) ? true : false;
    }
  else
    Ug = false, I && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
  b2.lanes = 0;
  switch (b2.tag) {
    case 2:
      var d2 = b2.type;
      jj(a, b2);
      a = b2.pendingProps;
      var e2 = Yf(b2, H.current);
      Tg(b2, c2);
      e2 = Xh(null, b2, d2, a, e2, c2);
      var f2 = bi();
      b2.flags |= 1;
      "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, ah(b2), e2.updater = nh, b2.stateNode = e2, e2._reactInternals = b2, rh(b2, d2, a, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I && f2 && vg(b2), Yi(null, b2, e2, c2), b2 = b2.child);
      return b2;
    case 16:
      d2 = b2.elementType;
      a: {
        jj(a, b2);
        a = b2.pendingProps;
        e2 = d2._init;
        d2 = e2(d2._payload);
        b2.type = d2;
        e2 = b2.tag = $k(d2);
        a = Lg(d2, a);
        switch (e2) {
          case 0:
            b2 = dj(null, b2, d2, a, c2);
            break a;
          case 1:
            b2 = ij(null, b2, d2, a, c2);
            break a;
          case 11:
            b2 = Zi(null, b2, d2, a, c2);
            break a;
          case 14:
            b2 = aj(null, b2, d2, Lg(d2.type, a), c2);
            break a;
        }
        throw Error(p$1(
          306,
          d2,
          ""
        ));
      }
      return b2;
    case 0:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), dj(a, b2, d2, e2, c2);
    case 1:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), ij(a, b2, d2, e2, c2);
    case 3:
      a: {
        lj(b2);
        if (null === a)
          throw Error(p$1(387));
        d2 = b2.pendingProps;
        f2 = b2.memoizedState;
        e2 = f2.element;
        bh(a, b2);
        gh(b2, d2, null, c2);
        var g2 = b2.memoizedState;
        d2 = g2.element;
        if (f2.isDehydrated)
          if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
            e2 = Ki(Error(p$1(423)), b2);
            b2 = mj(a, b2, d2, c2, e2);
            break a;
          } else if (d2 !== e2) {
            e2 = Ki(Error(p$1(424)), b2);
            b2 = mj(a, b2, d2, c2, e2);
            break a;
          } else
            for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
              c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
        else {
          Ig();
          if (d2 === e2) {
            b2 = $i(a, b2, c2);
            break a;
          }
          Yi(a, b2, d2, c2);
        }
        b2 = b2.child;
      }
      return b2;
    case 5:
      return Kh(b2), null === a && Eg(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e2.children, Ef(d2, e2) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a, b2), Yi(a, b2, g2, c2), b2.child;
    case 6:
      return null === a && Eg(b2), null;
    case 13:
      return pj(a, b2, c2);
    case 4:
      return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Bh(b2, null, d2, c2) : Yi(a, b2, d2, c2), b2.child;
    case 11:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), Zi(a, b2, d2, e2, c2);
    case 7:
      return Yi(a, b2, b2.pendingProps, c2), b2.child;
    case 8:
      return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 12:
      return Yi(a, b2, b2.pendingProps.children, c2), b2.child;
    case 10:
      a: {
        d2 = b2.type._context;
        e2 = b2.pendingProps;
        f2 = b2.memoizedProps;
        g2 = e2.value;
        G(Mg, d2._currentValue);
        d2._currentValue = g2;
        if (null !== f2)
          if (He(f2.value, g2)) {
            if (f2.children === e2.children && !Wf.current) {
              b2 = $i(a, b2, c2);
              break a;
            }
          } else
            for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
              var h3 = f2.dependencies;
              if (null !== h3) {
                g2 = f2.child;
                for (var k2 = h3.firstContext; null !== k2; ) {
                  if (k2.context === d2) {
                    if (1 === f2.tag) {
                      k2 = ch(-1, c2 & -c2);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c2;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c2);
                    Sg(
                      f2.return,
                      c2,
                      b2
                    );
                    h3.lanes |= c2;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag)
                g2 = f2.type === b2.type ? null : f2.child;
              else if (18 === f2.tag) {
                g2 = f2.return;
                if (null === g2)
                  throw Error(p$1(341));
                g2.lanes |= c2;
                h3 = g2.alternate;
                null !== h3 && (h3.lanes |= c2);
                Sg(g2, c2, b2);
                g2 = f2.sibling;
              } else
                g2 = f2.child;
              if (null !== g2)
                g2.return = f2;
              else
                for (g2 = f2; null !== g2; ) {
                  if (g2 === b2) {
                    g2 = null;
                    break;
                  }
                  f2 = g2.sibling;
                  if (null !== f2) {
                    f2.return = g2.return;
                    g2 = f2;
                    break;
                  }
                  g2 = g2.return;
                }
              f2 = g2;
            }
        Yi(a, b2, e2.children, c2);
        b2 = b2.child;
      }
      return b2;
    case 9:
      return e2 = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e2 = Vg(e2), d2 = d2(e2), b2.flags |= 1, Yi(a, b2, d2, c2), b2.child;
    case 14:
      return d2 = b2.type, e2 = Lg(d2, b2.pendingProps), e2 = Lg(d2.type, e2), aj(a, b2, d2, e2, c2);
    case 15:
      return cj(a, b2, b2.type, b2.pendingProps, c2);
    case 17:
      return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : Lg(d2, e2), jj(a, b2), b2.tag = 1, Zf(d2) ? (a = true, cg(b2)) : a = false, Tg(b2, c2), ph(b2, d2, e2), rh(b2, d2, e2, c2), kj(null, b2, d2, true, a, c2);
    case 19:
      return yj(a, b2, c2);
    case 22:
      return ej(a, b2, c2);
  }
  throw Error(p$1(156, b2.tag));
};
function Gk(a, b2) {
  return ac(a, b2);
}
function al(a, b2, c2, d2) {
  this.tag = a;
  this.key = c2;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b2;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d2;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a, b2, c2, d2) {
  return new al(a, b2, c2, d2);
}
function bj(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}
function $k(a) {
  if ("function" === typeof a)
    return bj(a) ? 1 : 0;
  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Da)
      return 11;
    if (a === Ga)
      return 14;
  }
  return 2;
}
function wh(a, b2) {
  var c2 = a.alternate;
  null === c2 ? (c2 = Bg(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.type = a.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
  c2.flags = a.flags & 14680064;
  c2.childLanes = a.childLanes;
  c2.lanes = a.lanes;
  c2.child = a.child;
  c2.memoizedProps = a.memoizedProps;
  c2.memoizedState = a.memoizedState;
  c2.updateQueue = a.updateQueue;
  b2 = a.dependencies;
  c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
  c2.sibling = a.sibling;
  c2.index = a.index;
  c2.ref = a.ref;
  return c2;
}
function yh(a, b2, c2, d2, e2, f2) {
  var g2 = 2;
  d2 = a;
  if ("function" === typeof a)
    bj(a) && (g2 = 1);
  else if ("string" === typeof a)
    g2 = 5;
  else
    a:
      switch (a) {
        case ya:
          return Ah(c2.children, e2, f2, b2);
        case za:
          g2 = 8;
          e2 |= 8;
          break;
        case Aa:
          return a = Bg(12, c2, b2, e2 | 2), a.elementType = Aa, a.lanes = f2, a;
        case Ea:
          return a = Bg(13, c2, b2, e2), a.elementType = Ea, a.lanes = f2, a;
        case Fa:
          return a = Bg(19, c2, b2, e2), a.elementType = Fa, a.lanes = f2, a;
        case Ia:
          return qj(c2, e2, f2, b2);
        default:
          if ("object" === typeof a && null !== a)
            switch (a.$$typeof) {
              case Ba:
                g2 = 10;
                break a;
              case Ca:
                g2 = 9;
                break a;
              case Da:
                g2 = 11;
                break a;
              case Ga:
                g2 = 14;
                break a;
              case Ha:
                g2 = 16;
                d2 = null;
                break a;
            }
          throw Error(p$1(130, null == a ? a : typeof a, ""));
      }
  b2 = Bg(g2, c2, b2, e2);
  b2.elementType = a;
  b2.type = d2;
  b2.lanes = f2;
  return b2;
}
function Ah(a, b2, c2, d2) {
  a = Bg(7, a, d2, b2);
  a.lanes = c2;
  return a;
}
function qj(a, b2, c2, d2) {
  a = Bg(22, a, d2, b2);
  a.elementType = Ia;
  a.lanes = c2;
  a.stateNode = { isHidden: false };
  return a;
}
function xh(a, b2, c2) {
  a = Bg(6, a, null, b2);
  a.lanes = c2;
  return a;
}
function zh(a, b2, c2) {
  b2 = Bg(4, null !== a.children ? a.children : [], a.key, b2);
  b2.lanes = c2;
  b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
  return b2;
}
function bl(a, b2, c2, d2, e2) {
  this.tag = b2;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d2;
  this.onRecoverableError = e2;
  this.mutableSourceEagerHydrationData = null;
}
function cl(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  a = new bl(a, b2, c2, h3, k2);
  1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
  f2 = Bg(3, null, null, b2);
  a.current = f2;
  f2.stateNode = a;
  f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  ah(f2);
  return a;
}
function dl(a, b2, c2) {
  var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
}
function el(a) {
  if (!a)
    return Vf;
  a = a._reactInternals;
  a: {
    if (Vb(a) !== a || 1 !== a.tag)
      throw Error(p$1(170));
    var b2 = a;
    do {
      switch (b2.tag) {
        case 3:
          b2 = b2.stateNode.context;
          break a;
        case 1:
          if (Zf(b2.type)) {
            b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b2 = b2.return;
    } while (null !== b2);
    throw Error(p$1(171));
  }
  if (1 === a.tag) {
    var c2 = a.type;
    if (Zf(c2))
      return bg(a, c2, b2);
  }
  return b2;
}
function fl(a, b2, c2, d2, e2, f2, g2, h3, k2) {
  a = cl(c2, d2, true, a, e2, f2, g2, h3, k2);
  a.context = el(null);
  c2 = a.current;
  d2 = L();
  e2 = lh(c2);
  f2 = ch(d2, e2);
  f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
  dh(c2, f2, e2);
  a.current.lanes = e2;
  Ac(a, e2, d2);
  Ek(a, d2);
  return a;
}
function gl(a, b2, c2, d2) {
  var e2 = b2.current, f2 = L(), g2 = lh(e2);
  c2 = el(c2);
  null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
  b2 = ch(f2, g2);
  b2.payload = { element: a };
  d2 = void 0 === d2 ? null : d2;
  null !== d2 && (b2.callback = d2);
  a = dh(e2, b2, g2);
  null !== a && (mh(a, e2, g2, f2), eh(a, e2, g2));
  return g2;
}
function hl(a) {
  a = a.current;
  if (!a.child)
    return null;
  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;
    default:
      return a.child.stateNode;
  }
}
function il(a, b2) {
  a = a.memoizedState;
  if (null !== a && null !== a.dehydrated) {
    var c2 = a.retryLane;
    a.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
  }
}
function jl(a, b2) {
  il(a, b2);
  (a = a.alternate) && il(a, b2);
}
function kl() {
  return null;
}
var ll = "function" === typeof reportError ? reportError : function(a) {
  console.error(a);
};
function ml(a) {
  this._internalRoot = a;
}
nl.prototype.render = ml.prototype.render = function(a) {
  var b2 = this._internalRoot;
  if (null === b2)
    throw Error(p$1(409));
  gl(a, b2, null, null);
};
nl.prototype.unmount = ml.prototype.unmount = function() {
  var a = this._internalRoot;
  if (null !== a) {
    this._internalRoot = null;
    var b2 = a.containerInfo;
    Sk(function() {
      gl(null, a, null, null);
    });
    b2[uf] = null;
  }
};
function nl(a) {
  this._internalRoot = a;
}
nl.prototype.unstable_scheduleHydration = function(a) {
  if (a) {
    var b2 = Hc();
    a = { blockedOn: null, target: a, priority: b2 };
    for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
      ;
    Qc.splice(c2, 0, a);
    0 === c2 && Vc(a);
  }
};
function ol(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function pl(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function ql() {
}
function rl(a, b2, c2, d2, e2) {
  if (e2) {
    if ("function" === typeof d2) {
      var f2 = d2;
      d2 = function() {
        var a2 = hl(g2);
        f2.call(a2);
      };
    }
    var g2 = fl(b2, d2, a, 0, null, false, false, "", ql);
    a._reactRootContainer = g2;
    a[uf] = g2.current;
    sf(8 === a.nodeType ? a.parentNode : a);
    Sk();
    return g2;
  }
  for (; e2 = a.lastChild; )
    a.removeChild(e2);
  if ("function" === typeof d2) {
    var h3 = d2;
    d2 = function() {
      var a2 = hl(k2);
      h3.call(a2);
    };
  }
  var k2 = cl(a, 0, false, null, null, false, false, "", ql);
  a._reactRootContainer = k2;
  a[uf] = k2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  Sk(function() {
    gl(b2, k2, c2, d2);
  });
  return k2;
}
function sl(a, b2, c2, d2, e2) {
  var f2 = c2._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e2) {
      var h3 = e2;
      e2 = function() {
        var a2 = hl(g2);
        h3.call(a2);
      };
    }
    gl(b2, g2, a, e2);
  } else
    g2 = rl(c2, b2, a, e2, d2);
  return hl(g2);
}
Ec = function(a) {
  switch (a.tag) {
    case 3:
      var b2 = a.stateNode;
      if (b2.current.memoizedState.isDehydrated) {
        var c2 = tc(b2.pendingLanes);
        0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
      }
      break;
    case 13:
      Sk(function() {
        var b3 = Zg(a, 1);
        if (null !== b3) {
          var c3 = L();
          mh(b3, a, 1, c3);
        }
      }), jl(a, 1);
  }
};
Fc = function(a) {
  if (13 === a.tag) {
    var b2 = Zg(a, 134217728);
    if (null !== b2) {
      var c2 = L();
      mh(b2, a, 134217728, c2);
    }
    jl(a, 134217728);
  }
};
Gc = function(a) {
  if (13 === a.tag) {
    var b2 = lh(a), c2 = Zg(a, b2);
    if (null !== c2) {
      var d2 = L();
      mh(c2, a, b2, d2);
    }
    jl(a, b2);
  }
};
Hc = function() {
  return C;
};
Ic = function(a, b2) {
  var c2 = C;
  try {
    return C = a, b2();
  } finally {
    C = c2;
  }
};
yb = function(a, b2, c2) {
  switch (b2) {
    case "input":
      bb(a, c2);
      b2 = c2.name;
      if ("radio" === c2.type && null != b2) {
        for (c2 = a; c2.parentNode; )
          c2 = c2.parentNode;
        c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
        for (b2 = 0; b2 < c2.length; b2++) {
          var d2 = c2[b2];
          if (d2 !== a && d2.form === a.form) {
            var e2 = Db(d2);
            if (!e2)
              throw Error(p$1(90));
            Wa(d2);
            bb(d2, e2);
          }
        }
      }
      break;
    case "textarea":
      ib(a, c2);
      break;
    case "select":
      b2 = c2.value, null != b2 && fb(a, !!c2.multiple, b2, false);
  }
};
Gb = Rk;
Hb = Sk;
var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua$1.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
  a = Zb(a);
  return null === a ? null : a.stateNode;
}, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!wl.isDisabled && wl.supportsFiber)
    try {
      kc = wl.inject(vl), lc = wl;
    } catch (a) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
reactDom_production_min.createPortal = function(a, b2) {
  var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!ol(b2))
    throw Error(p$1(200));
  return dl(a, b2, null, c2);
};
reactDom_production_min.createRoot = function(a, b2) {
  if (!ol(a))
    throw Error(p$1(299));
  var c2 = false, d2 = "", e2 = ll;
  null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e2 = b2.onRecoverableError));
  b2 = cl(a, 1, false, null, null, c2, false, d2, e2);
  a[uf] = b2.current;
  sf(8 === a.nodeType ? a.parentNode : a);
  return new ml(b2);
};
reactDom_production_min.findDOMNode = function(a) {
  if (null == a)
    return null;
  if (1 === a.nodeType)
    return a;
  var b2 = a._reactInternals;
  if (void 0 === b2) {
    if ("function" === typeof a.render)
      throw Error(p$1(188));
    a = Object.keys(a).join(",");
    throw Error(p$1(268, a));
  }
  a = Zb(b2);
  a = null === a ? null : a.stateNode;
  return a;
};
reactDom_production_min.flushSync = function(a) {
  return Sk(a);
};
reactDom_production_min.hydrate = function(a, b2, c2) {
  if (!pl(b2))
    throw Error(p$1(200));
  return sl(null, a, b2, true, c2);
};
reactDom_production_min.hydrateRoot = function(a, b2, c2) {
  if (!ol(a))
    throw Error(p$1(405));
  var d2 = null != c2 && c2.hydratedSources || null, e2 = false, f2 = "", g2 = ll;
  null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e2 = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
  b2 = fl(b2, null, a, 1, null != c2 ? c2 : null, e2, false, f2, g2);
  a[uf] = b2.current;
  sf(a);
  if (d2)
    for (a = 0; a < d2.length; a++)
      c2 = d2[a], e2 = c2._getVersion, e2 = e2(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e2] : b2.mutableSourceEagerHydrationData.push(
        c2,
        e2
      );
  return new nl(b2);
};
reactDom_production_min.render = function(a, b2, c2) {
  if (!pl(b2))
    throw Error(p$1(200));
  return sl(null, a, b2, false, c2);
};
reactDom_production_min.unmountComponentAtNode = function(a) {
  if (!pl(a))
    throw Error(p$1(40));
  return a._reactRootContainer ? (Sk(function() {
    sl(null, null, a, false, function() {
      a._reactRootContainer = null;
      a[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Rk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
  if (!pl(c2))
    throw Error(p$1(200));
  if (null == a || void 0 === a._reactInternals)
    throw Error(p$1(38));
  return sl(a, b2, c2, false, d2);
};
reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
var m$1 = reactDomExports;
{
  client.createRoot = m$1.createRoot;
  client.hydrateRoot = m$1.hydrateRoot;
}
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === void 0 ? true : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e2) {
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from$1 = String.fromCharCode;
var assign$2 = Object.assign;
function hash$1(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim$1(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index2) {
  return value.charCodeAt(index2) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback2) {
  return array.map(callback2).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position$1 = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props2, children, length2) {
  return { value, root, parent, type, props: props2, children, line, column, length: length2, return: "" };
}
function copy(root, props2) {
  return assign$2(node("", null, null, "", null, null, 0), root, { length: -root.length }, props2);
}
function char() {
  return character;
}
function prev() {
  character = position$1 > 0 ? charat(characters, --position$1) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position$1 < length ? charat(characters, position$1++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position$1);
}
function caret() {
  return position$1;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position$1 = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim$1(slice(position$1 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position$1;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position$1;
}
function commenter(type, index2) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index2, position$1 - 1) + "*" + from$1(type === 47 ? type : next());
}
function identifier(index2) {
  while (!token(peek()))
    next();
  return slice(index2, position$1);
}
function compile(value) {
  return dealloc(parse$2("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse$2(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props2 = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index2, offset, rules, points, type, props2 = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse$2(characters2, root, reference, reference, props2, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse$2(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props2 = [], length2), children), rules, children, length2, points, rule ? props2 : children);
                    break;
                  default:
                    parse$2(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index2 = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from$1(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index2, offset, rules, points, type, props2, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size2 = sizeof(rule);
  for (var i = 0, j = 0, k2 = 0; i < index2; ++i)
    for (var x2 = 0, y2 = substr(value, post + 1, post = abs(j = points[i])), z2 = value; x2 < size2; ++x2)
      if (z2 = trim$1(j > 0 ? rule[x2] + " " + y2 : replace(y2, /&\f/g, rule[x2])))
        props2[k2++] = z2;
  return node(value, root, parent, offset === 0 ? RULESET : type, props2, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from$1(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback2) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback2(children[i], i, children, callback2) || "";
  return output;
}
function stringify(element, index2, children, callback2) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback2) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback2)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index2, children, callback2) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index2, children, callback2) || "";
    return output;
  };
}
function rulesheet(callback2) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback2(element);
    }
  };
}
var weakMemoize = function weakMemoize2(func) {
  var cache = /* @__PURE__ */ new WeakMap();
  return function(arg) {
    if (cache.has(arg)) {
      return cache.get(arg);
    }
    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};
function memoize$2(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index2] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position$1);
};
var toRules = function toRules2(parsed, points) {
  var index2 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index2] = 1;
        }
        parsed[index2] += identifierWithPointTracking(position$1 - 1, points, index2);
        break;
      case 2:
        parsed[index2] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index2] = peek() === 58 ? "&\f" : "";
          points[index2] = parsed[index2].length;
          break;
        }
      default:
        parsed[index2] += from$1(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value, parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k2 = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k2++) {
      element.props[k2] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
function prefix$1(value, length2) {
  switch (hash$1(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix$1(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index2, children, callback2) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix$1(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback2);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy(element, {
                    props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback2);
                case "::placeholder":
                  return serialize([copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback2);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options) {
  var key = options.key;
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  var inserted = {};
  var container2;
  var nodesToHydrate = [];
  {
    container2 = options.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  {
    var currentSheet;
    var finalizingPlugins = [stringify, rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize(compile(styles2), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container: container2,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
function _extends$4() {
  _extends$4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r$1 = b ? Symbol.for("react.memo") : 60115, t$1 = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
function z(a) {
  if ("object" === typeof a && null !== a) {
    var u2 = a.$$typeof;
    switch (u2) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t$1:
              case r$1:
              case h:
                return a;
              default:
                return u2;
            }
        }
      case d:
        return u2;
    }
  }
}
function A(a) {
  return z(a) === m;
}
reactIs_production_min.AsyncMode = l;
reactIs_production_min.ConcurrentMode = m;
reactIs_production_min.ContextConsumer = k;
reactIs_production_min.ContextProvider = h;
reactIs_production_min.Element = c;
reactIs_production_min.ForwardRef = n;
reactIs_production_min.Fragment = e;
reactIs_production_min.Lazy = t$1;
reactIs_production_min.Memo = r$1;
reactIs_production_min.Portal = d;
reactIs_production_min.Profiler = g;
reactIs_production_min.StrictMode = f;
reactIs_production_min.Suspense = p;
reactIs_production_min.isAsyncMode = function(a) {
  return A(a) || z(a) === l;
};
reactIs_production_min.isConcurrentMode = A;
reactIs_production_min.isContextConsumer = function(a) {
  return z(a) === k;
};
reactIs_production_min.isContextProvider = function(a) {
  return z(a) === h;
};
reactIs_production_min.isElement = function(a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};
reactIs_production_min.isForwardRef = function(a) {
  return z(a) === n;
};
reactIs_production_min.isFragment = function(a) {
  return z(a) === e;
};
reactIs_production_min.isLazy = function(a) {
  return z(a) === t$1;
};
reactIs_production_min.isMemo = function(a) {
  return z(a) === r$1;
};
reactIs_production_min.isPortal = function(a) {
  return z(a) === d;
};
reactIs_production_min.isProfiler = function(a) {
  return z(a) === g;
};
reactIs_production_min.isStrictMode = function(a) {
  return z(a) === f;
};
reactIs_production_min.isSuspense = function(a) {
  return z(a) === p;
};
reactIs_production_min.isValidElementType = function(a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t$1 || a.$$typeof === r$1 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};
reactIs_production_min.typeOf = z;
{
  reactIs$1.exports = reactIs_production_min;
}
var reactIsExports = reactIs$1.exports;
var reactIs = reactIsExports;
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var isBrowser$4 = true;
function getRegisteredStyles(registered, registeredStyles, classNames2) {
  var rawClassName = "";
  classNames2.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser$4 === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h3 = 0;
  var k2, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k2 = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k2 = /* Math.imul(k, m): */
    (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
    k2 ^= /* k >>> r: */
    k2 >>> 24;
    h3 = /* Math.imul(k, m): */
    (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h3 ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h3 ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h3 ^= str.charCodeAt(i) & 255;
      h3 = /* Math.imul(h, m): */
      (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
  }
  h3 ^= h3 >>> 13;
  h3 = /* Math.imul(h, m): */
  (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
  return ((h3 ^ h3 >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize$2(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      }
      break;
    }
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && false) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              string += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    styles2 += strings[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles2 += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      styles2 += strings[i];
    }
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match2[1];
  }
  var name = murmur2(styles2) + identifierName;
  return {
    name,
    styles: styles2,
    next: cursor
  };
};
var syncFallback = function syncFallback2(create) {
  return create();
};
var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;
var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ reactExports.forwardRef(function(props2, ref) {
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props2, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ reactExports.createContext({});
var getTheme$1 = function getTheme2(outerTheme, theme2) {
  if (typeof theme2 === "function") {
    var mergedTheme = theme2(outerTheme);
    return mergedTheme;
  }
  return _extends$4({}, outerTheme, theme2);
};
var createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
  return weakMemoize(function(theme2) {
    return getTheme$1(outerTheme, theme2);
  });
});
var ThemeProvider$1 = function ThemeProvider2(props2) {
  var theme2 = reactExports.useContext(ThemeContext);
  if (props2.theme !== theme2) {
    theme2 = createCacheWithTheme(theme2)(props2.theme);
  }
  return /* @__PURE__ */ reactExports.createElement(ThemeContext.Provider, {
    value: theme2
  }, props2.children);
};
var Global = /* @__PURE__ */ withEmotionCache(function(props2, cache) {
  var styles2 = props2.styles;
  var serialized = serializeStyles([styles2], void 0, reactExports.useContext(ThemeContext));
  var sheetRef = reactExports.useRef();
  useInsertionEffectWithLayoutFallback(function() {
    var key = cache.key + "-global";
    var sheet = new cache.sheet.constructor({
      key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }
    if (node2 !== null) {
      rehydrating = true;
      node2.setAttribute("data-emotion", key);
      sheet.hydrate([node2]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function() {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffectWithLayoutFallback(function() {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== void 0) {
      insertStyles(cache, serialized.next, true);
    }
    if (sheet.tags.length) {
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }
    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});
function css$2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
var keyframes$1 = function keyframes2() {
  var insertable = css$2.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString3() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};
var css$1 = String.raw;
var vhPolyfill = css$1`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
var CSSPolyfill = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Global, { styles: vhPolyfill });
var CSSReset = ({ scope = "" }) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  Global,
  {
    styles: css$1`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
  }
);
function getErrorMessage(hook, provider) {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext$2(options = {}) {
  const {
    name,
    strict = true,
    hookName = "useContext",
    providerName = "Provider",
    errorMessage,
    defaultValue
  } = options;
  const Context = reactExports.createContext(defaultValue);
  Context.displayName = name;
  function useContext() {
    var _a4;
    const context2 = reactExports.useContext(Context);
    if (!context2 && strict) {
      const error = new Error(
        errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName)
      );
      error.name = "ContextError";
      (_a4 = Error.captureStackTrace) == null ? void 0 : _a4.call(Error, error, useContext);
      throw error;
    }
    return context2;
  }
  return [Context.Provider, useContext, Context];
}
var [PortalManagerContextProvider, usePortalManager] = createContext$2({
  strict: false,
  name: "PortalManagerContext"
});
function PortalManager(props2) {
  const { children, zIndex } = props2;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalManagerContextProvider, { value: { zIndex }, children });
}
PortalManager.displayName = "PortalManager";
var useSafeLayoutEffect$1 = Boolean(globalThis == null ? void 0 : globalThis.document) ? reactExports.useLayoutEffect : reactExports.useEffect;
var [PortalContextProvider, usePortalContext] = createContext$2({
  strict: false,
  name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = `.chakra-portal`;
var Container = (props2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  "div",
  {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props2.zIndex,
      top: 0,
      left: 0,
      right: 0
      // NB: Don't add `bottom: 0`, it makes the entire app unusable
      // @see https://github.com/chakra-ui/chakra-ui/issues/3201
    },
    children: props2.children
  }
);
var DefaultPortal = (props2) => {
  const { appendToParentPortal, children } = props2;
  const [tempNode, setTempNode] = reactExports.useState(null);
  const portal = reactExports.useRef(null);
  const [, forceUpdate] = reactExports.useState({});
  reactExports.useEffect(() => forceUpdate({}), []);
  const parentPortal = usePortalContext();
  const manager = usePortalManager();
  useSafeLayoutEffect$1(() => {
    if (!tempNode)
      return;
    const doc = tempNode.ownerDocument;
    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
    if (!host)
      return;
    portal.current = doc.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate({});
    const portalNode = portal.current;
    return () => {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, [tempNode]);
  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { zIndex: manager == null ? void 0 : manager.zIndex, children }) : children;
  return portal.current ? reactDomExports.createPortal(
    /* @__PURE__ */ jsxRuntimeExports.jsx(PortalContextProvider, { value: portal.current, children: _children }),
    portal.current
  ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
    "span",
    {
      ref: (el2) => {
        if (el2)
          setTempNode(el2);
      }
    }
  );
};
var ContainerPortal = (props2) => {
  const { children, containerRef, appendToParentPortal } = props2;
  const containerEl = containerRef.current;
  const host = containerEl != null ? containerEl : typeof window !== "undefined" ? document.body : void 0;
  const portal = reactExports.useMemo(() => {
    const node2 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node2)
      node2.className = PORTAL_CLASSNAME;
    return node2;
  }, [containerEl]);
  const [, forceUpdate] = reactExports.useState({});
  useSafeLayoutEffect$1(() => forceUpdate({}), []);
  useSafeLayoutEffect$1(() => {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return () => {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(PortalContextProvider, { value: appendToParentPortal ? portal : null, children }),
      portal
    );
  }
  return null;
};
function Portal(props2) {
  const portalProps = {
    appendToParentPortal: true,
    ...props2
  };
  const { containerRef, ...rest } = portalProps;
  return containerRef ? /* @__PURE__ */ jsxRuntimeExports.jsx(ContainerPortal, { containerRef, ...rest }) : /* @__PURE__ */ jsxRuntimeExports.jsx(DefaultPortal, { ...rest });
}
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
Portal.displayName = "Portal";
function useTheme() {
  const theme2 = reactExports.useContext(
    ThemeContext
  );
  if (!theme2) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme2;
}
var ColorModeContext = reactExports.createContext({});
ColorModeContext.displayName = "ColorModeContext";
function useColorMode() {
  const context2 = reactExports.useContext(ColorModeContext);
  if (context2 === void 0) {
    throw new Error("useColorMode must be used within a ColorModeProvider");
  }
  return context2;
}
function useColorModeValue(light, dark) {
  const { colorMode } = useColorMode();
  return colorMode === "dark" ? dark : light;
}
var classNames = {
  light: "chakra-ui-light",
  dark: "chakra-ui-dark"
};
function getColorModeUtils(options = {}) {
  const { preventTransition = true } = options;
  const utils2 = {
    setDataset: (value) => {
      const cleanup2 = preventTransition ? utils2.preventTransition() : void 0;
      document.documentElement.dataset.theme = value;
      document.documentElement.style.colorScheme = value;
      cleanup2 == null ? void 0 : cleanup2();
    },
    setClassName(dark) {
      document.body.classList.add(dark ? classNames.dark : classNames.light);
      document.body.classList.remove(dark ? classNames.light : classNames.dark);
    },
    query() {
      return window.matchMedia("(prefers-color-scheme: dark)");
    },
    getSystemTheme(fallback) {
      var _a4;
      const dark = (_a4 = utils2.query().matches) != null ? _a4 : fallback === "dark";
      return dark ? "dark" : "light";
    },
    addListener(fn) {
      const mql = utils2.query();
      const listener = (e2) => {
        fn(e2.matches ? "dark" : "light");
      };
      if (typeof mql.addListener === "function")
        mql.addListener(listener);
      else
        mql.addEventListener("change", listener);
      return () => {
        if (typeof mql.removeListener === "function")
          mql.removeListener(listener);
        else
          mql.removeEventListener("change", listener);
      };
    },
    preventTransition() {
      const css2 = document.createElement("style");
      css2.appendChild(
        document.createTextNode(
          `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
        )
      );
      document.head.appendChild(css2);
      return () => {
        (() => window.getComputedStyle(document.body))();
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            document.head.removeChild(css2);
          });
        });
      };
    }
  };
  return utils2;
}
var STORAGE_KEY = "chakra-ui-color-mode";
function createLocalStorageManager(key) {
  return {
    ssr: false,
    type: "localStorage",
    get(init2) {
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init2;
      let value;
      try {
        value = localStorage.getItem(key) || init2;
      } catch (e2) {
      }
      return value || init2;
    },
    set(value) {
      try {
        localStorage.setItem(key, value);
      } catch (e2) {
      }
    }
  };
}
var localStorageManager = createLocalStorageManager(STORAGE_KEY);
var noop$3 = () => {
};
function getTheme(manager, fallback) {
  return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
}
function ColorModeProvider(props2) {
  const {
    value,
    children,
    options: {
      useSystemColorMode,
      initialColorMode,
      disableTransitionOnChange
    } = {},
    colorModeManager = localStorageManager
  } = props2;
  const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
  const [colorMode, rawSetColorMode] = reactExports.useState(
    () => getTheme(colorModeManager, defaultColorMode)
  );
  const [resolvedColorMode, setResolvedColorMode] = reactExports.useState(
    () => getTheme(colorModeManager)
  );
  const { getSystemTheme, setClassName, setDataset, addListener: addListener2 } = reactExports.useMemo(
    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),
    [disableTransitionOnChange]
  );
  const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
  const setColorMode = reactExports.useCallback(
    (value2) => {
      const resolved = value2 === "system" ? getSystemTheme() : value2;
      rawSetColorMode(resolved);
      setClassName(resolved === "dark");
      setDataset(resolved);
      colorModeManager.set(resolved);
    },
    [colorModeManager, getSystemTheme, setClassName, setDataset]
  );
  useSafeLayoutEffect$1(() => {
    if (initialColorMode === "system") {
      setResolvedColorMode(getSystemTheme());
    }
  }, []);
  reactExports.useEffect(() => {
    const managerValue = colorModeManager.get();
    if (managerValue) {
      setColorMode(managerValue);
      return;
    }
    if (initialColorMode === "system") {
      setColorMode("system");
      return;
    }
    setColorMode(defaultColorMode);
  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
  const toggleColorMode = reactExports.useCallback(() => {
    setColorMode(resolvedValue === "dark" ? "light" : "dark");
  }, [resolvedValue, setColorMode]);
  reactExports.useEffect(() => {
    if (!useSystemColorMode)
      return;
    return addListener2(setColorMode);
  }, [useSystemColorMode, addListener2, setColorMode]);
  const context2 = reactExports.useMemo(
    () => ({
      colorMode: value != null ? value : resolvedValue,
      toggleColorMode: value ? noop$3 : toggleColorMode,
      setColorMode: value ? noop$3 : setColorMode,
      forced: value !== void 0
    }),
    [resolvedValue, toggleColorMode, setColorMode, value]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ColorModeContext.Provider, { value: context2, children });
}
ColorModeProvider.displayName = "ColorModeProvider";
function useChakra() {
  const colorModeResult = useColorMode();
  const theme2 = useTheme();
  return { ...colorModeResult, theme: theme2 };
}
function getBreakpointValue(theme2, value, fallback) {
  var _a4, _b3;
  if (value == null)
    return value;
  const getValue = (val) => {
    var _a22, _b22;
    return (_b22 = (_a22 = theme2.__breakpoints) == null ? void 0 : _a22.asArray) == null ? void 0 : _b22[val];
  };
  return (_b3 = (_a4 = getValue(value)) != null ? _a4 : getValue(fallback)) != null ? _b3 : fallback;
}
function getTokenValue(theme2, value, fallback) {
  var _a4, _b3;
  if (value == null)
    return value;
  const getValue = (val) => {
    var _a22, _b22;
    return (_b22 = (_a22 = theme2.__cssMap) == null ? void 0 : _a22[val]) == null ? void 0 : _b22.value;
  };
  return (_b3 = (_a4 = getValue(value)) != null ? _a4 : getValue(fallback)) != null ? _b3 : fallback;
}
function getToken(scale2, token2, fallback) {
  const _token = Array.isArray(token2) ? token2 : [token2];
  const _fallback = Array.isArray(fallback) ? fallback : [fallback];
  return (theme2) => {
    const fallbackArr = _fallback.filter(Boolean);
    const result = _token.map((token22, index2) => {
      var _a4, _b3;
      if (scale2 === "breakpoints") {
        return getBreakpointValue(theme2, token22, (_a4 = fallbackArr[index2]) != null ? _a4 : token22);
      }
      const path = `${scale2}.${token22}`;
      return getTokenValue(theme2, path, (_b3 = fallbackArr[index2]) != null ? _b3 : token22);
    });
    return Array.isArray(token2) ? result : result[0];
  };
}
var cx = (...classNames2) => classNames2.filter(Boolean).join(" ");
function isObject$2(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}
function runIfFn$2(valueOrFn, ...args) {
  return isFunction$4(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
var isFunction$4 = (value) => typeof value === "function";
var dataAttr = (condition) => condition ? "" : void 0;
var ariaAttr = (condition) => condition ? true : void 0;
function callAllHandlers$1(...fns) {
  return function func(event2) {
    fns.some((fn) => {
      fn == null ? void 0 : fn(event2);
      return event2 == null ? void 0 : event2.defaultPrevented;
    });
  };
}
var lodash_mergewith = { exports: {} };
lodash_mergewith.exports;
(function(module, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types2 = freeModule && freeModule.require && freeModule.require("util").types;
      if (types2) {
        return types2;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e2) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function baseTimes(n2, iteratee) {
    var index2 = -1, result = Array(n2);
    while (++index2 < n2) {
      result[index2] = iteratee(index2);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function overArg(func, transform2) {
    return function(arg) {
      return func(transform2(arg));
    };
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var maskSrcKey = function() {
    var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid2 ? "Symbol(src)_1." + uid2 : "";
  }();
  var nativeObjectToString = objectProto.toString;
  var objectCtorString = funcToString.call(Object);
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  var Buffer2 = moduleExports ? root.Buffer : void 0, Symbol2 = root.Symbol, Uint8Array2 = root.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  var defineProperty2 = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e2) {
    }
  }();
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeMax = Math.max, nativeNow = Date.now;
  var Map2 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto) {
      if (!isObject2(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  function Hash(entries) {
    var index2 = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length2) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index2 = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length2) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  function listCacheDelete(key) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index2 == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index2, 1);
    }
    --this.size;
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    return index2 < 0 ? void 0 : data[index2][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index2][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index2 = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index2 < length2) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size2 = data.size;
    data.set(key, value);
    this.size += data.size == size2 ? 0 : 1;
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack2(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  Stack2.prototype.clear = stackClear;
  Stack2.prototype["delete"] = stackDelete;
  Stack2.prototype.get = stackGet;
  Stack2.prototype.has = stackHas;
  Stack2.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length2 = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex(key, length2)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignMergeValue(object, key, value) {
    if (value !== void 0 && !eq2(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty2.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  function assocIndexOf(array, key) {
    var length2 = array.length;
    while (length2--) {
      if (eq2(array[length2][0], key)) {
        return length2;
      }
    }
    return -1;
  }
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty2) {
      defineProperty2(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  var baseFor = createBaseFor();
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  function baseIsNative(value) {
    if (!isObject2(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  function baseKeysIn(object) {
    if (!isObject2(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack2());
      if (isObject2(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray2(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject2(objValue) || isFunction2(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  var baseSetToString = !defineProperty2 ? identity : function(func, string) {
    return defineProperty2(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string),
      "writable": true
    });
  };
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
    buffer.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array) {
    var index2 = -1, length2 = source.length;
    array || (array = Array(length2));
    while (++index2 < length2) {
      array[index2] = source[index2];
    }
    return array;
  }
  function copyObject(source, props2, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index2 = -1, length2 = props2.length;
    while (++index2 < length2) {
      var key = props2[index2];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index2 = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard2 = length2 > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
      if (guard2 && isIterateeCall(sources[0], sources[1], guard2)) {
        customizer = length2 < 3 ? void 0 : customizer;
        length2 = 1;
      }
      object = Object(object);
      while (++index2 < length2) {
        var source = sources[index2];
        if (source) {
          assigner(object, source, index2, customizer);
        }
      }
      return object;
    });
  }
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index2 = -1, iterable = Object(object), props2 = keysFunc(object), length2 = props2.length;
      while (length2--) {
        var key = props2[fromRight ? length2 : ++index2];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  function getRawTag(value) {
    var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e2) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function isIndex(value, length2) {
    var type = typeof value;
    length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
    return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
  }
  function isIterateeCall(value, index2, object) {
    if (!isObject2(object)) {
      return false;
    }
    var type = typeof index2;
    if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
      return eq2(object[index2], value);
    }
    return false;
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  function overRest(func, start, transform2) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index2 = -1, length2 = nativeMax(args.length - start, 0), array = Array(length2);
      while (++index2 < length2) {
        array[index2] = args[start + index2];
      }
      index2 = -1;
      var otherArgs = Array(start + 1);
      while (++index2 < start) {
        otherArgs[index2] = args[index2];
      }
      otherArgs[start] = transform2(array);
      return apply(func, this, otherArgs);
    };
  }
  function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  var setToString = shortOut(baseSetToString);
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e2) {
      }
      try {
        return func + "";
      } catch (e2) {
      }
    }
    return "";
  }
  function eq2(value, other) {
    return value === other || value !== value && other !== other;
  }
  var isArguments = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArray2 = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction2(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  var isBuffer2 = nativeIsBuffer || stubFalse;
  function isFunction2(value) {
    if (!isObject2(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject2(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  function isPlainObject2(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });
  function constant(value) {
    return function() {
      return value;
    };
  }
  function identity(value) {
    return value;
  }
  function stubFalse() {
    return false;
  }
  module.exports = mergeWith2;
})(lodash_mergewith, lodash_mergewith.exports);
var lodash_mergewithExports = lodash_mergewith.exports;
const mergeWith = /* @__PURE__ */ getDefaultExportFromCjs(lodash_mergewithExports);
var isImportant = (value) => /!(important)?$/.test(value);
var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar = (scale2, value) => (theme2) => {
  const valueStr = String(value);
  const important = isImportant(valueStr);
  const valueWithoutImportant = withoutImportant(valueStr);
  const key = scale2 ? `${scale2}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject$2(theme2.__cssMap) && key in theme2.__cssMap ? theme2.__cssMap[key].varRef : value;
  transformed = withoutImportant(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform(options) {
  const { scale: scale2, transform: transform2, compose } = options;
  const fn = (value, theme2) => {
    var _a4;
    const _value = tokenToCSSVar(scale2, value)(theme2);
    let result = (_a4 = transform2 == null ? void 0 : transform2(_value, theme2)) != null ? _a4 : _value;
    if (compose) {
      result = compose(result, theme2);
    }
    return result;
  };
  return fn;
}
var pipe$1 = (...fns) => (v2) => fns.reduce((a, b2) => b2(a), v2);
function toConfig(scale2, transform2) {
  return (property) => {
    const result = { property, scale: scale2 };
    result.transform = createTransform({
      scale: scale2,
      transform: transform2
    });
    return result;
  };
}
var getRtl = ({ rtl, ltr }) => (theme2) => theme2.direction === "rtl" ? rtl : ltr;
function logical(options) {
  const { property, scale: scale2, transform: transform2 } = options;
  return {
    scale: scale2,
    property: getRtl(property),
    transform: scale2 ? createTransform({
      scale: scale2,
      compose: transform2
    }) : transform2
  };
}
var transformTemplate = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate
  ].join(" ");
}
function getTransformGpuTemplate() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate
  ].join(" ");
}
var filterTemplate = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace = (str) => str.trim();
function parseGradient(value, theme2) {
  if (value == null || globalSet.has(value))
    return value;
  const prevent = isCSSFunction(value) || globalSet.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results = regex.exec(value);
  const type = results == null ? void 0 : results[1];
  const values = results == null ? void 0 : results[2];
  if (!type || !values)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction2 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
  stops.unshift(direction2);
  const _values = stops.map((stop) => {
    if (valueSet.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
    const key = `colors.${_color}`;
    const color2 = key in theme2.__cssMap ? theme2.__cssMap[key].varRef : _color;
    return _stopOrFunc ? [
      color2,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color2;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform = (value, theme2) => parseGradient(value, theme2 != null ? theme2 : {});
function isCssVar(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap = (str) => (value) => `${str}(${value})`;
var transformFunctions = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate;
  },
  ring(value) {
    return getRingTemplate(transformFunctions.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate();
    if (value === "auto-gpu")
      return getTransformGpuTemplate();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme2) {
    const map2 = { left: "right", right: "left" };
    return theme2.direction === "rtl" ? map2[value] : value;
  },
  degree(value) {
    if (isCssVar(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform,
  blur: wrap("blur"),
  opacity: wrap("opacity"),
  brightness: wrap("brightness"),
  contrast: wrap("contrast"),
  dropShadow: wrap("drop-shadow"),
  grayscale: wrap("grayscale"),
  hueRotate: (value) => wrap("hue-rotate")(transformFunctions.degree(value)),
  invert: wrap("invert"),
  saturate: wrap("saturate"),
  sepia: wrap("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a4;
    const { space: space2, divide: divide2 } = (_a4 = flexDirectionTemplate[value]) != null ? _a4 : {};
    const result = { flexDirection: value };
    if (space2)
      result[space2] = 1;
    if (divide2)
      result[divide2] = 1;
    return result;
  }
};
var t = {
  borderWidths: toConfig("borderWidths"),
  borderStyles: toConfig("borderStyles"),
  colors: toConfig("colors"),
  borders: toConfig("borders"),
  gradients: toConfig("gradients", transformFunctions.gradient),
  radii: toConfig("radii", transformFunctions.px),
  space: toConfig("space", pipe$1(transformFunctions.vh, transformFunctions.px)),
  spaceT: toConfig("space", pipe$1(transformFunctions.vh, transformFunctions.px)),
  degreeT(property) {
    return { property, transform: transformFunctions.degree };
  },
  prop(property, scale2, transform2) {
    return {
      property,
      scale: scale2,
      ...scale2 && {
        transform: createTransform({ scale: scale2, transform: transform2 })
      }
    };
  },
  propT(property, transform2) {
    return { property, transform: transform2 };
  },
  sizes: toConfig("sizes", pipe$1(transformFunctions.vh, transformFunctions.px)),
  sizesT: toConfig("sizes", pipe$1(transformFunctions.vh, transformFunctions.fraction)),
  shadows: toConfig("shadows"),
  logical,
  blur: toConfig("blur", transformFunctions.blur)
};
var background = {
  background: t.colors("background"),
  backgroundColor: t.colors("backgroundColor"),
  backgroundImage: t.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions.bgClip },
  bgSize: t.prop("backgroundSize"),
  bgPosition: t.prop("backgroundPosition"),
  bg: t.colors("background"),
  bgColor: t.colors("backgroundColor"),
  bgPos: t.prop("backgroundPosition"),
  bgRepeat: t.prop("backgroundRepeat"),
  bgAttachment: t.prop("backgroundAttachment"),
  bgGradient: t.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions.bgClip }
};
Object.assign(background, {
  bgImage: background.backgroundImage,
  bgImg: background.backgroundImage
});
var border = {
  border: t.borders("border"),
  borderWidth: t.borderWidths("borderWidth"),
  borderStyle: t.borderStyles("borderStyle"),
  borderColor: t.colors("borderColor"),
  borderRadius: t.radii("borderRadius"),
  borderTop: t.borders("borderTop"),
  borderBlockStart: t.borders("borderBlockStart"),
  borderTopLeftRadius: t.radii("borderTopLeftRadius"),
  borderStartStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t.radii("borderTopRightRadius"),
  borderStartEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t.borders("borderRight"),
  borderInlineEnd: t.borders("borderInlineEnd"),
  borderBottom: t.borders("borderBottom"),
  borderBlockEnd: t.borders("borderBlockEnd"),
  borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t.radii("borderBottomRightRadius"),
  borderLeft: t.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t.borders(["borderLeft", "borderRight"]),
  borderInline: t.borders("borderInline"),
  borderY: t.borders(["borderTop", "borderBottom"]),
  borderBlock: t.borders("borderBlock"),
  borderTopWidth: t.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
  borderTopColor: t.colors("borderTopColor"),
  borderBlockStartColor: t.colors("borderBlockStartColor"),
  borderTopStyle: t.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t.colors("borderBottomColor"),
  borderBlockEndColor: t.colors("borderBlockEndColor"),
  borderBottomStyle: t.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t.colors("borderLeftColor"),
  borderInlineStartColor: t.colors("borderInlineStartColor"),
  borderLeftStyle: t.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
  borderRightColor: t.colors("borderRightColor"),
  borderInlineEndColor: t.colors("borderInlineEndColor"),
  borderRightStyle: t.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border, {
  rounded: border.borderRadius,
  roundedTop: border.borderTopRadius,
  roundedTopLeft: border.borderTopLeftRadius,
  roundedTopRight: border.borderTopRightRadius,
  roundedTopStart: border.borderStartStartRadius,
  roundedTopEnd: border.borderStartEndRadius,
  roundedBottom: border.borderBottomRadius,
  roundedBottomLeft: border.borderBottomLeftRadius,
  roundedBottomRight: border.borderBottomRightRadius,
  roundedBottomStart: border.borderEndStartRadius,
  roundedBottomEnd: border.borderEndEndRadius,
  roundedLeft: border.borderLeftRadius,
  roundedRight: border.borderRightRadius,
  roundedStart: border.borderInlineStartRadius,
  roundedEnd: border.borderInlineEndRadius,
  borderStart: border.borderInlineStart,
  borderEnd: border.borderInlineEnd,
  borderTopStartRadius: border.borderStartStartRadius,
  borderTopEndRadius: border.borderStartEndRadius,
  borderBottomStartRadius: border.borderEndStartRadius,
  borderBottomEndRadius: border.borderEndEndRadius,
  borderStartRadius: border.borderInlineStartRadius,
  borderEndRadius: border.borderInlineEndRadius,
  borderStartWidth: border.borderInlineStartWidth,
  borderEndWidth: border.borderInlineEndWidth,
  borderStartColor: border.borderInlineStartColor,
  borderEndColor: border.borderInlineEndColor,
  borderStartStyle: border.borderInlineStartStyle,
  borderEndStyle: border.borderInlineEndStyle
});
var color$2 = {
  color: t.colors("color"),
  textColor: t.colors("color"),
  fill: t.colors("fill"),
  stroke: t.colors("stroke")
};
var effect = {
  boxShadow: t.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect, {
  shadow: effect.boxShadow
});
var filter$2 = {
  filter: { transform: transformFunctions.filter },
  blur: t.blur("--chakra-blur"),
  brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
  contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
  hueRotate: t.propT("--chakra-hue-rotate", transformFunctions.hueRotate),
  invert: t.propT("--chakra-invert", transformFunctions.invert),
  saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
  dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
  backdropFilter: { transform: transformFunctions.backdropFilter },
  backdropBlur: t.blur("--chakra-backdrop-blur"),
  backdropBrightness: t.propT(
    "--chakra-backdrop-brightness",
    transformFunctions.brightness
  ),
  backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
  backdropHueRotate: t.propT(
    "--chakra-backdrop-hue-rotate",
    transformFunctions.hueRotate
  ),
  backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
  backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
};
var flexbox = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t.space("gap"),
  rowGap: t.space("rowGap"),
  columnGap: t.space("columnGap")
};
Object.assign(flexbox, {
  flexDir: flexbox.flexDirection
});
var grid = {
  gridGap: t.space("gridGap"),
  gridColumnGap: t.space("gridColumnGap"),
  gridRowGap: t.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions.outline },
  outlineOffset: true,
  outlineColor: t.colors("outlineColor")
};
var layout$1 = {
  width: t.sizesT("width"),
  inlineSize: t.sizesT("inlineSize"),
  height: t.sizes("height"),
  blockSize: t.sizes("blockSize"),
  boxSize: t.sizes(["width", "height"]),
  minWidth: t.sizes("minWidth"),
  minInlineSize: t.sizes("minInlineSize"),
  minHeight: t.sizes("minHeight"),
  minBlockSize: t.sizes("minBlockSize"),
  maxWidth: t.sizes("maxWidth"),
  maxInlineSize: t.sizes("maxInlineSize"),
  maxHeight: t.sizes("maxHeight"),
  maxBlockSize: t.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  aspectRatio: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme2) => {
      var _a4, _b3, _c2;
      const breakpoint = (_c2 = (_b3 = (_a4 = theme2.__breakpoints) == null ? void 0 : _a4.get(value)) == null ? void 0 : _b3.minW) != null ? _c2 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme2) => {
      var _a4, _b3, _c2;
      const breakpoint = (_c2 = (_b3 = (_a4 = theme2.__breakpoints) == null ? void 0 : _a4.get(value)) == null ? void 0 : _b3._minW) != null ? _c2 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t.propT("float", transformFunctions.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout$1, {
  w: layout$1.width,
  h: layout$1.height,
  minW: layout$1.minWidth,
  maxW: layout$1.maxWidth,
  minH: layout$1.minHeight,
  maxH: layout$1.maxHeight,
  overscroll: layout$1.overscrollBehavior,
  overscrollX: layout$1.overscrollBehaviorX,
  overscrollY: layout$1.overscrollBehaviorY
});
var list = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t.prop("listStyleImage")
};
function get$1(obj, path, fallback, index2) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index2 = 0; index2 < key.length; index2 += 1) {
    if (!obj)
      break;
    obj = obj[key[index2]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize$1 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index2) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map2 = cache.get(obj);
    if (map2.has(path)) {
      return map2.get(path);
    }
    const value = fn(obj, path, fallback, index2);
    map2.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet$1 = memoize$1(get$1);
var srOnly = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority = (theme2, key, styles2) => {
  const result = {};
  const obj = memoizedGet$1(theme2, key, {});
  for (const prop in obj) {
    const isInStyles = prop in styles2 && styles2[prop] != null;
    if (!isInStyles)
      result[prop] = obj[prop];
  }
  return result;
};
var others = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly;
      if (value === "focusable")
        return srFocusable;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme2, styles2) => getWithPriority(theme2, `layerStyles.${value}`, styles2)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme2, styles2) => getWithPriority(theme2, `textStyles.${value}`, styles2)
  },
  apply: {
    processResult: true,
    transform: (value, theme2, styles2) => getWithPriority(theme2, value, styles2)
  }
};
var position = {
  position: true,
  pos: t.prop("position"),
  zIndex: t.prop("zIndex", "zIndices"),
  inset: t.spaceT("inset"),
  insetX: t.spaceT(["left", "right"]),
  insetInline: t.spaceT("insetInline"),
  insetY: t.spaceT(["top", "bottom"]),
  insetBlock: t.spaceT("insetBlock"),
  top: t.spaceT("top"),
  insetBlockStart: t.spaceT("insetBlockStart"),
  bottom: t.spaceT("bottom"),
  insetBlockEnd: t.spaceT("insetBlockEnd"),
  left: t.spaceT("left"),
  insetInlineStart: t.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t.spaceT("right"),
  insetInlineEnd: t.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position, {
  insetStart: position.insetInlineStart,
  insetEnd: position.insetInlineEnd
});
var ring = {
  ring: { transform: transformFunctions.ring },
  ringColor: t.colors("--chakra-ring-color"),
  ringOffset: t.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t.colors("--chakra-ring-offset-color"),
  ringInset: t.prop("--chakra-ring-inset")
};
var space = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
Object.assign(space, {
  m: space.margin,
  mt: space.marginTop,
  mr: space.marginRight,
  me: space.marginInlineEnd,
  marginEnd: space.marginInlineEnd,
  mb: space.marginBottom,
  ml: space.marginLeft,
  ms: space.marginInlineStart,
  marginStart: space.marginInlineStart,
  mx: space.marginX,
  my: space.marginY,
  p: space.padding,
  pt: space.paddingTop,
  py: space.paddingY,
  px: space.paddingX,
  pb: space.paddingBottom,
  pl: space.paddingLeft,
  ps: space.paddingInlineStart,
  paddingStart: space.paddingInlineStart,
  pr: space.paddingRight,
  pe: space.paddingInlineEnd,
  paddingEnd: space.paddingInlineEnd
});
var textDecoration = {
  textDecorationColor: t.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t.shadows("textShadow")
};
var transform = {
  clipPath: true,
  transform: t.propT("transform", transformFunctions.transform),
  transformOrigin: true,
  translateX: t.spaceT("--chakra-translate-x"),
  translateY: t.spaceT("--chakra-translate-y"),
  skewX: t.degreeT("--chakra-skew-x"),
  skewY: t.degreeT("--chakra-skew-y"),
  scaleX: t.prop("--chakra-scale-x"),
  scaleY: t.prop("--chakra-scale-y"),
  scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t.degreeT("--chakra-rotate")
};
var transition$1 = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t.prop("transitionDuration", "transition.duration"),
  transitionProperty: t.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography$1 = {
  fontFamily: t.prop("fontFamily", "fonts"),
  fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
  fontWeight: t.prop("fontWeight", "fontWeights"),
  lineHeight: t.prop("lineHeight", "lineHeights"),
  letterSpacing: t.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  // scroll margin
  scrollMargin: t.spaceT("scrollMargin"),
  scrollMarginTop: t.spaceT("scrollMarginTop"),
  scrollMarginBottom: t.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t.spaceT("scrollMarginLeft"),
  scrollMarginRight: t.spaceT("scrollMarginRight"),
  scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  // scroll padding
  scrollPadding: t.spaceT("scrollPadding"),
  scrollPaddingTop: t.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t.spaceT("scrollPaddingRight"),
  scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference(operand) {
  if (isObject$2(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
var add$1 = (...operands) => `calc(${toExpression("+", ...operands)})`;
var subtract$1 = (...operands) => `calc(${toExpression("-", ...operands)})`;
var multiply$1 = (...operands) => `calc(${toExpression("*", ...operands)})`;
var divide$1 = (...operands) => `calc(${toExpression("/", ...operands)})`;
var negate$1 = (x2) => {
  const value = resolveReference(x2);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply$1(value, -1);
};
var calc$1 = Object.assign(
  (x2) => ({
    add: (...operands) => calc$1(add$1(x2, ...operands)),
    subtract: (...operands) => calc$1(subtract$1(x2, ...operands)),
    multiply: (...operands) => calc$1(multiply$1(x2, ...operands)),
    divide: (...operands) => calc$1(divide$1(x2, ...operands)),
    negate: () => calc$1(negate$1(x2)),
    toString: () => x2.toString()
  }),
  {
    add: add$1,
    subtract: subtract$1,
    multiply: multiply$1,
    divide: divide$1,
    negate: negate$1
  }
);
function replaceWhiteSpace$1(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape$2(value) {
  const valueStr = replaceWhiteSpace$1(value.toString());
  return escapeSymbol(escapeDot(valueStr));
}
function escapeDot(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal2 = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal2 ? value.replace(".", `\\.`) : value;
}
function escapeSymbol(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix$1(value, prefix2 = "") {
  return [prefix2, value].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition(value, prefix2 = "") {
  return escape$2(`--${addPrefix$1(value, prefix2)}`);
}
function cssVar$1(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference(cssVariable, fallback)
  };
}
function defineCssVars(scope, keys2) {
  const vars2 = {};
  for (const key of keys2) {
    if (Array.isArray(key)) {
      const [name, fallback] = key;
      vars2[name] = cssVar$1(`${scope}-${name}`, fallback);
      continue;
    }
    vars2[key] = cssVar$1(`${scope}-${key}`);
  }
  return vars2;
}
function getLastItem(array) {
  const length2 = array == null ? 0 : array.length;
  return length2 ? array[length2 - 1] : void 0;
}
function analyzeCSSValue2(value) {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
}
function px$1(value) {
  if (value == null)
    return value;
  const { unitless } = analyzeCSSValue2(value);
  return unitless || typeof value === "number" ? `${value}px` : value;
}
var sortByBreakpointValue = (a, b2) => parseInt(a[1], 10) > parseInt(b2[1], 10) ? 1 : -1;
var sortBps = (breakpoints2) => Object.fromEntries(Object.entries(breakpoints2).sort(sortByBreakpointValue));
function normalize(breakpoints2) {
  const sorted = sortBps(breakpoints2);
  return Object.assign(Object.values(sorted), sorted);
}
function keys(breakpoints2) {
  const value = Object.keys(sortBps(breakpoints2));
  return new Set(value);
}
function subtract2(value) {
  var _a4;
  if (!value)
    return value;
  value = (_a4 = px$1(value)) != null ? _a4 : value;
  const OFFSET = -0.02;
  return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m2) => `${parseFloat(m2) + OFFSET}`);
}
function toMediaQueryString(min, max) {
  const query = ["@media screen"];
  if (min)
    query.push("and", `(min-width: ${px$1(min)})`);
  if (max)
    query.push("and", `(max-width: ${px$1(max)})`);
  return query.join(" ");
}
function analyzeBreakpoints(breakpoints2) {
  var _a4;
  if (!breakpoints2)
    return null;
  breakpoints2.base = (_a4 = breakpoints2.base) != null ? _a4 : "0px";
  const normalized = normalize(breakpoints2);
  const queries = Object.entries(breakpoints2).sort(sortByBreakpointValue).map(([breakpoint, minW], index2, entry) => {
    var _a22;
    let [, maxW] = (_a22 = entry[index2 + 1]) != null ? _a22 : [];
    maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
    return {
      _minW: subtract2(minW),
      breakpoint,
      minW,
      maxW,
      maxWQuery: toMediaQueryString(null, maxW),
      minWQuery: toMediaQueryString(minW),
      minMaxQuery: toMediaQueryString(minW, maxW)
    };
  });
  const _keys = keys(breakpoints2);
  const _keysArr = Array.from(_keys.values());
  return {
    keys: _keys,
    normalized,
    isResponsive(test2) {
      const keys2 = Object.keys(test2);
      return keys2.length > 0 && keys2.every((key) => _keys.has(key));
    },
    asObject: sortBps(breakpoints2),
    asArray: normalize(breakpoints2),
    details: queries,
    get(key) {
      return queries.find((q2) => q2.breakpoint === key);
    },
    media: [
      null,
      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
    ],
    /**
     * Converts the object responsive syntax to array syntax
     *
     * @example
     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]
     */
    toArrayValue(test2) {
      if (!isObject$2(test2)) {
        throw new Error("toArrayValue: value must be an object");
      }
      const result = _keysArr.map((bp) => {
        var _a22;
        return (_a22 = test2[bp]) != null ? _a22 : null;
      });
      while (getLastItem(result) === null) {
        result.pop();
      }
      return result;
    },
    /**
     * Converts the array responsive syntax to object syntax
     *
     * @example
     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }
     */
    toObjectValue(test2) {
      if (!Array.isArray(test2)) {
        throw new Error("toObjectValue: value must be an array");
      }
      return test2.reduce((acc, value, index2) => {
        const key = _keysArr[index2];
        if (key != null && value != null)
          acc[key] = value;
        return acc;
      }, {});
    }
  };
}
var state = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup = (fn) => merge$2((v2) => fn(v2, "&"), "[role=group]", "[data-group]", ".group");
var toPeer = (fn) => merge$2((v2) => fn(v2, "~ &"), "[data-peer]", ".peer");
var merge$2 = (fn, ...selectors) => selectors.map(fn).join(", ");
var pseudoSelectors = {
  /**
   * Styles for CSS selector `&:hover`
   */
  _hover: "&:hover, &[data-hover]",
  /**
   * Styles for CSS Selector `&:active`
   */
  _active: "&:active, &[data-active]",
  /**
   * Styles for CSS selector `&:focus`
   *
   */
  _focus: "&:focus, &[data-focus]",
  /**
   * Styles for the highlighted state.
   */
  _highlighted: "&[data-highlighted]",
  /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */
  _focusWithin: "&:focus-within",
  /**
   * Styles to apply when this element has received focus via tabbing
   * - CSS Selector `&:focus-visible`
   */
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   * - `&[disabled]`
   */
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  /**
   * Styles for CSS Selector `&:readonly`
   */
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */
  _before: "&::before",
  /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */
  _after: "&::after",
  /**
   * Styles for CSS selector `&:empty`
   */
  _empty: "&:empty",
  /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */
  _checked: "&[aria-checked=true], &[data-checked]",
  /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */
  _valid: "&[data-valid], &[data-state=valid]",
  /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */
  _loading: "&[data-loading], &[aria-busy=true]",
  /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */
  _selected: "&[aria-selected=true], &[data-selected]",
  /**
   * Styles for CSS Selector `[hidden=true]`
   */
  _hidden: "&[hidden], &[data-hidden]",
  /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */
  _autofill: "&:-webkit-autofill",
  /**
   * Styles for CSS Selector `&:nth-child(even)`
   */
  _even: "&:nth-of-type(even)",
  /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */
  _odd: "&:nth-of-type(odd)",
  /**
   * Styles for CSS Selector `&:first-of-type`
   */
  _first: "&:first-of-type",
  /**
   * Styles for CSS selector `&::first-letter`
   *
   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
   * @example
   * ```jsx
   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
   * ```
   */
  _firstLetter: "&::first-letter",
  /**
   * Styles for CSS Selector `&:last-of-type`
   */
  _last: "&:last-of-type",
  /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */
  _notFirst: "&:not(:first-of-type)",
  /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */
  _notLast: "&:not(:last-of-type)",
  /**
   * Styles for CSS Selector `&:visited`
   */
  _visited: "&:visited",
  /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */
  _activeLink: "&[aria-current=page]",
  /**
   * Used to style the current step within a process
   * Styles for CSS Selector `&[aria-current=step]`
   */
  _activeStep: "&[aria-current=step]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
   */
  _groupHover: toGroup(state.hover),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
   */
  _peerHover: toPeer(state.hover),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
   */
  _groupFocus: toGroup(state.focus),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
   */
  _peerFocus: toPeer(state.focus),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
   */
  _groupFocusVisible: toGroup(state.focusVisible),
  /**
   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
   */
  _peerFocusVisible: toPeer(state.focusVisible),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
   */
  _groupActive: toGroup(state.active),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
   */
  _peerActive: toPeer(state.active),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
   */
  _groupDisabled: toGroup(state.disabled),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
   */
  _peerDisabled: toPeer(state.disabled),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
   */
  _groupInvalid: toGroup(state.invalid),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
   */
  _peerInvalid: toPeer(state.invalid),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
   */
  _groupChecked: toGroup(state.checked),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
   */
  _peerChecked: toPeer(state.checked),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
   */
  _groupFocusWithin: toGroup(state.focusWithin),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
   */
  _peerFocusWithin: toPeer(state.focusWithin),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
   */
  _peerPlaceholderShown: toPeer(state.placeholderShown),
  /**
   * Styles for CSS Selector `&::placeholder`.
   */
  _placeholder: "&::placeholder",
  /**
   * Styles for CSS Selector `&:placeholder-shown`.
   */
  _placeholderShown: "&:placeholder-shown",
  /**
   * Styles for CSS Selector `&:fullscreen`.
   */
  _fullScreen: "&:fullscreen",
  /**
   * Styles for CSS Selector `&::selection`
   */
  _selection: "&::selection",
  /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when a parent element or this element has `dir="rtl"`
   */
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  /**
   * Styles for CSS Selector `[dir=ltr] &`
   * It is applied when a parent element or this element has `dir="ltr"`
   */
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * It is used when the user has requested the system use a light or dark color theme.
   */
  _mediaDark: "@media (prefers-color-scheme: dark)",
  /**
   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
   * It is used when the user has requested the system to reduce the amount of animations.
   */
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
  /**
   * Styles for the CSS Selector `&[data-orientation=horizontal]`
   */
  _horizontal: "&[data-orientation=horizontal]",
  /**
   * Styles for the CSS Selector `&[data-orientation=vertical]`
   */
  _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames = Object.keys(
  pseudoSelectors
);
function tokenToCssVar(token2, prefix2) {
  return cssVar$1(String(token2).replace(/\./g, "-"), void 0, prefix2);
}
function createThemeVars(flatTokens, options) {
  let cssVars = {};
  const cssMap = {};
  for (const [token2, tokenValue] of Object.entries(flatTokens)) {
    const { isSemantic, value } = tokenValue;
    const { variable, reference } = tokenToCssVar(token2, options == null ? void 0 : options.cssVarPrefix);
    if (!isSemantic) {
      if (token2.startsWith("space")) {
        const keys2 = token2.split(".");
        const [firstKey, ...referenceKeys] = keys2;
        const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
        const negativeValue = calc$1.negate(value);
        const negatedReference = calc$1.negate(reference);
        cssMap[negativeLookupKey] = {
          value: negativeValue,
          var: variable,
          varRef: negatedReference
        };
      }
      cssVars[variable] = value;
      cssMap[token2] = {
        value,
        var: variable,
        varRef: reference
      };
      continue;
    }
    const lookupToken = (maybeToken) => {
      const scale2 = String(token2).split(".")[0];
      const withScale = [scale2, maybeToken].join(".");
      const resolvedTokenValue = flatTokens[withScale];
      if (!resolvedTokenValue)
        return maybeToken;
      const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);
      return reference2;
    };
    const normalizedValue = isObject$2(value) ? value : { default: value };
    cssVars = mergeWith(
      cssVars,
      Object.entries(normalizedValue).reduce(
        (acc, [conditionAlias, conditionValue]) => {
          var _a4, _b3;
          if (!conditionValue)
            return acc;
          const tokenReference = lookupToken(`${conditionValue}`);
          if (conditionAlias === "default") {
            acc[variable] = tokenReference;
            return acc;
          }
          const conditionSelector = (_b3 = (_a4 = pseudoSelectors) == null ? void 0 : _a4[conditionAlias]) != null ? _b3 : conditionAlias;
          acc[conditionSelector] = { [variable]: tokenReference };
          return acc;
        },
        {}
      )
    );
    cssMap[token2] = {
      value: reference,
      var: variable,
      varRef: reference
    };
  }
  return {
    cssVars,
    cssMap
  };
}
function omit$2(object, keysToOmit = []) {
  const clone2 = Object.assign({}, object);
  for (const key of keysToOmit) {
    if (key in clone2) {
      delete clone2[key];
    }
  }
  return clone2;
}
function pick(object, keysToPick) {
  const result = {};
  for (const key of keysToPick) {
    if (key in object) {
      result[key] = object[key];
    }
  }
  return result;
}
function isObject5(value) {
  return typeof value === "object" && value != null && !Array.isArray(value);
}
function walkObject(target, predicate, options = {}) {
  const { stop, getKey } = options;
  function inner(value, path = []) {
    var _a4;
    if (isObject5(value) || Array.isArray(value)) {
      const result = {};
      for (const [prop, child] of Object.entries(value)) {
        const key = (_a4 = getKey == null ? void 0 : getKey(prop)) != null ? _a4 : prop;
        const childPath = [...path, key];
        if (stop == null ? void 0 : stop(value, childPath)) {
          return predicate(value, path);
        }
        result[key] = inner(child, childPath);
      }
      return result;
    }
    return predicate(value, path);
  }
  return inner(target);
}
var tokens = [
  "colors",
  "borders",
  "borderWidths",
  "borderStyles",
  "fonts",
  "fontSizes",
  "fontWeights",
  "gradients",
  "letterSpacings",
  "lineHeights",
  "radii",
  "space",
  "shadows",
  "sizes",
  "zIndices",
  "transition",
  "blur",
  "breakpoints"
];
function extractTokens(theme2) {
  const _tokens = tokens;
  return pick(theme2, _tokens);
}
function extractSemanticTokens(theme2) {
  return theme2.semanticTokens;
}
function omitVars(rawTheme) {
  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
  return cleanTheme;
}
var isSemanticCondition = (key) => pseudoPropNames.includes(key) || "default" === key;
function flattenTokens({
  tokens: tokens2,
  semanticTokens: semanticTokens2
}) {
  const result = {};
  walkObject(tokens2, (value, path) => {
    if (value == null)
      return;
    result[path.join(".")] = { isSemantic: false, value };
  });
  walkObject(
    semanticTokens2,
    (value, path) => {
      if (value == null)
        return;
      result[path.join(".")] = { isSemantic: true, value };
    },
    {
      stop: (value) => Object.keys(value).every(isSemanticCondition)
    }
  );
  return result;
}
function toCSSVar(rawTheme) {
  var _a4;
  const theme2 = omitVars(rawTheme);
  const tokens2 = extractTokens(theme2);
  const semanticTokens2 = extractSemanticTokens(theme2);
  const flatTokens = flattenTokens({ tokens: tokens2, semanticTokens: semanticTokens2 });
  const cssVarPrefix = (_a4 = theme2.config) == null ? void 0 : _a4.cssVarPrefix;
  const {
    /**
     * This is more like a dictionary of tokens users will type `green.500`,
     * and their equivalent css variable.
     */
    cssMap,
    /**
     * The extracted css variables will be stored here, and used in
     * the emotion's <Global/> component to attach variables to `:root`
     */
    cssVars
  } = createThemeVars(flatTokens, { cssVarPrefix });
  const defaultCssVars = {
    "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-ring-offset-width": "0px",
    "--chakra-ring-offset-color": "#fff",
    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
    "--chakra-ring-offset-shadow": "0 0 #0000",
    "--chakra-ring-shadow": "0 0 #0000",
    "--chakra-space-x-reverse": "0",
    "--chakra-space-y-reverse": "0"
  };
  Object.assign(theme2, {
    __cssVars: { ...defaultCssVars, ...cssVars },
    __cssMap: cssMap,
    __breakpoints: analyzeBreakpoints(theme2.breakpoints)
  });
  return theme2;
}
var systemProps = mergeWith(
  {},
  background,
  border,
  color$2,
  flexbox,
  layout$1,
  filter$2,
  ring,
  interactivity,
  grid,
  others,
  position,
  effect,
  space,
  scroll,
  typography$1,
  textDecoration,
  transform,
  list,
  transition$1
);
var layoutSystem = Object.assign({}, space, layout$1, flexbox, grid, position);
var layoutPropNames = Object.keys(
  layoutSystem
);
var propNames = [...Object.keys(systemProps), ...pseudoPropNames];
var styleProps = { ...systemProps, ...pseudoSelectors };
var isStyleProp = (prop) => prop in styleProps;
var expandResponsive = (styles2) => (theme2) => {
  if (!theme2.__breakpoints)
    return styles2;
  const { isResponsive, toArrayValue, media: medias } = theme2.__breakpoints;
  const computedStyles = {};
  for (const key in styles2) {
    let value = runIfFn$2(styles2[key], theme2);
    if (value == null)
      continue;
    value = isObject$2(value) && isResponsive(value) ? toArrayValue(value) : value;
    if (!Array.isArray(value)) {
      computedStyles[key] = value;
      continue;
    }
    const queries = value.slice(0, medias.length).length;
    for (let index2 = 0; index2 < queries; index2 += 1) {
      const media = medias == null ? void 0 : medias[index2];
      if (!media) {
        computedStyles[key] = value[index2];
        continue;
      }
      computedStyles[media] = computedStyles[media] || {};
      if (value[index2] == null) {
        continue;
      }
      computedStyles[media][key] = value[index2];
    }
  }
  return computedStyles;
};
function splitByComma(value) {
  const chunks = [];
  let chunk = "";
  let inParens = false;
  for (let i = 0; i < value.length; i++) {
    const char2 = value[i];
    if (char2 === "(") {
      inParens = true;
      chunk += char2;
    } else if (char2 === ")") {
      inParens = false;
      chunk += char2;
    } else if (char2 === "," && !inParens) {
      chunks.push(chunk);
      chunk = "";
    } else {
      chunk += char2;
    }
  }
  chunk = chunk.trim();
  if (chunk) {
    chunks.push(chunk);
  }
  return chunks;
}
function isCssVar2(value) {
  return /^var\(--.+\)$/.test(value);
}
var isCSSVariableTokenValue = (key, value) => key.startsWith("--") && typeof value === "string" && !isCssVar2(value);
var resolveTokenValue = (theme2, value) => {
  var _a4, _b3;
  if (value == null)
    return value;
  const getVar = (val) => {
    var _a22, _b22;
    return (_b22 = (_a22 = theme2.__cssMap) == null ? void 0 : _a22[val]) == null ? void 0 : _b22.varRef;
  };
  const getValue = (val) => {
    var _a22;
    return (_a22 = getVar(val)) != null ? _a22 : val;
  };
  const [tokenValue, fallbackValue] = splitByComma(value);
  value = (_b3 = (_a4 = getVar(tokenValue)) != null ? _a4 : getValue(fallbackValue)) != null ? _b3 : getValue(value);
  return value;
};
function getCss(options) {
  const { configs = {}, pseudos = {}, theme: theme2 } = options;
  const css2 = (stylesOrFn, nested = false) => {
    var _a4, _b3, _c2;
    const _styles = runIfFn$2(stylesOrFn, theme2);
    const styles2 = expandResponsive(_styles)(theme2);
    let computedStyles = {};
    for (let key in styles2) {
      const valueOrFn = styles2[key];
      let value = runIfFn$2(valueOrFn, theme2);
      if (key in pseudos) {
        key = pseudos[key];
      }
      if (isCSSVariableTokenValue(key, value)) {
        value = resolveTokenValue(theme2, value);
      }
      let config2 = configs[key];
      if (config2 === true) {
        config2 = { property: key };
      }
      if (isObject$2(value)) {
        computedStyles[key] = (_a4 = computedStyles[key]) != null ? _a4 : {};
        computedStyles[key] = mergeWith(
          {},
          computedStyles[key],
          css2(value, true)
        );
        continue;
      }
      let rawValue = (_c2 = (_b3 = config2 == null ? void 0 : config2.transform) == null ? void 0 : _b3.call(config2, value, theme2, _styles)) != null ? _c2 : value;
      rawValue = (config2 == null ? void 0 : config2.processResult) ? css2(rawValue, true) : rawValue;
      const configProperty = runIfFn$2(config2 == null ? void 0 : config2.property, theme2);
      if (!nested && (config2 == null ? void 0 : config2.static)) {
        const staticStyles = runIfFn$2(config2.static, theme2);
        computedStyles = mergeWith({}, computedStyles, staticStyles);
      }
      if (configProperty && Array.isArray(configProperty)) {
        for (const property of configProperty) {
          computedStyles[property] = rawValue;
        }
        continue;
      }
      if (configProperty) {
        if (configProperty === "&" && isObject$2(rawValue)) {
          computedStyles = mergeWith({}, computedStyles, rawValue);
        } else {
          computedStyles[configProperty] = rawValue;
        }
        continue;
      }
      if (isObject$2(rawValue)) {
        computedStyles = mergeWith({}, computedStyles, rawValue);
        continue;
      }
      computedStyles[key] = rawValue;
    }
    return computedStyles;
  };
  return css2;
}
var css = (styles2) => (theme2) => {
  const cssFn = getCss({
    theme: theme2,
    pseudos: pseudoSelectors,
    configs: systemProps
  });
  return cssFn(styles2);
};
function defineStyle(styles2) {
  return styles2;
}
function defineStyleConfig(config2) {
  return config2;
}
function createMultiStyleConfigHelpers(parts) {
  return {
    definePartsStyle(config2) {
      return config2;
    },
    defineMultiStyleConfig(config2) {
      return { parts, ...config2 };
    }
  };
}
function normalize2(value, toArray2) {
  if (Array.isArray(value))
    return value;
  if (isObject$2(value))
    return toArray2(value);
  if (value != null)
    return [value];
}
function getNextIndex(values, i) {
  for (let j = i + 1; j < values.length; j++) {
    if (values[j] != null)
      return j;
  }
  return -1;
}
function createResolver(theme2) {
  const breakpointUtil = theme2.__breakpoints;
  return function resolver(config2, prop, value, props2) {
    var _a4, _b3;
    if (!breakpointUtil)
      return;
    const result = {};
    const normalized = normalize2(value, breakpointUtil.toArrayValue);
    if (!normalized)
      return result;
    const len = normalized.length;
    const isSingle = len === 1;
    const isMultipart = !!config2.parts;
    for (let i = 0; i < len; i++) {
      const key = breakpointUtil.details[i];
      const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
      const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);
      const styles2 = runIfFn$2((_a4 = config2[prop]) == null ? void 0 : _a4[normalized[i]], props2);
      if (!styles2)
        continue;
      if (isMultipart) {
        (_b3 = config2.parts) == null ? void 0 : _b3.forEach((part) => {
          mergeWith(result, {
            [part]: isSingle ? styles2[part] : { [query]: styles2[part] }
          });
        });
        continue;
      }
      if (!isMultipart) {
        if (isSingle)
          mergeWith(result, styles2);
        else
          result[query] = styles2;
        continue;
      }
      result[query] = styles2;
    }
    return result;
  };
}
function resolveStyleConfig(config2) {
  return (props2) => {
    var _a4;
    const { variant, size: size2, theme: theme2 } = props2;
    const recipe = createResolver(theme2);
    return mergeWith(
      {},
      runIfFn$2((_a4 = config2.baseStyle) != null ? _a4 : {}, props2),
      recipe(config2, "sizes", size2, props2),
      recipe(config2, "variants", variant, props2)
    );
  };
}
function omitThemingProps(props2) {
  return omit$2(props2, ["styleConfig", "size", "variant", "colorScheme"]);
}
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};
var transition_default = transition;
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default = zIndices;
var borders$1 = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default = borders$1;
var breakpoints = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default = breakpoints;
var colors$1 = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default = colors$1;
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default = radii;
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;
var blur = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default = blur;
var typography = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default = typography;
var spacing = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes$m = {
  ...spacing,
  ...largeSizes,
  container
};
var sizes_default = sizes$m;
var foundations = {
  breakpoints: breakpoints_default,
  zIndices: z_index_default,
  radii: radius_default,
  blur: blur_default,
  colors: colors_default,
  ...typography_default,
  sizes: sizes_default,
  shadows: shadows_default,
  space: spacing,
  borders: borders_default,
  transition: transition_default
};
var { defineMultiStyleConfig: defineMultiStyleConfig$p, definePartsStyle: definePartsStyle$p } = createMultiStyleConfigHelpers([
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
]);
var $size$4 = cssVar$1("stepper-indicator-size");
var $iconSize = cssVar$1("stepper-icon-size");
var $titleFontSize = cssVar$1("stepper-title-font-size");
var $descFontSize = cssVar$1("stepper-description-font-size");
var $accentColor = cssVar$1("stepper-accent-color");
var baseStyle$F = definePartsStyle$p(({ colorScheme: c2 }) => ({
  stepper: {
    display: "flex",
    justifyContent: "space-between",
    gap: "4",
    "&[data-orientation=vertical]": {
      flexDirection: "column",
      alignItems: "flex-start"
    },
    "&[data-orientation=horizontal]": {
      flexDirection: "row",
      alignItems: "center"
    },
    [$accentColor.variable]: `colors.${c2}.500`,
    _dark: {
      [$accentColor.variable]: `colors.${c2}.200`
    }
  },
  title: {
    fontSize: $titleFontSize.reference,
    fontWeight: "medium"
  },
  description: {
    fontSize: $descFontSize.reference,
    color: "chakra-subtle-text"
  },
  number: {
    fontSize: $titleFontSize.reference
  },
  step: {
    flexShrink: 0,
    position: "relative",
    display: "flex",
    gap: "2",
    "&[data-orientation=horizontal]": {
      alignItems: "center"
    },
    flex: "1",
    "&:last-of-type:not([data-stretch])": {
      flex: "initial"
    }
  },
  icon: {
    flexShrink: 0,
    width: $iconSize.reference,
    height: $iconSize.reference
  },
  indicator: {
    flexShrink: 0,
    borderRadius: "full",
    width: $size$4.reference,
    height: $size$4.reference,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&[data-status=active]": {
      borderWidth: "2px",
      borderColor: $accentColor.reference
    },
    "&[data-status=complete]": {
      bg: $accentColor.reference,
      color: "chakra-inverse-text"
    },
    "&[data-status=incomplete]": {
      borderWidth: "2px"
    }
  },
  separator: {
    bg: "chakra-border-color",
    flex: "1",
    "&[data-status=complete]": {
      bg: $accentColor.reference
    },
    "&[data-orientation=horizontal]": {
      width: "100%",
      height: "2px",
      marginStart: "2"
    },
    "&[data-orientation=vertical]": {
      width: "2px",
      position: "absolute",
      height: "100%",
      maxHeight: `calc(100% - ${$size$4.reference} - 8px)`,
      top: `calc(${$size$4.reference} + 4px)`,
      insetStart: `calc(${$size$4.reference} / 2 - 1px)`
    }
  }
}));
var stepperTheme = defineMultiStyleConfig$p({
  baseStyle: baseStyle$F,
  sizes: {
    xs: definePartsStyle$p({
      stepper: {
        [$size$4.variable]: "sizes.4",
        [$iconSize.variable]: "sizes.3",
        [$titleFontSize.variable]: "fontSizes.xs",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    sm: definePartsStyle$p({
      stepper: {
        [$size$4.variable]: "sizes.6",
        [$iconSize.variable]: "sizes.4",
        [$titleFontSize.variable]: "fontSizes.sm",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    md: definePartsStyle$p({
      stepper: {
        [$size$4.variable]: "sizes.8",
        [$iconSize.variable]: "sizes.5",
        [$titleFontSize.variable]: "fontSizes.md",
        [$descFontSize.variable]: "fontSizes.sm"
      }
    }),
    lg: definePartsStyle$p({
      stepper: {
        [$size$4.variable]: "sizes.10",
        [$iconSize.variable]: "sizes.6",
        [$titleFontSize.variable]: "fontSizes.lg",
        [$descFontSize.variable]: "fontSizes.md"
      }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
function anatomy(name, map2 = {}) {
  let called = false;
  function assert() {
    if (!called) {
      called = true;
      return;
    }
    throw new Error(
      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
    );
  }
  function parts(...values) {
    assert();
    for (const part of values) {
      map2[part] = toPart(part);
    }
    return anatomy(name, map2);
  }
  function extend2(...parts2) {
    for (const part of parts2) {
      if (part in map2)
        continue;
      map2[part] = toPart(part);
    }
    return anatomy(name, map2);
  }
  function selectors() {
    const value = Object.fromEntries(
      Object.entries(map2).map(([key, part]) => [key, part.selector])
    );
    return value;
  }
  function classnames() {
    const value = Object.fromEntries(
      Object.entries(map2).map(([key, part]) => [key, part.className])
    );
    return value;
  }
  function toPart(part) {
    const el2 = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
    const attr = el2.filter(Boolean).join("__");
    const className = `chakra-${attr}`;
    const partObj = {
      className,
      selector: `.${className}`,
      toString: () => part
    };
    return partObj;
  }
  const __type = {};
  return {
    parts,
    toPart,
    extend: extend2,
    selectors,
    classnames,
    get keys() {
      return Object.keys(map2);
    },
    __type
  };
}
var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
anatomy("button").parts();
var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
anatomy("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = anatomy("editable").parts(
  "preview",
  "input",
  "textarea"
);
var formAnatomy = anatomy("form").parts(
  "container",
  "requiredIndicator",
  "helperText"
);
var formErrorAnatomy = anatomy("formError").parts("text", "icon");
var inputAnatomy = anatomy("input").parts(
  "addon",
  "field",
  "element",
  "group"
);
var listAnatomy = anatomy("list").parts("container", "item", "icon");
var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "icon", "command", "divider");
var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = anatomy("numberinput").parts(
  "root",
  "field",
  "stepperGroup",
  "stepper"
);
anatomy("pininput").parts("field");
var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = anatomy("progress").parts(
  "label",
  "filledTrack",
  "track"
);
var radioAnatomy = anatomy("radio").parts(
  "container",
  "control",
  "label"
);
var selectAnatomy = anatomy("select").parts("field", "icon");
var sliderAnatomy = anatomy("slider").parts(
  "container",
  "track",
  "thumb",
  "filledTrack",
  "mark"
);
var statAnatomy = anatomy("stat").parts(
  "container",
  "label",
  "helpText",
  "number",
  "icon"
);
var switchAnatomy = anatomy("switch").parts(
  "container",
  "track",
  "thumb",
  "label"
);
var tableAnatomy = anatomy("table").parts(
  "table",
  "thead",
  "tbody",
  "tr",
  "th",
  "td",
  "tfoot",
  "caption"
);
var tabsAnatomy = anatomy("tabs").parts(
  "root",
  "tab",
  "tablist",
  "tabpanel",
  "tabpanels",
  "indicator"
);
var tagAnatomy = anatomy("tag").parts(
  "container",
  "label",
  "closeButton"
);
var cardAnatomy = anatomy("card").parts(
  "container",
  "header",
  "body",
  "footer"
);
anatomy("stepper").parts(
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
);
function guard(low, high, value) {
  return Math.min(Math.max(low, value), high);
}
class ColorError extends Error {
  constructor(color2) {
    super(`Failed to parse color: "${color2}"`);
  }
}
var ColorError$1 = ColorError;
function parseToRgba(color2) {
  if (typeof color2 !== "string")
    throw new ColorError$1(color2);
  if (color2.trim().toLowerCase() === "transparent")
    return [0, 0, 0, 0];
  let normalizedColor = color2.trim();
  normalizedColor = namedColorRegex.test(color2) ? nameToHex(color2) : color2;
  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
  if (reducedHexMatch) {
    const arr = Array.from(reducedHexMatch).slice(1);
    return [...arr.slice(0, 3).map((x2) => parseInt(r(x2, 2), 16)), parseInt(r(arr[3] || "f", 2), 16) / 255];
  }
  const hexMatch = hexRegex.exec(normalizedColor);
  if (hexMatch) {
    const arr = Array.from(hexMatch).slice(1);
    return [...arr.slice(0, 3).map((x2) => parseInt(x2, 16)), parseInt(arr[3] || "ff", 16) / 255];
  }
  const rgbaMatch = rgbaRegex.exec(normalizedColor);
  if (rgbaMatch) {
    const arr = Array.from(rgbaMatch).slice(1);
    return [...arr.slice(0, 3).map((x2) => parseInt(x2, 10)), parseFloat(arr[3] || "1")];
  }
  const hslaMatch = hslaRegex.exec(normalizedColor);
  if (hslaMatch) {
    const [h3, s, l2, a] = Array.from(hslaMatch).slice(1).map(parseFloat);
    if (guard(0, 100, s) !== s)
      throw new ColorError$1(color2);
    if (guard(0, 100, l2) !== l2)
      throw new ColorError$1(color2);
    return [...hslToRgb(h3, s, l2), Number.isNaN(a) ? 1 : a];
  }
  throw new ColorError$1(color2);
}
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i) {
    hash2 = hash2 * 33 ^ str.charCodeAt(--i);
  }
  return (hash2 >>> 0) % 2341;
}
const colorToInt = (x2) => parseInt(x2.replace(/_/g, ""), 36);
const compressedColorMap = "1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce((acc, next2) => {
  const key = colorToInt(next2.substring(0, 3));
  const hex2 = colorToInt(next2.substring(3)).toString(16);
  let prefix2 = "";
  for (let i = 0; i < 6 - hex2.length; i++) {
    prefix2 += "0";
  }
  acc[key] = `${prefix2}${hex2}`;
  return acc;
}, {});
function nameToHex(color2) {
  const normalizedColorName = color2.toLowerCase().trim();
  const result = compressedColorMap[hash(normalizedColorName)];
  if (!result)
    throw new ColorError$1(color2);
  return `#${result}`;
}
const r = (str, amount) => Array.from(Array(amount)).map(() => str).join("");
const reducedHexRegex = new RegExp(`^#${r("([a-f0-9])", 3)}([a-f0-9])?$`, "i");
const hexRegex = new RegExp(`^#${r("([a-f0-9]{2})", 3)}([a-f0-9]{2})?$`, "i");
const rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(",\\s*(\\d+)\\s*", 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, "i");
const hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
const namedColorRegex = /^[a-z]+$/i;
const roundColor = (color2) => {
  return Math.round(color2 * 255);
};
const hslToRgb = (hue2, saturation, lightness) => {
  let l2 = lightness / 100;
  if (saturation === 0) {
    return [l2, l2, l2].map(roundColor);
  }
  const huePrime = (hue2 % 360 + 360) % 360 / 60;
  const chroma = (1 - Math.abs(2 * l2 - 1)) * (saturation / 100);
  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  let red = 0;
  let green = 0;
  let blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  const lightnessModification = l2 - chroma / 2;
  const finalRed = red + lightnessModification;
  const finalGreen = green + lightnessModification;
  const finalBlue = blue + lightnessModification;
  return [finalRed, finalGreen, finalBlue].map(roundColor);
};
function rgba$1(red, green, blue, alpha2) {
  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha2).toFixed(3))})`;
}
function transparentize$1(color2, amount) {
  const [r2, g2, b2, a] = parseToRgba(color2);
  return rgba$1(r2, g2, b2, a - amount);
}
function toHex(color2) {
  const [r2, g2, b2, a] = parseToRgba(color2);
  let hex2 = (x2) => {
    const h3 = guard(0, 255, x2).toString(16);
    return h3.length === 1 ? `0${h3}` : h3;
  };
  return `#${hex2(r2)}${hex2(g2)}${hex2(b2)}${a < 1 ? hex2(Math.round(a * 255)) : ""}`;
}
function dlv_es_default(t2, e2, l2, n2, r2) {
  for (e2 = e2.split ? e2.split(".") : e2, n2 = 0; n2 < e2.length; n2++)
    t2 = t2 ? t2[e2[n2]] : r2;
  return t2 === r2 ? l2 : t2;
}
var isEmptyObject = (obj) => Object.keys(obj).length === 0;
var getColor = (theme2, color2, fallback) => {
  const hex2 = dlv_es_default(theme2, `colors.${color2}`, color2);
  try {
    toHex(hex2);
    return hex2;
  } catch {
    return fallback != null ? fallback : "#000000";
  }
};
var getBrightness = (color2) => {
  const [r2, g2, b2] = parseToRgba(color2);
  return (r2 * 299 + g2 * 587 + b2 * 114) / 1e3;
};
var tone = (color2) => (theme2) => {
  const hex2 = getColor(theme2, color2);
  const brightness = getBrightness(hex2);
  const isDark2 = brightness < 128;
  return isDark2 ? "dark" : "light";
};
var isDark = (color2) => (theme2) => tone(color2)(theme2) === "dark";
var transparentize = (color2, opacity) => (theme2) => {
  const raw = getColor(theme2, color2);
  return transparentize$1(raw, 1 - opacity);
};
function generateStripe(size2 = "1rem", color2 = "rgba(255, 255, 255, 0.15)") {
  return {
    backgroundImage: `linear-gradient(
    45deg,
    ${color2} 25%,
    transparent 25%,
    transparent 50%,
    ${color2} 50%,
    ${color2} 75%,
    transparent 75%,
    transparent
  )`,
    backgroundSize: `${size2} ${size2}`
  };
}
var randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor(opts) {
  const fallback = randomHex();
  if (!opts || isEmptyObject(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList(opts.colors);
  }
  return fallback;
}
function randomColorFromString(str) {
  let hash2 = 0;
  if (str.length === 0)
    return hash2.toString();
  for (let i = 0; i < str.length; i += 1) {
    hash2 = str.charCodeAt(i) + ((hash2 << 5) - hash2);
    hash2 = hash2 & hash2;
  }
  let color2 = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash2 >> j * 8 & 255;
    color2 += `00${value.toString(16)}`.substr(-2);
  }
  return color2;
}
function randomColorFromList(str, list2) {
  let index2 = 0;
  if (str.length === 0)
    return list2[0];
  for (let i = 0; i < str.length; i += 1) {
    index2 = str.charCodeAt(i) + ((index2 << 5) - index2);
    index2 = index2 & index2;
  }
  index2 = (index2 % list2.length + list2.length) % list2.length;
  return list2[index2];
}
function randomFromList(list2) {
  return list2[Math.floor(Math.random() * list2.length)];
}
function mode(light, dark) {
  return (props2) => props2.colorMode === "dark" ? dark : light;
}
function orient(options) {
  const { orientation, vertical, horizontal } = options;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}
function toRef(operand) {
  if (isObject$2(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands) => `calc(${toExpr("+", ...operands)})`;
var subtract = (...operands) => `calc(${toExpr("-", ...operands)})`;
var multiply = (...operands) => `calc(${toExpr("*", ...operands)})`;
var divide = (...operands) => `calc(${toExpr("/", ...operands)})`;
var negate = (x2) => {
  const value = toRef(x2);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply(value, -1);
};
var calc = Object.assign(
  (x2) => ({
    add: (...operands) => calc(add(x2, ...operands)),
    subtract: (...operands) => calc(subtract(x2, ...operands)),
    multiply: (...operands) => calc(multiply(x2, ...operands)),
    divide: (...operands) => calc(divide(x2, ...operands)),
    negate: () => calc(negate(x2)),
    toString: () => x2.toString()
  }),
  {
    add,
    subtract,
    multiply,
    divide,
    negate
  }
);
function isDecimal(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape$1(value) {
  const valueStr = replaceWhiteSpace(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix(value, prefix2 = "") {
  return [prefix2, escape$1(value)].filter(Boolean).join("-");
}
function toVarRef(name, fallback) {
  return `var(${escape$1(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar(value, prefix2 = "") {
  return `--${addPrefix(value, prefix2)}`;
}
function cssVar(name, options) {
  const cssVariable = toVar(name, options == null ? void 0 : options.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
  };
}
function getFallback(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}
var { defineMultiStyleConfig: defineMultiStyleConfig$o, definePartsStyle: definePartsStyle$o } = createMultiStyleConfigHelpers(switchAnatomy.keys);
var $width = cssVar("switch-track-width");
var $height$1 = cssVar("switch-track-height");
var $diff = cssVar("switch-track-diff");
var diffValue = calc.subtract($width, $height$1);
var $translateX = cssVar("switch-thumb-x");
var $bg$f = cssVar("switch-bg");
var baseStyleTrack$2 = defineStyle((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width.reference],
    height: [$height$1.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg$f.variable]: "colors.gray.300",
    _dark: {
      [$bg$f.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg$f.variable]: `colors.${c2}.500`,
      _dark: {
        [$bg$f.variable]: `colors.${c2}.200`
      }
    },
    bg: $bg$f.reference
  };
});
var baseStyleThumb$1 = defineStyle({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height$1.reference],
  height: [$height$1.reference],
  _checked: {
    transform: `translateX(${$translateX.reference})`
  }
});
var baseStyle$E = definePartsStyle$o((props2) => ({
  container: {
    [$diff.variable]: diffValue,
    [$translateX.variable]: $diff.reference,
    _rtl: {
      [$translateX.variable]: calc($diff).negate().toString()
    }
  },
  track: baseStyleTrack$2(props2),
  thumb: baseStyleThumb$1
}));
var sizes$l = {
  sm: definePartsStyle$o({
    container: {
      [$width.variable]: "1.375rem",
      [$height$1.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle$o({
    container: {
      [$width.variable]: "1.875rem",
      [$height$1.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle$o({
    container: {
      [$width.variable]: "2.875rem",
      [$height$1.variable]: "sizes.6"
    }
  })
};
var switchTheme = defineMultiStyleConfig$o({
  baseStyle: baseStyle$E,
  sizes: sizes$l,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$n, definePartsStyle: definePartsStyle$n } = createMultiStyleConfigHelpers(tableAnatomy.keys);
var baseStyle$D = definePartsStyle$n({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles = defineStyle({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple = definePartsStyle$n((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props2),
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props2),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props2),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props2)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe = definePartsStyle$n((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props2),
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props2),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c2}.100`, `${c2}.700`)(props2),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props2)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(`${c2}.100`, `${c2}.700`)(props2)
          },
          td: {
            background: mode(`${c2}.100`, `${c2}.700`)(props2)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants$e = {
  simple: variantSimple,
  striped: variantStripe,
  unstyled: defineStyle({})
};
var sizes$k = {
  sm: definePartsStyle$n({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle$n({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle$n({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme = defineMultiStyleConfig$n({
  baseStyle: baseStyle$D,
  variants: variants$e,
  sizes: sizes$k,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});
var $fg$5 = cssVar$1("tabs-color");
var $bg$e = cssVar$1("tabs-bg");
var $border$3 = cssVar$1("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig$m, definePartsStyle: definePartsStyle$m } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
var baseStyleRoot$1 = defineStyle((props2) => {
  const { orientation } = props2;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab = defineStyle((props2) => {
  const { isFitted } = props2;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist = defineStyle((props2) => {
  const { align: align2 = "start", orientation } = props2;
  const alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align2],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel = defineStyle({
  p: 4
});
var baseStyle$C = definePartsStyle$m((props2) => ({
  root: baseStyleRoot$1(props2),
  tab: baseStyleTab(props2),
  tablist: baseStyleTablist(props2),
  tabpanel: baseStyleTabpanel
}));
var sizes$j = {
  sm: definePartsStyle$m({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle$m({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle$m({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine = definePartsStyle$m((props2) => {
  const { colorScheme: c2, orientation } = props2;
  const isVertical = orientation === "vertical";
  const borderProp = isVertical ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg$5.variable]: `colors.${c2}.600`,
        _dark: {
          [$fg$5.variable]: `colors.${c2}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg$e.variable]: "colors.gray.200",
        _dark: {
          [$bg$e.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg$5.reference,
      bg: $bg$e.reference
    }
  };
});
var variantEnclosed = definePartsStyle$m((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border$3.variable]: "transparent",
      _selected: {
        [$fg$5.variable]: `colors.${c2}.600`,
        [$border$3.variable]: `colors.white`,
        _dark: {
          [$fg$5.variable]: `colors.${c2}.300`,
          [$border$3.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border$3.reference
      },
      color: $fg$5.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored = definePartsStyle$m((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg$e.variable]: "colors.gray.50",
      _dark: {
        [$bg$e.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg$e.variable]: "colors.white",
        [$fg$5.variable]: `colors.${c2}.600`,
        _dark: {
          [$bg$e.variable]: "colors.gray.800",
          [$fg$5.variable]: `colors.${c2}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg$5.reference,
      bg: $bg$e.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded = definePartsStyle$m((props2) => {
  const { colorScheme: c2, theme: theme2 } = props2;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme2, `${c2}.700`),
        bg: getColor(theme2, `${c2}.100`)
      }
    }
  };
});
var variantSolidRounded = definePartsStyle$m((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg$5.variable]: "colors.gray.600",
      _dark: {
        [$fg$5.variable]: "inherit"
      },
      _selected: {
        [$fg$5.variable]: "colors.white",
        [$bg$e.variable]: `colors.${c2}.600`,
        _dark: {
          [$fg$5.variable]: "colors.gray.800",
          [$bg$e.variable]: `colors.${c2}.300`
        }
      },
      color: $fg$5.reference,
      bg: $bg$e.reference
    }
  };
});
var variantUnstyled$2 = definePartsStyle$m({});
var variants$d = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled$2
};
var tabsTheme = defineMultiStyleConfig$m({
  baseStyle: baseStyle$C,
  sizes: sizes$j,
  variants: variants$d,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});
var vars = defineCssVars("badge", ["bg", "color", "shadow"]);
var baseStyle$B = defineStyle({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var variantSolid$3 = defineStyle((props2) => {
  const { colorScheme: c2, theme: theme2 } = props2;
  const dark = transparentize(`${c2}.500`, 0.6)(theme2);
  return {
    [vars.bg.variable]: `colors.${c2}.500`,
    [vars.color.variable]: `colors.white`,
    _dark: {
      [vars.bg.variable]: dark,
      [vars.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle$1 = defineStyle((props2) => {
  const { colorScheme: c2, theme: theme2 } = props2;
  const darkBg = transparentize(`${c2}.200`, 0.16)(theme2);
  return {
    [vars.bg.variable]: `colors.${c2}.100`,
    [vars.color.variable]: `colors.${c2}.800`,
    _dark: {
      [vars.bg.variable]: darkBg,
      [vars.color.variable]: `colors.${c2}.200`
    }
  };
});
var variantOutline$2 = defineStyle((props2) => {
  const { colorScheme: c2, theme: theme2 } = props2;
  const darkColor = transparentize(`${c2}.200`, 0.8)(theme2);
  return {
    [vars.color.variable]: `colors.${c2}.500`,
    _dark: {
      [vars.color.variable]: darkColor
    },
    [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
  };
});
var variants$c = {
  solid: variantSolid$3,
  subtle: variantSubtle$1,
  outline: variantOutline$2
};
var badgeTheme = defineStyleConfig({
  baseStyle: baseStyle$B,
  variants: variants$c,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$l, definePartsStyle: definePartsStyle$l } = createMultiStyleConfigHelpers(tagAnatomy.keys);
var $bg$d = cssVar$1("tag-bg");
var $color = cssVar$1("tag-color");
var $shadow$3 = cssVar$1("tag-shadow");
var $minH = cssVar$1("tag-min-height");
var $minW = cssVar$1("tag-min-width");
var $fontSize$1 = cssVar$1("tag-font-size");
var $paddingX = cssVar$1("tag-padding-inline");
var baseStyleContainer$4 = defineStyle({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  [$color.variable]: vars.color.reference,
  [$bg$d.variable]: vars.bg.reference,
  [$shadow$3.variable]: vars.shadow.reference,
  color: $color.reference,
  bg: $bg$d.reference,
  boxShadow: $shadow$3.reference,
  borderRadius: "md",
  minH: $minH.reference,
  minW: $minW.reference,
  fontSize: $fontSize$1.reference,
  px: $paddingX.reference,
  _focusVisible: {
    [$shadow$3.variable]: "shadows.outline"
  }
});
var baseStyleLabel$4 = defineStyle({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton$3 = defineStyle({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle$A = definePartsStyle$l({
  container: baseStyleContainer$4,
  label: baseStyleLabel$4,
  closeButton: baseStyleCloseButton$3
});
var sizes$i = {
  sm: definePartsStyle$l({
    container: {
      [$minH.variable]: "sizes.5",
      [$minW.variable]: "sizes.5",
      [$fontSize$1.variable]: "fontSizes.xs",
      [$paddingX.variable]: "space.2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle$l({
    container: {
      [$minH.variable]: "sizes.6",
      [$minW.variable]: "sizes.6",
      [$fontSize$1.variable]: "fontSizes.sm",
      [$paddingX.variable]: "space.2"
    }
  }),
  lg: definePartsStyle$l({
    container: {
      [$minH.variable]: "sizes.8",
      [$minW.variable]: "sizes.8",
      [$fontSize$1.variable]: "fontSizes.md",
      [$paddingX.variable]: "space.3"
    }
  })
};
var variants$b = {
  subtle: definePartsStyle$l((props2) => {
    var _a4;
    return {
      container: (_a4 = badgeTheme.variants) == null ? void 0 : _a4.subtle(props2)
    };
  }),
  solid: definePartsStyle$l((props2) => {
    var _a4;
    return {
      container: (_a4 = badgeTheme.variants) == null ? void 0 : _a4.solid(props2)
    };
  }),
  outline: definePartsStyle$l((props2) => {
    var _a4;
    return {
      container: (_a4 = badgeTheme.variants) == null ? void 0 : _a4.outline(props2)
    };
  })
};
var tagTheme = defineMultiStyleConfig$l({
  variants: variants$b,
  baseStyle: baseStyle$A,
  sizes: sizes$i,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});
var { definePartsStyle: definePartsStyle$k, defineMultiStyleConfig: defineMultiStyleConfig$k } = createMultiStyleConfigHelpers(inputAnatomy.keys);
var $height = cssVar$1("input-height");
var $fontSize = cssVar$1("input-font-size");
var $padding$1 = cssVar$1("input-padding");
var $borderRadius = cssVar$1("input-border-radius");
var baseStyle$z = definePartsStyle$k({
  addon: {
    height: $height.reference,
    fontSize: $fontSize.reference,
    px: $padding$1.reference,
    borderRadius: $borderRadius.reference
  },
  field: {
    width: "100%",
    height: $height.reference,
    fontSize: $fontSize.reference,
    px: $padding$1.reference,
    borderRadius: $borderRadius.reference,
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size = {
  lg: defineStyle({
    [$fontSize.variable]: "fontSizes.lg",
    [$padding$1.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height.variable]: "sizes.12"
  }),
  md: defineStyle({
    [$fontSize.variable]: "fontSizes.md",
    [$padding$1.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height.variable]: "sizes.10"
  }),
  sm: defineStyle({
    [$fontSize.variable]: "fontSizes.sm",
    [$padding$1.variable]: "space.3",
    [$borderRadius.variable]: "radii.sm",
    [$height.variable]: "sizes.8"
  }),
  xs: defineStyle({
    [$fontSize.variable]: "fontSizes.xs",
    [$padding$1.variable]: "space.2",
    [$borderRadius.variable]: "radii.sm",
    [$height.variable]: "sizes.6"
  })
};
var sizes$h = {
  lg: definePartsStyle$k({
    field: size.lg,
    group: size.lg
  }),
  md: definePartsStyle$k({
    field: size.md,
    group: size.md
  }),
  sm: definePartsStyle$k({
    field: size.sm,
    group: size.sm
  }),
  xs: definePartsStyle$k({
    field: size.xs,
    group: size.xs
  })
};
function getDefaults(props2) {
  const { focusBorderColor: fc2, errorBorderColor: ec2 } = props2;
  return {
    focusBorderColor: fc2 || mode("blue.500", "blue.300")(props2),
    errorBorderColor: ec2 || mode("red.500", "red.300")(props2)
  };
}
var variantOutline$1 = definePartsStyle$k((props2) => {
  const { theme: theme2 } = props2;
  const { focusBorderColor: fc2, errorBorderColor: ec2 } = getDefaults(props2);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props2)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme2, ec2),
        boxShadow: `0 0 0 1px ${getColor(theme2, ec2)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor(theme2, fc2),
        boxShadow: `0 0 0 1px ${getColor(theme2, fc2)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props2),
      bg: mode("gray.100", "whiteAlpha.300")(props2)
    }
  };
});
var variantFilled = definePartsStyle$k((props2) => {
  const { theme: theme2 } = props2;
  const { focusBorderColor: fc2, errorBorderColor: ec2 } = getDefaults(props2);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props2),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props2)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme2, ec2)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor(theme2, fc2)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props2)
    }
  };
});
var variantFlushed = definePartsStyle$k((props2) => {
  const { theme: theme2 } = props2;
  const { focusBorderColor: fc2, errorBorderColor: ec2 } = getDefaults(props2);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme2, ec2),
        boxShadow: `0px 1px 0px 0px ${getColor(theme2, ec2)}`
      },
      _focusVisible: {
        borderColor: getColor(theme2, fc2),
        boxShadow: `0px 1px 0px 0px ${getColor(theme2, fc2)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled$1 = definePartsStyle$k({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants$a = {
  outline: variantOutline$1,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled$1
};
var inputTheme = defineMultiStyleConfig$k({
  baseStyle: baseStyle$z,
  sizes: sizes$h,
  variants: variants$a,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});
var _a$4;
var baseStyle$y = defineStyle({
  ...(_a$4 = inputTheme.baseStyle) == null ? void 0 : _a$4.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a2$2, _b$2;
var variants$9 = {
  outline: defineStyle(
    (props2) => {
      var _a4, _b3;
      return (_b3 = (_a4 = inputTheme.variants) == null ? void 0 : _a4.outline(props2).field) != null ? _b3 : {};
    }
  ),
  flushed: defineStyle(
    (props2) => {
      var _a4, _b3;
      return (_b3 = (_a4 = inputTheme.variants) == null ? void 0 : _a4.flushed(props2).field) != null ? _b3 : {};
    }
  ),
  filled: defineStyle(
    (props2) => {
      var _a4, _b3;
      return (_b3 = (_a4 = inputTheme.variants) == null ? void 0 : _a4.filled(props2).field) != null ? _b3 : {};
    }
  ),
  unstyled: (_b$2 = (_a2$2 = inputTheme.variants) == null ? void 0 : _a2$2.unstyled.field) != null ? _b$2 : {}
};
var _a3, _b2, _c$1, _d$1, _e$1, _f$1, _g$1, _h$1;
var sizes$g = {
  xs: (_b2 = (_a3 = inputTheme.sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
  sm: (_d$1 = (_c$1 = inputTheme.sizes) == null ? void 0 : _c$1.sm.field) != null ? _d$1 : {},
  md: (_f$1 = (_e$1 = inputTheme.sizes) == null ? void 0 : _e$1.md.field) != null ? _f$1 : {},
  lg: (_h$1 = (_g$1 = inputTheme.sizes) == null ? void 0 : _g$1.lg.field) != null ? _h$1 : {}
};
var textareaTheme = defineStyleConfig({
  baseStyle: baseStyle$y,
  sizes: sizes$g,
  variants: variants$9,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});
var $bg$c = cssVar("tooltip-bg");
var $fg$4 = cssVar("tooltip-fg");
var $arrowBg$1 = cssVar("popper-arrow-bg");
var baseStyle$x = defineStyle({
  bg: $bg$c.reference,
  color: $fg$4.reference,
  [$bg$c.variable]: "colors.gray.700",
  [$fg$4.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg$c.variable]: "colors.gray.300",
    [$fg$4.variable]: "colors.gray.900"
  },
  [$arrowBg$1.variable]: $bg$c.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme = defineStyleConfig({
  baseStyle: baseStyle$x
});
var { defineMultiStyleConfig: defineMultiStyleConfig$j, definePartsStyle: definePartsStyle$j } = createMultiStyleConfigHelpers(progressAnatomy.keys);
var filledStyle = defineStyle((props2) => {
  const { colorScheme: c2, theme: t2, isIndeterminate, hasStripe } = props2;
  const stripeStyle = mode(
    generateStripe(),
    generateStripe("1rem", "rgba(0,0,0,0.1)")
  )(props2);
  const bgColor = mode(`${c2}.500`, `${c2}.200`)(props2);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t2, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel$3 = defineStyle({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack$1 = defineStyle((props2) => {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props2)
  };
});
var baseStyleFilledTrack$1 = defineStyle((props2) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle(props2)
  };
});
var baseStyle$w = definePartsStyle$j((props2) => ({
  label: baseStyleLabel$3,
  filledTrack: baseStyleFilledTrack$1(props2),
  track: baseStyleTrack$1(props2)
}));
var sizes$f = {
  xs: definePartsStyle$j({
    track: { h: "1" }
  }),
  sm: definePartsStyle$j({
    track: { h: "2" }
  }),
  md: definePartsStyle$j({
    track: { h: "3" }
  }),
  lg: definePartsStyle$j({
    track: { h: "4" }
  })
};
var progressTheme = defineMultiStyleConfig$j({
  sizes: sizes$f,
  baseStyle: baseStyle$w,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var isFunction$3 = (value) => typeof value === "function";
function runIfFn$1(valueOrFn, ...args) {
  return isFunction$3(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
var { definePartsStyle: definePartsStyle$i, defineMultiStyleConfig: defineMultiStyleConfig$i } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
var $size$3 = cssVar$1("checkbox-size");
var baseStyleControl$1 = defineStyle((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    w: $size$3.reference,
    h: $size$3.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(`${c2}.500`, `${c2}.200`)(props2),
      borderColor: mode(`${c2}.500`, `${c2}.200`)(props2),
      color: mode("white", "gray.900")(props2),
      _hover: {
        bg: mode(`${c2}.600`, `${c2}.300`)(props2),
        borderColor: mode(`${c2}.600`, `${c2}.300`)(props2)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props2),
        bg: mode("gray.200", "whiteAlpha.300")(props2),
        color: mode("gray.500", "whiteAlpha.500")(props2)
      }
    },
    _indeterminate: {
      bg: mode(`${c2}.500`, `${c2}.200`)(props2),
      borderColor: mode(`${c2}.500`, `${c2}.200`)(props2),
      color: mode("white", "gray.900")(props2)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props2),
      borderColor: mode("gray.100", "transparent")(props2)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props2)
    }
  };
});
var baseStyleContainer$3 = defineStyle({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel$2 = defineStyle({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon$6 = defineStyle({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle$v = definePartsStyle$i((props2) => ({
  icon: baseStyleIcon$6,
  container: baseStyleContainer$3,
  control: runIfFn$1(baseStyleControl$1, props2),
  label: baseStyleLabel$2
}));
var sizes$e = {
  sm: definePartsStyle$i({
    control: { [$size$3.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle$i({
    control: { [$size$3.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle$i({
    control: { [$size$3.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme = defineMultiStyleConfig$i({
  baseStyle: baseStyle$v,
  sizes: sizes$e,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$h, definePartsStyle: definePartsStyle$h } = createMultiStyleConfigHelpers(radioAnatomy.keys);
var baseStyleControl = defineStyle((props2) => {
  var _a4;
  const controlStyle = (_a4 = runIfFn$1(checkboxTheme.baseStyle, props2)) == null ? void 0 : _a4.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle$u = definePartsStyle$h((props2) => {
  var _a4, _b3, _c2, _d2;
  return {
    label: (_b3 = (_a4 = checkboxTheme).baseStyle) == null ? void 0 : _b3.call(_a4, props2).label,
    container: (_d2 = (_c2 = checkboxTheme).baseStyle) == null ? void 0 : _d2.call(_c2, props2).container,
    control: baseStyleControl(props2)
  };
});
var sizes$d = {
  md: definePartsStyle$h({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle$h({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle$h({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme = defineMultiStyleConfig$h({
  baseStyle: baseStyle$u,
  sizes: sizes$d,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$g, definePartsStyle: definePartsStyle$g } = createMultiStyleConfigHelpers(selectAnatomy.keys);
var $bg$b = cssVar$1("select-bg");
var _a$3;
var baseStyleField$1 = defineStyle({
  ...(_a$3 = inputTheme.baseStyle) == null ? void 0 : _a$3.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg$b.reference,
  [$bg$b.variable]: "colors.white",
  _dark: {
    [$bg$b.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg$b.reference
  }
});
var baseStyleIcon$5 = defineStyle({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle$t = definePartsStyle$g({
  field: baseStyleField$1,
  icon: baseStyleIcon$5
});
var iconSpacing = defineStyle({
  paddingInlineEnd: "8"
});
var _a2$1, _b$1, _c, _d, _e, _f, _g, _h;
var sizes$c = {
  lg: {
    ...(_a2$1 = inputTheme.sizes) == null ? void 0 : _a2$1.lg,
    field: {
      ...(_b$1 = inputTheme.sizes) == null ? void 0 : _b$1.lg.field,
      ...iconSpacing
    }
  },
  md: {
    ...(_c = inputTheme.sizes) == null ? void 0 : _c.md,
    field: {
      ...(_d = inputTheme.sizes) == null ? void 0 : _d.md.field,
      ...iconSpacing
    }
  },
  sm: {
    ...(_e = inputTheme.sizes) == null ? void 0 : _e.sm,
    field: {
      ...(_f = inputTheme.sizes) == null ? void 0 : _f.sm.field,
      ...iconSpacing
    }
  },
  xs: {
    ...(_g = inputTheme.sizes) == null ? void 0 : _g.xs,
    field: {
      ...(_h = inputTheme.sizes) == null ? void 0 : _h.xs.field,
      ...iconSpacing
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme = defineMultiStyleConfig$g({
  baseStyle: baseStyle$t,
  sizes: sizes$c,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});
var $startColor = cssVar$1("skeleton-start-color");
var $endColor = cssVar$1("skeleton-end-color");
var baseStyle$s = defineStyle({
  [$startColor.variable]: "colors.gray.100",
  [$endColor.variable]: "colors.gray.400",
  _dark: {
    [$startColor.variable]: "colors.gray.800",
    [$endColor.variable]: "colors.gray.600"
  },
  background: $startColor.reference,
  borderColor: $endColor.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme = defineStyleConfig({
  baseStyle: baseStyle$s
});
var $bg$a = cssVar$1("skip-link-bg");
var baseStyle$r = defineStyle({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg$a.variable]: "colors.white",
    _dark: {
      [$bg$a.variable]: "colors.gray.700"
    },
    bg: $bg$a.reference
  }
});
var skipLinkTheme = defineStyleConfig({
  baseStyle: baseStyle$r
});
var { defineMultiStyleConfig: defineMultiStyleConfig$f, definePartsStyle: definePartsStyle$f } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
var $thumbSize = cssVar$1("slider-thumb-size");
var $trackSize = cssVar$1("slider-track-size");
var $bg$9 = cssVar$1("slider-bg");
var baseStyleContainer$2 = defineStyle((props2) => {
  const { orientation } = props2;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack = defineStyle((props2) => {
  const orientationStyles = orient({
    orientation: props2.orientation,
    horizontal: { h: $trackSize.reference },
    vertical: { w: $trackSize.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg$9.variable]: "colors.gray.200",
    _dark: {
      [$bg$9.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg$9.variable]: "colors.gray.300",
      _dark: {
        [$bg$9.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg$9.reference
  };
});
var baseStyleThumb = defineStyle((props2) => {
  const { orientation } = props2;
  const orientationStyle = orient({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize.reference,
    h: $thumbSize.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack = defineStyle((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    width: "inherit",
    height: "inherit",
    [$bg$9.variable]: `colors.${c2}.500`,
    _dark: {
      [$bg$9.variable]: `colors.${c2}.200`
    },
    bg: $bg$9.reference
  };
});
var baseStyle$q = definePartsStyle$f((props2) => ({
  container: baseStyleContainer$2(props2),
  track: baseStyleTrack(props2),
  thumb: baseStyleThumb(props2),
  filledTrack: baseStyleFilledTrack(props2)
}));
var sizeLg = definePartsStyle$f({
  container: {
    [$thumbSize.variable]: `sizes.4`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeMd = definePartsStyle$f({
  container: {
    [$thumbSize.variable]: `sizes.3.5`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeSm = definePartsStyle$f({
  container: {
    [$thumbSize.variable]: `sizes.2.5`,
    [$trackSize.variable]: `sizes.0.5`
  }
});
var sizes$b = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var sliderTheme = defineMultiStyleConfig$f({
  baseStyle: baseStyle$q,
  sizes: sizes$b,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});
var $size$2 = cssVar("spinner-size");
var baseStyle$p = defineStyle({
  width: [$size$2.reference],
  height: [$size$2.reference]
});
var sizes$a = {
  xs: defineStyle({
    [$size$2.variable]: "sizes.3"
  }),
  sm: defineStyle({
    [$size$2.variable]: "sizes.4"
  }),
  md: defineStyle({
    [$size$2.variable]: "sizes.6"
  }),
  lg: defineStyle({
    [$size$2.variable]: "sizes.8"
  }),
  xl: defineStyle({
    [$size$2.variable]: "sizes.12"
  })
};
var spinnerTheme = defineStyleConfig({
  baseStyle: baseStyle$p,
  sizes: sizes$a,
  defaultProps: {
    size: "md"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$e, definePartsStyle: definePartsStyle$e } = createMultiStyleConfigHelpers(statAnatomy.keys);
var baseStyleLabel$1 = defineStyle({
  fontWeight: "medium"
});
var baseStyleHelpText = defineStyle({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber = defineStyle({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon$4 = defineStyle({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle$o = definePartsStyle$e({
  container: {},
  label: baseStyleLabel$1,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon$4
});
var sizes$9 = {
  md: definePartsStyle$e({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme = defineMultiStyleConfig$e({
  baseStyle: baseStyle$o,
  sizes: sizes$9,
  defaultProps: {
    size: "md"
  }
});
var $bg$8 = cssVar$1("kbd-bg");
var baseStyle$n = defineStyle({
  [$bg$8.variable]: "colors.gray.100",
  _dark: {
    [$bg$8.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg$8.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme = defineStyleConfig({
  baseStyle: baseStyle$n
});
var baseStyle$m = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme = defineStyleConfig({
  baseStyle: baseStyle$m
});
var { defineMultiStyleConfig: defineMultiStyleConfig$d, definePartsStyle: definePartsStyle$d } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyleIcon$3 = defineStyle({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle$l = definePartsStyle$d({
  icon: baseStyleIcon$3
});
var listTheme = defineMultiStyleConfig$d({
  baseStyle: baseStyle$l
});
var { defineMultiStyleConfig: defineMultiStyleConfig$c, definePartsStyle: definePartsStyle$c } = createMultiStyleConfigHelpers(menuAnatomy.keys);
var $bg$7 = cssVar$1("menu-bg");
var $shadow$2 = cssVar$1("menu-shadow");
var baseStyleList = defineStyle({
  [$bg$7.variable]: "#fff",
  [$shadow$2.variable]: "shadows.sm",
  _dark: {
    [$bg$7.variable]: "colors.gray.700",
    [$shadow$2.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg$7.reference,
  boxShadow: $shadow$2.reference
});
var baseStyleItem = defineStyle({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg$7.variable]: "colors.gray.100",
    _dark: {
      [$bg$7.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg$7.variable]: "colors.gray.200",
    _dark: {
      [$bg$7.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg$7.variable]: "colors.gray.100",
    _dark: {
      [$bg$7.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg$7.reference
});
var baseStyleGroupTitle = defineStyle({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleIcon$2 = defineStyle({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var baseStyleCommand = defineStyle({
  opacity: 0.6
});
var baseStyleDivider = defineStyle({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton$1 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle$k = definePartsStyle$c({
  button: baseStyleButton$1,
  list: baseStyleList,
  item: baseStyleItem,
  groupTitle: baseStyleGroupTitle,
  icon: baseStyleIcon$2,
  command: baseStyleCommand,
  divider: baseStyleDivider
});
var menuTheme = defineMultiStyleConfig$c({
  baseStyle: baseStyle$k
});
var { defineMultiStyleConfig: defineMultiStyleConfig$b, definePartsStyle: definePartsStyle$b } = createMultiStyleConfigHelpers(modalAnatomy.keys);
var $bg$6 = cssVar$1("modal-bg");
var $shadow$1 = cssVar$1("modal-shadow");
var baseStyleOverlay$1 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer$1 = defineStyle((props2) => {
  const { isCentered, scrollBehavior } = props2;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog$1 = defineStyle((props2) => {
  const { isCentered, scrollBehavior } = props2;
  return {
    borderRadius: "md",
    color: "inherit",
    my: isCentered ? "auto" : "16",
    mx: isCentered ? "auto" : void 0,
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg$6.variable]: "colors.white",
    [$shadow$1.variable]: "shadows.lg",
    _dark: {
      [$bg$6.variable]: "colors.gray.700",
      [$shadow$1.variable]: "shadows.dark-lg"
    },
    bg: $bg$6.reference,
    boxShadow: $shadow$1.reference
  };
});
var baseStyleHeader$2 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton$2 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody$2 = defineStyle((props2) => {
  const { scrollBehavior } = props2;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter$2 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle$j = definePartsStyle$b((props2) => ({
  overlay: baseStyleOverlay$1,
  dialogContainer: runIfFn$1(baseStyleDialogContainer$1, props2),
  dialog: runIfFn$1(baseStyleDialog$1, props2),
  header: baseStyleHeader$2,
  closeButton: baseStyleCloseButton$2,
  body: runIfFn$1(baseStyleBody$2, props2),
  footer: baseStyleFooter$2
}));
function getSize$3(value) {
  if (value === "full") {
    return definePartsStyle$b({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle$b({
    dialog: { maxW: value }
  });
}
var sizes$8 = {
  xs: getSize$3("xs"),
  sm: getSize$3("sm"),
  md: getSize$3("md"),
  lg: getSize$3("lg"),
  xl: getSize$3("xl"),
  "2xl": getSize$3("2xl"),
  "3xl": getSize$3("3xl"),
  "4xl": getSize$3("4xl"),
  "5xl": getSize$3("5xl"),
  "6xl": getSize$3("6xl"),
  full: getSize$3("full")
};
var modalTheme = defineMultiStyleConfig$b({
  baseStyle: baseStyle$j,
  sizes: sizes$8,
  defaultProps: { size: "md" }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$a, definePartsStyle: definePartsStyle$a } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
var $stepperWidth = cssVar("number-input-stepper-width");
var $inputPadding = cssVar("number-input-input-padding");
var inputPaddingValue = calc($stepperWidth).add("0.5rem").toString();
var $bg$5 = cssVar("number-input-bg");
var $fg$3 = cssVar("number-input-color");
var $border$2 = cssVar("number-input-border-color");
var baseStyleRoot = defineStyle({
  [$stepperWidth.variable]: "sizes.6",
  [$inputPadding.variable]: inputPaddingValue
});
var baseStyleField = defineStyle(
  (props2) => {
    var _a4, _b3;
    return (_b3 = (_a4 = runIfFn$1(inputTheme.baseStyle, props2)) == null ? void 0 : _a4.field) != null ? _b3 : {};
  }
);
var baseStyleStepperGroup = defineStyle({
  width: $stepperWidth.reference
});
var baseStyleStepper = defineStyle({
  borderStart: "1px solid",
  borderStartColor: $border$2.reference,
  color: $fg$3.reference,
  bg: $bg$5.reference,
  [$fg$3.variable]: "colors.chakra-body-text",
  [$border$2.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg$3.variable]: "colors.whiteAlpha.800",
    [$border$2.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg$5.variable]: "colors.gray.200",
    _dark: {
      [$bg$5.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle$i = definePartsStyle$a((props2) => {
  var _a4;
  return {
    root: baseStyleRoot,
    field: (_a4 = runIfFn$1(baseStyleField, props2)) != null ? _a4 : {},
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper
  };
});
function getSize$2(size2) {
  var _a4, _b3, _c2;
  const sizeStyle = (_a4 = inputTheme.sizes) == null ? void 0 : _a4[size2];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c2 = (_b3 = sizeStyle.field) == null ? void 0 : _b3.fontSize) != null ? _c2 : "md";
  const fontSize = typography_default.fontSizes[_fontSize];
  return definePartsStyle$a({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size2]
      },
      _last: {
        borderBottomEndRadius: radius[size2],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes$7 = {
  xs: getSize$2("xs"),
  sm: getSize$2("sm"),
  md: getSize$2("md"),
  lg: getSize$2("lg")
};
var numberInputTheme = defineMultiStyleConfig$a({
  baseStyle: baseStyle$i,
  sizes: sizes$7,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});
var _a$2;
var baseStyle$h = defineStyle({
  ...(_a$2 = inputTheme.baseStyle) == null ? void 0 : _a$2.field,
  textAlign: "center"
});
var sizes$6 = {
  lg: defineStyle({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a2, _b;
var variants$8 = {
  outline: defineStyle(
    (props2) => {
      var _a32, _b22, _c2;
      return (_c2 = (_b22 = runIfFn$1((_a32 = inputTheme.variants) == null ? void 0 : _a32.outline, props2)) == null ? void 0 : _b22.field) != null ? _c2 : {};
    }
  ),
  flushed: defineStyle(
    (props2) => {
      var _a32, _b22, _c2;
      return (_c2 = (_b22 = runIfFn$1((_a32 = inputTheme.variants) == null ? void 0 : _a32.flushed, props2)) == null ? void 0 : _b22.field) != null ? _c2 : {};
    }
  ),
  filled: defineStyle(
    (props2) => {
      var _a32, _b22, _c2;
      return (_c2 = (_b22 = runIfFn$1((_a32 = inputTheme.variants) == null ? void 0 : _a32.filled, props2)) == null ? void 0 : _b22.field) != null ? _c2 : {};
    }
  ),
  unstyled: (_b = (_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var pinInputTheme = defineStyleConfig({
  baseStyle: baseStyle$h,
  sizes: sizes$6,
  variants: variants$8,
  defaultProps: inputTheme.defaultProps
});
var { defineMultiStyleConfig: defineMultiStyleConfig$9, definePartsStyle: definePartsStyle$9 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
var $popperBg = cssVar("popper-bg");
var $arrowBg = cssVar("popper-arrow-bg");
var $arrowShadowColor = cssVar("popper-arrow-shadow-color");
var baseStylePopper = defineStyle({ zIndex: 10 });
var baseStyleContent = defineStyle({
  [$popperBg.variable]: `colors.white`,
  bg: $popperBg.reference,
  [$arrowBg.variable]: $popperBg.reference,
  [$arrowShadowColor.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg.variable]: `colors.gray.700`,
    [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader$1 = defineStyle({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody$1 = defineStyle({
  px: 3,
  py: 2
});
var baseStyleFooter$1 = defineStyle({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton$1 = defineStyle({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle$g = definePartsStyle$9({
  popper: baseStylePopper,
  content: baseStyleContent,
  header: baseStyleHeader$1,
  body: baseStyleBody$1,
  footer: baseStyleFooter$1,
  closeButton: baseStyleCloseButton$1
});
var popoverTheme = defineMultiStyleConfig$9({
  baseStyle: baseStyle$g
});
var { definePartsStyle: definePartsStyle$8, defineMultiStyleConfig: defineMultiStyleConfig$8 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
var $bg$4 = cssVar$1("drawer-bg");
var $bs = cssVar$1("drawer-box-shadow");
function getSize$1(value) {
  if (value === "full") {
    return definePartsStyle$8({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle$8({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer = defineStyle({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog = defineStyle((props2) => {
  const { isFullHeight } = props2;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg$4.variable]: "colors.white",
    [$bs.variable]: "shadows.lg",
    _dark: {
      [$bg$4.variable]: "colors.gray.700",
      [$bs.variable]: "shadows.dark-lg"
    },
    bg: $bg$4.reference,
    boxShadow: $bs.reference
  };
});
var baseStyleHeader = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody = defineStyle({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle$f = definePartsStyle$8((props2) => ({
  overlay: baseStyleOverlay,
  dialogContainer: baseStyleDialogContainer,
  dialog: runIfFn$1(baseStyleDialog, props2),
  header: baseStyleHeader,
  closeButton: baseStyleCloseButton,
  body: baseStyleBody,
  footer: baseStyleFooter
}));
var sizes$5 = {
  xs: getSize$1("xs"),
  sm: getSize$1("md"),
  md: getSize$1("lg"),
  lg: getSize$1("2xl"),
  xl: getSize$1("4xl"),
  full: getSize$1("full")
};
var drawerTheme = defineMultiStyleConfig$8({
  baseStyle: baseStyle$f,
  sizes: sizes$5,
  defaultProps: {
    size: "xs"
  }
});
var { definePartsStyle: definePartsStyle$7, defineMultiStyleConfig: defineMultiStyleConfig$7 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
var baseStylePreview = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle$e = definePartsStyle$7({
  preview: baseStylePreview,
  input: baseStyleInput,
  textarea: baseStyleTextarea
});
var editableTheme = defineMultiStyleConfig$7({
  baseStyle: baseStyle$e
});
var { definePartsStyle: definePartsStyle$6, defineMultiStyleConfig: defineMultiStyleConfig$6 } = createMultiStyleConfigHelpers(formAnatomy.keys);
var $fg$2 = cssVar$1("form-control-color");
var baseStyleRequiredIndicator = defineStyle({
  marginStart: "1",
  [$fg$2.variable]: "colors.red.500",
  _dark: {
    [$fg$2.variable]: "colors.red.300"
  },
  color: $fg$2.reference
});
var baseStyleHelperText = defineStyle({
  mt: "2",
  [$fg$2.variable]: "colors.gray.600",
  _dark: {
    [$fg$2.variable]: "colors.whiteAlpha.600"
  },
  color: $fg$2.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle$d = definePartsStyle$6({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator,
  helperText: baseStyleHelperText
});
var formTheme = defineMultiStyleConfig$6({
  baseStyle: baseStyle$d
});
var { definePartsStyle: definePartsStyle$5, defineMultiStyleConfig: defineMultiStyleConfig$5 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
var $fg$1 = cssVar$1("form-error-color");
var baseStyleText = defineStyle({
  [$fg$1.variable]: `colors.red.500`,
  _dark: {
    [$fg$1.variable]: `colors.red.300`
  },
  color: $fg$1.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon$1 = defineStyle({
  marginEnd: "0.5em",
  [$fg$1.variable]: `colors.red.500`,
  _dark: {
    [$fg$1.variable]: `colors.red.300`
  },
  color: $fg$1.reference
});
var baseStyle$c = definePartsStyle$5({
  text: baseStyleText,
  icon: baseStyleIcon$1
});
var formErrorTheme = defineMultiStyleConfig$5({
  baseStyle: baseStyle$c
});
var baseStyle$b = defineStyle({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme = defineStyleConfig({
  baseStyle: baseStyle$b
});
var baseStyle$a = defineStyle({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes$4 = {
  "4xl": defineStyle({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme = defineStyleConfig({
  baseStyle: baseStyle$a,
  sizes: sizes$4,
  defaultProps: {
    size: "xl"
  }
});
var { defineMultiStyleConfig: defineMultiStyleConfig$4, definePartsStyle: definePartsStyle$4 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var $decor = cssVar$1("breadcrumb-link-decor");
var baseStyleLink = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  outline: "none",
  color: "inherit",
  textDecoration: $decor.reference,
  [$decor.variable]: "none",
  "&:not([aria-current=page])": {
    cursor: "pointer",
    _hover: {
      [$decor.variable]: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
});
var baseStyle$9 = definePartsStyle$4({
  link: baseStyleLink
});
var breadcrumbTheme = defineMultiStyleConfig$4({
  baseStyle: baseStyle$9
});
var baseStyle$8 = defineStyle({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost = defineStyle((props2) => {
  const { colorScheme: c2, theme: theme2 } = props2;
  if (c2 === "gray") {
    return {
      color: mode(`gray.800`, `whiteAlpha.900`)(props2),
      _hover: {
        bg: mode(`gray.100`, `whiteAlpha.200`)(props2)
      },
      _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props2) }
    };
  }
  const darkHoverBg = transparentize(`${c2}.200`, 0.12)(theme2);
  const darkActiveBg = transparentize(`${c2}.200`, 0.24)(theme2);
  return {
    color: mode(`${c2}.600`, `${c2}.200`)(props2),
    bg: "transparent",
    _hover: {
      bg: mode(`${c2}.50`, darkHoverBg)(props2)
    },
    _active: {
      bg: mode(`${c2}.100`, darkActiveBg)(props2)
    }
  };
});
var variantOutline = defineStyle((props2) => {
  const { colorScheme: c2 } = props2;
  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props2);
  return {
    border: "1px solid",
    borderColor: c2 === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn$1(variantGhost, props2)
  };
});
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid$2 = defineStyle((props2) => {
  var _a4;
  const { colorScheme: c2 } = props2;
  if (c2 === "gray") {
    const bg22 = mode(`gray.100`, `whiteAlpha.200`)(props2);
    return {
      bg: bg22,
      color: mode(`gray.800`, `whiteAlpha.900`)(props2),
      _hover: {
        bg: mode(`gray.200`, `whiteAlpha.300`)(props2),
        _disabled: {
          bg: bg22
        }
      },
      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props2) }
    };
  }
  const {
    bg: bg2 = `${c2}.500`,
    color: color2 = "white",
    hoverBg = `${c2}.600`,
    activeBg = `${c2}.700`
  } = (_a4 = accessibleColorMap[c2]) != null ? _a4 : {};
  const background2 = mode(bg2, `${c2}.200`)(props2);
  return {
    bg: background2,
    color: mode(color2, `gray.800`)(props2),
    _hover: {
      bg: mode(hoverBg, `${c2}.300`)(props2),
      _disabled: {
        bg: background2
      }
    },
    _active: { bg: mode(activeBg, `${c2}.400`)(props2) }
  };
});
var variantLink = defineStyle((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(`${c2}.500`, `${c2}.200`)(props2),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(`${c2}.700`, `${c2}.500`)(props2)
    }
  };
});
var variantUnstyled = defineStyle({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants$7 = {
  ghost: variantGhost,
  outline: variantOutline,
  solid: variantSolid$2,
  link: variantLink,
  unstyled: variantUnstyled
};
var sizes$3 = {
  lg: defineStyle({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme = defineStyleConfig({
  baseStyle: baseStyle$8,
  variants: variants$7,
  sizes: sizes$3,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});
var { definePartsStyle: definePartsStyle$3, defineMultiStyleConfig: defineMultiStyleConfig$3 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
var $bg$3 = cssVar$1("card-bg");
var $padding = cssVar$1("card-padding");
var $shadow = cssVar$1("card-shadow");
var $radius = cssVar$1("card-radius");
var $border$1 = cssVar$1("card-border-width", "0");
var $borderColor = cssVar$1("card-border-color");
var baseStyle$7 = definePartsStyle$3({
  container: {
    [$bg$3.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg$3.reference,
    boxShadow: $shadow.reference,
    borderRadius: $radius.reference,
    color: "chakra-body-text",
    borderWidth: $border$1.reference,
    borderColor: $borderColor.reference
  },
  body: {
    padding: $padding.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding.reference
  },
  footer: {
    padding: $padding.reference
  }
});
var sizes$2 = {
  sm: definePartsStyle$3({
    container: {
      [$radius.variable]: "radii.base",
      [$padding.variable]: "space.3"
    }
  }),
  md: definePartsStyle$3({
    container: {
      [$radius.variable]: "radii.md",
      [$padding.variable]: "space.5"
    }
  }),
  lg: definePartsStyle$3({
    container: {
      [$radius.variable]: "radii.xl",
      [$padding.variable]: "space.7"
    }
  })
};
var variants$6 = {
  elevated: definePartsStyle$3({
    container: {
      [$shadow.variable]: "shadows.base",
      _dark: {
        [$bg$3.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle$3({
    container: {
      [$border$1.variable]: "1px",
      [$borderColor.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle$3({
    container: {
      [$bg$3.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding.variable]: 0
    },
    header: {
      [$padding.variable]: 0
    },
    footer: {
      [$padding.variable]: 0
    }
  }
};
var cardTheme = defineMultiStyleConfig$3({
  baseStyle: baseStyle$7,
  variants: variants$6,
  sizes: sizes$2,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});
var $size$1 = cssVar("close-button-size");
var $bg$2 = cssVar("close-button-bg");
var baseStyle$6 = defineStyle({
  w: [$size$1.reference],
  h: [$size$1.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg$2.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg$2.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg$2.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg$2.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg$2.reference
});
var sizes$1 = {
  lg: defineStyle({
    [$size$1.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle({
    [$size$1.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle({
    [$size$1.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme = defineStyleConfig({
  baseStyle: baseStyle$6,
  sizes: sizes$1,
  defaultProps: {
    size: "md"
  }
});
var { variants: variants$5, defaultProps } = badgeTheme;
var baseStyle$5 = defineStyle({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var codeTheme = defineStyleConfig({
  baseStyle: baseStyle$5,
  variants: variants$5,
  defaultProps
});
var baseStyle$4 = defineStyle({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme = defineStyleConfig({
  baseStyle: baseStyle$4
});
var baseStyle$3 = defineStyle({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid$1 = defineStyle({
  borderStyle: "solid"
});
var variantDashed = defineStyle({
  borderStyle: "dashed"
});
var variants$4 = {
  solid: variantSolid$1,
  dashed: variantDashed
};
var dividerTheme = defineStyleConfig({
  baseStyle: baseStyle$3,
  variants: variants$4,
  defaultProps: {
    variant: "solid"
  }
});
var { definePartsStyle: definePartsStyle$2, defineMultiStyleConfig: defineMultiStyleConfig$2 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var baseStyleContainer$1 = defineStyle({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel = defineStyle({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon = defineStyle({
  fontSize: "1.25em"
});
var baseStyle$2 = definePartsStyle$2({
  container: baseStyleContainer$1,
  button: baseStyleButton,
  panel: baseStylePanel,
  icon: baseStyleIcon
});
var accordionTheme = defineMultiStyleConfig$2({ baseStyle: baseStyle$2 });
var { definePartsStyle: definePartsStyle$1, defineMultiStyleConfig: defineMultiStyleConfig$1 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
var $fg = cssVar$1("alert-fg");
var $bg$1 = cssVar$1("alert-bg");
var baseStyle$1 = definePartsStyle$1({
  container: {
    bg: $bg$1.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg(props2) {
  const { theme: theme2, colorScheme: c2 } = props2;
  const darkBg = transparentize(`${c2}.200`, 0.16)(theme2);
  return {
    light: `colors.${c2}.100`,
    dark: darkBg
  };
}
var variantSubtle = definePartsStyle$1((props2) => {
  const { colorScheme: c2 } = props2;
  const bg2 = getBg(props2);
  return {
    container: {
      [$fg.variable]: `colors.${c2}.600`,
      [$bg$1.variable]: bg2.light,
      _dark: {
        [$fg.variable]: `colors.${c2}.200`,
        [$bg$1.variable]: bg2.dark
      }
    }
  };
});
var variantLeftAccent = definePartsStyle$1((props2) => {
  const { colorScheme: c2 } = props2;
  const bg2 = getBg(props2);
  return {
    container: {
      [$fg.variable]: `colors.${c2}.600`,
      [$bg$1.variable]: bg2.light,
      _dark: {
        [$fg.variable]: `colors.${c2}.200`,
        [$bg$1.variable]: bg2.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg.reference
    }
  };
});
var variantTopAccent = definePartsStyle$1((props2) => {
  const { colorScheme: c2 } = props2;
  const bg2 = getBg(props2);
  return {
    container: {
      [$fg.variable]: `colors.${c2}.600`,
      [$bg$1.variable]: bg2.light,
      _dark: {
        [$fg.variable]: `colors.${c2}.200`,
        [$bg$1.variable]: bg2.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg.reference
    }
  };
});
var variantSolid = definePartsStyle$1((props2) => {
  const { colorScheme: c2 } = props2;
  return {
    container: {
      [$fg.variable]: `colors.white`,
      [$bg$1.variable]: `colors.${c2}.600`,
      _dark: {
        [$fg.variable]: `colors.gray.900`,
        [$bg$1.variable]: `colors.${c2}.200`
      },
      color: $fg.reference
    }
  };
});
var variants$3 = {
  subtle: variantSubtle,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid
};
var alertTheme = defineMultiStyleConfig$1({
  baseStyle: baseStyle$1,
  variants: variants$3,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});
var { definePartsStyle, defineMultiStyleConfig } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
var $border = cssVar$1("avatar-border-color");
var $bg = cssVar$1("avatar-bg");
var $fs = cssVar$1("avatar-font-size");
var $size = cssVar$1("avatar-size");
var baseStyleBadge = defineStyle({
  borderRadius: "full",
  border: "0.2em solid",
  borderColor: $border.reference,
  [$border.variable]: "white",
  _dark: {
    [$border.variable]: "colors.gray.800"
  }
});
var baseStyleExcessLabel = defineStyle({
  bg: $bg.reference,
  fontSize: $fs.reference,
  width: $size.reference,
  height: $size.reference,
  lineHeight: "1",
  [$bg.variable]: "colors.gray.200",
  _dark: {
    [$bg.variable]: "colors.whiteAlpha.400"
  }
});
var baseStyleContainer = defineStyle((props2) => {
  const { name, theme: theme2 } = props2;
  const bg2 = name ? randomColor({ string: name }) : "colors.gray.400";
  const isBgDark = isDark(bg2)(theme2);
  let color2 = "white";
  if (!isBgDark)
    color2 = "gray.800";
  return {
    bg: $bg.reference,
    fontSize: $fs.reference,
    color: color2,
    borderColor: $border.reference,
    verticalAlign: "top",
    width: $size.reference,
    height: $size.reference,
    "&:not([data-loaded])": {
      [$bg.variable]: bg2
    },
    [$border.variable]: "colors.white",
    _dark: {
      [$border.variable]: "colors.gray.800"
    }
  };
});
var baseStyleLabel = defineStyle({
  fontSize: $fs.reference,
  lineHeight: "1"
});
var baseStyle = definePartsStyle((props2) => ({
  badge: runIfFn$1(baseStyleBadge, props2),
  excessLabel: runIfFn$1(baseStyleExcessLabel, props2),
  container: runIfFn$1(baseStyleContainer, props2),
  label: baseStyleLabel
}));
function getSize(size2) {
  const themeSize = size2 !== "100%" ? sizes_default[size2] : void 0;
  return definePartsStyle({
    container: {
      [$size.variable]: themeSize != null ? themeSize : size2,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size2} / 2.5)`
    },
    excessLabel: {
      [$size.variable]: themeSize != null ? themeSize : size2,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size2} / 2.5)`
    }
  });
}
var sizes = {
  "2xs": getSize(4),
  xs: getSize(6),
  sm: getSize(8),
  md: getSize(12),
  lg: getSize(16),
  xl: getSize(24),
  "2xl": getSize(32),
  full: getSize("100%")
};
var avatarTheme = defineMultiStyleConfig({
  baseStyle,
  sizes,
  defaultProps: {
    size: "md"
  }
});
var components = {
  Accordion: accordionTheme,
  Alert: alertTheme,
  Avatar: avatarTheme,
  Badge: badgeTheme,
  Breadcrumb: breadcrumbTheme,
  Button: buttonTheme,
  Checkbox: checkboxTheme,
  CloseButton: closeButtonTheme,
  Code: codeTheme,
  Container: containerTheme,
  Divider: dividerTheme,
  Drawer: drawerTheme,
  Editable: editableTheme,
  Form: formTheme,
  FormError: formErrorTheme,
  FormLabel: formLabelTheme,
  Heading: headingTheme,
  Input: inputTheme,
  Kbd: kbdTheme,
  Link: linkTheme,
  List: listTheme,
  Menu: menuTheme,
  Modal: modalTheme,
  NumberInput: numberInputTheme,
  PinInput: pinInputTheme,
  Popover: popoverTheme,
  Progress: progressTheme,
  Radio: radioTheme,
  Select: selectTheme,
  Skeleton: skeletonTheme,
  SkipLink: skipLinkTheme,
  Slider: sliderTheme,
  Spinner: spinnerTheme,
  Stat: statTheme,
  Switch: switchTheme,
  Table: tableTheme,
  Tabs: tabsTheme,
  Tag: tagTheme,
  Textarea: textareaTheme,
  Tooltip: tooltipTheme,
  Card: cardTheme,
  Stepper: stepperTheme
};
var semanticTokens = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-inverse-text": { _light: "white", _dark: "gray.800" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-subtle-text": { _light: "gray.600", _dark: "gray.400" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};
var styles = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme = {
  semanticTokens,
  direction,
  ...foundations,
  components,
  styles,
  config
};
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser$3 = /* @__PURE__ */ canUseDOM();
function omit$1(object, keys2) {
  const result = {};
  Object.keys(object).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object[key];
  });
  return result;
}
function get(obj, path, fallback, index2) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index2 = 0; index2 < key.length; index2 += 1) {
    if (!obj)
      break;
    obj = obj[key[index2]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index2) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map2 = cache.get(obj);
    if (map2.has(path)) {
      return map2.get(path);
    }
    const value = fn(obj, path, fallback, index2);
    map2.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet = memoize(get);
function objectFilter(object, fn) {
  const result = {};
  Object.keys(object).forEach((key) => {
    const value = object[key];
    const shouldPass = fn(value, key, object);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined = (object) => objectFilter(object, (val) => val !== null && val !== void 0);
function isFunction$2(value) {
  return typeof value === "function";
}
function runIfFn(valueOrFn, ...args) {
  return isFunction$2(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function callAllHandlers(...fns) {
  return function func(event2) {
    fns.some((fn) => {
      fn == null ? void 0 : fn(event2);
      return event2 == null ? void 0 : event2.defaultPrevented;
    });
  };
}
var hasElementType = typeof Element !== "undefined";
var hasMap = typeof Map === "function";
var hasSet = typeof Set === "function";
var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
function equal(a, b2) {
  if (a === b2)
    return true;
  if (a && b2 && typeof a == "object" && typeof b2 == "object") {
    if (a.constructor !== b2.constructor)
      return false;
    var length2, i, keys2;
    if (Array.isArray(a)) {
      length2 = a.length;
      if (length2 != b2.length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!equal(a[i], b2[i]))
          return false;
      return true;
    }
    var it;
    if (hasMap && a instanceof Map && b2 instanceof Map) {
      if (a.size !== b2.size)
        return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b2.has(i.value[0]))
          return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!equal(i.value[1], b2.get(i.value[0])))
          return false;
      return true;
    }
    if (hasSet && a instanceof Set && b2 instanceof Set) {
      if (a.size !== b2.size)
        return false;
      it = a.entries();
      while (!(i = it.next()).done)
        if (!b2.has(i.value[0]))
          return false;
      return true;
    }
    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b2)) {
      length2 = a.length;
      if (length2 != b2.length)
        return false;
      for (i = length2; i-- !== 0; )
        if (a[i] !== b2[i])
          return false;
      return true;
    }
    if (a.constructor === RegExp)
      return a.source === b2.source && a.flags === b2.flags;
    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b2.valueOf === "function")
      return a.valueOf() === b2.valueOf();
    if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b2.toString === "function")
      return a.toString() === b2.toString();
    keys2 = Object.keys(a);
    length2 = keys2.length;
    if (length2 !== Object.keys(b2).length)
      return false;
    for (i = length2; i-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b2, keys2[i]))
        return false;
    if (hasElementType && a instanceof Element)
      return false;
    for (i = length2; i-- !== 0; ) {
      if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
        continue;
      }
      if (!equal(a[keys2[i]], b2[keys2[i]]))
        return false;
    }
    return true;
  }
  return a !== a && b2 !== b2;
}
var reactFastCompare = function isEqual(a, b2) {
  try {
    return equal(a, b2);
  } catch (error) {
    if ((error.message || "").match(/stack|recursion/i)) {
      console.warn("react-fast-compare cannot handle circular refs");
      return false;
    }
    throw error;
  }
};
const isEqual2 = /* @__PURE__ */ getDefaultExportFromCjs(reactFastCompare);
function useStyleConfigImpl(themeKey, props2 = {}) {
  var _a4;
  const { styleConfig: styleConfigProp, ...rest } = props2;
  const { theme: theme2, colorMode } = useChakra();
  const themeStyleConfig = themeKey ? memoizedGet(theme2, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = mergeWith(
    { theme: theme2, colorMode },
    (_a4 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a4 : {},
    filterUndefined(omit$1(rest, ["children"]))
  );
  const stylesRef = reactExports.useRef({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles2 = getStyles2(mergedProps);
    const isStyleEqual = isEqual2(stylesRef.current, styles2);
    if (!isStyleEqual) {
      stylesRef.current = styles2;
    }
  }
  return stylesRef.current;
}
function useStyleConfig(themeKey, props2 = {}) {
  return useStyleConfigImpl(themeKey, props2);
}
function useMultiStyleConfig(themeKey, props2 = {}) {
  return useStyleConfigImpl(themeKey, props2);
}
var allPropNames = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp(prop) {
  return validHTMLProps.has(prop) || !allPropNames.has(prop);
}
function assignAfter(target, ...sources) {
  if (target == null) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  const result = { ...target };
  for (const nextSource of sources) {
    if (nextSource == null)
      continue;
    for (const nextKey in nextSource) {
      if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey))
        continue;
      if (nextKey in result)
        delete result[nextKey];
      result[nextKey] = nextSource[nextKey];
    }
  }
  return result;
}
function compact(object) {
  const clone2 = Object.assign({}, object);
  for (let key in clone2) {
    if (clone2[key] === void 0)
      delete clone2[key];
  }
  return clone2;
}
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize$2(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
  return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
  var shouldForwardProp2;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp2 !== "function" && isReal) {
    shouldForwardProp2 = tag.__emotion_forwardProp;
  }
  return shouldForwardProp2;
};
var Insertion = function Insertion2(_ref2) {
  var cache = _ref2.cache, serialized = _ref2.serialized, isStringTag = _ref2.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var createStyled = function createStyled2(tag, options) {
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options !== void 0) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles2.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles2.push.apply(styles2, args);
    } else {
      styles2.push(args[0][0]);
      var len = args.length;
      var i = 1;
      for (; i < len; i++) {
        styles2.push(args[i], args[0][i]);
      }
    }
    var Styled = withEmotionCache(function(props2, cache, ref) {
      var FinalTag = shouldUseAs && props2.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props2;
      if (props2.theme == null) {
        mergedProps = {};
        for (var key in props2) {
          mergedProps[key] = props2[key];
        }
        mergedProps.theme = reactExports.useContext(ThemeContext);
      }
      if (typeof props2.className === "string") {
        className = getRegisteredStyles(cache.registered, classInterpolations, props2.className);
      } else if (props2.className != null) {
        className = props2.className + " ";
      }
      var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props2) {
        if (shouldUseAs && _key === "as")
          continue;
        if (
          // $FlowFixMe
          finalShouldForwardProp(_key)
        ) {
          newProps[_key] = props2[_key];
        }
      }
      newProps.className = className;
      newProps.ref = ref;
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion, {
        cache,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles2;
    Styled.__emotion_forwardProp = shouldForwardProp2;
    Object.defineProperty(Styled, "toString", {
      value: function value() {
        if (targetClassName === void 0 && false) {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      return createStyled2(nextTag, _extends$4({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles2);
    };
    return Styled;
  };
};
var tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var newStyled = createStyled.bind();
tags.forEach(function(tagName) {
  newStyled[tagName] = newStyled(tagName);
});
var _a$1;
var emotion_styled = (_a$1 = newStyled.default) != null ? _a$1 : newStyled;
var toCSSObject = ({ baseStyle: baseStyle2 }) => (props2) => {
  const { theme: theme2, css: cssProp, __css, sx, ...rest } = props2;
  const styleProps2 = objectFilter(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn(baseStyle2, props2);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined(styleProps2),
    sx
  );
  const computedCSS = css(finalStyles)(props2.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled(component, options) {
  const { baseStyle: baseStyle2, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp;
  }
  const styleObject = toCSSObject({ baseStyle: baseStyle2 });
  const Component = emotion_styled(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = React.forwardRef(function ChakraComponent(props2, ref) {
    const { colorMode, forced } = useColorMode();
    return React.createElement(Component, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props2
    });
  });
  return chakraComponent;
}
function factory$1() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled, {
    /**
     * @example
     * const Div = chakra("div")
     * const WithChakra = chakra(AnotherComponent)
     */
    apply(target, thisArg, argArray) {
      return styled(...argArray);
    },
    /**
     * @example
     * <chakra.div />
     */
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled(element));
      }
      return cache.get(element);
    }
  });
}
var chakra = factory$1();
function forwardRef(component) {
  return reactExports.forwardRef(component);
}
function createContext$1(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = reactExports.createContext(void 0);
  Context.displayName = name;
  function useContext() {
    var _a4;
    const context2 = reactExports.useContext(Context);
    if (!context2 && strict) {
      const error = new Error(errorMessage);
      error.name = "ContextError";
      (_a4 = Error.captureStackTrace) == null ? void 0 : _a4.call(Error, error, useContext);
      throw error;
    }
    return context2;
  }
  return [
    Context.Provider,
    useContext,
    Context
  ];
}
function ThemeProvider(props2) {
  const { cssVarsRoot, theme: theme2, children } = props2;
  const computedTheme = reactExports.useMemo(() => toCSSVar(theme2), [theme2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(ThemeProvider$1, { theme: computedTheme, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(CSSVars, { root: cssVarsRoot }),
    children
  ] });
}
function CSSVars({ root = ":host, :root" }) {
  const selector = [root, `[data-theme]`].join(",");
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Global, { styles: (theme2) => ({ [selector]: theme2.__cssVars }) });
}
createContext$1({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
function GlobalStyle() {
  const { colorMode } = useColorMode();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Global,
    {
      styles: (theme2) => {
        const styleObjectOrFn = memoizedGet(theme2, "styles.global");
        const globalStyles = runIfFn(styleObjectOrFn, { theme: theme2, colorMode });
        if (!globalStyles)
          return void 0;
        const styles2 = css(globalStyles)(theme2);
        return styles2;
      }
    }
  );
}
var EnvironmentContext = reactExports.createContext({
  getDocument() {
    return document;
  },
  getWindow() {
    return window;
  }
});
EnvironmentContext.displayName = "EnvironmentContext";
function EnvironmentProvider(props2) {
  const { children, environment: environmentProp, disabled } = props2;
  const ref = reactExports.useRef(null);
  const context2 = reactExports.useMemo(() => {
    if (environmentProp)
      return environmentProp;
    return {
      getDocument: () => {
        var _a4, _b3;
        return (_b3 = (_a4 = ref.current) == null ? void 0 : _a4.ownerDocument) != null ? _b3 : document;
      },
      getWindow: () => {
        var _a4, _b3;
        return (_b3 = (_a4 = ref.current) == null ? void 0 : _a4.ownerDocument.defaultView) != null ? _b3 : window;
      }
    };
  }, [environmentProp]);
  const showSpan = !disabled || !environmentProp;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(EnvironmentContext.Provider, { value: context2, children: [
    children,
    showSpan && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { id: "__chakra_env", hidden: true, ref })
  ] });
}
EnvironmentProvider.displayName = "EnvironmentProvider";
var ChakraProvider$1 = (props2) => {
  const {
    children,
    colorModeManager,
    portalZIndex,
    resetScope,
    resetCSS = true,
    theme: theme2 = {},
    environment,
    cssVarsRoot,
    disableEnvironment,
    disableGlobalStyle
  } = props2;
  const _children = /* @__PURE__ */ jsxRuntimeExports.jsx(
    EnvironmentProvider,
    {
      environment,
      disabled: disableEnvironment,
      children
    }
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, { theme: theme2, cssVarsRoot, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    ColorModeProvider,
    {
      colorModeManager,
      options: theme2.config,
      children: [
        resetCSS ? /* @__PURE__ */ jsxRuntimeExports.jsx(CSSReset, { scope: resetScope }) : /* @__PURE__ */ jsxRuntimeExports.jsx(CSSPolyfill, {}),
        !disableGlobalStyle && /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyle, {}),
        portalZIndex ? /* @__PURE__ */ jsxRuntimeExports.jsx(PortalManager, { zIndex: portalZIndex, children: _children }) : _children
      ]
    }
  ) });
};
var findById = (arr, id2) => arr.find((toast) => toast.id === id2);
function findToast(toasts, id2) {
  const position2 = getToastPosition(toasts, id2);
  const index2 = position2 ? toasts[position2].findIndex((toast) => toast.id === id2) : -1;
  return {
    position: position2,
    index: index2
  };
}
function getToastPosition(toasts, id2) {
  for (const [position2, values] of Object.entries(toasts)) {
    if (findById(values, id2)) {
      return position2;
    }
  }
}
function getToastStyle(position2) {
  const isRighty = position2.includes("right");
  const isLefty = position2.includes("left");
  let alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  return {
    display: "flex",
    flexDirection: "column",
    alignItems
  };
}
function getToastListStyle(position2) {
  const isTopOrBottom = position2 === "top" || position2 === "bottom";
  const margin = isTopOrBottom ? "0 auto" : void 0;
  const top = position2.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
  const bottom = position2.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
  const right = !position2.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
  const left = !position2.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
  return {
    position: "fixed",
    zIndex: "var(--toast-z-index, 5500)",
    pointerEvents: "none",
    display: "flex",
    flexDirection: "column",
    margin,
    top,
    bottom,
    right,
    left
  };
}
function useCallbackRef$2(callback2, deps = []) {
  const callbackRef = reactExports.useRef(callback2);
  reactExports.useEffect(() => {
    callbackRef.current = callback2;
  });
  return reactExports.useCallback((...args) => {
    var _a4;
    return (_a4 = callbackRef.current) == null ? void 0 : _a4.call(callbackRef, ...args);
  }, deps);
}
function useTimeout(callback2, delay2) {
  const fn = useCallbackRef$2(callback2);
  reactExports.useEffect(() => {
    if (delay2 == null)
      return void 0;
    let timeoutId = null;
    timeoutId = window.setTimeout(() => {
      fn();
    }, delay2);
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [delay2, fn]);
}
function useUpdateEffect(callback2, deps) {
  const renderCycleRef = reactExports.useRef(false);
  const effectCycleRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    const mounted = renderCycleRef.current;
    const run = mounted && effectCycleRef.current;
    if (run) {
      return callback2();
    }
    effectCycleRef.current = true;
  }, deps);
  reactExports.useEffect(() => {
    renderCycleRef.current = true;
    return () => {
      renderCycleRef.current = false;
    };
  }, []);
}
const MotionConfigContext = reactExports.createContext({
  transformPagePoint: (p2) => p2,
  isStatic: false,
  reducedMotion: "never"
});
const MotionContext = reactExports.createContext({});
const PresenceContext = reactExports.createContext(null);
const isBrowser$2 = typeof document !== "undefined";
const useIsomorphicLayoutEffect$2 = isBrowser$2 ? reactExports.useLayoutEffect : reactExports.useEffect;
const LazyContext = reactExports.createContext({ strict: false });
const camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase();
const optimizedAppearDataId = "framerAppearId";
const optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);
const MotionGlobalConfig = {
  skipAnimations: false,
  useManualTiming: false
};
class Queue {
  constructor() {
    this.order = [];
    this.scheduled = /* @__PURE__ */ new Set();
  }
  add(process) {
    if (!this.scheduled.has(process)) {
      this.scheduled.add(process);
      this.order.push(process);
      return true;
    }
  }
  remove(process) {
    const index2 = this.order.indexOf(process);
    if (index2 !== -1) {
      this.order.splice(index2, 1);
      this.scheduled.delete(process);
    }
  }
  clear() {
    this.order.length = 0;
    this.scheduled.clear();
  }
}
function createRenderStep(runNextFrame) {
  let thisFrame = new Queue();
  let nextFrame = new Queue();
  let numToRun = 0;
  let isProcessing = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback2, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive)
        toKeepAlive.add(callback2);
      if (queue.add(callback2) && addToCurrentFrame && isProcessing) {
        numToRun = thisFrame.order.length;
      }
      return callback2;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback2) => {
      nextFrame.remove(callback2);
      toKeepAlive.delete(callback2);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }
      isProcessing = true;
      [thisFrame, nextFrame] = [nextFrame, thisFrame];
      nextFrame.clear();
      numToRun = thisFrame.order.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback2 = thisFrame.order[i];
          if (toKeepAlive.has(callback2)) {
            step.schedule(callback2);
            runNextFrame();
          }
          callback2(frameData2);
        }
      }
      isProcessing = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}
const stepsOrder = [
  "read",
  "resolveKeyframes",
  "update",
  "preRender",
  "render",
  "postRender"
  // Compute
];
const maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
  let runNextFrame = false;
  let useDefaultElapsed = true;
  const state2 = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };
  const steps2 = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(() => runNextFrame = true);
    return acc;
  }, {});
  const processStep = (stepId) => {
    steps2[stepId].process(state2);
  };
  const processBatch = () => {
    const timestamp = performance.now();
    runNextFrame = false;
    state2.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state2.timestamp, maxElapsed), 1);
    state2.timestamp = timestamp;
    state2.isProcessing = true;
    stepsOrder.forEach(processStep);
    state2.isProcessing = false;
    if (runNextFrame && allowKeepAlive) {
      useDefaultElapsed = false;
      scheduleNextBatch(processBatch);
    }
  };
  const wake = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!state2.isProcessing) {
      scheduleNextBatch(processBatch);
    }
  };
  const schedule = stepsOrder.reduce((acc, key) => {
    const step = steps2[key];
    acc[key] = (process, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        wake();
      return step.schedule(process, keepAlive, immediate);
    };
    return acc;
  }, {});
  const cancel = (process) => stepsOrder.forEach((key) => steps2[key].cancel(process));
  return { schedule, cancel, state: state2, steps: steps2 };
}
const { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);
function useVisualElement(Component, visualState, props2, createVisualElement) {
  const { visualElement: parent } = reactExports.useContext(MotionContext);
  const lazyContext = reactExports.useContext(LazyContext);
  const presenceContext = reactExports.useContext(PresenceContext);
  const reducedMotionConfig = reactExports.useContext(MotionConfigContext).reducedMotion;
  const visualElementRef = reactExports.useRef();
  createVisualElement = createVisualElement || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component, {
      visualState,
      parent,
      props: props2,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig
    });
  }
  const visualElement = visualElementRef.current;
  reactExports.useInsertionEffect(() => {
    visualElement && visualElement.update(props2, presenceContext);
  });
  const wantsHandoff = reactExports.useRef(Boolean(props2[optimizedAppearDataAttribute] && !window.HandoffComplete));
  useIsomorphicLayoutEffect$2(() => {
    if (!visualElement)
      return;
    microtask.postRender(visualElement.render);
    if (wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  });
  reactExports.useEffect(() => {
    if (!visualElement)
      return;
    visualElement.updateFeatures();
    if (!wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      wantsHandoff.current = false;
      window.HandoffComplete = true;
    }
  });
  return visualElement;
}
function isRefObject(ref) {
  return ref && typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}
function useMotionRef(visualState, visualElement, externalRef) {
  return reactExports.useCallback(
    (instance) => {
      instance && visualState.mount && visualState.mount(instance);
      if (visualElement) {
        instance ? visualElement.mount(instance) : visualElement.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement]
  );
}
function isVariantLabel(v2) {
  return typeof v2 === "string" || Array.isArray(v2);
}
function isAnimationControls(v2) {
  return v2 !== null && typeof v2 === "object" && typeof v2.start === "function";
}
const variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
];
const variantProps = ["initial", ...variantPriorityOrder];
function isControllingVariants(props2) {
  return isAnimationControls(props2.animate) || variantProps.some((name) => isVariantLabel(props2[name]));
}
function isVariantNode(props2) {
  return Boolean(isControllingVariants(props2) || props2.variants);
}
function getCurrentTreeVariants(props2, context2) {
  if (isControllingVariants(props2)) {
    const { initial, animate } = props2;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate) ? animate : void 0
    };
  }
  return props2.inherit !== false ? context2 : {};
}
function useCreateMotionContext(props2) {
  const { initial, animate } = getCurrentTreeVariants(props2, reactExports.useContext(MotionContext));
  return reactExports.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}
const featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
};
const featureDefinitions = {};
for (const key in featureProps) {
  featureDefinitions[key] = {
    isEnabled: (props2) => featureProps[key].some((name) => !!props2[name])
  };
}
function loadFeatures(features) {
  for (const key in features) {
    featureDefinitions[key] = {
      ...featureDefinitions[key],
      ...features[key]
    };
  }
}
const LayoutGroupContext = reactExports.createContext({});
const SwitchLayoutGroupContext = reactExports.createContext({});
const motionComponentSymbol = Symbol.for("motionComponentSymbol");
function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement, useRender, useVisualState, Component }) {
  preloadedFeatures2 && loadFeatures(preloadedFeatures2);
  function MotionComponent(props2, externalRef) {
    let MeasureLayout2;
    const configAndProps = {
      ...reactExports.useContext(MotionConfigContext),
      ...props2,
      layoutId: useLayoutId(props2)
    };
    const { isStatic } = configAndProps;
    const context2 = useCreateMotionContext(props2);
    const visualState = useVisualState(props2, isStatic);
    if (!isStatic && isBrowser$2) {
      context2.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);
      const initialLayoutGroupConfig = reactExports.useContext(SwitchLayoutGroupContext);
      const isStrict = reactExports.useContext(LazyContext).strict;
      if (context2.visualElement) {
        MeasureLayout2 = context2.visualElement.loadFeatures(
          // Note: Pass the full new combined props to correctly re-render dynamic feature components.
          configAndProps,
          isStrict,
          preloadedFeatures2,
          initialLayoutGroupConfig
        );
      }
    }
    return reactExports.createElement(
      MotionContext.Provider,
      { value: context2 },
      MeasureLayout2 && context2.visualElement ? reactExports.createElement(MeasureLayout2, { visualElement: context2.visualElement, ...configAndProps }) : null,
      useRender(Component, props2, useMotionRef(visualState, context2.visualElement, externalRef), visualState, isStatic, context2.visualElement)
    );
  }
  const ForwardRefComponent = reactExports.forwardRef(MotionComponent);
  ForwardRefComponent[motionComponentSymbol] = Component;
  return ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = reactExports.useContext(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}
function createMotionProxy(createConfig) {
  function custom(Component, customMotionComponentConfig = {}) {
    return createMotionComponent(createConfig(Component, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom;
  }
  const componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key) => {
      if (!componentCache.has(key)) {
        componentCache.set(key, custom(key));
      }
      return componentCache.get(key);
    }
  });
}
const lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];
function isSVGComponent(Component) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component !== "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component) > -1 || /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/u.test(Component)
  ) {
    return true;
  }
  return false;
}
const scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}
const transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
];
const transformProps = new Set(transformPropOrder);
function isForcedMotionValue(key, { layout: layout2, layoutId }) {
  return transformProps.has(key) || key.startsWith("origin") || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
}
const isMotionValue = (value) => Boolean(value && value.getVelocity);
const translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
const numTransforms = transformPropOrder.length;
function buildTransform(transform2, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate2) {
  let transformString = "";
  for (let i = 0; i < numTransforms; i++) {
    const key = transformPropOrder[i];
    if (transform2[key] !== void 0) {
      const transformName = translateAlias[key] || key;
      transformString += `${transformName}(${transform2[key]}) `;
    }
  }
  if (enableHardwareAcceleration && !transform2.z) {
    transformString += "translateZ(0)";
  }
  transformString = transformString.trim();
  if (transformTemplate2) {
    transformString = transformTemplate2(transform2, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
const checkStringStartsWith = (token2) => (key) => typeof key === "string" && key.startsWith(token2);
const isCSSVariableName = checkStringStartsWith("--");
const startsAsVariableToken = checkStringStartsWith("var(--");
const isCSSVariableToken = (value) => {
  const startsWithToken = startsAsVariableToken(value);
  if (!startsWithToken)
    return false;
  return singleCssVariableRegex.test(value.split("/*")[0].trim());
};
const singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;
const getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};
const clamp$2 = (min, max, v2) => {
  if (v2 > max)
    return max;
  if (v2 < min)
    return min;
  return v2;
};
const number = {
  test: (v2) => typeof v2 === "number",
  parse: parseFloat,
  transform: (v2) => v2
};
const alpha$1 = {
  ...number,
  transform: (v2) => clamp$2(0, 1, v2)
};
const scale = {
  ...number,
  default: 1
};
const sanitize = (v2) => Math.round(v2 * 1e5) / 1e5;
const floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;
const colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;
const singleColorRegex = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;
function isString$1(v2) {
  return typeof v2 === "string";
}
const createUnitType = (unit) => ({
  test: (v2) => isString$1(v2) && v2.endsWith(unit) && v2.split(" ").length === 1,
  parse: parseFloat,
  transform: (v2) => `${v2}${unit}`
});
const degrees = createUnitType("deg");
const percent = createUnitType("%");
const px = createUnitType("px");
const vh = createUnitType("vh");
const vw = createUnitType("vw");
const progressPercentage = {
  ...percent,
  parse: (v2) => percent.parse(v2) / 100,
  transform: (v2) => percent.transform(v2 * 100)
};
const int = {
  ...number,
  transform: Math.round
};
const numberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  size: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Transform props
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha$1,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px,
  // Misc
  zIndex: int,
  backgroundPositionX: px,
  backgroundPositionY: px,
  // SVG
  fillOpacity: alpha$1,
  strokeOpacity: alpha$1,
  numOctaves: int
};
function buildHTMLStyles(state2, latestValues, options, transformTemplate2) {
  const { style, vars: vars2, transform: transform2, transformOrigin } = state2;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  let transformIsNone = true;
  for (const key in latestValues) {
    const value = latestValues[key];
    if (isCSSVariableName(key)) {
      vars2[key] = value;
      continue;
    }
    const valueType = numberValueTypes[key];
    const valueAsType = getValueAsType(value, valueType);
    if (transformProps.has(key)) {
      hasTransform2 = true;
      transform2[key] = valueAsType;
      if (!transformIsNone)
        continue;
      if (value !== (valueType.default || 0))
        transformIsNone = false;
    } else if (key.startsWith("origin")) {
      hasTransformOrigin = true;
      transformOrigin[key] = valueAsType;
    } else {
      style[key] = valueAsType;
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate2) {
      style.transform = buildTransform(state2.transform, options, transformIsNone, transformTemplate2);
    } else if (style.transform) {
      style.transform = "none";
    }
  }
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}
const createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});
function copyRawValuesOnly(target, source, props2) {
  for (const key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props2)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues({ transformTemplate: transformTemplate2 }, visualState, isStatic) {
  return reactExports.useMemo(() => {
    const state2 = createHtmlRenderState();
    buildHTMLStyles(state2, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
    return Object.assign({}, state2.vars, state2.style);
  }, [visualState]);
}
function useStyle(props2, visualState, isStatic) {
  const styleProp = props2.style || {};
  const style = {};
  copyRawValuesOnly(style, styleProp, props2);
  Object.assign(style, useInitialMotionValues(props2, visualState, isStatic));
  return style;
}
function useHTMLProps(props2, visualState, isStatic) {
  const htmlProps = {};
  const style = useStyle(props2, visualState, isStatic);
  if (props2.drag && props2.dragListener !== false) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props2.drag === true ? "none" : `pan-${props2.drag === "x" ? "y" : "x"}`;
  }
  if (props2.tabIndex === void 0 && (props2.onTap || props2.onTapStart || props2.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}
const validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key) {
  return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || key.startsWith("onLayout") || validMotionProps.has(key);
}
let shouldForward = (key) => !isValidMotionProp(key);
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
}
try {
  loadExternalIsValidProp(require("@emotion/is-prop-valid").default);
} catch (_a4) {
}
function filterProps(props2, isDom, forwardMotionProps) {
  const filteredProps = {};
  for (const key in props2) {
    if (key === "values" && typeof props2.values === "object")
      continue;
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners
    props2["draggable"] && key.startsWith("onDrag")) {
      filteredProps[key] = props2[key];
    }
  }
  return filteredProps;
}
function calcOrigin$1(origin, offset, size2) {
  return typeof origin === "string" ? origin : px.transform(offset + size2 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  const pxOriginX = calcOrigin$1(originX, dimensions.x, dimensions.width);
  const pxOriginY = calcOrigin$1(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}
const dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
const camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length2, spacing2 = 1, offset = 0, useDashCase = true) {
  attrs.pathLength = 1;
  const keys2 = useDashCase ? dashKeys : camelKeys;
  attrs[keys2.offset] = px.transform(-offset);
  const pathLength = px.transform(length2);
  const pathSpacing = px.transform(spacing2);
  attrs[keys2.array] = `${pathLength} ${pathSpacing}`;
}
function buildSVGAttrs(state2, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  // This is object creation, which we try to avoid per-frame.
  ...latest
}, options, isSVGTag2, transformTemplate2) {
  buildHTMLStyles(state2, latest, options, transformTemplate2);
  if (isSVGTag2) {
    if (state2.style.viewBox) {
      state2.attrs.viewBox = state2.style.viewBox;
    }
    return;
  }
  state2.attrs = state2.style;
  state2.style = {};
  const { attrs, style, dimensions } = state2;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (attrScale !== void 0)
    attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}
const createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});
const isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";
function useSVGProps(props2, visualState, _isStatic, Component) {
  const visualProps = reactExports.useMemo(() => {
    const state2 = createSvgRenderState();
    buildSVGAttrs(state2, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props2.transformTemplate);
    return {
      ...state2.attrs,
      style: { ...state2.style }
    };
  }, [visualState]);
  if (props2.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props2.style, props2);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}
function createUseRender(forwardMotionProps = false) {
  const useRender = (Component, props2, ref, { latestValues }, isStatic) => {
    const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props2, latestValues, isStatic, Component);
    const filteredProps = filterProps(props2, typeof Component === "string", forwardMotionProps);
    const elementProps = Component !== reactExports.Fragment ? { ...filteredProps, ...visualProps, ref } : {};
    const { children } = props2;
    const renderedChildren = reactExports.useMemo(() => isMotionValue(children) ? children.get() : children, [children]);
    return reactExports.createElement(Component, {
      ...elementProps,
      children: renderedChildren
    });
  };
  return useRender;
}
function renderHTML(element, { style, vars: vars2 }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (const key in vars2) {
    element.style.setProperty(key, vars2[key]);
  }
}
const camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (const key in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}
function scrapeMotionValuesFromProps$1(props2, prevProps, visualElement) {
  var _a4;
  const { style } = props2;
  const newValues = {};
  for (const key in style) {
    if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props2) || ((_a4 = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a4 === void 0 ? void 0 : _a4.liveStyle) !== void 0) {
      newValues[key] = style[key];
    }
  }
  return newValues;
}
function scrapeMotionValuesFromProps(props2, prevProps, visualElement) {
  const newValues = scrapeMotionValuesFromProps$1(props2, prevProps, visualElement);
  for (const key in props2) {
    if (isMotionValue(props2[key]) || isMotionValue(prevProps[key])) {
      const targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
      newValues[targetKey] = props2[key];
    }
  }
  return newValues;
}
function resolveVariantFromProps(props2, definition, custom, currentValues2 = {}, currentVelocity = {}) {
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props2.custom, currentValues2, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = props2.variants && props2.variants[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props2.custom, currentValues2, currentVelocity);
  }
  return definition;
}
function useConstant(init2) {
  const ref = reactExports.useRef(null);
  if (ref.current === null) {
    ref.current = init2();
  }
  return ref.current;
}
const isKeyframesTarget = (v2) => {
  return Array.isArray(v2);
};
const isCustomValue = (v2) => {
  return Boolean(v2 && typeof v2 === "object" && v2.mix && v2.toValue);
};
const resolveFinalValueInKeyframes = (v2) => {
  return isKeyframesTarget(v2) ? v2[v2.length - 1] || 0 : v2;
};
function resolveMotionValue(value) {
  const unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2, createRenderState, onMount }, props2, context2, presenceContext) {
  const state2 = {
    latestValues: makeLatestValues(props2, context2, presenceContext, scrapeMotionValuesFromProps2),
    renderState: createRenderState()
  };
  if (onMount) {
    state2.mount = (instance) => onMount(props2, instance, state2);
  }
  return state2;
}
const makeUseVisualState = (config2) => (props2, isStatic) => {
  const context2 = reactExports.useContext(MotionContext);
  const presenceContext = reactExports.useContext(PresenceContext);
  const make = () => makeState(config2, props2, context2, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props2, context2, presenceContext, scrapeMotionValues) {
  const values = {};
  const motionValues = scrapeMotionValues(props2, {});
  for (const key in motionValues) {
    values[key] = resolveMotionValue(motionValues[key]);
  }
  let { initial, animate } = props2;
  const isControllingVariants$1 = isControllingVariants(props2);
  const isVariantNode$1 = isVariantNode(props2);
  if (context2 && isVariantNode$1 && !isControllingVariants$1 && props2.inherit !== false) {
    if (initial === void 0)
      initial = context2.initial;
    if (animate === void 0)
      animate = context2.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    const list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list2.forEach((definition) => {
      const resolved = resolveVariantFromProps(props2, definition);
      if (!resolved)
        return;
      const { transitionEnd, transition: transition2, ...target } = resolved;
      for (const key in target) {
        let valueTarget = target[key];
        if (Array.isArray(valueTarget)) {
          const index2 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index2];
        }
        if (valueTarget !== null) {
          values[key] = valueTarget;
        }
      }
      for (const key in transitionEnd)
        values[key] = transitionEnd[key];
    });
  }
  return values;
}
const noop$2 = (any) => any;
const { schedule: frame, cancel: cancelFrame, state: frameData, steps: steps$1 } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop$2, true);
const svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createSvgRenderState,
    onMount: (props2, instance, { renderState, latestValues }) => {
      frame.read(() => {
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e2) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
      });
      frame.render(() => {
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props2.transformTemplate);
        renderSVG(instance, renderState);
      });
    }
  })
};
const htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
    createRenderState: createHtmlRenderState
  })
};
function createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement) {
  const baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
  return {
    ...baseConfig,
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement,
    Component
  };
}
function addDomEvent(target, eventName, handler, options = { passive: true }) {
  target.addEventListener(eventName, handler, options);
  return () => target.removeEventListener(eventName, handler);
}
const isPrimaryPointer = (event2) => {
  if (event2.pointerType === "mouse") {
    return typeof event2.button !== "number" || event2.button <= 0;
  } else {
    return event2.isPrimary !== false;
  }
};
function extractEventInfo(event2, pointType = "page") {
  return {
    point: {
      x: event2[pointType + "X"],
      y: event2[pointType + "Y"]
    }
  };
}
const addPointerInfo = (handler) => {
  return (event2) => isPrimaryPointer(event2) && handler(event2, extractEventInfo(event2));
};
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, eventName, addPointerInfo(handler), options);
}
const combineFunctions = (a, b2) => (v2) => b2(a(v2));
const pipe = (...transformers) => transformers.reduce(combineFunctions);
function createLock(name) {
  let lock = null;
  return () => {
    const openLock = () => {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
const globalHorizontalLock = createLock("dragHorizontal");
const globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  let lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    const openHorizontal = globalHorizontalLock();
    const openVertical = globalVerticalLock();
    if (openHorizontal && openVertical) {
      lock = () => {
        openHorizontal();
        openVertical();
      };
    } else {
      if (openHorizontal)
        openHorizontal();
      if (openVertical)
        openVertical();
    }
  }
  return lock;
}
function isDragActive() {
  const openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}
class Feature {
  constructor(node2) {
    this.isMounted = false;
    this.node = node2;
  }
  update() {
  }
}
function addHoverEvent(node2, isActive) {
  const eventName = "pointer" + (isActive ? "enter" : "leave");
  const callbackName = "onHover" + (isActive ? "Start" : "End");
  const handleEvent = (event2, info) => {
    if (event2.pointerType === "touch" || isDragActive())
      return;
    const props2 = node2.getProps();
    if (node2.animationState && props2.whileHover) {
      node2.animationState.setActive("whileHover", isActive);
    }
    if (props2[callbackName]) {
      props2[callbackName](event2, info);
    }
  };
  return addPointerEvent(node2.current, eventName, handleEvent, {
    passive: !node2.getProps()[callbackName]
  });
}
class HoverGesture extends Feature {
  mount() {
    this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
  }
  unmount() {
  }
}
class FocusGesture extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible = false;
    try {
      isFocusVisible = this.node.current.matches(":focus-visible");
    } catch (e2) {
      isFocusVisible = true;
    }
    if (!isFocusVisible || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
}
const isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};
function fireSyntheticPointerEvent(name, handler) {
  if (!handler)
    return;
  const syntheticPointerEvent = new PointerEvent("pointer" + name);
  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
}
class PressGesture extends Feature {
  constructor() {
    super(...arguments);
    this.removeStartListeners = noop$2;
    this.removeEndListeners = noop$2;
    this.removeAccessibleListeners = noop$2;
    this.startPointerPress = (startEvent, startInfo) => {
      if (this.isPressing)
        return;
      this.removeEndListeners();
      const props2 = this.node.getProps();
      const endPointerPress = (endEvent, endInfo) => {
        if (!this.checkPressEnd())
          return;
        const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();
        !globalTapTarget && !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
      };
      const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props2.onTap || props2["onPointerUp"]) });
      const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props2.onTapCancel || props2["onPointerCancel"]) });
      this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);
      this.startPress(startEvent, startInfo);
    };
    this.startAccessiblePress = () => {
      const handleKeydown = (keydownEvent) => {
        if (keydownEvent.key !== "Enter" || this.isPressing)
          return;
        const handleKeyup = (keyupEvent) => {
          if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
            return;
          fireSyntheticPointerEvent("up", (event2, info) => {
            const { onTap } = this.node.getProps();
            if (onTap)
              onTap(event2, info);
          });
        };
        this.removeEndListeners();
        this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
        fireSyntheticPointerEvent("down", (event2, info) => {
          this.startPress(event2, info);
        });
      };
      const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
      const handleBlur = () => {
        if (!this.isPressing)
          return;
        fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
      };
      const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
      this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);
    };
  }
  startPress(event2, info) {
    this.isPressing = true;
    const { onTapStart, whileTap } = this.node.getProps();
    if (whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", true);
    }
    if (onTapStart) {
      onTapStart(event2, info);
    }
  }
  checkPressEnd() {
    this.removeEndListeners();
    this.isPressing = false;
    const props2 = this.node.getProps();
    if (props2.whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", false);
    }
    return !isDragActive();
  }
  cancelPress(event2, info) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel } = this.node.getProps();
    if (onTapCancel)
      onTapCancel(event2, info);
  }
  mount() {
    const props2 = this.node.getProps();
    const removePointerListener = addPointerEvent(props2.globalTapTarget ? window : this.node.current, "pointerdown", this.startPointerPress, { passive: !(props2.onTapStart || props2["onPointerStart"]) });
    const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = pipe(removePointerListener, removeFocusListener);
  }
  unmount() {
    this.removeStartListeners();
    this.removeEndListeners();
    this.removeAccessibleListeners();
  }
}
const observerCallbacks = /* @__PURE__ */ new WeakMap();
const observers$1 = /* @__PURE__ */ new WeakMap();
const fireObserverCallback = (entry) => {
  const callback2 = observerCallbacks.get(entry.target);
  callback2 && callback2(entry);
};
const fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  const lookupRoot = root || document;
  if (!observers$1.has(lookupRoot)) {
    observers$1.set(lookupRoot, {});
  }
  const rootObservers = observers$1.get(lookupRoot);
  const key = JSON.stringify(options);
  if (!rootObservers[key]) {
    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
  }
  return rootObservers[key];
}
function observeIntersection(element, options, callback2) {
  const rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback2);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}
const thresholdNames = {
  some: 0,
  all: 1
};
class InViewFeature extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once: once2 } = viewport;
    const options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      if (this.isInView === isIntersecting)
        return;
      this.isInView = isIntersecting;
      if (once2 && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback2 = isIntersecting ? onViewportEnter : onViewportLeave;
      callback2 && callback2(entry);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined")
      return;
    const { props: props2, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props2, prevProps));
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {
  }
}
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport[name] !== prevViewport[name];
}
const gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};
function shallowCompare(next2, prev2) {
  if (!Array.isArray(prev2))
    return false;
  const prevLength = prev2.length;
  if (prevLength !== next2.length)
    return false;
  for (let i = 0; i < prevLength; i++) {
    if (prev2[i] !== next2[i])
      return false;
  }
  return true;
}
function getCurrent(visualElement) {
  const current = {};
  visualElement.values.forEach((value, key) => current[key] = value.get());
  return current;
}
function getVelocity$1(visualElement) {
  const velocity = {};
  visualElement.values.forEach((value, key) => velocity[key] = value.getVelocity());
  return velocity;
}
function resolveVariant(visualElement, definition, custom) {
  const props2 = visualElement.getProps();
  return resolveVariantFromProps(props2, definition, custom !== void 0 ? custom : props2.custom, getCurrent(visualElement), getVelocity$1(visualElement));
}
const secondsToMilliseconds = (seconds) => seconds * 1e3;
const millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;
const underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
};
const criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
});
const keyframesTransition = {
  type: "keyframes",
  duration: 0.8
};
const ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
};
const getDefaultTransition = (valueKey, { keyframes: keyframes3 }) => {
  if (keyframes3.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes3[1]) : underDampedSpring;
  }
  return ease;
};
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from: from2, elapsed, ...transition2 }) {
  return !!Object.keys(transition2).length;
}
function getValueTransition(transition2, key) {
  return transition2[key] || transition2["default"] || transition2;
}
const isNotNull = (value) => value !== null;
function getFinalKeyframe(keyframes3, { repeat, repeatType = "loop" }, finalKeyframe) {
  const resolvedKeyframes = keyframes3.filter(isNotNull);
  const index2 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : resolvedKeyframes.length - 1;
  return !index2 || finalKeyframe === void 0 ? resolvedKeyframes[index2] : finalKeyframe;
}
let now;
function clearTime() {
  now = void 0;
}
const time = {
  now: () => {
    if (now === void 0) {
      time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());
    }
    return now;
  },
  set: (newTime) => {
    now = newTime;
    queueMicrotask(clearTime);
  }
};
const isZeroValueString = (v2) => /^0[^.\s]+$/u.test(v2);
function isNone(value) {
  if (typeof value === "number") {
    return value === 0;
  } else if (value !== null) {
    return value === "none" || value === "0" || isZeroValueString(value);
  } else {
    return true;
  }
}
let invariant$1 = noop$2;
const isNumericalString = (v2) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v2);
const splitCSSVariableRegex = (
  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
  /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u
);
function parseCSSVariable(current) {
  const match2 = splitCSSVariableRegex.exec(current);
  if (!match2)
    return [,];
  const [, token1, token2, fallback] = match2;
  return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];
}
function getVariableValue(current, element, depth = 1) {
  const [token2, fallback] = parseCSSVariable(current);
  if (!token2)
    return;
  const resolved = window.getComputedStyle(element).getPropertyValue(token2);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
  }
  return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;
}
const positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y",
  "translateX",
  "translateY"
]);
const isNumOrPxType = (v2) => v2 === number || v2 === px;
const getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
const getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform2 }) => {
  if (transform2 === "none" || !transform2)
    return 0;
  const matrix3d = transform2.match(/^matrix3d\((.+)\)$/u);
  if (matrix3d) {
    return getPosFromMatrix(matrix3d[1], pos3);
  } else {
    const matrix = transform2.match(/^matrix\((.+)\)$/u);
    if (matrix) {
      return getPosFromMatrix(matrix[1], pos2);
    } else {
      return 0;
    }
  }
};
const transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
const nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
function removeNonTranslationalTransform(visualElement) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key) => {
    const value = visualElement.getValue(key);
    if (value !== void 0) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  return removedTransforms;
}
const positionalValues = {
  // Dimensions
  width: ({ x: x2 }, { paddingLeft = "0", paddingRight = "0" }) => x2.max - x2.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y: y2 }, { paddingTop = "0", paddingBottom = "0" }) => y2.max - y2.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y: y2 }, { top }) => parseFloat(top) + (y2.max - y2.min),
  right: ({ x: x2 }, { left }) => parseFloat(left) + (x2.max - x2.min),
  // Transform
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
const testValueType = (v2) => (type) => type.test(v2);
const auto = {
  test: (v2) => v2 === "auto",
  parse: (v2) => v2
};
const dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
const findDimensionValueType = (v2) => dimensionValueTypes.find(testValueType(v2));
const toResolve = /* @__PURE__ */ new Set();
let isScheduled = false;
let anyNeedsMeasurement = false;
function measureAllKeyframes() {
  if (anyNeedsMeasurement) {
    const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);
    const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));
    const transformsToRestore = /* @__PURE__ */ new Map();
    elementsToMeasure.forEach((element) => {
      const removedTransforms = removeNonTranslationalTransform(element);
      if (!removedTransforms.length)
        return;
      transformsToRestore.set(element, removeNonTranslationalTransform(element));
      element.render();
    });
    resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
    elementsToMeasure.forEach((element) => {
      element.render();
    });
    resolversToMeasure.forEach((resolver) => resolver.measureEndState());
    resolversToMeasure.forEach((resolver) => {
      if (resolver.suspendedScrollY !== void 0) {
        window.scrollTo(0, resolver.suspendedScrollY);
      }
    });
  }
  anyNeedsMeasurement = false;
  isScheduled = false;
  toResolve.forEach((resolver) => resolver.complete());
  toResolve.clear();
}
function readAllKeyframes() {
  toResolve.forEach((resolver) => {
    resolver.readKeyframes();
    if (resolver.needsMeasurement) {
      anyNeedsMeasurement = true;
    }
  });
}
function flushKeyframeResolvers() {
  readAllKeyframes();
  measureAllKeyframes();
}
class KeyframeResolver {
  constructor(unresolvedKeyframes, onComplete, name, motionValue2, element, isAsync = false) {
    this.isComplete = false;
    this.isAsync = false;
    this.needsMeasurement = false;
    this.isScheduled = false;
    this.unresolvedKeyframes = [...unresolvedKeyframes];
    this.onComplete = onComplete;
    this.name = name;
    this.motionValue = motionValue2;
    this.element = element;
    this.isAsync = isAsync;
  }
  scheduleResolve() {
    this.isScheduled = true;
    if (this.isAsync) {
      toResolve.add(this);
      if (!isScheduled) {
        isScheduled = true;
        frame.read(readAllKeyframes);
        frame.resolveKeyframes(measureAllKeyframes);
      }
    } else {
      this.readKeyframes();
      this.complete();
    }
  }
  readKeyframes() {
    const { unresolvedKeyframes, name, element, motionValue: motionValue2 } = this;
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      if (unresolvedKeyframes[i] === null) {
        if (i === 0) {
          const currentValue = motionValue2 === null || motionValue2 === void 0 ? void 0 : motionValue2.get();
          const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
          if (currentValue !== void 0) {
            unresolvedKeyframes[0] = currentValue;
          } else if (element && name) {
            const valueAsRead = element.readValue(name, finalKeyframe);
            if (valueAsRead !== void 0 && valueAsRead !== null) {
              unresolvedKeyframes[0] = valueAsRead;
            }
          }
          if (unresolvedKeyframes[0] === void 0) {
            unresolvedKeyframes[0] = finalKeyframe;
          }
          if (motionValue2 && currentValue === void 0) {
            motionValue2.set(unresolvedKeyframes[0]);
          }
        } else {
          unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];
        }
      }
    }
  }
  setFinalKeyframe() {
  }
  measureInitialState() {
  }
  renderEndStyles() {
  }
  measureEndState() {
  }
  complete() {
    this.isComplete = true;
    this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);
    toResolve.delete(this);
  }
  cancel() {
    if (!this.isComplete) {
      this.isScheduled = false;
      toResolve.delete(this);
    }
  }
  resume() {
    if (!this.isComplete)
      this.scheduleResolve();
  }
}
const isColorString = (type, testProp) => (v2) => {
  return Boolean(isString$1(v2) && singleColorRegex.test(v2) && v2.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v2, testProp));
};
const splitColor = (aName, bName, cName) => (v2) => {
  if (!isString$1(v2))
    return v2;
  const [a, b2, c2, alpha2] = v2.match(floatRegex);
  return {
    [aName]: parseFloat(a),
    [bName]: parseFloat(b2),
    [cName]: parseFloat(c2),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};
const clampRgbUnit = (v2) => clamp$2(0, 255, v2);
const rgbUnit = {
  ...number,
  transform: (v2) => Math.round(clampRgbUnit(v2))
};
const rgba = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha$1.transform(alpha$1$1)) + ")"
};
function parseHex(v2) {
  let r2 = "";
  let g2 = "";
  let b2 = "";
  let a = "";
  if (v2.length > 5) {
    r2 = v2.substring(1, 3);
    g2 = v2.substring(3, 5);
    b2 = v2.substring(5, 7);
    a = v2.substring(7, 9);
  } else {
    r2 = v2.substring(1, 2);
    g2 = v2.substring(2, 3);
    b2 = v2.substring(3, 4);
    a = v2.substring(4, 5);
    r2 += r2;
    g2 += g2;
    b2 += b2;
    a += a;
  }
  return {
    red: parseInt(r2, 16),
    green: parseInt(g2, 16),
    blue: parseInt(b2, 16),
    alpha: a ? parseInt(a, 16) / 255 : 1
  };
}
const hex$1 = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba.transform
};
const hsla = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue: hue2, saturation, lightness, alpha: alpha$1$1 = 1 }) => {
    return "hsla(" + Math.round(hue2) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha$1.transform(alpha$1$1)) + ")";
  }
};
const color$1 = {
  test: (v2) => rgba.test(v2) || hex$1.test(v2) || hsla.test(v2),
  parse: (v2) => {
    if (rgba.test(v2)) {
      return rgba.parse(v2);
    } else if (hsla.test(v2)) {
      return hsla.parse(v2);
    } else {
      return hex$1.parse(v2);
    }
  },
  transform: (v2) => {
    return isString$1(v2) ? v2 : v2.hasOwnProperty("red") ? rgba.transform(v2) : hsla.transform(v2);
  }
};
function test(v2) {
  var _a4, _b3;
  return isNaN(v2) && isString$1(v2) && (((_a4 = v2.match(floatRegex)) === null || _a4 === void 0 ? void 0 : _a4.length) || 0) + (((_b3 = v2.match(colorRegex)) === null || _b3 === void 0 ? void 0 : _b3.length) || 0) > 0;
}
const NUMBER_TOKEN = "number";
const COLOR_TOKEN = "color";
const VAR_TOKEN = "var";
const VAR_FUNCTION_TOKEN = "var(";
const SPLIT_TOKEN = "${}";
const complexRegex = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const values = [];
  const indexes = {
    color: [],
    number: [],
    var: []
  };
  const types2 = [];
  let i = 0;
  const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
    if (color$1.test(parsedValue)) {
      indexes.color.push(i);
      types2.push(COLOR_TOKEN);
      values.push(color$1.parse(parsedValue));
    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
      indexes.var.push(i);
      types2.push(VAR_TOKEN);
      values.push(parsedValue);
    } else {
      indexes.number.push(i);
      types2.push(NUMBER_TOKEN);
      values.push(parseFloat(parsedValue));
    }
    ++i;
    return SPLIT_TOKEN;
  });
  const split2 = tokenised.split(SPLIT_TOKEN);
  return { values, split: split2, indexes, types: types2 };
}
function parseComplexValue(v2) {
  return analyseComplexValue(v2).values;
}
function createTransformer(source) {
  const { split: split2, types: types2 } = analyseComplexValue(source);
  const numSections = split2.length;
  return (v2) => {
    let output = "";
    for (let i = 0; i < numSections; i++) {
      output += split2[i];
      if (v2[i] !== void 0) {
        const type = types2[i];
        if (type === NUMBER_TOKEN) {
          output += sanitize(v2[i]);
        } else if (type === COLOR_TOKEN) {
          output += color$1.transform(v2[i]);
        } else {
          output += v2[i];
        }
      }
    }
    return output;
  };
}
const convertNumbersToZero = (v2) => typeof v2 === "number" ? 0 : v2;
function getAnimatableNone$1(v2) {
  const parsed = parseComplexValue(v2);
  const transformer = createTransformer(v2);
  return transformer(parsed.map(convertNumbersToZero));
}
const complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone: getAnimatableNone$1
};
const maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v2) {
  const [name, value] = v2.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v2;
  const [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v2;
  const unit = value.replace(number2, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
const functionRegex = /\b([a-z-]*)\(.*?\)/gu;
const filter$1 = {
  ...complex,
  getAnimatableNone: (v2) => {
    const functions = v2.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v2;
  }
};
const defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color: color$1,
  backgroundColor: color$1,
  outlineColor: color$1,
  fill: color$1,
  stroke: color$1,
  // Border props
  borderColor: color$1,
  borderTopColor: color$1,
  borderRightColor: color$1,
  borderBottomColor: color$1,
  borderLeftColor: color$1,
  filter: filter$1,
  WebkitFilter: filter$1
};
const getDefaultValueType = (key) => defaultValueTypes[key];
function getAnimatableNone(key, value) {
  let defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter$1)
    defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}
function makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {
  let i = 0;
  let animatableTemplate = void 0;
  while (i < unresolvedKeyframes.length && !animatableTemplate) {
    if (typeof unresolvedKeyframes[i] === "string" && unresolvedKeyframes[i] !== "none" && unresolvedKeyframes[i] !== "0") {
      animatableTemplate = unresolvedKeyframes[i];
    }
    i++;
  }
  if (animatableTemplate && name) {
    for (const noneIndex of noneKeyframeIndexes) {
      unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);
    }
  }
}
class DOMKeyframesResolver extends KeyframeResolver {
  constructor(unresolvedKeyframes, onComplete, name, motionValue2) {
    super(unresolvedKeyframes, onComplete, name, motionValue2, motionValue2 === null || motionValue2 === void 0 ? void 0 : motionValue2.owner, true);
  }
  readKeyframes() {
    const { unresolvedKeyframes, element, name } = this;
    if (!element.current)
      return;
    super.readKeyframes();
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      const keyframe = unresolvedKeyframes[i];
      if (typeof keyframe === "string" && isCSSVariableToken(keyframe)) {
        const resolved = getVariableValue(keyframe, element.current);
        if (resolved !== void 0) {
          unresolvedKeyframes[i] = resolved;
        }
      }
    }
    if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {
      return this.resolveNoneKeyframes();
    }
    const [origin, target] = unresolvedKeyframes;
    const originType = findDimensionValueType(origin);
    const targetType = findDimensionValueType(target);
    if (originType === targetType)
      return;
    if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {
      for (let i = 0; i < unresolvedKeyframes.length; i++) {
        const value = unresolvedKeyframes[i];
        if (typeof value === "string") {
          unresolvedKeyframes[i] = parseFloat(value);
        }
      }
    } else {
      this.needsMeasurement = true;
    }
  }
  resolveNoneKeyframes() {
    const { unresolvedKeyframes, name } = this;
    const noneKeyframeIndexes = [];
    for (let i = 0; i < unresolvedKeyframes.length; i++) {
      if (isNone(unresolvedKeyframes[i])) {
        noneKeyframeIndexes.push(i);
      }
    }
    if (noneKeyframeIndexes.length) {
      makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);
    }
  }
  measureInitialState() {
    const { element, unresolvedKeyframes, name } = this;
    if (!element.current)
      return;
    if (name === "height") {
      this.suspendedScrollY = window.pageYOffset;
    }
    this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
    unresolvedKeyframes[0] = this.measuredOrigin;
    const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
    if (measureKeyframe !== void 0) {
      element.getValue(name, measureKeyframe).jump(measureKeyframe, false);
    }
  }
  measureEndState() {
    var _a4;
    const { element, name, unresolvedKeyframes } = this;
    if (!element.current)
      return;
    const value = element.getValue(name);
    value && value.jump(this.measuredOrigin, false);
    const finalKeyframeIndex = unresolvedKeyframes.length - 1;
    const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
    unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
    if (finalKeyframe !== null) {
      this.finalKeyframe = finalKeyframe;
    }
    if ((_a4 = this.removedTransforms) === null || _a4 === void 0 ? void 0 : _a4.length) {
      this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {
        element.getValue(unsetTransformName).set(unsetTransformValue);
      });
    }
    this.resolveNoneKeyframes();
  }
}
function memo(callback2) {
  let result;
  return () => {
    if (result === void 0)
      result = callback2();
    return result;
  };
}
const isAnimatable = (value, name) => {
  if (name === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && // It's animatable if we have a string
  (complex.test(value) || value === "0") && // And it contains numbers and/or colors
  !value.startsWith("url(")) {
    return true;
  }
  return false;
};
function hasKeyframesChanged(keyframes3) {
  const current = keyframes3[0];
  if (keyframes3.length === 1)
    return true;
  for (let i = 0; i < keyframes3.length; i++) {
    if (keyframes3[i] !== current)
      return true;
  }
}
function canAnimate(keyframes3, name, type, velocity) {
  const originKeyframe = keyframes3[0];
  if (originKeyframe === null)
    return false;
  const targetKeyframe = keyframes3[keyframes3.length - 1];
  const isOriginAnimatable = isAnimatable(originKeyframe, name);
  const isTargetAnimatable = isAnimatable(targetKeyframe, name);
  if (!isOriginAnimatable || !isTargetAnimatable) {
    return false;
  }
  return hasKeyframesChanged(keyframes3) || type === "spring" && velocity;
}
class BaseAnimation {
  constructor({ autoplay = true, delay: delay2 = 0, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", ...options }) {
    this.isStopped = false;
    this.hasAttemptedResolve = false;
    this.options = {
      autoplay,
      delay: delay2,
      type,
      repeat,
      repeatDelay,
      repeatType,
      ...options
    };
    this.updateFinishedPromise();
  }
  /**
   * A getter for resolved data. If keyframes are not yet resolved, accessing
   * this.resolved will synchronously flush all pending keyframe resolvers.
   * This is a deoptimisation, but at its worst still batches read/writes.
   */
  get resolved() {
    if (!this._resolved && !this.hasAttemptedResolve) {
      flushKeyframeResolvers();
    }
    return this._resolved;
  }
  /**
   * A method to be called when the keyframes resolver completes. This method
   * will check if its possible to run the animation and, if not, skip it.
   * Otherwise, it will call initPlayback on the implementing class.
   */
  onKeyframesResolved(keyframes3, finalKeyframe) {
    this.hasAttemptedResolve = true;
    const { name, type, velocity, delay: delay2, onComplete, onUpdate, isGenerator } = this.options;
    if (!isGenerator && !canAnimate(keyframes3, name, type, velocity)) {
      if (!delay2) {
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes3, this.options, finalKeyframe));
        onComplete === null || onComplete === void 0 ? void 0 : onComplete();
        this.resolveFinishedPromise();
        return;
      } else {
        this.options.duration = 0;
      }
    }
    const resolvedAnimation = this.initPlayback(keyframes3, finalKeyframe);
    if (resolvedAnimation === false)
      return;
    this._resolved = {
      keyframes: keyframes3,
      finalKeyframe,
      ...resolvedAnimation
    };
    this.onPostResolved();
  }
  onPostResolved() {
  }
  /**
   * Allows the returned animation to be awaited or promise-chained. Currently
   * resolves when the animation finishes at all but in a future update could/should
   * reject if its cancels.
   */
  then(resolve2, reject) {
    return this.currentFinishedPromise.then(resolve2, reject);
  }
  updateFinishedPromise() {
    this.currentFinishedPromise = new Promise((resolve2) => {
      this.resolveFinishedPromise = resolve2;
    });
  }
}
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}
const velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t2, current) {
  const prevT = Math.max(t2 - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t2 - prevT);
}
const safeMin = 1e-3;
const minDuration = 0.01;
const maxDuration$1 = 10;
const minDamping = 0.05;
const maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp$2(minDamping, maxDamping, dampingRatio);
  duration = clamp$2(minDuration, maxDuration$1, millisecondsToSeconds(duration));
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a = exponentialDecay - velocity;
      const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      const c2 = Math.exp(-delta);
      return safeMin - a / b2 * c2;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d2 = delta * velocity + velocity;
      const e2 = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f2 = Math.exp(-delta);
      const g2 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d2 - e2) * f2) / g2;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b2 = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a * b2;
    };
    derivative = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b2 = (velocity - undampedFreq2) * (duration * duration);
      return a * b2;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
const rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}
const durationKeys = ["duration", "bounce"];
const physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys2) {
  return keys2.some((key) => options[key] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: false,
    ...options
  };
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    const derived = findSpring(options);
    springOptions = {
      ...springOptions,
      ...derived,
      mass: 1
    };
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring({ keyframes: keyframes3, restDelta, restSpeed, ...options }) {
  const origin = keyframes3[0];
  const target = keyframes3[keyframes3.length - 1];
  const state2 = { done: false, value: origin };
  const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({
    ...options,
    velocity: -millisecondsToSeconds(options.velocity || 0)
  });
  const initialVelocity = velocity || 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin;
  const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
  restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t2) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t2) + initialDelta * Math.cos(angularFreq * t2));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t2) => target - Math.exp(-undampedAngularFreq * t2) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t2);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t2) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
      const freqForT = Math.min(dampedAngularFreq * t2, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  return {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t2) => {
      const current = resolveSpring(t2);
      if (!isResolvedFromDuration) {
        let currentVelocity = initialVelocity;
        if (t2 !== 0) {
          if (dampingRatio < 1) {
            currentVelocity = calcGeneratorVelocity(resolveSpring, t2, current);
          } else {
            currentVelocity = 0;
          }
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state2.done = t2 >= duration;
      }
      state2.value = state2.done ? target : current;
      return state2;
    }
  };
}
function inertia({ keyframes: keyframes3, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
  const origin = keyframes3[0];
  const state2 = {
    done: false,
    value: origin
  };
  const isOutOfBounds = (v2) => min !== void 0 && v2 < min || max !== void 0 && v2 > max;
  const nearestBoundary = (v2) => {
    if (min === void 0)
      return max;
    if (max === void 0)
      return min;
    return Math.abs(min - v2) < Math.abs(max - v2) ? min : max;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - origin;
  const calcDelta = (t2) => -amplitude * Math.exp(-t2 / timeConstant);
  const calcLatest = (t2) => target + calcDelta(t2);
  const applyFriction = (t2) => {
    const delta = calcDelta(t2);
    const latest = calcLatest(t2);
    state2.done = Math.abs(delta) <= restDelta;
    state2.value = state2.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t2) => {
    if (!isOutOfBounds(state2.value))
      return;
    timeReachedBoundary = t2;
    spring$1 = spring({
      keyframes: [state2.value, nearestBoundary(state2.value)],
      velocity: calcGeneratorVelocity(calcLatest, t2, state2.value),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t2) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t2);
        checkCatchBoundary(t2);
      }
      if (timeReachedBoundary !== void 0 && t2 >= timeReachedBoundary) {
        return spring$1.next(t2 - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t2);
        return state2;
      }
    }
  };
}
const calcBezier = (t2, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t2 + (3 * a2 - 6 * a1)) * t2 + 3 * a1) * t2;
const subdivisionPrecision = 1e-7;
const subdivisionMaxIterations = 12;
function binarySubdivide(x2, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - x2;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop$2;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t2) => t2 === 0 || t2 === 1 ? t2 : calcBezier(getTForX(t2), mY1, mY2);
}
const easeIn = cubicBezier(0.42, 0, 1, 1);
const easeOut = cubicBezier(0, 0, 0.58, 1);
const easeInOut = cubicBezier(0.42, 0, 0.58, 1);
const isEasingArray = (ease2) => {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};
const mirrorEasing = (easing) => (p2) => p2 <= 0.5 ? easing(2 * p2) / 2 : (2 - easing(2 * (1 - p2))) / 2;
const reverseEasing = (easing) => (p2) => 1 - easing(1 - p2);
const circIn = (p2) => 1 - Math.sin(Math.acos(p2));
const circOut = reverseEasing(circIn);
const circInOut = mirrorEasing(circIn);
const backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
const backIn = reverseEasing(backOut);
const backInOut = mirrorEasing(backIn);
const anticipate = (p2) => (p2 *= 2) < 1 ? 0.5 * backIn(p2) : 0.5 * (2 - Math.pow(2, -10 * (p2 - 1)));
const easingLookup = {
  linear: noop$2,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
};
const easingDefinitionToFunction = (definition) => {
  if (Array.isArray(definition)) {
    invariant$1(definition.length === 4);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    return easingLookup[definition];
  }
  return definition;
};
const progress = (from2, to2, value) => {
  const toFromDifference = to2 - from2;
  return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
};
const mixNumber$1 = (from2, to2, progress2) => {
  return from2 + (to2 - from2) * progress2;
};
function hueToRgb(p2, q2, t2) {
  if (t2 < 0)
    t2 += 1;
  if (t2 > 1)
    t2 -= 1;
  if (t2 < 1 / 6)
    return p2 + (q2 - p2) * 6 * t2;
  if (t2 < 1 / 2)
    return q2;
  if (t2 < 2 / 3)
    return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
  return p2;
}
function hslaToRgba({ hue: hue2, saturation, lightness, alpha: alpha2 }) {
  hue2 /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q2 = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p2 = 2 * lightness - q2;
    red = hueToRgb(p2, q2, hue2 + 1 / 3);
    green = hueToRgb(p2, q2, hue2);
    blue = hueToRgb(p2, q2, hue2 - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha2
  };
}
const mixLinearColor = (from2, to2, v2) => {
  const fromExpo = from2 * from2;
  const expo = v2 * (to2 * to2 - fromExpo) + fromExpo;
  return expo < 0 ? 0 : Math.sqrt(expo);
};
const colorTypes = [hex$1, rgba, hsla];
const getColorType = (v2) => colorTypes.find((type) => type.test(v2));
function asRGBA(color2) {
  const type = getColorType(color2);
  let model = type.parse(color2);
  if (type === hsla) {
    model = hslaToRgba(model);
  }
  return model;
}
const mixColor = (from2, to2) => {
  const fromRGBA = asRGBA(from2);
  const toRGBA = asRGBA(to2);
  const blended = { ...fromRGBA };
  return (v2) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v2);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v2);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v2);
    blended.alpha = mixNumber$1(fromRGBA.alpha, toRGBA.alpha, v2);
    return rgba.transform(blended);
  };
};
function mixImmediate(a, b2) {
  return (p2) => p2 > 0 ? b2 : a;
}
function mixNumber(a, b2) {
  return (p2) => mixNumber$1(a, b2, p2);
}
function getMixer(a) {
  if (typeof a === "number") {
    return mixNumber;
  } else if (typeof a === "string") {
    return isCSSVariableToken(a) ? mixImmediate : color$1.test(a) ? mixColor : mixComplex;
  } else if (Array.isArray(a)) {
    return mixArray;
  } else if (typeof a === "object") {
    return color$1.test(a) ? mixColor : mixObject;
  }
  return mixImmediate;
}
function mixArray(a, b2) {
  const output = [...a];
  const numValues = output.length;
  const blendValue = a.map((v2, i) => getMixer(v2)(v2, b2[i]));
  return (p2) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](p2);
    }
    return output;
  };
}
function mixObject(a, b2) {
  const output = { ...a, ...b2 };
  const blendValue = {};
  for (const key in output) {
    if (a[key] !== void 0 && b2[key] !== void 0) {
      blendValue[key] = getMixer(a[key])(a[key], b2[key]);
    }
  }
  return (v2) => {
    for (const key in blendValue) {
      output[key] = blendValue[key](v2);
    }
    return output;
  };
}
function matchOrder(origin, target) {
  var _a4;
  const orderedOrigin = [];
  const pointers = { color: 0, var: 0, number: 0 };
  for (let i = 0; i < target.values.length; i++) {
    const type = target.types[i];
    const originIndex = origin.indexes[type][pointers[type]];
    const originValue = (_a4 = origin.values[originIndex]) !== null && _a4 !== void 0 ? _a4 : 0;
    orderedOrigin[i] = originValue;
    pointers[type]++;
  }
  return orderedOrigin;
}
const mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin);
  const targetStats = analyseComplexValue(target);
  const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length && originStats.indexes.color.length === targetStats.indexes.color.length && originStats.indexes.number.length >= targetStats.indexes.number.length;
  if (canInterpolate) {
    return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);
  } else {
    return mixImmediate(origin, target);
  }
};
function mix(from2, to2, p2) {
  if (typeof from2 === "number" && typeof to2 === "number" && typeof p2 === "number") {
    return mixNumber$1(from2, to2, p2);
  }
  const mixer = getMixer(from2);
  return mixer(from2, to2);
}
function createMixers(output, ease2, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || mix;
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1]);
    if (ease2) {
      const easingFunction = Array.isArray(ease2) ? ease2[i] || noop$2 : ease2;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate$2(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
  const inputLength = input.length;
  invariant$1(inputLength === output.length);
  if (inputLength === 1)
    return () => output[0];
  if (inputLength === 2 && input[0] === input[1])
    return () => output[1];
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease2, mixer);
  const numMixers = mixers.length;
  const interpolator = (v2) => {
    let i = 0;
    if (numMixers > 1) {
      for (; i < input.length - 2; i++) {
        if (v2 < input[i + 1])
          break;
      }
    }
    const progressInRange = progress(input[i], input[i + 1], v2);
    return mixers[i](progressInRange);
  };
  return isClamp ? (v2) => interpolator(clamp$2(input[0], input[inputLength - 1], v2)) : interpolator;
}
function fillOffset(offset, remaining) {
  const min = offset[offset.length - 1];
  for (let i = 1; i <= remaining; i++) {
    const offsetProgress = progress(0, remaining, i);
    offset.push(mixNumber$1(min, 1, offsetProgress));
  }
}
function defaultOffset(arr) {
  const offset = [0];
  fillOffset(offset, arr.length - 1);
  return offset;
}
function convertOffsetToTimes(offset, duration) {
  return offset.map((o) => o * duration);
}
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
  const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
  const state2 = {
    done: false,
    value: keyframeValues[0]
  };
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate$2(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t2) => {
      state2.value = mapTimeToKeyframe(t2);
      state2.done = t2 >= duration;
      return state2;
    }
  };
}
const maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state2 = generator.next(duration);
  while (!state2.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state2 = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}
const frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame.update(passTimestamp, true),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : time.now()
  };
};
const generators = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes,
  spring
};
const percentToProgress = (percent2) => percent2 / 100;
class MainThreadAnimation extends BaseAnimation {
  constructor({ KeyframeResolver: KeyframeResolver$1 = KeyframeResolver, ...options }) {
    super(options);
    this.holdTime = null;
    this.startTime = null;
    this.cancelTime = null;
    this.currentTime = 0;
    this.playbackSpeed = 1;
    this.pendingPlayState = "running";
    this.state = "idle";
    const { name, motionValue: motionValue2, keyframes: keyframes22 } = this.options;
    const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);
    if (name && motionValue2 && motionValue2.owner) {
      this.resolver = motionValue2.owner.resolveKeyframes(keyframes22, onResolved, name, motionValue2);
    } else {
      this.resolver = new KeyframeResolver$1(keyframes22, onResolved, name, motionValue2);
    }
    this.resolver.scheduleResolve();
  }
  initPlayback(keyframes$12) {
    const { type = "keyframes", repeat = 0, repeatDelay = 0, repeatType, velocity = 0 } = this.options;
    const generatorFactory = generators[type] || keyframes;
    let mapPercentToKeyframes;
    let mirroredGenerator;
    if (generatorFactory !== keyframes && typeof keyframes$12[0] !== "number") {
      mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$12[0], keyframes$12[1]));
      keyframes$12 = [0, 100];
    }
    const generator = generatorFactory({ ...this.options, keyframes: keyframes$12 });
    if (repeatType === "mirror") {
      mirroredGenerator = generatorFactory({
        ...this.options,
        keyframes: [...keyframes$12].reverse(),
        velocity: -velocity
      });
    }
    if (generator.calculatedDuration === null) {
      generator.calculatedDuration = calcGeneratorDuration(generator);
    }
    const { calculatedDuration } = generator;
    const resolvedDuration = calculatedDuration + repeatDelay;
    const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
    return {
      generator,
      mirroredGenerator,
      mapPercentToKeyframes,
      calculatedDuration,
      resolvedDuration,
      totalDuration
    };
  }
  onPostResolved() {
    const { autoplay = true } = this.options;
    this.play();
    if (this.pendingPlayState === "paused" || !autoplay) {
      this.pause();
    } else {
      this.state = this.pendingPlayState;
    }
  }
  tick(timestamp, sample2 = false) {
    const { resolved } = this;
    if (!resolved) {
      const { keyframes: keyframes3 } = this.options;
      return { done: true, value: keyframes3[keyframes3.length - 1] };
    }
    const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes: keyframes22, calculatedDuration, totalDuration, resolvedDuration } = resolved;
    if (this.startTime === null)
      return generator.next(0);
    const { delay: delay2, repeat, repeatType, repeatDelay, onUpdate } = this.options;
    if (this.speed > 0) {
      this.startTime = Math.min(this.startTime, timestamp);
    } else if (this.speed < 0) {
      this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);
    }
    if (sample2) {
      this.currentTime = timestamp;
    } else if (this.holdTime !== null) {
      this.currentTime = this.holdTime;
    } else {
      this.currentTime = Math.round(timestamp - this.startTime) * this.speed;
    }
    const timeWithoutDelay = this.currentTime - delay2 * (this.speed >= 0 ? 1 : -1);
    const isInDelayPhase = this.speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    this.currentTime = Math.max(timeWithoutDelay, 0);
    if (this.state === "finished" && this.holdTime === null) {
      this.currentTime = totalDuration;
    }
    let elapsed = this.currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress2 = Math.min(this.currentTime, totalDuration) / resolvedDuration;
      let currentIteration = Math.floor(progress2);
      let iterationProgress = progress2 % 1;
      if (!iterationProgress && progress2 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1);
      const isOddIteration = Boolean(currentIteration % 2);
      if (isOddIteration) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp$2(0, 1, iterationProgress) * resolvedDuration;
    }
    const state2 = isInDelayPhase ? { done: false, value: keyframes22[0] } : frameGenerator.next(elapsed);
    if (mapPercentToKeyframes) {
      state2.value = mapPercentToKeyframes(state2.value);
    }
    let { done } = state2;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = this.speed >= 0 ? this.currentTime >= totalDuration : this.currentTime <= 0;
    }
    const isAnimationFinished = this.holdTime === null && (this.state === "finished" || this.state === "running" && done);
    if (isAnimationFinished && finalKeyframe !== void 0) {
      state2.value = getFinalKeyframe(keyframes22, this.options, finalKeyframe);
    }
    if (onUpdate) {
      onUpdate(state2.value);
    }
    if (isAnimationFinished) {
      this.finish();
    }
    return state2;
  }
  get duration() {
    const { resolved } = this;
    return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;
  }
  get time() {
    return millisecondsToSeconds(this.currentTime);
  }
  set time(newTime) {
    newTime = secondsToMilliseconds(newTime);
    this.currentTime = newTime;
    if (this.holdTime !== null || this.speed === 0) {
      this.holdTime = newTime;
    } else if (this.driver) {
      this.startTime = this.driver.now() - newTime / this.speed;
    }
  }
  get speed() {
    return this.playbackSpeed;
  }
  set speed(newSpeed) {
    const hasChanged = this.playbackSpeed !== newSpeed;
    this.playbackSpeed = newSpeed;
    if (hasChanged) {
      this.time = millisecondsToSeconds(this.currentTime);
    }
  }
  play() {
    if (!this.resolver.isScheduled) {
      this.resolver.resume();
    }
    if (!this._resolved) {
      this.pendingPlayState = "running";
      return;
    }
    if (this.isStopped)
      return;
    const { driver = frameloopDriver, onPlay } = this.options;
    if (!this.driver) {
      this.driver = driver((timestamp) => this.tick(timestamp));
    }
    onPlay && onPlay();
    const now2 = this.driver.now();
    if (this.holdTime !== null) {
      this.startTime = now2 - this.holdTime;
    } else if (!this.startTime || this.state === "finished") {
      this.startTime = now2;
    }
    if (this.state === "finished") {
      this.updateFinishedPromise();
    }
    this.cancelTime = this.startTime;
    this.holdTime = null;
    this.state = "running";
    this.driver.start();
  }
  pause() {
    var _a4;
    if (!this._resolved) {
      this.pendingPlayState = "paused";
      return;
    }
    this.state = "paused";
    this.holdTime = (_a4 = this.currentTime) !== null && _a4 !== void 0 ? _a4 : 0;
  }
  stop() {
    this.resolver.cancel();
    this.isStopped = true;
    if (this.state === "idle")
      return;
    this.teardown();
    const { onStop } = this.options;
    onStop && onStop();
  }
  complete() {
    if (this.state !== "running") {
      this.play();
    }
    this.pendingPlayState = this.state = "finished";
    this.holdTime = null;
  }
  finish() {
    this.teardown();
    this.state = "finished";
    const { onComplete } = this.options;
    onComplete && onComplete();
  }
  cancel() {
    if (this.cancelTime !== null) {
      this.tick(this.cancelTime);
    }
    this.teardown();
    this.updateFinishedPromise();
  }
  teardown() {
    this.state = "idle";
    this.stopDriver();
    this.resolveFinishedPromise();
    this.updateFinishedPromise();
    this.startTime = this.cancelTime = null;
    this.resolver.cancel();
  }
  stopDriver() {
    if (!this.driver)
      return;
    this.driver.stop();
    this.driver = void 0;
  }
  sample(time2) {
    this.startTime = 0;
    return this.tick(time2, true);
  }
}
const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";
function isWaapiSupportedEasing(easing) {
  return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
const cubicBezierAsString = ([a, b2, c2, d2]) => `cubic-bezier(${a}, ${b2}, ${c2}, ${d2})`;
const supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing) {
  if (!easing)
    return void 0;
  return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}
function animateStyle(element, valueName, keyframes3, { delay: delay2 = 0, duration = 300, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
  const keyframeOptions = { [valueName]: keyframes3 };
  if (times)
    keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease2);
  if (Array.isArray(easing))
    keyframeOptions.easing = easing;
  return element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}
const supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
const acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
  // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved
  // or until we implement support for linear() easing.
  // "background-color"
]);
const sampleDelta = 10;
const maxDuration = 2e4;
function requiresPregeneratedKeyframes(options) {
  return options.type === "spring" || options.name === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
}
function pregenerateKeyframes(keyframes3, options) {
  const sampleAnimation = new MainThreadAnimation({
    ...options,
    keyframes: keyframes3,
    repeat: 0,
    delay: 0,
    isGenerator: true
  });
  let state2 = { done: false, value: keyframes3[0] };
  const pregeneratedKeyframes = [];
  let t2 = 0;
  while (!state2.done && t2 < maxDuration) {
    state2 = sampleAnimation.sample(t2);
    pregeneratedKeyframes.push(state2.value);
    t2 += sampleDelta;
  }
  return {
    times: void 0,
    keyframes: pregeneratedKeyframes,
    duration: t2 - sampleDelta,
    ease: "linear"
  };
}
class AcceleratedAnimation extends BaseAnimation {
  constructor(options) {
    super(options);
    const { name, motionValue: motionValue2, keyframes: keyframes3 } = this.options;
    this.resolver = new DOMKeyframesResolver(keyframes3, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue2);
    this.resolver.scheduleResolve();
  }
  initPlayback(keyframes3, finalKeyframe) {
    var _a4;
    let { duration = 300, times, ease: ease2, type, motionValue: motionValue2, name } = this.options;
    if (!((_a4 = motionValue2.owner) === null || _a4 === void 0 ? void 0 : _a4.current)) {
      return false;
    }
    if (requiresPregeneratedKeyframes(this.options)) {
      const { onComplete, onUpdate, motionValue: motionValue3, ...options } = this.options;
      const pregeneratedAnimation = pregenerateKeyframes(keyframes3, options);
      keyframes3 = pregeneratedAnimation.keyframes;
      if (keyframes3.length === 1) {
        keyframes3[1] = keyframes3[0];
      }
      duration = pregeneratedAnimation.duration;
      times = pregeneratedAnimation.times;
      ease2 = pregeneratedAnimation.ease;
      type = "keyframes";
    }
    const animation = animateStyle(motionValue2.owner.current, name, keyframes3, { ...this.options, duration, times, ease: ease2 });
    animation.startTime = time.now();
    if (this.pendingTimeline) {
      animation.timeline = this.pendingTimeline;
      this.pendingTimeline = void 0;
    } else {
      animation.onfinish = () => {
        const { onComplete } = this.options;
        motionValue2.set(getFinalKeyframe(keyframes3, this.options, finalKeyframe));
        onComplete && onComplete();
        this.cancel();
        this.resolveFinishedPromise();
      };
    }
    return {
      animation,
      duration,
      times,
      type,
      ease: ease2,
      keyframes: keyframes3
    };
  }
  get duration() {
    const { resolved } = this;
    if (!resolved)
      return 0;
    const { duration } = resolved;
    return millisecondsToSeconds(duration);
  }
  get time() {
    const { resolved } = this;
    if (!resolved)
      return 0;
    const { animation } = resolved;
    return millisecondsToSeconds(animation.currentTime || 0);
  }
  set time(newTime) {
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    animation.currentTime = secondsToMilliseconds(newTime);
  }
  get speed() {
    const { resolved } = this;
    if (!resolved)
      return 1;
    const { animation } = resolved;
    return animation.playbackRate;
  }
  set speed(newSpeed) {
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    animation.playbackRate = newSpeed;
  }
  get state() {
    const { resolved } = this;
    if (!resolved)
      return "idle";
    const { animation } = resolved;
    return animation.playState;
  }
  /**
   * Replace the default DocumentTimeline with another AnimationTimeline.
   * Currently used for scroll animations.
   */
  attachTimeline(timeline) {
    if (!this._resolved) {
      this.pendingTimeline = timeline;
    } else {
      const { resolved } = this;
      if (!resolved)
        return noop$2;
      const { animation } = resolved;
      animation.timeline = timeline;
      animation.onfinish = null;
    }
    return noop$2;
  }
  play() {
    if (this.isStopped)
      return;
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    if (animation.playState === "finished") {
      this.updateFinishedPromise();
    }
    animation.play();
  }
  pause() {
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation } = resolved;
    animation.pause();
  }
  stop() {
    this.resolver.cancel();
    this.isStopped = true;
    if (this.state === "idle")
      return;
    const { resolved } = this;
    if (!resolved)
      return;
    const { animation, keyframes: keyframes3, duration, type, ease: ease2, times } = resolved;
    if (animation.playState === "idle" || animation.playState === "finished") {
      return;
    }
    if (this.time) {
      const { motionValue: motionValue2, onUpdate, onComplete, ...options } = this.options;
      const sampleAnimation = new MainThreadAnimation({
        ...options,
        keyframes: keyframes3,
        duration,
        type,
        ease: ease2,
        times,
        isGenerator: true
      });
      const sampleTime = secondsToMilliseconds(this.time);
      motionValue2.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);
    }
    this.cancel();
  }
  complete() {
    const { resolved } = this;
    if (!resolved)
      return;
    resolved.animation.finish();
  }
  cancel() {
    const { resolved } = this;
    if (!resolved)
      return;
    resolved.animation.cancel();
  }
  static supports(options) {
    const { motionValue: motionValue2, name, repeatDelay, repeatType, damping, type } = options;
    return supportsWaapi() && name && acceleratedValues.has(name) && motionValue2 && motionValue2.owner && motionValue2.owner.current instanceof HTMLElement && /**
     * If we're outputting values to onUpdate then we can't use WAAPI as there's
     * no way to read the value from WAAPI every frame.
     */
    !motionValue2.owner.getProps().onUpdate && !repeatDelay && repeatType !== "mirror" && damping !== 0 && type !== "inertia";
  }
}
const animateMotionValue = (name, value, target, transition2 = {}, element, isHandoff) => (onComplete) => {
  const valueTransition = getValueTransition(transition2, name) || {};
  const delay2 = valueTransition.delay || transition2.delay || 0;
  let { elapsed = 0 } = transition2;
  elapsed = elapsed - secondsToMilliseconds(delay2);
  let options = {
    keyframes: Array.isArray(target) ? target : [null, target],
    ease: "easeOut",
    velocity: value.getVelocity(),
    ...valueTransition,
    delay: -elapsed,
    onUpdate: (v2) => {
      value.set(v2);
      valueTransition.onUpdate && valueTransition.onUpdate(v2);
    },
    onComplete: () => {
      onComplete();
      valueTransition.onComplete && valueTransition.onComplete();
    },
    name,
    motionValue: value,
    element: isHandoff ? void 0 : element
  };
  if (!isTransitionDefined(valueTransition)) {
    options = {
      ...options,
      ...getDefaultTransition(name, options)
    };
  }
  if (options.duration) {
    options.duration = secondsToMilliseconds(options.duration);
  }
  if (options.repeatDelay) {
    options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
  }
  if (options.from !== void 0) {
    options.keyframes[0] = options.from;
  }
  let shouldSkip = false;
  if (options.type === false) {
    options.duration = 0;
    if (options.delay === 0) {
      shouldSkip = true;
    }
  }
  if (shouldSkip && !isHandoff && value.get() !== void 0) {
    const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);
    if (finalKeyframe !== void 0) {
      frame.update(() => {
        options.onUpdate(finalKeyframe);
        options.onComplete();
      });
      return;
    }
  }
  if (!isHandoff && AcceleratedAnimation.supports(options)) {
    return new AcceleratedAnimation(options);
  } else {
    return new MainThreadAnimation(options);
  }
};
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}
function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1)
    arr.push(item);
}
function removeItem(arr, item) {
  const index2 = arr.indexOf(item);
  if (index2 > -1)
    arr.splice(index2, 1);
}
class SubscriptionManager {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem(this.subscriptions, handler);
  }
  notify(a, b2, c2) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a, b2, c2);
    } else {
      for (let i = 0; i < numSubscriptions; i++) {
        const handler = this.subscriptions[i];
        handler && handler(a, b2, c2);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
}
const MAX_VELOCITY_DELTA = 30;
const isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
class MotionValue {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(init2, options = {}) {
    this.version = "11.0.24";
    this.canTrackVelocity = false;
    this.events = {};
    this.updateAndNotify = (v2, render = true) => {
      const currentTime = time.now();
      if (this.updatedAt !== currentTime) {
        this.setPrevFrameValue();
      }
      this.prev = this.current;
      this.setCurrent(v2);
      if (this.current !== this.prev && this.events.change) {
        this.events.change.notify(this.current);
      }
      if (render && this.events.renderRequest) {
        this.events.renderRequest.notify(this.current);
      }
    };
    this.hasAnimated = false;
    this.setCurrent(init2);
    this.canTrackVelocity = isFloat(this.current);
    this.owner = options.owner;
  }
  setCurrent(current) {
    this.current = current;
    this.updatedAt = time.now();
  }
  setPrevFrameValue(prevFrameValue = this.current) {
    this.prevFrameValue = prevFrameValue;
    this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    return this.on("change", subscription);
  }
  on(eventName, callback2) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback2);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v2, render = true) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v2, render);
    } else {
      this.passiveEffect(v2, this.updateAndNotify);
    }
  }
  setWithVelocity(prev2, current, delta) {
    this.set(current);
    this.prev = void 0;
    this.prevFrameValue = prev2;
    this.prevUpdatedAt = this.updatedAt - delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v2, endAnimation = true) {
    this.updateAndNotify(v2);
    this.prev = v2;
    this.prevUpdatedAt = this.prevFrameValue = void 0;
    endAnimation && this.stop();
    if (this.stopPassiveEffect)
      this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const currentTime = time.now();
    if (!this.canTrackVelocity || this.prevFrameValue === void 0 || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
      return 0;
    }
    const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
    return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(startAnimation) {
    this.stop();
    return new Promise((resolve2) => {
      this.hasAnimated = true;
      this.animation = startAnimation(resolve2);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
}
function motionValue(init2, options) {
  return new MotionValue(init2, options);
}
function setMotionValue(visualElement, key, value) {
  if (visualElement.hasValue(key)) {
    visualElement.getValue(key).set(value);
  } else {
    visualElement.addValue(key, motionValue(value));
  }
}
function setTarget(visualElement, definition) {
  const resolved = resolveVariant(visualElement, definition);
  let { transitionEnd = {}, transition: transition2 = {}, ...target } = resolved || {};
  target = { ...target, ...transitionEnd };
  for (const key in target) {
    const value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement, key, value);
  }
}
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}
function animateTarget(visualElement, targetAndTransition, { delay: delay2 = 0, transitionOverride, type } = {}) {
  var _a4;
  let { transition: transition2 = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;
  const willChange = visualElement.getValue("willChange");
  if (transitionOverride)
    transition2 = transitionOverride;
  const animations2 = [];
  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
  for (const key in target) {
    const value = visualElement.getValue(key, (_a4 = visualElement.latestValues[key]) !== null && _a4 !== void 0 ? _a4 : null);
    const valueTarget = target[key];
    if (valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    const valueTransition = {
      delay: delay2,
      elapsed: 0,
      ...getValueTransition(transition2 || {}, key)
    };
    let isHandoff = false;
    if (window.HandoffAppearAnimations) {
      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
      if (appearId) {
        const elapsed = window.HandoffAppearAnimations(appearId, key);
        if (elapsed !== null) {
          valueTransition.elapsed = elapsed;
          isHandoff = true;
        }
      }
    }
    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? { type: false } : valueTransition, visualElement, isHandoff));
    const animation = value.animation;
    if (animation) {
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key);
        animation.then(() => willChange.remove(key));
      }
      animations2.push(animation);
    }
  }
  if (transitionEnd) {
    Promise.all(animations2).then(() => {
      frame.update(() => {
        transitionEnd && setTarget(visualElement, transitionEnd);
      });
    });
  }
  return animations2;
}
function animateVariant(visualElement, variant, options = {}) {
  var _a4;
  const resolved = resolveVariant(visualElement, variant, options.type === "exit" ? (_a4 = visualElement.presenceContext) === null || _a4 === void 0 ? void 0 : _a4.custom : void 0);
  let { transition: transition2 = visualElement.getDefaultTransition() || {} } = resolved || {};
  if (options.transitionOverride) {
    transition2 = options.transitionOverride;
  }
  const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
    const { delayChildren = 0, staggerChildren, staggerDirection } = transition2;
    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : () => Promise.resolve();
  const { when } = transition2;
  if (when) {
    const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
  }
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
  const animations2 = [];
  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;
  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {
    child.notify("AnimationStart", variant);
    animations2.push(animateVariant(child, variant, {
      ...options,
      delay: delayChildren + generateStaggerDuration(i)
    }).then(() => child.notify("AnimationComplete", variant)));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a, b2) {
  return a.sortNodePosition(b2);
}
function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation;
  if (Array.isArray(definition)) {
    const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement, definition, options);
  } else {
    const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
    animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
  }
  return animation.then(() => {
    frame.postRender(() => {
      visualElement.notify("AnimationComplete", definition);
    });
  });
}
const reversePriorityOrder = [...variantPriorityOrder].reverse();
const numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
}
function createAnimationState(visualElement) {
  let animate = animateList(visualElement);
  const state2 = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (type) => (acc, definition) => {
    var _a4;
    const resolved = resolveVariant(visualElement, definition, type === "exit" ? (_a4 = visualElement.presenceContext) === null || _a4 === void 0 ? void 0 : _a4.custom : void 0);
    if (resolved) {
      const { transition: transition2, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate = makeAnimator(visualElement);
  }
  function animateChanges(changedActiveType) {
    const props2 = visualElement.getProps();
    const context2 = visualElement.getVariantContext(true) || {};
    const animations2 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i = 0; i < numAnimationTypes; i++) {
      const type = reversePriorityOrder[i];
      const typeState = state2[type];
      const prop = props2[type] !== void 0 ? props2[type] : context2[type];
      const propIsVariant = isVariantLabel(prop);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i;
      let isInherited = prop === context2[type] && prop !== props2[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = { ...encounteredKeys };
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
        !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
        isAnimationControls(prop) || typeof prop === "boolean"
      ) {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i > removedVariantIndex && propIsVariant;
      let handledRemovedValues = false;
      const definitionList = Array.isArray(prop) ? prop : [prop];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});
      if (activeDelta === false)
        resolvedValues = {};
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      };
      const markToAnimate = (key) => {
        shouldAnimateType = true;
        if (removedKeys.has(key)) {
          handledRemovedValues = true;
          removedKeys.delete(key);
        }
        typeState.needsAnimating[key] = true;
        const motionValue2 = visualElement.getValue(key);
        if (motionValue2)
          motionValue2.liveStyle = false;
      };
      for (const key in allKeys) {
        const next2 = resolvedValues[key];
        const prev2 = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        let valueHasChanged = false;
        if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
          valueHasChanged = !shallowCompare(next2, prev2);
        } else {
          valueHasChanged = next2 !== prev2;
        }
        if (valueHasChanged) {
          if (next2 !== void 0 && next2 !== null) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next2 !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && (!isInherited || handledRemovedValues)) {
        animations2.push(...definitionList.map((animation) => ({
          animation,
          options: { type }
        })));
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      removedKeys.forEach((key) => {
        const fallbackTarget = visualElement.getBaseTarget(key);
        const motionValue2 = visualElement.getValue(key);
        if (motionValue2)
          motionValue2.liveStyle = true;
        fallbackAnimation[key] = fallbackTarget === void 0 ? null : fallbackTarget;
      });
      animations2.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && (props2.initial === false || props2.initial === props2.animate) && !visualElement.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate(animations2) : Promise.resolve();
  }
  function setActive(type, isActive) {
    var _a4;
    if (state2[type].isActive === isActive)
      return Promise.resolve();
    (_a4 = visualElement.variantChildren) === null || _a4 === void 0 ? void 0 : _a4.forEach((child) => {
      var _a5;
      return (_a5 = child.animationState) === null || _a5 === void 0 ? void 0 : _a5.setActive(type, isActive);
    });
    state2[type].isActive = isActive;
    const animations2 = animateChanges(type);
    for (const key in state2) {
      state2[key].protectedKeys = {};
    }
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state2
  };
}
function checkVariantsDidChange(prev2, next2) {
  if (typeof next2 === "string") {
    return next2 !== prev2;
  } else if (Array.isArray(next2)) {
    return !shallowCompare(next2, prev2);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}
class AnimationFeature extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node2) {
    super(node2);
    node2.animationState || (node2.animationState = createAnimationState(node2));
  }
  updateAnimationControlsSubscription() {
    const { animate } = this.node.getProps();
    this.unmount();
    if (isAnimationControls(animate)) {
      this.unmount = animate.subscribe(this.node);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
  }
}
let id$1 = 0;
class ExitAnimationFeature extends Feature {
  constructor() {
    super(...arguments);
    this.id = id$1++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent: isPresent2, onExitComplete } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent2 === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive("exit", !isPresent2);
    if (onExitComplete && !isPresent2) {
      exitAnimation.then(() => onExitComplete(this.id));
    }
  }
  mount() {
    const { register } = this.node.presenceContext || {};
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {
  }
}
const animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};
const distance = (a, b2) => Math.abs(a - b2);
function distance2D(a, b2) {
  const xDelta = distance(a.x, b2.x);
  const yDelta = distance(a.y, b2.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}
class PanSession {
  constructor(event2, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { point: point2 } = info2;
      const { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2);
    };
    this.handlePointerMove = (event3, info2) => {
      this.lastMoveEvent = event3;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
      frame.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event3, info2) => {
      this.end();
      const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
      if (this.dragSnapToOrigin)
        resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const panInfo = getPanInfo(event3.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      if (this.startEvent && onEnd) {
        onEnd(event3, panInfo);
      }
      onSessionEnd && onSessionEnd(event3, panInfo);
    };
    if (!isPrimaryPointer(event2))
      return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo(event2);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers;
    onSessionStart && onSessionStart(event2, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
}
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a, b2) {
  return { x: a.x - b2.x, y: a.y - b2.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time2 = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
  delta.origin = origin;
  delta.originPoint = mixNumber$1(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
    delta.scale = 1;
  delta.translate = mixNumber$1(target.min, target.max, delta.origin) - delta.originPoint;
  if (isNear(delta.translate) || isNaN(delta.translate))
    delta.translate = 0;
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0);
  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout2, parent) {
  target.min = layout2.min - parent.min;
  target.max = target.min + calcLength(layout2);
}
function calcRelativePosition(target, layout2, parent) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x);
  calcRelativeAxisPosition(target.y, layout2.y, parent.y);
}
function applyConstraints(point, { min, max }, elastic) {
  if (min !== void 0 && point < min) {
    point = elastic ? mixNumber$1(min, point, elastic.min) : Math.max(point, min);
  } else if (max !== void 0 && point > max) {
    point = elastic ? mixNumber$1(max, point, elastic.max) : Math.min(point, max);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min = constraintsAxis.min - layoutAxis.min;
  let max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min, max] = [max, min];
  }
  return { min, max };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin(source, target) {
  let origin = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp$2(0, 1, origin);
}
function rebaseAxisConstraints(layout2, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
const defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}
const createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
});
const createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
});
const createAxis = () => ({ min: 0, max: 0 });
const createBox = () => ({
  x: createAxis(),
  y: createAxis()
});
function eachAxis(callback2) {
  return [callback2("x"), callback2("y")];
}
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom }
  };
}
function convertBoxToBoundingBox({ x: x2, y: y2 }) {
  return { top: y2.min, right: x2.max, bottom: y2.max, left: x2.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  const topLeft = transformPoint2({ x: point.left, y: point.top });
  const bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}
function isIdentityScale(scale2) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale({ scale: scale2, scaleX, scaleY }) {
  return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY || values.skewX || values.skewY;
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}
function scalePoint(point, scale2, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale2, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function applyBoxDelta(box, { x: x2, y: y2 }) {
  applyAxisDelta(box.x, x2.translate, x2.scale, x2.originPoint);
  applyAxisDelta(box.y, y2.translate, y2.scale, y2.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node2;
  let delta;
  for (let i = 0; i < treeLength; i++) {
    node2 = treePath[i];
    delta = node2.projectionDelta;
    const instance = node2.instance;
    if (instance && instance.style && instance.style.display === "contents") {
      continue;
    }
    if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
      transformBox(box, {
        x: -node2.scroll.offset.x,
        y: -node2.scroll.offset.y
      });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node2.latestValues)) {
      transformBox(box, node2.latestValues);
    }
  }
  treeScale.x = snapToDefault(treeScale.x);
  treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale2) {
  if (Number.isInteger(scale2))
    return scale2;
  return scale2 > 1.0000000000001 || scale2 < 0.999999999999 ? scale2 : 1;
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, transforms, [key, scaleKey, originKey]) {
  const axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
  const originPoint = mixNumber$1(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
}
const xKeys$1 = ["x", "scaleX", "originX"];
const yKeys$1 = ["y", "scaleY", "originY"];
function transformBox(box, transform2) {
  transformAxis(box.x, transform2, xKeys$1);
  transformAxis(box.y, transform2, yKeys$1);
}
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll: scroll2 } = rootProjectionNode2;
  if (scroll2) {
    translateAxis(viewportBox.x, scroll2.offset.x);
    translateAxis(viewportBox.y, scroll2.offset.y);
  }
  return viewportBox;
}
const getContextWindow = ({ current }) => {
  return current ? current.ownerDocument.defaultView : null;
};
const elementDragControls = /* @__PURE__ */ new WeakMap();
class VisualElementDragControls {
  constructor(visualElement) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = false } = {}) {
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false)
      return;
    const onSessionStart = (event2) => {
      const { dragSnapToOrigin: dragSnapToOrigin2 } = this.getProps();
      dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo(event2, "page").point);
      }
    };
    const onStart = (event2, info) => {
      const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
      if (drag2 && !dragPropagation) {
        if (this.openGlobalLock)
          this.openGlobalLock();
        this.openGlobalLock = getGlobalLock(drag2);
        if (!this.openGlobalLock)
          return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length2 = calcLength(measuredAxis);
              current = length2 * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      if (onDragStart)
        onDragStart(event2, info);
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event2, info) => {
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openGlobalLock)
        return;
      const { offset } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      this.updateAxis("x", info.point, offset);
      this.updateAxis("y", info.point, offset);
      this.visualElement.render();
      onDrag && onDrag(event2, info);
    };
    const onSessionEnd = (event2, info) => this.stop(event2, info);
    const resumeAnimation = () => eachAxis((axis) => {
      var _a4;
      return this.getAnimationState(axis) === "paused" && ((_a4 = this.getAxisMotionValue(axis).animation) === null || _a4 === void 0 ? void 0 : _a4.play());
    });
    const { dragSnapToOrigin } = this.getProps();
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd,
      resumeAnimation
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin,
      contextWindow: getContextWindow(this.visualElement)
    });
  }
  stop(event2, info) {
    const isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    const { velocity } = info;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd)
      onDragEnd(event2, info);
  }
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset) {
    const { drag: drag2 } = this.getProps();
    if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    const axisValue = this.getAxisMotionValue(axis);
    let next2 = this.originPoint[axis] + offset[axis];
    if (this.constraints && this.constraints[axis]) {
      next2 = applyConstraints(next2, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next2);
  }
  resolveConstraints() {
    var _a4;
    const { dragConstraints, dragElastic } = this.getProps();
    const layout2 = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a4 = this.visualElement.projection) === null || _a4 === void 0 ? void 0 : _a4.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout2) {
        this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]);
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject(constraints))
      return false;
    const constraintsElement = constraints.current;
    const { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection)) {
        return;
      }
      let transition2 = constraints && constraints[axis] || {};
      if (dragSnapToOrigin)
        transition2 = { min: 0, max: 0 };
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia2 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition2
      };
      return this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition2) {
    const axisValue = this.getAxisMotionValue(axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition2, this.visualElement));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => {
      var _a4;
      return (_a4 = this.getAxisMotionValue(axis).animation) === null || _a4 === void 0 ? void 0 : _a4.pause();
    });
  }
  getAnimationState(axis) {
    var _a4;
    return (_a4 = this.getAxisMotionValue(axis).animation) === null || _a4 === void 0 ? void 0 : _a4.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    const dragKey = "_drag" + axis.toUpperCase();
    const props2 = this.visualElement.getProps();
    const externalMotionValue = props2[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props2.initial ? props2.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag: drag2 } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min, max } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mixNumber$1(min, max, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: drag2, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    const { transformTemplate: transformTemplate2 } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      const { min, max } = this.constraints[axis];
      axisValue.set(mixNumber$1(min, max, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent(element, "pointerdown", (event2) => {
      const { drag: drag2, dragListener = true } = this.getProps();
      drag2 && dragListener && this.start(event2);
    });
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject(dragConstraints)) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
    const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue2 = this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        this.visualElement.render();
      }
    });
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props2 = this.visualElement.getProps();
    const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props2;
    return {
      ...props2,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
}
function shouldDrag(direction2, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction2) && (currentDirection === null || currentDirection === direction2);
}
function getCurrentDirection(offset, lockThreshold = 10) {
  let direction2 = null;
  if (Math.abs(offset.y) > lockThreshold) {
    direction2 = "y";
  } else if (Math.abs(offset.x) > lockThreshold) {
    direction2 = "x";
  }
  return direction2;
}
class DragGesture extends Feature {
  constructor(node2) {
    super(node2);
    this.removeGroupControls = noop$2;
    this.removeListeners = noop$2;
    this.controls = new VisualElementDragControls(node2);
  }
  mount() {
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop$2;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
}
const asyncHandler = (handler) => (event2, info) => {
  if (handler) {
    handler(event2, info);
  }
};
class PanGesture extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop$2;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node)
    });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event2, info) => {
        delete this.session;
        if (onPanEnd)
          onPanEnd(event2, info);
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event2) => this.onPointerDown(event2));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
}
function usePresence() {
  const context2 = reactExports.useContext(PresenceContext);
  if (context2 === null)
    return [true, null];
  const { isPresent: isPresent2, onExitComplete, register } = context2;
  const id2 = reactExports.useId();
  reactExports.useEffect(() => register(id2), []);
  const safeToRemove = () => onExitComplete && onExitComplete(id2);
  return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
}
function useIsPresent() {
  return isPresent(reactExports.useContext(PresenceContext));
}
function isPresent(context2) {
  return context2 === null ? true : context2.isPresent;
}
const globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false
};
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
const correctBorderRadius = {
  correct: (latest, node2) => {
    if (!node2.target)
      return latest;
    if (typeof latest === "string") {
      if (px.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    const x2 = pixelsToPercent(latest, node2.target.x);
    const y2 = pixelsToPercent(latest, node2.target.y);
    return `${x2}% ${y2}%`;
  }
};
const correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    const template = complex.createTransformer(latest);
    const offset = typeof shadow[0] !== "number" ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    const averageScale = mixNumber$1(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset] === "number")
      shadow[2 + offset] /= averageScale;
    if (typeof shadow[3 + offset] === "number")
      shadow[3 + offset] /= averageScale;
    return template(shadow);
  }
};
class MeasureLayoutWithContext extends React.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
    const { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group)
        layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove()
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement, drag: drag2, isPresent: isPresent2 } = this.props;
    const projection = visualElement.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent2;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent2) {
      if (isPresent2) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      microtask.postRender(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      });
    }
  }
  componentWillUnmount() {
    const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
    const { projection } = visualElement;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
}
function MeasureLayout(props2) {
  const [isPresent2, safeToRemove] = usePresence();
  const layoutGroup = reactExports.useContext(LayoutGroupContext);
  return React.createElement(MeasureLayoutWithContext, { ...props2, layoutGroup, switchLayoutGroup: reactExports.useContext(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove });
}
const defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};
const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
const numBorders = borders.length;
const asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
const isPx = (value) => typeof value === "number" || px.test(value);
function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mixNumber$1(
      0,
      // TODO Reinstate this if only child
      lead.opacity !== void 0 ? lead.opacity : 1,
      easeCrossfadeIn(progress2)
    );
    target.opacityExit = mixNumber$1(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2));
  } else if (isOnlyMember) {
    target.opacity = mixNumber$1(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2);
  }
  for (let i = 0; i < numBorders; i++) {
    const borderLabel = `border${borders[i]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mixNumber$1(asNumber(followRadius), asNumber(leadRadius), progress2), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mixNumber$1(follow.rotate || 0, lead.rotate || 0, progress2);
  }
}
function getRadius(values, radiusName) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
const easeCrossfadeIn = compress(0, 0.5, circOut);
const easeCrossfadeOut = compress(0.5, 0.95, noop$2);
function compress(min, max, easing) {
  return (p2) => {
    if (p2 < min)
      return 0;
    if (p2 > max)
      return 1;
    return easing(progress(min, max, p2));
  };
}
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}
function removePointDelta(point, translate, scale2, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale2, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate = 0, scale2 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mixNumber$1(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  let originPoint = mixNumber$1(originAxis.min, originAxis.max, origin);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
}
const xKeys = ["x", "scaleX", "originX"];
const yKeys = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
  removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a, b2) {
  return a.x.min === b2.x.min && a.x.max === b2.x.max && a.y.min === b2.y.min && a.y.max === b2.y.max;
}
function boxEqualsRounded(a, b2) {
  return Math.round(a.x.min) === Math.round(b2.x.min) && Math.round(a.x.max) === Math.round(b2.x.max) && Math.round(a.y.min) === Math.round(b2.y.min) && Math.round(a.y.max) === Math.round(b2.y.max);
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}
class NodeStack {
  constructor() {
    this.members = [];
  }
  add(node2) {
    addUniqueItem(this.members, node2);
    node2.scheduleRender();
  }
  remove(node2) {
    removeItem(this.members, node2);
    if (node2 === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node2 === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node2) {
    const indexOfNode = this.members.findIndex((member) => node2 === member);
    if (indexOfNode === 0)
      return false;
    let prevLead;
    for (let i = indexOfNode; i >= 0; i--) {
      const member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node2, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node2 === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node2;
    node2.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node2.scheduleRender();
      node2.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node2.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node2.snapshot = prevLead.snapshot;
        node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node2.root && node2.root.isUpdating) {
        node2.isLayoutDirty = true;
      }
      const { crossfade } = node2.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node2) => {
      const { options, resumingFrom } = node2;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node2) => {
      node2.instance && node2.scheduleRender(false);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
}
function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform2 = "";
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;
  if (xTranslate || yTranslate || zTranslate) {
    transform2 = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform2 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { rotate: rotate2, rotateX, rotateY, skewX, skewY } = latestTransform;
    if (rotate2)
      transform2 += `rotate(${rotate2}deg) `;
    if (rotateX)
      transform2 += `rotateX(${rotateX}deg) `;
    if (rotateY)
      transform2 += `rotateY(${rotateY}deg) `;
    if (skewX)
      transform2 += `skewX(${skewX}deg) `;
    if (skewY)
      transform2 += `skewY(${skewY}deg) `;
  }
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform2 += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform2 || "none";
}
const compareByDepth = (a, b2) => a.depth - b2.depth;
class FlatTree {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem(this.children, child);
    this.isDirty = true;
  }
  forEach(callback2) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback2);
  }
}
function delay(callback2, timeout) {
  const start = time.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback2(elapsed - timeout);
    }
  };
  frame.read(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}
function record(data) {
  if (window.MotionDebug) {
    window.MotionDebug.record(data);
  }
}
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}
function animateSingleValue(value, keyframes3, options) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(animateMotionValue("", motionValue$1, keyframes3, options));
  return motionValue$1.animation;
}
const transformAxes = ["", "X", "Y", "Z"];
const hiddenVisibility = { visibility: "hidden" };
const animationTarget = 1e3;
let id = 0;
const projectionFrameData = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
function resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {
  const { latestValues } = visualElement;
  if (latestValues[key]) {
    values[key] = latestValues[key];
    visualElement.setStaticValue(key, 0);
    if (sharedAnimationValues) {
      sharedAnimationValues[key] = 0;
    }
  }
}
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
      this.id = id++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.hasTreeAnimated = false;
      this.updateScheduled = false;
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
        record(projectionFrameData);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout: layout2, visualElement } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      if (isLayoutDirty && (layout2 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
        this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
          const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            const animationOptions = {
              ...getValueTransition(layoutTransition, "layout"),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete
            };
            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged) {
              finishAnimation(this);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        });
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = void 0;
      cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetSkewAndRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        node2.shouldResetTransform = true;
        node2.updateScroll("snapshot");
        if (node2.options.layoutRoot) {
          node2.willUpdate(false);
        }
      }
      const { layoutId, layout: layout2 } = this.options;
      if (layoutId === void 0 && !layout2)
        return;
      const transformTemplate2 = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty);
      }
      this.isUpdating = false;
      if (window.HandoffCancelAllAnimations) {
        window.HandoffCancelAllAnimations();
      }
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      const now2 = time.now();
      frameData.delta = clamp$2(0, 1e3 / 60, now2 - frameData.timestamp);
      frameData.timestamp = now2;
      frameData.isProcessing = true;
      steps$1.update.process(frameData);
      steps$1.preRender.process(frameData);
      steps$1.render.process(frameData);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        microtask.read(() => this.update());
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame.preRender(this.updateProjection, false, true);
      }
    }
    scheduleCheckAfterUnmount() {
      frame.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance)
        return;
      this.snapshot = this.measure();
    }
    updateLayout() {
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i = 0; i < this.path.length; i++) {
          const node2 = this.path[i];
          node2.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement } = this.options;
      visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement) {
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot: checkIsScrollRoot(this.instance),
          offset: measureScroll(this.instance)
        };
      }
    }
    resetTransform() {
      if (!resetTransform)
        return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate2 = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      const { visualElement } = this.options;
      if (!visualElement)
        return createBox();
      const box = visualElement.measureViewportBox();
      const { scroll: scroll2 } = this.root;
      if (scroll2) {
        translateAxis(box.x, scroll2.offset.x);
        translateAxis(box.y, scroll2.offset.y);
      }
      return box;
    }
    removeElementScroll(box) {
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        const { scroll: scroll2, options } = node2;
        if (node2 !== this.root && scroll2 && options.layoutScroll) {
          if (scroll2.isRoot) {
            copyBoxInto(boxWithoutScroll, box);
            const { scroll: rootScroll } = this.root;
            if (rootScroll) {
              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
            }
          }
          translateAxis(boxWithoutScroll.x, scroll2.offset.x);
          translateAxis(boxWithoutScroll.y, scroll2.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
          transformBox(withTransforms, {
            x: -node2.scroll.offset.x,
            y: -node2.scroll.offset.y
          });
        }
        if (!hasTransform(node2.latestValues))
          continue;
        transformBox(withTransforms, node2.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        if (!node2.instance)
          continue;
        if (!hasTransform(node2.latestValues))
          continue;
        hasScale(node2.latestValues) && node2.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node2.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node2.latestValues, node2.snapshot ? node2.snapshot.layoutBox : void 0, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : true
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent)
        return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      var _a4;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a4 = this.parent) === null || _a4 === void 0 ? void 0 : _a4.isProjectionDirty) || this.attemptToResolveRelativeTarget);
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      if (!this.layout || !(layout2 || layoutId))
        return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      projectionFrameData.resolvedTargetDeltas++;
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a4;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a4 = this.parent) === null || _a4 === void 0 ? void 0 : _a4.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
        lead.target = lead.layout.layoutBox;
        lead.targetWithTransforms = createBox();
      }
      const { target } = lead;
      if (!target) {
        if (this.projectionTransform) {
          this.projectionDelta = createDelta();
          this.projectionTransform = "none";
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      const prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
      projectionFrameData.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll = true) {
      this.options.scheduleRender && this.options.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress2 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress2);
        mixAxisDelta(targetDelta.y, delta.y, progress2);
        this.setTargetDelta(targetDelta);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget)
            prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress2;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart");
      this.currentAnimation && this.currentAnimation.stop();
      if (this.resumingFrom && this.resumingFrom.currentAnimation) {
        this.resumingFrom.currentAnimation.stop();
      }
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest);
            options.onUpdate && options.onUpdate(latest);
          },
          onComplete: () => {
            options.onComplete && options.onComplete();
            this.completeAnimation();
          }
        });
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout: layout2, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout2)
        return;
      if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    }
    registerSharedNode(layoutId, node2) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node2);
      const config2 = node2.options.initialPromotionConfig;
      node2.promote({
        transition: config2 ? config2.transition : void 0,
        preserveFollowOpacity: config2 && config2.shouldPreserveFollowOpacity ? config2.shouldPreserveFollowOpacity(node2) : void 0
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a4;
      const { layoutId } = this.options;
      return layoutId ? ((_a4 = this.getStack()) === null || _a4 === void 0 ? void 0 : _a4.lead) || this : this;
    }
    getPrevLead() {
      var _a4;
      const { layoutId } = this.options;
      return layoutId ? (_a4 = this.getStack()) === null || _a4 === void 0 ? void 0 : _a4.prevLead : void 0;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition: transition2, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition2)
        this.setOptions({ transition: transition2 });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetSkewAndRotation() {
      const { visualElement } = this.options;
      if (!visualElement)
        return;
      let hasDistortingTransform = false;
      const { latestValues } = visualElement;
      if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {
        hasDistortingTransform = true;
      }
      if (!hasDistortingTransform)
        return;
      const resetValues = {};
      if (latestValues.z) {
        resetDistortingTransform("z", visualElement, resetValues, this.animationValues);
      }
      for (let i = 0; i < transformAxes.length; i++) {
        resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
        resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
      }
      visualElement.render();
      for (const key in resetValues) {
        visualElement.setStaticValue(key, resetValues[key]);
        if (this.animationValues) {
          this.animationValues[key] = resetValues[key];
        }
      }
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp) {
      var _a4, _b3;
      if (!this.instance || this.isSVG)
        return void 0;
      if (!this.isVisible) {
        return hiddenVisibility;
      }
      const styles2 = {
        visibility: ""
      };
      const transformTemplate2 = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles2.opacity = "";
        styles2.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        styles2.transform = transformTemplate2 ? transformTemplate2(this.latestValues, "") : "none";
        return styles2;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles2.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate2) {
        styles2.transform = transformTemplate2(valuesToRender, styles2.transform);
      }
      const { x: x2, y: y2 } = this.projectionDelta;
      styles2.transformOrigin = `${x2.origin * 100}% ${y2.origin * 100}% 0`;
      if (lead.animationValues) {
        styles2.opacity = lead === this ? (_b3 = (_a4 = valuesToRender.opacity) !== null && _a4 !== void 0 ? _a4 : this.latestValues.opacity) !== null && _b3 !== void 0 ? _b3 : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles2.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      }
      for (const key in scaleCorrectors) {
        if (valuesToRender[key] === void 0)
          continue;
        const { correct, applyTo } = scaleCorrectors[key];
        const corrected = styles2.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i = 0; i < num; i++) {
            styles2[applyTo[i]] = corrected;
          }
        } else {
          styles2[key] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles2.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "" : "none";
      }
      return styles2;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node2) => {
        var _a4;
        return (_a4 = node2.currentAnimation) === null || _a4 === void 0 ? void 0 : _a4.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node2) {
  node2.updateLayout();
}
function notifyLayoutUpdate(node2) {
  var _a4;
  const snapshot = ((_a4 = node2.resumeFrom) === null || _a4 === void 0 ? void 0 : _a4.snapshot) || node2.snapshot;
  if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
    const { layoutBox: layout2, measuredBox: measuredLayout } = node2.layout;
    const { animationType } = node2.options;
    const isShared = snapshot.source !== node2.layout.source;
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length2 = calcLength(axisSnapshot);
        axisSnapshot.min = layout2[axis].min;
        axisSnapshot.max = axisSnapshot.min + length2;
      });
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length2 = calcLength(layout2[axis]);
        axisSnapshot.max = axisSnapshot.min + length2;
        if (node2.relativeTarget && !node2.currentAnimation) {
          node2.isProjectionDirty = true;
          node2.relativeTarget[axis].max = node2.relativeTarget[axis].min + length2;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measuredBox);
    } else {
      calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeTargetChanged = false;
    if (!node2.resumeFrom) {
      const relativeParent = node2.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node2.relativeTarget = relativeLayout;
            node2.relativeTargetOrigin = relativeSnapshot;
            node2.relativeParent = relativeParent;
          }
        }
      }
    }
    node2.notifyListeners("didUpdate", {
      layout: layout2,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node2.isLead()) {
    const { onExitComplete } = node2.options;
    onExitComplete && onExitComplete();
  }
  node2.options.transition = void 0;
}
function propagateDirtyNodes(node2) {
  projectionFrameData.totalNodes++;
  if (!node2.parent)
    return;
  if (!node2.isProjecting()) {
    node2.isProjectionDirty = node2.parent.isProjectionDirty;
  }
  node2.isSharedProjectionDirty || (node2.isSharedProjectionDirty = Boolean(node2.isProjectionDirty || node2.parent.isProjectionDirty || node2.parent.isSharedProjectionDirty));
  node2.isTransformDirty || (node2.isTransformDirty = node2.parent.isTransformDirty);
}
function cleanDirtyNodes(node2) {
  node2.isProjectionDirty = node2.isSharedProjectionDirty = node2.isTransformDirty = false;
}
function clearSnapshot(node2) {
  node2.clearSnapshot();
}
function clearMeasurements(node2) {
  node2.clearMeasurements();
}
function clearIsLayoutDirty(node2) {
  node2.isLayoutDirty = false;
}
function resetTransformStyle(node2) {
  const { visualElement } = node2.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify("BeforeLayoutMeasure");
  }
  node2.resetTransform();
}
function finishAnimation(node2) {
  node2.finishAnimation();
  node2.targetDelta = node2.relativeTarget = node2.target = void 0;
  node2.isProjectionDirty = true;
}
function resolveTargetDelta(node2) {
  node2.resolveTargetDelta();
}
function calcProjection(node2) {
  node2.calcProjection();
}
function resetSkewAndRotation(node2) {
  node2.resetSkewAndRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p2) {
  output.translate = mixNumber$1(delta.translate, 0, p2);
  output.scale = mixNumber$1(delta.scale, 1, p2);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from2, to2, p2) {
  output.min = mixNumber$1(from2.min, to2.min, p2);
  output.max = mixNumber$1(from2.max, to2.max, p2);
}
function mixBox(output, from2, to2, p2) {
  mixAxis(output.x, from2.x, to2.x, p2);
  mixAxis(output.y, from2.y, to2.y, p2);
}
function hasOpacityCrossfade(node2) {
  return node2.animationValues && node2.animationValues.opacityExit !== void 0;
}
const defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
const userAgentContains = (string) => typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);
const roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop$2;
function roundAxis(axis) {
  axis.min = roundPoint(axis.min);
  axis.max = roundPoint(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
}
const DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => true
});
const rootProjectionNode = {
  current: void 0
};
const HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});
const drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};
const prefersReducedMotion = { current: null };
const hasReducedMotionListener = { current: false };
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser$2)
    return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}
function updateMotionValuesFromProps(element, next2, prev2) {
  const { willChange } = next2;
  for (const key in next2) {
    const nextValue = next2[key];
    const prevValue = prev2[key];
    if (isMotionValue(nextValue)) {
      element.addValue(key, nextValue);
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key);
      }
    } else if (isMotionValue(prevValue)) {
      element.addValue(key, motionValue(nextValue, { owner: element }));
      if (isWillChangeMotionValue(willChange)) {
        willChange.remove(key);
      }
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key)) {
        const existingValue = element.getValue(key);
        if (existingValue.liveStyle === true) {
          existingValue.jump(nextValue);
        } else if (!existingValue.hasAnimated) {
          existingValue.set(nextValue);
        }
      } else {
        const latestValue = element.getStaticValue(key);
        element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
    }
  }
  for (const key in prev2) {
    if (next2[key] === void 0)
      element.removeValue(key);
  }
  return next2;
}
const visualElementStore = /* @__PURE__ */ new WeakMap();
const valueTypes = [...dimensionValueTypes, color$1, complex];
const findValueType = (v2) => valueTypes.find(testValueType(v2));
const featureNames = Object.keys(featureDefinitions);
const numFeatures = featureNames.length;
const propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
const numVariantProps = variantProps.length;
class VisualElement {
  constructor({ parent, props: props2, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState }, options = {}) {
    this.resolveKeyframes = (keyframes3, onComplete, name, value) => {
      return new this.KeyframeResolver(keyframes3, onComplete, name, value, this);
    };
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.KeyframeResolver = KeyframeResolver;
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current)
        return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
    };
    this.scheduleRender = () => frame.render(this.render, false, true);
    const { latestValues, renderState } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props2.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props2;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.blockInitialAnimation = Boolean(blockInitialAnimation);
    this.isControllingVariants = isControllingVariants(props2);
    this.isVariantNode = isVariantNode(props2);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props2, {}, this);
    for (const key in initialMotionValues) {
      const value = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key], false);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key);
        }
      }
    }
  }
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {
    return {};
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key) => this.bindToMotionValue(key, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
    if (this.parent)
      this.parent.children.add(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current);
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove) => remove());
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this);
    for (const key in this.events) {
      this.events[key].clear();
    }
    for (const key in this.features) {
      this.features[key].unmount();
    }
    this.current = null;
  }
  bindToMotionValue(key, value) {
    const valueIsTransform = transformProps.has(key);
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key] = latestValue;
      this.props.onUpdate && frame.preRender(this.notifyUpdate);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    });
    const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(key, () => {
      removeOnChange();
      removeOnRenderRequest();
      if (value.owner)
        value.stop();
    });
  }
  sortNodePosition(other) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures2, initialLayoutGroupConfig) {
    let ProjectionNodeConstructor;
    let MeasureLayout2;
    for (let i = 0; i < numFeatures; i++) {
      const name = featureNames[i];
      const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
      if (ProjectionNode)
        ProjectionNodeConstructor = ProjectionNode;
      if (isEnabled(renderedProps)) {
        if (!this.features[name] && FeatureConstructor) {
          this.features[name] = new FeatureConstructor(this);
        }
        if (MeasureLayoutComponent) {
          MeasureLayout2 = MeasureLayoutComponent;
        }
      }
    }
    if ((this.type === "html" || this.type === "svg") && !this.projection && ProjectionNodeConstructor) {
      this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
      const { layoutId, layout: layout2, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
      this.projection.setOptions({
        layoutId,
        layout: layout2,
        alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        /**
         * TODO: Update options in an effect. This could be tricky as it'll be too late
         * to update by the time layout animations run.
         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
         * ensuring it gets called if there's no potential layout animations.
         *
         */
        animationType: typeof layout2 === "string" ? layout2 : "both",
        initialPromotionConfig: initialLayoutGroupConfig,
        layoutScroll,
        layoutRoot
      });
    }
    return MeasureLayout2;
  }
  updateFeatures() {
    for (const key in this.features) {
      const feature = this.features[key];
      if (feature.isMounted) {
        feature.update();
      } else {
        feature.mount();
        feature.isMounted = true;
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key) {
    return this.latestValues[key];
  }
  setStaticValue(key, value) {
    this.latestValues[key] = value;
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props2, presenceContext) {
    if (props2.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props2;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i = 0; i < propEventHandlers.length; i++) {
      const key = propEventHandlers[i];
      if (this.propEventSubscriptions[key]) {
        this.propEventSubscriptions[key]();
        delete this.propEventSubscriptions[key];
      }
      const listener = props2["on" + key];
      if (listener) {
        this.propEventSubscriptions[key] = this.on(key, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props2, this.prevProps, this), this.prevMotionValues);
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(startAtParent = false) {
    if (startAtParent) {
      return this.parent ? this.parent.getVariantContext() : void 0;
    }
    if (!this.isControllingVariants) {
      const context22 = this.parent ? this.parent.getVariantContext() || {} : {};
      if (this.props.initial !== void 0) {
        context22.initial = this.props.initial;
      }
      return context22;
    }
    const context2 = {};
    for (let i = 0; i < numVariantProps; i++) {
      const name = variantProps[i];
      const prop = this.props[name];
      if (isVariantLabel(prop) || prop === false) {
        context2[name] = prop;
      }
    }
    return context2;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key, value) {
    if (value !== this.values.get(key)) {
      this.removeValue(key);
      this.bindToMotionValue(key, value);
    }
    this.values.set(key, value);
    this.latestValues[key] = value.get();
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key) {
    this.values.delete(key);
    const unsubscribe = this.valueSubscriptions.get(key);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key);
    }
    delete this.latestValues[key];
    this.removeValueFromRenderState(key, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key) {
    return this.values.has(key);
  }
  getValue(key, defaultValue) {
    if (this.props.values && this.props.values[key]) {
      return this.props.values[key];
    }
    let value = this.values.get(key);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue === null ? void 0 : defaultValue, { owner: this });
      this.addValue(key, value);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key, target) {
    var _a4;
    let value = this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : (_a4 = this.getBaseTargetFromProps(this.props, key)) !== null && _a4 !== void 0 ? _a4 : this.readValueFromInstance(this.current, key, this.options);
    if (value !== void 0 && value !== null) {
      if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(target)) {
        value = getAnimatableNone(key, target);
      }
      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);
    }
    return isMotionValue(value) ? value.get() : value;
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key, value) {
    this.baseTarget[key] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key) {
    var _a4, _b3;
    const { initial } = this.props;
    const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_b3 = resolveVariantFromProps(this.props, initial, (_a4 = this.presenceContext) === null || _a4 === void 0 ? void 0 : _a4.custom)) === null || _b3 === void 0 ? void 0 : _b3[key] : void 0;
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key);
    if (target !== void 0 && !isMotionValue(target))
      return target;
    return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
  }
  on(eventName, callback2) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback2);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
}
class DOMVisualElement extends VisualElement {
  constructor() {
    super(...arguments);
    this.KeyframeResolver = DOMKeyframesResolver;
  }
  sortInstanceNodePosition(a, b2) {
    return a.compareDocumentPosition(b2) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props2, key) {
    return props2.style ? props2.style[key] : void 0;
  }
  removeValueFromRenderState(key, { vars: vars2, style }) {
    delete vars2[key];
    delete style[key];
  }
}
function getComputedStyle$2(element) {
  return window.getComputedStyle(element);
}
class HTMLVisualElement extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "html";
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      const computedStyle = getComputedStyle$2(instance);
      const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, options, props2) {
    buildHTMLStyles(renderState, latestValues, options, props2.transformTemplate);
  }
  scrapeMotionValuesFromProps(props2, prevProps, visualElement) {
    return scrapeMotionValuesFromProps$1(props2, prevProps, visualElement);
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current)
          this.current.textContent = `${latest}`;
      });
    }
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderHTML(instance, renderState, styleProp, projection);
  }
}
class SVGVisualElement extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "svg";
    this.isSVGTag = false;
  }
  getBaseTargetFromProps(props2, key) {
    return props2[key];
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return instance.getAttribute(key);
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  scrapeMotionValuesFromProps(props2, prevProps) {
    return scrapeMotionValuesFromProps(props2, prevProps, this);
  }
  build(renderState, latestValues, options, props2) {
    buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props2.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
}
const createDomVisualElement = (Component, options) => {
  return isSVGComponent(Component) ? new SVGVisualElement(options, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
};
const layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};
const preloadedFeatures = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout
};
const motion = /* @__PURE__ */ createMotionProxy((Component, config2) => createDomMotionConfig(Component, config2, preloadedFeatures, createDomVisualElement));
function useIsMounted() {
  const isMounted = reactExports.useRef(false);
  useIsomorphicLayoutEffect$2(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}
function useForceUpdate() {
  const isMounted = useIsMounted();
  const [forcedRenderCount, setForcedRenderCount] = reactExports.useState(0);
  const forceRender = reactExports.useCallback(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  const deferredForceRender = reactExports.useCallback(() => frame.postRender(forceRender), [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}
class PopChildMeasure extends reactExports.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const size2 = this.props.sizeRef.current;
      size2.height = element.offsetHeight || 0;
      size2.width = element.offsetWidth || 0;
      size2.top = element.offsetTop;
      size2.left = element.offsetLeft;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
}
function PopChild({ children, isPresent: isPresent2 }) {
  const id2 = reactExports.useId();
  const ref = reactExports.useRef(null);
  const size2 = reactExports.useRef({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  const { nonce } = reactExports.useContext(MotionConfigContext);
  reactExports.useInsertionEffect(() => {
    const { width, height, top, left } = size2.current;
    if (isPresent2 || !ref.current || !width || !height)
      return;
    ref.current.dataset.motionPopId = id2;
    const style = document.createElement("style");
    if (nonce)
      style.nonce = nonce;
    document.head.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id2}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
    }
    return () => {
      document.head.removeChild(style);
    };
  }, [isPresent2]);
  return reactExports.createElement(PopChildMeasure, { isPresent: isPresent2, childRef: ref, sizeRef: size2 }, reactExports.cloneElement(children, { ref }));
}
const PresenceChild = ({ children, initial, isPresent: isPresent2, onExitComplete, custom, presenceAffectsLayout, mode: mode2 }) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id2 = reactExports.useId();
  const context2 = reactExports.useMemo(
    () => ({
      id: id2,
      initial,
      isPresent: isPresent2,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete)
            return;
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      }
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    presenceAffectsLayout ? void 0 : [isPresent2]
  );
  reactExports.useMemo(() => {
    presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
  }, [isPresent2]);
  reactExports.useEffect(() => {
    !isPresent2 && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent2]);
  if (mode2 === "popLayout") {
    children = reactExports.createElement(PopChild, { isPresent: isPresent2 }, children);
  }
  return reactExports.createElement(PresenceContext.Provider, { value: context2 }, children);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}
function useUnmountEffect(callback2) {
  return reactExports.useEffect(() => () => callback2(), []);
}
const getChildKey = (child) => child.key || "";
function updateChildLookup(children, allChildren) {
  children.forEach((child) => {
    const key = getChildKey(child);
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  reactExports.Children.forEach(children, (child) => {
    if (reactExports.isValidElement(child))
      filtered.push(child);
  });
  return filtered;
}
const AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode: mode2 = "sync" }) => {
  const forceRender = reactExports.useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];
  const isMounted = useIsMounted();
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exitingChildren = reactExports.useRef(/* @__PURE__ */ new Map()).current;
  const presentChildren = reactExports.useRef(childrenToRender);
  const allChildren = reactExports.useRef(/* @__PURE__ */ new Map()).current;
  const isInitialRender = reactExports.useRef(true);
  useIsomorphicLayoutEffect$2(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect(() => {
    isInitialRender.current = true;
    allChildren.clear();
    exitingChildren.clear();
  });
  if (isInitialRender.current) {
    return reactExports.createElement(reactExports.Fragment, null, childrenToRender.map((child) => reactExports.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode: mode2 }, child)));
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i = 0; i < numPresent; i++) {
    const key = presentKeys[i];
    if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {
      exitingChildren.set(key, void 0);
    }
  }
  if (mode2 === "wait" && exitingChildren.size) {
    childrenToRender = [];
  }
  exitingChildren.forEach((component, key) => {
    if (targetKeys.indexOf(key) !== -1)
      return;
    const child = allChildren.get(key);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key);
    let exitingComponent = component;
    if (!exitingComponent) {
      const onExit = () => {
        exitingChildren.delete(key);
        const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));
        leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));
        presentChildren.current = filteredChildren.filter((presentChild) => {
          const presentChildKey = getChildKey(presentChild);
          return (
            // filter out the node exiting
            presentChildKey === key || // filter out the leftover children
            leftOverKeys.includes(presentChildKey)
          );
        });
        if (!exitingChildren.size) {
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      exitingComponent = reactExports.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode: mode2 }, child);
      exitingChildren.set(key, exitingComponent);
    }
    childrenToRender.splice(insertionIndex, 0, exitingComponent);
  });
  childrenToRender = childrenToRender.map((child) => {
    const key = child.key;
    return exitingChildren.has(key) ? child : reactExports.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode: mode2 }, child);
  });
  return reactExports.createElement(reactExports.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child) => reactExports.cloneElement(child)));
};
var toastMotionVariants = {
  initial: (props2) => {
    const { position: position2 } = props2;
    const dir = ["top", "bottom"].includes(position2) ? "y" : "x";
    let factor = ["top-right", "bottom-right"].includes(position2) ? 1 : -1;
    if (position2 === "bottom")
      factor = 1;
    return {
      opacity: 0,
      [dir]: factor * 24
    };
  },
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.85,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var ToastComponent = reactExports.memo((props2) => {
  const {
    id: id2,
    message,
    onCloseComplete,
    onRequestRemove,
    requestClose = false,
    position: position2 = "bottom",
    duration = 5e3,
    containerStyle,
    motionVariants = toastMotionVariants,
    toastSpacing = "0.5rem"
  } = props2;
  const [delay2, setDelay] = reactExports.useState(duration);
  const isPresent2 = useIsPresent();
  useUpdateEffect(() => {
    if (!isPresent2) {
      onCloseComplete == null ? void 0 : onCloseComplete();
    }
  }, [isPresent2]);
  useUpdateEffect(() => {
    setDelay(duration);
  }, [duration]);
  const onMouseEnter = () => setDelay(null);
  const onMouseLeave = () => setDelay(duration);
  const close = () => {
    if (isPresent2)
      onRequestRemove();
  };
  reactExports.useEffect(() => {
    if (isPresent2 && requestClose) {
      onRequestRemove();
    }
  }, [isPresent2, requestClose, onRequestRemove]);
  useTimeout(close, delay2);
  const containerStyles = reactExports.useMemo(
    () => ({
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: toastSpacing,
      ...containerStyle
    }),
    [containerStyle, toastSpacing]
  );
  const toastStyle = reactExports.useMemo(() => getToastStyle(position2), [position2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      layout: true,
      className: "chakra-toast",
      variants: motionVariants,
      initial: "initial",
      animate: "animate",
      exit: "exit",
      onHoverStart: onMouseEnter,
      onHoverEnd: onMouseLeave,
      custom: { position: position2 },
      style: toastStyle,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        chakra.div,
        {
          role: "status",
          "aria-atomic": "true",
          className: "chakra-toast__inner",
          __css: containerStyles,
          children: runIfFn$2(message, { id: id2, onClose: close })
        }
      )
    }
  );
});
ToastComponent.displayName = "ToastComponent";
function getToastPlacement(position2, dir) {
  var _a4;
  const computedPosition = position2 != null ? position2 : "bottom";
  const logicals = {
    "top-start": { ltr: "top-left", rtl: "top-right" },
    "top-end": { ltr: "top-right", rtl: "top-left" },
    "bottom-start": { ltr: "bottom-left", rtl: "bottom-right" },
    "bottom-end": { ltr: "bottom-right", rtl: "bottom-left" }
  };
  const logical2 = logicals[computedPosition];
  return (_a4 = logical2 == null ? void 0 : logical2[dir]) != null ? _a4 : computedPosition;
}
var fallbackIcon = {
  path: /* @__PURE__ */ jsxRuntimeExports.jsxs("g", { stroke: "currentColor", strokeWidth: "1.5", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "path",
      {
        strokeLinecap: "round",
        fill: "none",
        d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "path",
      {
        fill: "currentColor",
        strokeLinecap: "round",
        d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { fill: "none", strokeMiterlimit: "10", cx: "12", cy: "12", r: "11.25" })
  ] }),
  viewBox: "0 0 24 24"
};
var Icon = forwardRef((props2, ref) => {
  const {
    as: element,
    viewBox,
    color: color2 = "currentColor",
    focusable = false,
    children,
    className,
    __css,
    ...rest
  } = props2;
  const _className = cx("chakra-icon", className);
  const customStyles = useStyleConfig("Icon", props2);
  const styles2 = {
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color: color2,
    ...__css,
    ...customStyles
  };
  const shared = {
    ref,
    focusable,
    className: _className,
    __css: styles2
  };
  const _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
  if (element && typeof element !== "string") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.svg, { as: element, ...shared, ...rest });
  }
  const _path = children != null ? children : fallbackIcon.path;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.svg, { verticalAlign: "middle", viewBox: _viewBox, ...shared, ...rest, children: _path });
});
Icon.displayName = "Icon";
function createIcon(options) {
  const {
    viewBox = "0 0 24 24",
    d: pathDefinition,
    displayName,
    defaultProps: defaultProps2 = {}
  } = options;
  const path = reactExports.Children.toArray(options.path);
  const Comp = forwardRef((props2, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { ref, viewBox, ...defaultProps2, ...props2, children: path.length ? path : /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fill: "currentColor", d: pathDefinition }) }));
  Comp.displayName = displayName;
  return Comp;
}
function CheckIcon(props2) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { viewBox: "0 0 24 24", ...props2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    }
  ) });
}
function InfoIcon(props2) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { viewBox: "0 0 24 24", ...props2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    }
  ) });
}
function WarningIcon(props2) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { viewBox: "0 0 24 24", ...props2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    "path",
    {
      fill: "currentColor",
      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    }
  ) });
}
var spin = keyframes$1({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var Spinner = forwardRef((props2, ref) => {
  const styles2 = useStyleConfig("Spinner", props2);
  const {
    label = "Loading...",
    thickness = "2px",
    speed = "0.45s",
    emptyColor = "transparent",
    className,
    ...rest
  } = omitThemingProps(props2);
  const _className = cx("chakra-spinner", className);
  const spinnerStyles = {
    display: "inline-block",
    borderColor: "currentColor",
    borderStyle: "solid",
    borderRadius: "99999px",
    borderWidth: thickness,
    borderBottomColor: emptyColor,
    borderLeftColor: emptyColor,
    animation: `${spin} ${speed} linear infinite`,
    ...styles2
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.div,
    {
      ref,
      __css: spinnerStyles,
      className: _className,
      ...rest,
      children: label && /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.span, { srOnly: true, children: label })
    }
  );
});
Spinner.displayName = "Spinner";
var [AlertProvider, useAlertContext] = createContext$2({
  name: "AlertContext",
  hookName: "useAlertContext",
  providerName: "<Alert />"
});
var [AlertStylesProvider, useAlertStyles] = createContext$2({
  name: `AlertStylesContext`,
  hookName: `useAlertStyles`,
  providerName: "<Alert />"
});
var STATUSES = {
  info: { icon: InfoIcon, colorScheme: "blue" },
  warning: { icon: WarningIcon, colorScheme: "orange" },
  success: { icon: CheckIcon, colorScheme: "green" },
  error: { icon: WarningIcon, colorScheme: "red" },
  loading: { icon: Spinner, colorScheme: "blue" }
};
function getStatusColorScheme(status) {
  return STATUSES[status].colorScheme;
}
function getStatusIcon(status) {
  return STATUSES[status].icon;
}
var AlertDescription = forwardRef(
  function AlertDescription2(props2, ref) {
    const styles2 = useAlertStyles();
    const { status } = useAlertContext();
    const descriptionStyles = {
      display: "inline",
      ...styles2.description
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.div,
      {
        ref,
        "data-status": status,
        ...props2,
        className: cx("chakra-alert__desc", props2.className),
        __css: descriptionStyles
      }
    );
  }
);
AlertDescription.displayName = "AlertDescription";
function AlertIcon(props2) {
  const { status } = useAlertContext();
  const BaseIcon = getStatusIcon(status);
  const styles2 = useAlertStyles();
  const css2 = status === "loading" ? styles2.spinner : styles2.icon;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.span,
    {
      display: "inherit",
      "data-status": status,
      ...props2,
      className: cx("chakra-alert__icon", props2.className),
      __css: css2,
      children: props2.children || /* @__PURE__ */ jsxRuntimeExports.jsx(BaseIcon, { h: "100%", w: "100%" })
    }
  );
}
AlertIcon.displayName = "AlertIcon";
var AlertTitle = forwardRef(
  function AlertTitle2(props2, ref) {
    const styles2 = useAlertStyles();
    const { status } = useAlertContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.div,
      {
        ref,
        "data-status": status,
        ...props2,
        className: cx("chakra-alert__title", props2.className),
        __css: styles2.title
      }
    );
  }
);
AlertTitle.displayName = "AlertTitle";
var Alert = forwardRef(function Alert2(props2, ref) {
  var _a4;
  const { status = "info", addRole = true, ...rest } = omitThemingProps(props2);
  const colorScheme = (_a4 = props2.colorScheme) != null ? _a4 : getStatusColorScheme(status);
  const styles2 = useMultiStyleConfig("Alert", { ...props2, colorScheme });
  const alertStyles = {
    width: "100%",
    display: "flex",
    alignItems: "center",
    position: "relative",
    overflow: "hidden",
    ...styles2.container
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AlertProvider, { value: { status }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertStylesProvider, { value: styles2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.div,
    {
      "data-status": status,
      role: addRole ? "alert" : void 0,
      ref,
      ...rest,
      className: cx("chakra-alert", props2.className),
      __css: alertStyles
    }
  ) }) });
});
Alert.displayName = "Alert";
function CloseIcon(props2) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { focusable: "false", "aria-hidden": true, ...props2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    "path",
    {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }
  ) });
}
var CloseButton = forwardRef(
  function CloseButton2(props2, ref) {
    const styles2 = useStyleConfig("CloseButton", props2);
    const { children, isDisabled: isDisabled2, __css, ...rest } = omitThemingProps(props2);
    const baseStyle2 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.button,
      {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled2,
        __css: {
          ...baseStyle2,
          ...styles2,
          ...__css
        },
        ...rest,
        children: children || /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, { width: "1em", height: "1em" })
      }
    );
  }
);
CloseButton.displayName = "CloseButton";
var initialState = {
  top: [],
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  bottom: [],
  "bottom-right": []
};
var toastStore = createStore(initialState);
function createStore(initialState2) {
  let state2 = initialState2;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (setStateFn) => {
    state2 = setStateFn(state2);
    listeners.forEach((l2) => l2());
  };
  return {
    getState: () => state2,
    subscribe: (listener) => {
      listeners.add(listener);
      return () => {
        setState(() => initialState2);
        listeners.delete(listener);
      };
    },
    /**
     * Delete a toast record at its position
     */
    removeToast: (id2, position2) => {
      setState((prevState) => ({
        ...prevState,
        // id may be string or number
        // eslint-disable-next-line eqeqeq
        [position2]: prevState[position2].filter((toast) => toast.id != id2)
      }));
    },
    notify: (message, options) => {
      const toast = createToast(message, options);
      const { position: position2, id: id2 } = toast;
      setState((prevToasts) => {
        var _a4, _b3;
        const isTop = position2.includes("top");
        const toasts = isTop ? [toast, ...(_a4 = prevToasts[position2]) != null ? _a4 : []] : [...(_b3 = prevToasts[position2]) != null ? _b3 : [], toast];
        return {
          ...prevToasts,
          [position2]: toasts
        };
      });
      return id2;
    },
    update: (id2, options) => {
      if (!id2)
        return;
      setState((prevState) => {
        const nextState = { ...prevState };
        const { position: position2, index: index2 } = findToast(nextState, id2);
        if (position2 && index2 !== -1) {
          nextState[position2][index2] = {
            ...nextState[position2][index2],
            ...options,
            message: createRenderToast(options)
          };
        }
        return nextState;
      });
    },
    closeAll: ({ positions: positions2 } = {}) => {
      setState((prev2) => {
        const allPositions = [
          "bottom",
          "bottom-right",
          "bottom-left",
          "top",
          "top-left",
          "top-right"
        ];
        const positionsToClose = positions2 != null ? positions2 : allPositions;
        return positionsToClose.reduce(
          (acc, position2) => {
            acc[position2] = prev2[position2].map((toast) => ({
              ...toast,
              requestClose: true
            }));
            return acc;
          },
          { ...prev2 }
        );
      });
    },
    close: (id2) => {
      setState((prevState) => {
        const position2 = getToastPosition(prevState, id2);
        if (!position2)
          return prevState;
        return {
          ...prevState,
          [position2]: prevState[position2].map((toast) => {
            if (toast.id == id2) {
              return {
                ...toast,
                requestClose: true
              };
            }
            return toast;
          })
        };
      });
    },
    isActive: (id2) => Boolean(findToast(toastStore.getState(), id2).position)
  };
}
var counter = 0;
function createToast(message, options = {}) {
  var _a4, _b3;
  counter += 1;
  const id2 = (_a4 = options.id) != null ? _a4 : counter;
  const position2 = (_b3 = options.position) != null ? _b3 : "bottom";
  return {
    id: id2,
    message,
    position: position2,
    duration: options.duration,
    onCloseComplete: options.onCloseComplete,
    onRequestRemove: () => toastStore.removeToast(String(id2), position2),
    status: options.status,
    requestClose: false,
    containerStyle: options.containerStyle
  };
}
var Toast = (props2) => {
  const {
    status,
    variant = "solid",
    id: id2,
    title,
    isClosable,
    onClose,
    description,
    colorScheme,
    icon
  } = props2;
  const ids = id2 ? {
    root: `toast-${id2}`,
    title: `toast-${id2}-title`,
    description: `toast-${id2}-description`
  } : void 0;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Alert,
    {
      addRole: false,
      status,
      variant,
      id: ids == null ? void 0 : ids.root,
      alignItems: "start",
      borderRadius: "md",
      boxShadow: "lg",
      paddingEnd: 8,
      textAlign: "start",
      width: "auto",
      colorScheme,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AlertIcon, { children: icon }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(chakra.div, { flex: "1", maxWidth: "100%", children: [
          title && /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTitle, { id: ids == null ? void 0 : ids.title, children: title }),
          description && /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDescription, { id: ids == null ? void 0 : ids.description, display: "block", children: description })
        ] }),
        isClosable && /* @__PURE__ */ jsxRuntimeExports.jsx(
          CloseButton,
          {
            size: "sm",
            onClick: onClose,
            position: "absolute",
            insetEnd: 1,
            top: 1
          }
        )
      ]
    }
  );
};
function createRenderToast(options = {}) {
  const { render, toastComponent: ToastComponent2 = Toast } = options;
  const renderToast = (props2) => {
    if (typeof render === "function") {
      return render({ ...props2, ...options });
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ToastComponent2, { ...props2, ...options });
  };
  return renderToast;
}
function createToastFn(dir, defaultOptions2) {
  const normalizeToastOptions = (options) => {
    var _a4;
    return {
      ...defaultOptions2,
      ...options,
      position: getToastPlacement(
        (_a4 = options == null ? void 0 : options.position) != null ? _a4 : defaultOptions2 == null ? void 0 : defaultOptions2.position,
        dir
      )
    };
  };
  const toast = (options) => {
    const normalizedToastOptions = normalizeToastOptions(options);
    const Message = createRenderToast(normalizedToastOptions);
    return toastStore.notify(Message, normalizedToastOptions);
  };
  toast.update = (id2, options) => {
    toastStore.update(id2, normalizeToastOptions(options));
  };
  toast.promise = (promise, options) => {
    const id2 = toast({
      ...options.loading,
      status: "loading",
      duration: null
    });
    promise.then(
      (data) => toast.update(id2, {
        status: "success",
        duration: 5e3,
        ...runIfFn$2(options.success, data)
      })
    ).catch(
      (error) => toast.update(id2, {
        status: "error",
        duration: 5e3,
        ...runIfFn$2(options.error, error)
      })
    );
  };
  toast.closeAll = toastStore.closeAll;
  toast.close = toastStore.close;
  toast.isActive = toastStore.isActive;
  return toast;
}
var [ToastOptionProvider, useToastOptionContext] = createContext$2({
  name: `ToastOptionsContext`,
  strict: false
});
var ToastProvider = (props2) => {
  const state2 = reactExports.useSyncExternalStore(
    toastStore.subscribe,
    toastStore.getState,
    toastStore.getState
  );
  const {
    motionVariants,
    component: Component = ToastComponent,
    portalProps
  } = props2;
  const stateKeys = Object.keys(state2);
  const toastList = stateKeys.map((position2) => {
    const toasts = state2[position2];
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        role: "region",
        "aria-live": "polite",
        "aria-label": `Notifications-${position2}`,
        id: `chakra-toast-manager-${position2}`,
        style: getToastListStyle(position2),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { initial: false, children: toasts.map((toast) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          Component,
          {
            motionVariants,
            ...toast
          },
          toast.id
        )) })
      },
      position2
    );
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, { ...portalProps, children: toastList });
};
function useToast(options) {
  const { theme: theme2 } = useChakra();
  const defaultOptions2 = useToastOptionContext();
  return reactExports.useMemo(
    () => createToastFn(theme2.direction, {
      ...defaultOptions2,
      ...options
    }),
    [options, theme2.direction, defaultOptions2]
  );
}
var createChakraProvider = (providerTheme) => {
  return function ChakraProvider2({
    children,
    theme: theme2 = providerTheme,
    toastOptions,
    ...restProps
  }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ChakraProvider$1, { theme: theme2, ...restProps, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToastOptionProvider, { value: toastOptions == null ? void 0 : toastOptions.defaultOptions, children }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(ToastProvider, { ...toastOptions })
    ] });
  };
};
var ChakraProvider = createChakraProvider(theme);
function assignRef$1(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function mergeRefs(...refs) {
  return (node2) => {
    refs.forEach((ref) => {
      assignRef$1(ref, node2);
    });
  };
}
function useMergeRefs$1(...refs) {
  return reactExports.useMemo(() => mergeRefs(...refs), refs);
}
var TRANSITION_EASINGS = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_DEFAULTS = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS.easeIn
  }
};
var withDelay = {
  enter: (transition2, delay2) => ({
    ...transition2,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["enter"]
  }),
  exit: (transition2, delay2) => ({
    ...transition2,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["exit"]
  })
};
var variants$2 = {
  enter: ({ transition: transition2, transitionEnd, delay: delay2 } = {}) => {
    var _a4;
    return {
      opacity: 1,
      transition: (_a4 = transition2 == null ? void 0 : transition2.enter) != null ? _a4 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ transition: transition2, transitionEnd, delay: delay2 } = {}) => {
    var _a4;
    return {
      opacity: 0,
      transition: (_a4 = transition2 == null ? void 0 : transition2.exit) != null ? _a4 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$2
};
var Fade = reactExports.forwardRef(function Fade2(props2, ref) {
  const {
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition2,
    transitionEnd,
    delay: delay2,
    ...rest
  } = props2;
  const animate = isOpen || unmountOnExit ? "enter" : "exit";
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const custom = { transition: transition2, transitionEnd, delay: delay2 };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { custom, children: show && /* @__PURE__ */ jsxRuntimeExports.jsx(
    motion.div,
    {
      ref,
      className: cx("chakra-fade", className),
      custom,
      ...fadeConfig,
      animate,
      ...rest
    }
  ) });
});
Fade.displayName = "Fade";
var variants$1 = {
  exit: ({ reverse, initialScale, transition: transition2, transitionEnd, delay: delay2 }) => {
    var _a4;
    return {
      opacity: 0,
      ...reverse ? { scale: initialScale, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { scale: initialScale, ...transitionEnd == null ? void 0 : transitionEnd.exit } },
      transition: (_a4 = transition2 == null ? void 0 : transition2.exit) != null ? _a4 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2)
    };
  },
  enter: ({ transitionEnd, transition: transition2, delay: delay2 }) => {
    var _a4;
    return {
      opacity: 1,
      scale: 1,
      transition: (_a4 = transition2 == null ? void 0 : transition2.enter) != null ? _a4 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$1
};
var ScaleFade = reactExports.forwardRef(
  function ScaleFade2(props2, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      initialScale = 0.95,
      className,
      transition: transition2,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props2;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = { initialScale, reverse, transition: transition2, transitionEnd, delay: delay2 };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { custom, children: show && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        ...scaleFadeConfig,
        animate,
        custom,
        ...rest
      }
    ) });
  }
);
ScaleFade.displayName = "ScaleFade";
var variants = {
  initial: ({ offsetX, offsetY, transition: transition2, transitionEnd, delay: delay2 }) => {
    var _a4;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_a4 = transition2 == null ? void 0 : transition2.exit) != null ? _a4 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ transition: transition2, transitionEnd, delay: delay2 }) => {
    var _a4;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_a4 = transition2 == null ? void 0 : transition2.enter) != null ? _a4 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ offsetY, offsetX, transition: transition2, transitionEnd, reverse, delay: delay2 }) => {
    var _a4;
    const offset = { x: offsetX, y: offsetY };
    return {
      opacity: 0,
      transition: (_a4 = transition2 == null ? void 0 : transition2.exit) != null ? _a4 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      ...reverse ? { ...offset, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { ...offset, ...transitionEnd == null ? void 0 : transitionEnd.exit } }
    };
  }
};
var slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants
};
var SlideFade = reactExports.forwardRef(
  function SlideFade2(props2, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      className,
      offsetX = 0,
      offsetY = 8,
      transition: transition2,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props2;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
      offsetX,
      offsetY,
      reverse,
      transition: transition2,
      transitionEnd,
      delay: delay2
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { custom, children: show && /* @__PURE__ */ jsxRuntimeExports.jsx(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        custom,
        ...slideFadeConfig,
        animate,
        ...rest
      }
    ) });
  }
);
SlideFade.displayName = "SlideFade";
var NativeImage = forwardRef(function NativeImage2(props2, ref) {
  const { htmlWidth, htmlHeight, alt, ...rest } = props2;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("img", { width: htmlWidth, height: htmlHeight, ref, alt, ...rest });
});
NativeImage.displayName = "NativeImage";
function useImage(props2) {
  const {
    loading,
    src: src2,
    srcSet,
    onLoad,
    onError,
    crossOrigin,
    sizes: sizes2,
    ignoreFallback
  } = props2;
  const [status, setStatus] = reactExports.useState("pending");
  reactExports.useEffect(() => {
    setStatus(src2 ? "loading" : "pending");
  }, [src2]);
  const imageRef = reactExports.useRef();
  const load = reactExports.useCallback(() => {
    if (!src2)
      return;
    flush();
    const img = new Image();
    img.src = src2;
    if (crossOrigin)
      img.crossOrigin = crossOrigin;
    if (srcSet)
      img.srcset = srcSet;
    if (sizes2)
      img.sizes = sizes2;
    if (loading)
      img.loading = loading;
    img.onload = (event2) => {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(event2);
    };
    img.onerror = (error) => {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error);
    };
    imageRef.current = img;
  }, [src2, crossOrigin, srcSet, sizes2, onLoad, onError, loading]);
  const flush = () => {
    if (imageRef.current) {
      imageRef.current.onload = null;
      imageRef.current.onerror = null;
      imageRef.current = null;
    }
  };
  useSafeLayoutEffect$1(() => {
    if (ignoreFallback)
      return void 0;
    if (status === "loading") {
      load();
    }
    return () => {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
}
var shouldShowFallbackImage = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";
function omit(object, keysToOmit = []) {
  const clone2 = Object.assign({}, object);
  for (const key of keysToOmit) {
    if (key in clone2) {
      delete clone2[key];
    }
  }
  return clone2;
}
var Image$1 = forwardRef(function Image2(props2, ref) {
  const {
    fallbackSrc,
    fallback,
    src: src2,
    srcSet,
    align: align2,
    fit,
    loading,
    ignoreFallback,
    crossOrigin,
    fallbackStrategy = "beforeLoadOrError",
    referrerPolicy,
    ...rest
  } = props2;
  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
  const shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image
  ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it
  !providedFallback;
  const status = useImage({
    ...props2,
    crossOrigin,
    ignoreFallback: shouldIgnoreFallbackImage
  });
  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);
  const shared = {
    ref,
    objectFit: fit,
    objectPosition: align2,
    ...shouldIgnoreFallbackImage ? rest : omit(rest, ["onError", "onLoad"])
  };
  if (showFallbackImage) {
    if (fallback)
      return fallback;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.img,
      {
        as: NativeImage,
        className: "chakra-image__placeholder",
        src: fallbackSrc,
        ...shared
      }
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.img,
    {
      as: NativeImage,
      src: src2,
      srcSet,
      crossOrigin,
      loading,
      referrerPolicy,
      className: "chakra-image",
      ...shared
    }
  );
});
Image$1.displayName = "Image";
function getValidChildren(children) {
  return reactExports.Children.toArray(children).filter(
    (child) => reactExports.isValidElement(child)
  );
}
var [ButtonGroupProvider, useButtonGroup] = createContext$2({
  strict: false,
  name: "ButtonGroupContext"
});
function useButtonType(value) {
  const [isButton, setIsButton] = reactExports.useState(!value);
  const refCallback = reactExports.useCallback((node2) => {
    if (!node2)
      return;
    setIsButton(node2.tagName === "BUTTON");
  }, []);
  const type = isButton ? "button" : void 0;
  return { ref: refCallback, type };
}
function ButtonIcon(props2) {
  const { children, className, ...rest } = props2;
  const _children = reactExports.isValidElement(children) ? reactExports.cloneElement(children, {
    "aria-hidden": true,
    focusable: false
  }) : children;
  const _className = cx("chakra-button__icon", className);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.span,
    {
      display: "inline-flex",
      alignSelf: "center",
      flexShrink: 0,
      ...rest,
      className: _className,
      children: _children
    }
  );
}
ButtonIcon.displayName = "ButtonIcon";
function ButtonSpinner(props2) {
  const {
    label,
    placement,
    spacing: spacing2 = "0.5rem",
    children = /* @__PURE__ */ jsxRuntimeExports.jsx(Spinner, { color: "currentColor", width: "1em", height: "1em" }),
    className,
    __css,
    ...rest
  } = props2;
  const _className = cx("chakra-button__spinner", className);
  const marginProp = placement === "start" ? "marginEnd" : "marginStart";
  const spinnerStyles = reactExports.useMemo(
    () => ({
      display: "flex",
      alignItems: "center",
      position: label ? "relative" : "absolute",
      [marginProp]: label ? spacing2 : 0,
      fontSize: "1em",
      lineHeight: "normal",
      ...__css
    }),
    [__css, label, marginProp, spacing2]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });
}
ButtonSpinner.displayName = "ButtonSpinner";
var Button$2 = forwardRef((props2, ref) => {
  const group = useButtonGroup();
  const styles2 = useStyleConfig("Button", { ...group, ...props2 });
  const {
    isDisabled: isDisabled2 = group == null ? void 0 : group.isDisabled,
    isLoading,
    isActive,
    children,
    leftIcon,
    rightIcon,
    loadingText,
    iconSpacing: iconSpacing2 = "0.5rem",
    type,
    spinner,
    spinnerPlacement = "start",
    className,
    as,
    ...rest
  } = omitThemingProps(props2);
  const buttonStyles = reactExports.useMemo(() => {
    const _focus = { ...styles2 == null ? void 0 : styles2["_focus"], zIndex: 1 };
    return {
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      justifyContent: "center",
      userSelect: "none",
      position: "relative",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      outline: "none",
      ...styles2,
      ...!!group && { _focus }
    };
  }, [styles2, group]);
  const { ref: _ref2, type: defaultType } = useButtonType(as);
  const contentProps = { rightIcon, leftIcon, iconSpacing: iconSpacing2, children };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    chakra.button,
    {
      ref: useMergeRefs$1(ref, _ref2),
      as,
      type: type != null ? type : defaultType,
      "data-active": dataAttr(isActive),
      "data-loading": dataAttr(isLoading),
      __css: buttonStyles,
      className: cx("chakra-button", className),
      ...rest,
      disabled: isDisabled2 || isLoading,
      children: [
        isLoading && spinnerPlacement === "start" && /* @__PURE__ */ jsxRuntimeExports.jsx(
          ButtonSpinner,
          {
            className: "chakra-button__spinner--start",
            label: loadingText,
            placement: "start",
            spacing: iconSpacing2,
            children: spinner
          }
        ),
        isLoading ? loadingText || /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.span, { opacity: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonContent, { ...contentProps }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonContent, { ...contentProps }),
        isLoading && spinnerPlacement === "end" && /* @__PURE__ */ jsxRuntimeExports.jsx(
          ButtonSpinner,
          {
            className: "chakra-button__spinner--end",
            label: loadingText,
            placement: "end",
            spacing: iconSpacing2,
            children: spinner
          }
        )
      ]
    }
  );
});
Button$2.displayName = "Button";
function ButtonContent(props2) {
  const { leftIcon, rightIcon, children, iconSpacing: iconSpacing2 } = props2;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    leftIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonIcon, { marginEnd: iconSpacing2, children: leftIcon }),
    children,
    rightIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonIcon, { marginStart: iconSpacing2, children: rightIcon })
  ] });
}
var [FormControlStylesProvider, useFormControlStyles] = createContext$2({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider, useFormControlContext] = createContext$2({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider(props2) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled2,
    isReadOnly,
    ...htmlProps
  } = props2;
  const uuid = reactExports.useId();
  const id2 = idProp || `field-${uuid}`;
  const labelId = `${id2}-label`;
  const feedbackId = `${id2}-feedback`;
  const helpTextId = `${id2}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = reactExports.useState(false);
  const [hasHelpText, setHasHelpText] = reactExports.useState(false);
  const [isFocused, setFocus] = reactExports.useState(false);
  const getHelpTextProps = reactExports.useCallback(
    (props22 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props22,
      /**
       * Notify the field context when the help text is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = reactExports.useCallback(
    (props22 = {}, forwardedRef = null) => ({
      ...props22,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled2),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props22.id !== void 0 ? props22.id : labelId,
      htmlFor: props22.htmlFor !== void 0 ? props22.htmlFor : id2
    }),
    [id2, isDisabled2, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = reactExports.useCallback(
    (props22 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props22,
      /**
       * Notify the field context when the error message is rendered on screen,
       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
       */
      ref: mergeRefs(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = reactExports.useCallback(
    (props22 = {}, forwardedRef = null) => ({
      ...props22,
      ...htmlProps,
      ref: forwardedRef,
      role: "group",
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled2),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly)
    }),
    [htmlProps, isDisabled2, isFocused, isInvalid, isReadOnly]
  );
  const getRequiredIndicatorProps = reactExports.useCallback(
    (props22 = {}, forwardedRef = null) => ({
      ...props22,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props22.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled2,
    isFocused: !!isFocused,
    onFocus: () => setFocus(true),
    onBlur: () => setFocus(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id2,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl = forwardRef(
  function FormControl2(props2, ref) {
    const styles2 = useMultiStyleConfig("Form", props2);
    const ownProps = omitThemingProps(props2);
    const {
      getRootProps,
      htmlProps: _,
      ...context2
    } = useFormControlProvider(ownProps);
    const className = cx("chakra-form-control", props2.className);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlProvider, { value: context2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlStylesProvider, { value: styles2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles2["container"]
      }
    ) }) });
  }
);
FormControl.displayName = "FormControl";
var FormHelperText = forwardRef(
  function FormHelperText2(props2, ref) {
    const field = useFormControlContext();
    const styles2 = useFormControlStyles();
    const className = cx("chakra-form__helper-text", props2.className);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props2, ref),
        __css: styles2.helperText,
        className
      }
    );
  }
);
FormHelperText.displayName = "FormHelperText";
var FormLabel = forwardRef(function FormLabel2(passedProps, ref) {
  var _a4;
  const styles2 = useStyleConfig("FormLabel", passedProps);
  const props2 = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = /* @__PURE__ */ jsxRuntimeExports.jsx(RequiredIndicator, {}),
    optionalIndicator = null,
    ...rest
  } = props2;
  const field = useFormControlContext();
  const ownProps = (_a4 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a4 : { ref, ...rest };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    chakra.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props2.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles2
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel.displayName = "FormLabel";
var RequiredIndicator = forwardRef(
  function RequiredIndicator2(props2, ref) {
    const field = useFormControlContext();
    const styles2 = useFormControlStyles();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props2.className);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props2, ref),
        __css: styles2.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator.displayName = "RequiredIndicator";
function useFormControl(props2) {
  const { isDisabled: isDisabled2, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props2);
  return {
    ...rest,
    disabled: isDisabled2,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  };
}
function useFormControlProps(props2) {
  var _a4, _b3, _c2;
  const field = useFormControlContext();
  const {
    id: id2,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled2,
    onFocus: onFocus3,
    onBlur: onBlur3,
    ...rest
  } = props2;
  const labelIds = props2["aria-describedby"] ? [props2["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id2 != null ? id2 : field == null ? void 0 : field.id,
    isDisabled: (_a4 = disabled != null ? disabled : isDisabled2) != null ? _a4 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b3 = readOnly != null ? readOnly : isReadOnly) != null ? _b3 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c2 = required != null ? required : isRequired) != null ? _c2 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers$1(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers$1(field == null ? void 0 : field.onBlur, onBlur3)
  };
}
function _objectWithoutPropertiesLoose$2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes = { exports: {} };
var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;
function requireReactPropTypesSecret() {
  if (hasRequiredReactPropTypesSecret)
    return ReactPropTypesSecret_1;
  hasRequiredReactPropTypesSecret = 1;
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  ReactPropTypesSecret_1 = ReactPropTypesSecret;
  return ReactPropTypesSecret_1;
}
var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;
function requireFactoryWithThrowingShims() {
  if (hasRequiredFactoryWithThrowingShims)
    return factoryWithThrowingShims;
  hasRequiredFactoryWithThrowingShims = 1;
  var ReactPropTypesSecret = requireReactPropTypesSecret();
  function emptyFunction() {
  }
  function emptyFunctionWithReset() {
  }
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  factoryWithThrowingShims = function() {
    function shim(props2, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }
      var err = new Error(
        "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
      );
      err.name = "Invariant Violation";
      throw err;
    }
    shim.isRequired = shim;
    function getShim() {
      return shim;
    }
    var ReactPropTypes = {
      array: shim,
      bigint: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  return factoryWithThrowingShims;
}
var hasRequiredPropTypes;
function requirePropTypes() {
  if (hasRequiredPropTypes)
    return propTypes.exports;
  hasRequiredPropTypes = 1;
  {
    propTypes.exports = requireFactoryWithThrowingShims()();
  }
  return propTypes.exports;
}
requirePropTypes();
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}
function useCallbackRef$1(initialValue, callback2) {
  var ref = reactExports.useState(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback: callback2,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback2;
  return ref.facade;
}
var useIsomorphicLayoutEffect$1 = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef$1(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect$1(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n2 = arguments.length; i < n2; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t2[p2] = s[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e2) {
  var t2 = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e2.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t2[p2[i]] = s[p2[i]];
    }
  return t2;
}
function __spreadArray(to2, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l2 = from2.length, ar; i < l2; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to2.concat(ar || Array.prototype.slice.call(from2));
}
typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
  var e2 = new Error(message);
  return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
};
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults2, middleware2) {
  if (middleware2 === void 0) {
    middleware2 = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults2;
    },
    useMedium: function(data) {
      var item = middleware2(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x2) {
          return x2 !== item;
        });
      };
    },
    assignSyncMedium: function(cb2) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
      }
      buffer = {
        push: function(x2) {
          return cb2(x2);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb2) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb2);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x2) {
          pendingQueue.push(x2);
          cycle();
        },
        filter: function(filter3) {
          pendingQueue = pendingQueue.filter(filter3);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults2, middleware2) {
  if (middleware2 === void 0) {
    middleware2 = ItoI;
  }
  return innerCreateMedium(defaults2, middleware2);
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}
var SideCar$1 = function(_a4) {
  var sideCar = _a4.sideCar, rest = __rest(_a4, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return reactExports.createElement(Target, __assign({}, rest));
};
SideCar$1.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar$1;
}
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true,
  ssr: typeof document !== "undefined"
});
var focusScope = /* @__PURE__ */ reactExports.createContext(void 0);
var emptyArray = [];
var FocusLock$1 = /* @__PURE__ */ reactExports.forwardRef(function FocusLockUI(props2, parentRef) {
  var _extends2;
  var _React$useState = reactExports.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = reactExports.useRef();
  var isActive = reactExports.useRef(false);
  var originalFocusedElement = reactExports.useRef(null);
  var _React$useState2 = reactExports.useState({}), update = _React$useState2[1];
  var children = props2.children, _props$disabled = props2.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$noFocusGuards = props2.noFocusGuards, noFocusGuards = _props$noFocusGuards === void 0 ? false : _props$noFocusGuards, _props$persistentFocu = props2.persistentFocus, persistentFocus = _props$persistentFocu === void 0 ? false : _props$persistentFocu, _props$crossFrame = props2.crossFrame, crossFrame = _props$crossFrame === void 0 ? true : _props$crossFrame, _props$autoFocus = props2.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus;
  props2.allowTextSelection;
  var group = props2.group, className = props2.className, whiteList = props2.whiteList, hasPositiveIndices = props2.hasPositiveIndices, _props$shards = props2.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props2.as, Container2 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props2.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props2.sideCar, _props$returnFocus = props2.returnFocus, shouldReturnFocus = _props$returnFocus === void 0 ? false : _props$returnFocus, focusOptions = props2.focusOptions, onActivationCallback = props2.onActivation, onDeactivationCallback = props2.onDeactivation;
  var _React$useState3 = reactExports.useState({}), id2 = _React$useState3[0];
  var onActivation = reactExports.useCallback(function(_ref2) {
    var captureFocusRestore2 = _ref2.captureFocusRestore;
    if (!originalFocusedElement.current) {
      var _document;
      var activeElement = (_document = document) == null ? void 0 : _document.activeElement;
      originalFocusedElement.current = activeElement;
      if (activeElement !== document.body) {
        originalFocusedElement.current = captureFocusRestore2(activeElement);
      }
    }
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
    update();
  }, [onActivationCallback]);
  var onDeactivation = reactExports.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
    update();
  }, [onDeactivationCallback]);
  var returnFocus = reactExports.useCallback(function(allowDefer) {
    var focusRestore = originalFocusedElement.current;
    if (focusRestore) {
      var returnFocusTo = (typeof focusRestore === "function" ? focusRestore() : focusRestore) || document.body;
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = reactExports.useCallback(function(event2) {
    if (isActive.current) {
      mediumFocus.useMedium(event2);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = reactExports.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  var lockProps = _extends$4((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && "disabled", _extends2[FOCUS_GROUP] = group, _extends2), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs([parentRef, setObserveNode]);
  var focusScopeValue = reactExports.useMemo(function() {
    return {
      observed,
      shards,
      enabled: !disabled,
      active: isActive.current
    };
  }, [disabled, isActive.current, shards, realObserved]);
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, hasLeadingGuards && [
    /* @__PURE__ */ reactExports.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    hasPositiveIndices ? /* @__PURE__ */ reactExports.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && /* @__PURE__ */ reactExports.createElement(SideCar2, {
    id: id2,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions
  }), /* @__PURE__ */ reactExports.createElement(Container2, _extends$4({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), /* @__PURE__ */ reactExports.createElement(focusScope.Provider, {
    value: focusScopeValue
  }, children)), hasTailingGuards && /* @__PURE__ */ reactExports.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock$1.propTypes = {};
const FocusLockUI2 = FocusLock$1;
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  };
  return _setPrototypeOf(o, p2);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _typeof$1(o) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$1(o);
}
function toPrimitive$1(t2, r2) {
  if ("object" != _typeof$1(t2) || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i = e2.call(t2, r2 || "default");
    if ("object" != _typeof$1(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
function toPropertyKey$1(t2) {
  var i = toPrimitive$1(t2, "string");
  return "symbol" == _typeof$1(i) ? i : i + "";
}
function _defineProperty$1(obj, key, value) {
  key = toPropertyKey$1(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap2(WrappedComponent) {
    var mountedInstances = [];
    var state2;
    function emitChange() {
      state2 = reducePropsToState2(mountedInstances.map(function(instance) {
        return instance.props;
      }));
      handleStateChangeOnClient2(state2);
    }
    var SideEffect = /* @__PURE__ */ function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek2() {
        return state2;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index2 = mountedInstances.indexOf(this);
        mountedInstances.splice(index2, 1);
        emitChange();
      };
      _proto.render = function render() {
        return /* @__PURE__ */ React.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(reactExports.PureComponent);
    _defineProperty$1(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
    return SideEffect;
  };
}
var toArray$1 = function(a) {
  var ret = Array(a.length);
  for (var i = 0; i < a.length; ++i) {
    ret[i] = a[i];
  }
  return ret;
};
var asArray = function(a) {
  return Array.isArray(a) ? a : [a];
};
var getFirst = function(a) {
  return Array.isArray(a) ? a[0] : a;
};
var isElementHidden = function(node2) {
  if (node2.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node2, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode = function(node2) {
  return node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    node2.parentNode.host
  ) : node2.parentNode;
};
var isTopNode = function(node2) {
  return node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE;
};
var isInert = function(node2) {
  return node2.hasAttribute("inert");
};
var isVisibleUncached = function(node2, checkParent) {
  return !node2 || isTopNode(node2) || !isElementHidden(node2) && !isInert(node2) && checkParent(getParentNode(node2));
};
var isVisibleCached = function(visibilityCache, node2) {
  var cached = visibilityCache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node2, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node2, result);
  return result;
};
var isAutoFocusAllowedUncached = function(node2, checkParent) {
  return node2 && !isTopNode(node2) ? isAutoFocusAllowed(node2) ? checkParent(getParentNode(node2)) : false : true;
};
var isAutoFocusAllowedCached = function(cache, node2) {
  var cached = cache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isAutoFocusAllowedUncached(node2, isAutoFocusAllowedCached.bind(void 0, cache));
  cache.set(node2, result);
  return result;
};
var getDataset = function(node2) {
  return node2.dataset;
};
var isHTMLButtonElement = function(node2) {
  return node2.tagName === "BUTTON";
};
var isHTMLInputElement = function(node2) {
  return node2.tagName === "INPUT";
};
var isRadioElement = function(node2) {
  return isHTMLInputElement(node2) && node2.type === "radio";
};
var notHiddenInput = function(node2) {
  return !((isHTMLInputElement(node2) || isHTMLButtonElement(node2)) && (node2.type === "hidden" || node2.disabled));
};
var isAutoFocusAllowed = function(node2) {
  var attribute = node2.getAttribute(FOCUS_NO_AUTOFOCUS);
  return ![true, "true", ""].includes(attribute);
};
var isGuard = function(node2) {
  var _a4;
  return Boolean(node2 && ((_a4 = getDataset(node2)) === null || _a4 === void 0 ? void 0 : _a4.focusGuard));
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined = function(x2) {
  return Boolean(x2);
};
var tabSort = function(a, b2) {
  var aTab = Math.max(0, a.tabIndex);
  var bTab = Math.max(0, b2.tabIndex);
  var tabDiff = aTab - bTab;
  var indexDiff = a.index - b2.index;
  if (tabDiff) {
    if (!aTab) {
      return 1;
    }
    if (!bTab) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var getTabIndex = function(node2) {
  if (node2.tabIndex < 0) {
    if (!node2.hasAttribute("tabindex")) {
      return 0;
    }
  }
  return node2.tabIndex;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray$1(nodes).map(function(node2, index2) {
    var tabIndex = getTabIndex(node2);
    return {
      node: node2,
      index: index2,
      tabIndex: keepGuards && tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  // elements with explicit roles will also use explicit tabindex
  // '[role="button"]',
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
  return toArray$1((parent.shadowRoot || parent).children).reduce(function(acc, child) {
    return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
  }, []);
};
var getFocusablesWithIFrame = function(parent, withGuards) {
  var _a4;
  if (parent instanceof HTMLIFrameElement && ((_a4 = parent.contentDocument) === null || _a4 === void 0 ? void 0 : _a4.body)) {
    return getFocusables([parent.contentDocument.body], withGuards);
  }
  return [parent];
};
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    var _a4;
    var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
    var focusableWithIframes = (_a4 = []).concat.apply(_a4, focusableWithShadowDom.map(function(node2) {
      return getFocusablesWithIFrame(node2, withGuards);
    }));
    return acc.concat(
      // add all tabbables inside and within shadow DOMs in DOM order
      focusableWithIframes,
      // add if node is tabbable itself
      parent.parentNode ? toArray$1(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
        return node2 === parent;
      }) : []
    );
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray$1(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};
var filterFocusable = function(nodes, visibilityCache) {
  return toArray$1(nodes).filter(function(node2) {
    return isVisibleCached(visibilityCache, node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var filterAutoFocusable = function(nodes, cache) {
  if (cache === void 0) {
    cache = /* @__PURE__ */ new Map();
  }
  return toArray$1(nodes).filter(function(node2) {
    return isAutoFocusAllowedCached(cache, node2);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getFocusableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};
var contains$1 = function(scope, element) {
  if (scope.shadowRoot) {
    return contains$1(scope.shadowRoot, element);
  } else {
    if (Object.getPrototypeOf(scope).contains !== void 0 && Object.getPrototypeOf(scope).contains.call(scope, element)) {
      return true;
    }
    return toArray$1(scope.children).some(function(child) {
      var _a4;
      if (child instanceof HTMLIFrameElement) {
        var iframeBody = (_a4 = child.contentDocument) === null || _a4 === void 0 ? void 0 : _a4.body;
        if (iframeBody) {
          return contains$1(iframeBody, element);
        }
        return false;
      }
      return contains$1(child, element);
    });
  }
};
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l2 = nodes.length;
  for (var i = 0; i < l2; i += 1) {
    for (var j = i + 1; j < l2; j += 1) {
      var position2 = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index2) {
    return !contained.has(index2);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray$1(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};
var safeProbe = function(cb2) {
  try {
    return cb2();
  } catch (e2) {
    return void 0;
  }
};
var getActiveElement = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  if (!inDocument || !inDocument.activeElement) {
    return void 0;
  }
  var activeElement = inDocument.activeElement;
  return activeElement.shadowRoot ? getActiveElement(activeElement.shadowRoot) : activeElement instanceof HTMLIFrameElement && safeProbe(function() {
    return activeElement.contentWindow.document;
  }) ? getActiveElement(activeElement.contentWindow.document) : activeElement;
};
var focusInFrame = function(frame2, activeElement) {
  return frame2 === activeElement;
};
var focusInsideIframe = function(topNode, activeElement) {
  return Boolean(toArray$1(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2, activeElement);
  }));
};
var focusInside = function(topNode, activeElement) {
  if (activeElement === void 0) {
    activeElement = getActiveElement(getFirst(topNode).ownerDocument);
  }
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).some(function(node2) {
    return contains$1(node2, activeElement) || focusInsideIframe(node2, activeElement);
  });
};
var focusIsHidden = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  var activeElement = getActiveElement(inDocument);
  if (!activeElement) {
    return false;
  }
  return toArray$1(inDocument.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node2) {
    return contains$1(node2, activeElement);
  });
};
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadioElement).filter(function(el2) {
    return el2.name === node2.name;
  }).filter(function(el2) {
    return el2.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadioElement(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, node2) {
  return nodes.indexOf(correctNode(node2, nodes));
};
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, innerTabbables, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  if (activeIndex === -1) {
    if (lastNodeInside !== -1) {
      return lastNodeInside;
    }
    return NEW_FOCUS;
  }
  if (lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (innerTabbables.length === 0) {
    return lastNodeInside;
  }
  var returnFirstNode = pickFocusable(innerNodes, innerTabbables[0]);
  var returnLastNode = pickFocusable(innerNodes, innerTabbables[innerTabbables.length - 1]);
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    var _a4;
    var autofocus = (_a4 = getDataset(node2)) === null || _a4 === void 0 ? void 0 : _a4.autofocus;
    return (
      // @ts-expect-error
      node2.autofocus || //
      autofocus !== void 0 && autofocus !== "false" || //
      autoFocusables.indexOf(node2) >= 0
    );
  };
};
var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
  var nodes = nodesIndexes.map(function(_a4) {
    var node2 = _a4.node;
    return node2;
  });
  var autoFocusable = filterAutoFocusable(nodes.filter(findAutoFocused(groups)));
  if (autoFocusable && autoFocusable.length) {
    return pickFirstFocus(autoFocusable);
  }
  return pickFirstFocus(filterAutoFocusable(orderedNodes));
};
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode.host || node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || contains$1(common, topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2, visibilityCache));
  }, []);
};
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined);
};
var focusSolver = function(topNode, lastNode) {
  var activeElement = getActiveElement(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getFocusableNodes(entries, visibilityCache);
  var innerElements = anyFocusable.filter(function(_a4) {
    var node2 = _a4.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    return void 0;
  }
  var outerNodes = getFocusableNodes([commonParent], visibilityCache).map(function(_a4) {
    var node2 = _a4.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerFocusables = orderedInnerElements.map(function(_a4) {
    var node2 = _a4.node;
    return node2;
  });
  var innerTabbable = orderedInnerElements.filter(function(_a4) {
    var tabIndex = _a4.tabIndex;
    return tabIndex >= 0;
  }).map(function(_a4) {
    var node2 = _a4.node;
    return node2;
  });
  var newId = newFocus(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var focusNode = (
      // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus
      pickAutofocus(anyFocusable, innerTabbable, allParentAutofocusables(entries, visibilityCache)) || pickAutofocus(anyFocusable, innerFocusables, allParentAutofocusables(entries, visibilityCache))
    );
    if (focusNode) {
      return { node: focusNode };
    } else {
      console.warn("focus-lock: cannot find any node to move focus into");
      return void 0;
    }
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};
var expandFocusableNodes = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);
  var innerElements = getFocusables(entries, false);
  return outerNodes.map(function(_a4) {
    var node2 = _a4.node, index2 = _a4.index;
    return {
      node: node2,
      index: index2,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};
var focusOn = function(target, focusOptions) {
  if (!target) {
    return;
  }
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};
var guardCount = 0;
var lockDisabled = false;
var moveFocusInside = function(topNode, lastNode, options) {
  if (options === void 0) {
    options = {};
  }
  var focusable = focusSolver(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options.focusOptions);
    guardCount--;
  }
};
function weakRef(value) {
  if (!value)
    return null;
  var w2 = value ? new WeakRef(value) : null;
  return function() {
    return (w2 === null || w2 === void 0 ? void 0 : w2.deref()) || null;
  };
}
var recordElementLocation = function(element) {
  if (!element) {
    return null;
  }
  var stack = [];
  var currentElement = element;
  while (currentElement && currentElement !== document.body) {
    stack.push({
      current: weakRef(currentElement),
      parent: weakRef(currentElement.parentElement),
      left: weakRef(currentElement.previousElementSibling),
      right: weakRef(currentElement.nextElementSibling)
    });
    currentElement = currentElement.parentElement;
  }
  return {
    element: weakRef(element),
    stack,
    ownerDocument: element.ownerDocument
  };
};
var restoreFocusTo = function(location) {
  var _a4, _b3, _c2, _d2, _e2;
  if (!location) {
    return void 0;
  }
  var stack = location.stack, ownerDocument = location.ownerDocument;
  var visibilityCache = /* @__PURE__ */ new Map();
  for (var _i = 0, stack_1 = stack; _i < stack_1.length; _i++) {
    var line2 = stack_1[_i];
    var parent_1 = (_a4 = line2.parent) === null || _a4 === void 0 ? void 0 : _a4.call(line2);
    if (parent_1 && ownerDocument.contains(parent_1)) {
      var left = (_b3 = line2.left) === null || _b3 === void 0 ? void 0 : _b3.call(line2);
      var savedCurrent = line2.current();
      var current = parent_1.contains(savedCurrent) ? savedCurrent : void 0;
      var right = (_c2 = line2.right) === null || _c2 === void 0 ? void 0 : _c2.call(line2);
      var focusables = getTabbableNodes([parent_1], visibilityCache);
      var aim = (
        // that is element itself
        (_e2 = (_d2 = current !== null && current !== void 0 ? current : (
          // or something in it's place
          left === null || left === void 0 ? void 0 : left.nextElementSibling
        )) !== null && _d2 !== void 0 ? _d2 : (
          // or somebody to the right, still close enough
          right
        )) !== null && _e2 !== void 0 ? _e2 : (
          // or somebody to the left, something?
          left
        )
      );
      while (aim) {
        for (var _f2 = 0, focusables_1 = focusables; _f2 < focusables_1.length; _f2++) {
          var focusable = focusables_1[_f2];
          if (aim === null || aim === void 0 ? void 0 : aim.contains(focusable.node)) {
            return focusable.node;
          }
        }
        aim = aim.nextElementSibling;
      }
      if (focusables.length) {
        return focusables[0].node;
      }
    }
  }
  return void 0;
};
var captureFocusRestore = function(targetElement) {
  var location = recordElementLocation(targetElement);
  return function() {
    return restoreFocusTo(location);
  };
};
var getRelativeFocusable = function(element, scope, useTabbables) {
  if (!element || !scope) {
    console.error("no element or scope given");
    return {};
  }
  var shards = asArray(scope);
  if (shards.every(function(shard) {
    return !contains$1(shard, element);
  })) {
    console.error("Active element is not contained in the scope");
    return {};
  }
  var focusables = useTabbables ? getTabbableNodes(shards, /* @__PURE__ */ new Map()) : getFocusableNodes(shards, /* @__PURE__ */ new Map());
  var current = focusables.findIndex(function(_a4) {
    var node2 = _a4.node;
    return node2 === element;
  });
  if (current === -1) {
    return void 0;
  }
  return {
    prev: focusables[current - 1],
    next: focusables[current + 1],
    first: focusables[0],
    last: focusables[focusables.length - 1]
  };
};
var getBoundary = function(shards, useTabbables) {
  var set2 = useTabbables ? getTabbableNodes(asArray(shards), /* @__PURE__ */ new Map()) : getFocusableNodes(asArray(shards), /* @__PURE__ */ new Map());
  return {
    first: set2[0],
    last: set2[set2.length - 1]
  };
};
var defaultOptions = function(options) {
  return Object.assign({
    scope: document.body,
    cycle: true,
    onlyTabbable: true
  }, options);
};
var moveFocus = function(fromElement, options, cb2) {
  if (options === void 0) {
    options = {};
  }
  var newOptions = defaultOptions(options);
  var solution = getRelativeFocusable(fromElement, newOptions.scope, newOptions.onlyTabbable);
  if (!solution) {
    return;
  }
  var target = cb2(solution, newOptions.cycle);
  if (target) {
    focusOn(target.node, newOptions.focusOptions);
  }
};
var focusNextElement = function(fromElement, options) {
  if (options === void 0) {
    options = {};
  }
  moveFocus(fromElement, options, function(_a4, cycle) {
    var next2 = _a4.next, first = _a4.first;
    return next2 || cycle && first;
  });
};
var focusPrevElement = function(fromElement, options) {
  if (options === void 0) {
    options = {};
  }
  moveFocus(fromElement, options, function(_a4, cycle) {
    var prev2 = _a4.prev, last = _a4.last;
    return prev2 || cycle && last;
  });
};
var pickBoundary = function(scope, options, what) {
  var _a4;
  var boundary = getBoundary(scope, (_a4 = options.onlyTabbable) !== null && _a4 !== void 0 ? _a4 : true);
  var node2 = boundary[what];
  if (node2) {
    focusOn(node2.node, options.focusOptions);
  }
};
var focusFirstElement = function(scope, options) {
  if (options === void 0) {
    options = {};
  }
  pickBoundary(scope, options, "first");
};
var focusLastElement = function(scope, options) {
  if (options === void 0) {
    options = {};
  }
  pickBoundary(scope, options, "last");
};
function deferAction(action) {
  setTimeout(action, 1);
}
var extractRef$1 = function extractRef(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el2, boundary) {
  return el2 && (el2.host === check && (!el2.activeElement || boundary.contains(el2.activeElement)) || el2.parentNode && checkInHost2(check, el2.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef$1).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = moveFocusInside(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document && activeElement !== document.activeElement && document.querySelector("[data-focus-auto-guard]")) {
        var newActiveElement = document && document.activeElement;
        var allNodes = expandFocusableNodes(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref2) {
            var guard2 = _ref2.guard, node2 = _ref2.node;
            return guard2 && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref3) {
            var node2 = _ref3.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event2) {
  if (activateTrap() && event2) {
    event2.stopPropagation();
    event2.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event2) {
  var source = event2.target;
  var currentNode = event2.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var onWindowBlur = function onWindowBlur2() {
  focusWasOutsideWindow = "just";
  deferAction(function() {
    focusWasOutsideWindow = "meanwhile";
  });
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
var focusLockAPI = {
  moveFocusInside,
  focusInside,
  focusNextElement,
  focusPrevElement,
  focusFirstElement,
  focusLastElement,
  captureFocusRestore
};
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id2 = _ref6.id;
      return id2 === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation(focusLockAPI);
    }
    activateTrap();
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb2) {
  return cb2(focusLockAPI);
});
const FocusTrap$1 = withSideEffect(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);
var FocusLockCombination = /* @__PURE__ */ reactExports.forwardRef(function FocusLockUICombination(props2, ref) {
  return /* @__PURE__ */ reactExports.createElement(FocusLockUI2, _extends$4({
    sideCar: FocusTrap$1,
    ref
  }, props2));
});
var _ref = FocusLockUI2.propTypes || {};
_ref.sideCar;
_objectWithoutPropertiesLoose$2(_ref, ["sideCar"]);
FocusLockCombination.propTypes = {};
function isElement(el2) {
  return el2 != null && typeof el2 == "object" && "nodeType" in el2 && el2.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement(el2) {
  var _a4;
  if (!isElement(el2))
    return false;
  const win = (_a4 = el2.ownerDocument.defaultView) != null ? _a4 : window;
  return el2 instanceof win.HTMLElement;
}
var hasTabIndex = (element) => element.hasAttribute("tabindex");
function isDisabled(element) {
  return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isHidden(element) {
  if (element.parentElement && isHidden(element.parentElement))
    return true;
  return element.hidden;
}
function isContentEditable(element) {
  const value = element.getAttribute("contenteditable");
  return value !== "false" && value != null;
}
function isFocusable$1(element) {
  if (!isHTMLElement(element) || isHidden(element) || isDisabled(element)) {
    return false;
  }
  const { localName } = element;
  const focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0)
    return true;
  const others2 = {
    a: () => element.hasAttribute("href"),
    audio: () => element.hasAttribute("controls"),
    video: () => element.hasAttribute("controls")
  };
  if (localName in others2) {
    return others2[localName]();
  }
  if (isContentEditable(element))
    return true;
  return hasTabIndex(element);
}
var focusableElList = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();
var isVisible = (el2) => el2.offsetWidth > 0 && el2.offsetHeight > 0;
function getAllFocusable(container2) {
  const focusableEls = Array.from(
    container2.querySelectorAll(focusableElSelector)
  );
  focusableEls.unshift(container2);
  return focusableEls.filter((el2) => isFocusable$1(el2) && isVisible(el2));
}
var _a;
var FocusTrap = (_a = FocusLockCombination.default) != null ? _a : FocusLockCombination;
var FocusLock = (props2) => {
  const {
    initialFocusRef,
    finalFocusRef,
    contentRef,
    restoreFocus,
    children,
    isDisabled: isDisabled2,
    autoFocus,
    persistentFocus,
    lockFocusAcrossFrames
  } = props2;
  const onActivation = reactExports.useCallback(() => {
    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef == null ? void 0 : contentRef.current) {
      const focusables = getAllFocusable(contentRef.current);
      if (focusables.length === 0) {
        requestAnimationFrame(() => {
          var _a22;
          (_a22 = contentRef.current) == null ? void 0 : _a22.focus();
        });
      }
    }
  }, [initialFocusRef, contentRef]);
  const onDeactivation = reactExports.useCallback(() => {
    var _a22;
    (_a22 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a22.focus();
  }, [finalFocusRef]);
  const returnFocus = restoreFocus && !finalFocusRef;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    FocusTrap,
    {
      crossFrame: lockFocusAcrossFrames,
      persistentFocus,
      autoFocus,
      disabled: isDisabled2,
      onActivation,
      onDeactivation,
      returnFocus,
      children
    }
  );
};
FocusLock.displayName = "FocusLock";
var useSafeLayoutEffect = isBrowser$3 ? reactExports.useLayoutEffect : reactExports.useEffect;
function useCallbackRef(fn, deps = []) {
  const ref = reactExports.useRef(fn);
  useSafeLayoutEffect(() => {
    ref.current = fn;
  });
  return reactExports.useCallback((...args) => {
    var _a4;
    return (_a4 = ref.current) == null ? void 0 : _a4.call(ref, ...args);
  }, deps);
}
function useId(idProp, prefix2) {
  const id2 = reactExports.useId();
  return reactExports.useMemo(
    () => idProp || [prefix2, id2].filter(Boolean).join("-"),
    [idProp, prefix2, id2]
  );
}
function useControllableProp(prop, state2) {
  const isControlled = prop !== void 0;
  const value = isControlled && typeof prop !== "undefined" ? prop : state2;
  return [isControlled, value];
}
function useDisclosure(props2 = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props2;
  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);
  const onClosePropCallbackRef = useCallbackRef(onCloseProp);
  const [isOpenState, setIsOpen] = reactExports.useState(props2.defaultIsOpen || false);
  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);
  const id2 = useId(idProp, "disclosure");
  const onClose = reactExports.useCallback(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();
  }, [isControlled, onClosePropCallbackRef]);
  const onOpen = reactExports.useCallback(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();
  }, [isControlled, onOpenPropCallbackRef]);
  const onToggle = reactExports.useCallback(() => {
    const action = isOpen ? onClose : onOpen;
    action();
  }, [isOpen, onOpen, onClose]);
  return {
    isOpen: !!isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps: (props22 = {}) => ({
      ...props22,
      "aria-expanded": isOpen,
      "aria-controls": id2,
      onClick: callAllHandlers(props22.onClick, onToggle)
    }),
    getDisclosureProps: (props22 = {}) => ({
      ...props22,
      hidden: !isOpen,
      id: id2
    })
  };
}
var Input = forwardRef(function Input2(props2, ref) {
  const { htmlSize, ...rest } = props2;
  const styles2 = useMultiStyleConfig("Input", rest);
  const ownProps = omitThemingProps(rest);
  const input = useFormControl(ownProps);
  const _className = cx("chakra-input", props2.className);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.input,
    {
      size: htmlSize,
      ...input,
      __css: styles2.field,
      ref,
      className: _className
    }
  );
});
Input.displayName = "Input";
Input.id = "Input";
var Grid = forwardRef(function Grid2(props2, ref) {
  const {
    templateAreas,
    gap,
    rowGap,
    columnGap,
    column: column2,
    row,
    autoFlow,
    autoRows,
    templateRows,
    autoColumns,
    templateColumns,
    ...rest
  } = props2;
  const styles2 = {
    display: "grid",
    gridTemplateAreas: templateAreas,
    gridGap: gap,
    gridRowGap: rowGap,
    gridColumnGap: columnGap,
    gridAutoColumns: autoColumns,
    gridColumn: column2,
    gridRow: row,
    gridAutoFlow: autoFlow,
    gridAutoRows: autoRows,
    gridTemplateRows: templateRows,
    gridTemplateColumns: templateColumns
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.div, { ref, __css: styles2, ...rest });
});
Grid.displayName = "Grid";
function mapResponsive(prop, mapper) {
  if (Array.isArray(prop)) {
    return prop.map((item) => item === null ? null : mapper(item));
  }
  if (isObject$2(prop)) {
    return Object.keys(prop).reduce((result, key) => {
      result[key] = mapper(prop[key]);
      return result;
    }, {});
  }
  if (prop != null) {
    return mapper(prop);
  }
  return null;
}
var SimpleGrid = forwardRef(
  function SimpleGrid2(props2, ref) {
    const { columns, spacingX, spacingY, spacing: spacing2, minChildWidth, ...rest } = props2;
    const theme2 = useTheme();
    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme2) : countToColumns(columns);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Grid,
      {
        ref,
        gap: spacing2,
        columnGap: spacingX,
        rowGap: spacingY,
        templateColumns,
        ...rest
      }
    );
  }
);
SimpleGrid.displayName = "SimpleGrid";
function toPx(n2) {
  return typeof n2 === "number" ? `${n2}px` : n2;
}
function widthToColumns(width, theme2) {
  return mapResponsive(width, (value) => {
    const _value = getToken("sizes", value, toPx(value))(theme2);
    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;
  });
}
function countToColumns(count) {
  return mapResponsive(
    count,
    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`
  );
}
var Text$2 = forwardRef(function Text2(props2, ref) {
  const styles2 = useStyleConfig("Text", props2);
  const { className, align: align2, decoration, casing, ...rest } = omitThemingProps(props2);
  const aliasedProps = compact({
    textAlign: props2.align,
    textDecoration: props2.decoration,
    textTransform: props2.casing
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.p,
    {
      ref,
      className: cx("chakra-text", props2.className),
      ...aliasedProps,
      ...rest,
      __css: styles2
    }
  );
});
Text$2.displayName = "Text";
var StackItem = (props2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  chakra.div,
  {
    className: "chakra-stack__item",
    ...props2,
    __css: {
      display: "inline-block",
      flex: "0 0 auto",
      minWidth: 0,
      ...props2["__css"]
    }
  }
);
StackItem.displayName = "StackItem";
function getDividerStyles(options) {
  const { spacing: spacing2, direction: direction2 } = options;
  const dividerStyles = {
    column: {
      my: spacing2,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    "column-reverse": {
      my: spacing2,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    row: {
      mx: spacing2,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    },
    "row-reverse": {
      mx: spacing2,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    }
  };
  return {
    "&": mapResponsive(
      direction2,
      (value) => dividerStyles[value]
    )
  };
}
var Stack = forwardRef((props2, ref) => {
  const {
    isInline,
    direction: directionProp,
    align: align2,
    justify,
    spacing: spacing2 = "0.5rem",
    wrap: wrap2,
    children,
    divider,
    className,
    shouldWrapChildren,
    ...rest
  } = props2;
  const direction2 = isInline ? "row" : directionProp != null ? directionProp : "column";
  const dividerStyle = reactExports.useMemo(
    () => getDividerStyles({ spacing: spacing2, direction: direction2 }),
    [spacing2, direction2]
  );
  const hasDivider = !!divider;
  const shouldUseChildren = !shouldWrapChildren && !hasDivider;
  const clones = reactExports.useMemo(() => {
    const validChildren = getValidChildren(children);
    return shouldUseChildren ? validChildren : validChildren.map((child, index2) => {
      const key = typeof child.key !== "undefined" ? child.key : index2;
      const isLast = index2 + 1 === validChildren.length;
      const wrappedChild = /* @__PURE__ */ jsxRuntimeExports.jsx(StackItem, { children: child }, key);
      const _child = shouldWrapChildren ? wrappedChild : child;
      if (!hasDivider)
        return _child;
      const clonedDivider = reactExports.cloneElement(
        divider,
        {
          __css: dividerStyle
        }
      );
      const _divider = isLast ? null : clonedDivider;
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, { children: [
        _child,
        _divider
      ] }, key);
    });
  }, [
    divider,
    dividerStyle,
    hasDivider,
    shouldUseChildren,
    shouldWrapChildren,
    children
  ]);
  const _className = cx("chakra-stack", className);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.div,
    {
      ref,
      display: "flex",
      alignItems: align2,
      justifyContent: justify,
      flexDirection: direction2,
      flexWrap: wrap2,
      gap: hasDivider ? void 0 : spacing2,
      className: _className,
      ...rest,
      children: clones
    }
  );
});
Stack.displayName = "Stack";
var Box = chakra("div");
Box.displayName = "Box";
var Square = forwardRef(function Square2(props2, ref) {
  const { size: size2, centerContent = true, ...rest } = props2;
  const styles2 = centerContent ? { display: "flex", alignItems: "center", justifyContent: "center" } : {};
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      boxSize: size2,
      __css: {
        ...styles2,
        flexShrink: 0,
        flexGrow: 0
      },
      ...rest
    }
  );
});
Square.displayName = "Square";
var Circle = forwardRef(function Circle2(props2, ref) {
  const { size: size2, ...rest } = props2;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Square, { size: size2, ref, borderRadius: "9999px", ...rest });
});
Circle.displayName = "Circle";
var Divider = forwardRef(function Divider2(props2, ref) {
  const {
    borderLeftWidth,
    borderBottomWidth,
    borderTopWidth,
    borderRightWidth,
    borderWidth,
    borderStyle,
    borderColor,
    ...styles2
  } = useStyleConfig("Divider", props2);
  const {
    className,
    orientation = "horizontal",
    __css,
    ...rest
  } = omitThemingProps(props2);
  const dividerStyles = {
    vertical: {
      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
      height: "100%"
    },
    horizontal: {
      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
      width: "100%"
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.hr,
    {
      ref,
      "aria-orientation": orientation,
      ...rest,
      __css: {
        ...styles2,
        border: "0",
        borderColor,
        borderStyle,
        ...dividerStyles[orientation],
        ...__css
      },
      className: cx("chakra-divider", className)
    }
  );
});
Divider.displayName = "Divider";
var Flex$2 = forwardRef(function Flex2(props2, ref) {
  const { direction: direction2, align: align2, justify, wrap: wrap2, basis, grow, shrink, ...rest } = props2;
  const styles2 = {
    display: "flex",
    flexDirection: direction2,
    alignItems: align2,
    justifyContent: justify,
    flexWrap: wrap2,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.div, { ref, __css: styles2, ...rest });
});
Flex$2.displayName = "Flex";
var transitions = {
  slideInBottom: {
    ...slideFadeConfig,
    custom: { offsetY: 16, reverse: true }
  },
  slideInRight: {
    ...slideFadeConfig,
    custom: { offsetX: 16, reverse: true }
  },
  slideInTop: {
    ...slideFadeConfig,
    custom: { offsetY: -16, reverse: true }
  },
  slideInLeft: {
    ...slideFadeConfig,
    custom: { offsetX: -16, reverse: true }
  },
  scale: {
    ...scaleFadeConfig,
    custom: { initialScale: 0.95, reverse: true }
  },
  none: {}
};
var MotionSection = chakra(motion.section);
var getMotionProps = (preset) => {
  return transitions[preset || "none"];
};
var ModalTransition = reactExports.forwardRef(
  (props2, ref) => {
    const { preset, motionProps = getMotionProps(preset), ...rest } = props2;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(MotionSection, { ref, ...motionProps, ...rest });
  }
);
ModalTransition.displayName = "ModalTransition";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var ModalManager = class {
  constructor() {
    __publicField(this, "modals");
    this.modals = /* @__PURE__ */ new Map();
  }
  add(modal) {
    this.modals.set(modal, this.modals.size + 1);
    return this.modals.size;
  }
  remove(modal) {
    this.modals.delete(modal);
  }
  isTopModal(modal) {
    if (!modal)
      return false;
    return this.modals.get(modal) === this.modals.size;
  }
};
var modalManager = new ModalManager();
function useModalManager(ref, isOpen) {
  const [index2, setIndex] = reactExports.useState(0);
  reactExports.useEffect(() => {
    const node2 = ref.current;
    if (!node2)
      return;
    if (isOpen) {
      const index22 = modalManager.add(node2);
      setIndex(index22);
    }
    return () => {
      modalManager.remove(node2);
      setIndex(0);
    };
  }, [isOpen, ref]);
  return index2;
}
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node2) {
  return node2 && (node2.host || unwrapHost(node2.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x2) {
    return Boolean(x2);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el2) {
    if (!el2 || elementsToKeep.has(el2)) {
      return;
    }
    elementsToKeep.add(el2);
    keep(el2.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node2) {
      if (elementsToKeep.has(node2)) {
        deep(node2);
      } else {
        try {
          var attr = node2.getAttribute(controlAttribute);
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node2) || 0) + 1;
          var markerValue = (markerCounter.get(node2) || 0) + 1;
          counterMap.set(node2, counterValue);
          markerCounter.set(node2, markerValue);
          hiddenNodes.push(node2);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node2, true);
          }
          if (markerValue === 1) {
            node2.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node2.setAttribute(controlAttribute, "true");
          }
        } catch (e2) {
          console.error("aria-hidden: cannot operate on ", node2, e2);
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node2) {
      var counterValue = counterMap.get(node2) - 1;
      var markerValue = markerCounter.get(node2) - 1;
      counterMap.set(node2, counterValue);
      markerCounter.set(node2, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node2)) {
          node2.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node2);
      }
      if (!markerValue) {
        node2.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};
function useModal(props2) {
  const {
    isOpen,
    onClose,
    id: id2,
    closeOnOverlayClick = true,
    closeOnEsc = true,
    useInert = true,
    onOverlayClick: onOverlayClickProp,
    onEsc
  } = props2;
  const dialogRef = reactExports.useRef(null);
  const overlayRef = reactExports.useRef(null);
  const [dialogId, headerId, bodyId] = useIds(
    id2,
    `chakra-modal`,
    `chakra-modal--header`,
    `chakra-modal--body`
  );
  useAriaHidden(dialogRef, isOpen && useInert);
  const index2 = useModalManager(dialogRef, isOpen);
  const mouseDownTarget = reactExports.useRef(null);
  const onMouseDown = reactExports.useCallback((event2) => {
    mouseDownTarget.current = event2.target;
  }, []);
  const onKeyDown = reactExports.useCallback(
    (event2) => {
      if (event2.key === "Escape") {
        event2.stopPropagation();
        if (closeOnEsc) {
          onClose == null ? void 0 : onClose();
        }
        onEsc == null ? void 0 : onEsc();
      }
    },
    [closeOnEsc, onClose, onEsc]
  );
  const [headerMounted, setHeaderMounted] = reactExports.useState(false);
  const [bodyMounted, setBodyMounted] = reactExports.useState(false);
  const getDialogProps = reactExports.useCallback(
    (props22 = {}, ref = null) => ({
      role: "dialog",
      ...props22,
      ref: mergeRefs(ref, dialogRef),
      id: dialogId,
      tabIndex: -1,
      "aria-modal": true,
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0,
      onClick: callAllHandlers$1(
        props22.onClick,
        (event2) => event2.stopPropagation()
      )
    }),
    [bodyId, bodyMounted, dialogId, headerId, headerMounted]
  );
  const onOverlayClick = reactExports.useCallback(
    (event2) => {
      event2.stopPropagation();
      if (mouseDownTarget.current !== event2.target)
        return;
      if (!modalManager.isTopModal(dialogRef.current))
        return;
      if (closeOnOverlayClick) {
        onClose == null ? void 0 : onClose();
      }
      onOverlayClickProp == null ? void 0 : onOverlayClickProp();
    },
    [onClose, closeOnOverlayClick, onOverlayClickProp]
  );
  const getDialogContainerProps = reactExports.useCallback(
    (props22 = {}, ref = null) => ({
      ...props22,
      ref: mergeRefs(ref, overlayRef),
      onClick: callAllHandlers$1(props22.onClick, onOverlayClick),
      onKeyDown: callAllHandlers$1(props22.onKeyDown, onKeyDown),
      onMouseDown: callAllHandlers$1(props22.onMouseDown, onMouseDown)
    }),
    [onKeyDown, onMouseDown, onOverlayClick]
  );
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps,
    index: index2
  };
}
function useAriaHidden(ref, shouldHide) {
  const currentElement = ref.current;
  reactExports.useEffect(() => {
    if (!ref.current || !shouldHide)
      return void 0;
    return hideOthers(ref.current);
  }, [shouldHide, ref, currentElement]);
}
function useIds(idProp, ...prefixes) {
  const reactId = reactExports.useId();
  const id2 = idProp || reactId;
  return reactExports.useMemo(() => {
    return prefixes.map((prefix2) => `${prefix2}-${id2}`);
  }, [id2, prefixes]);
}
var [ModalStylesProvider, useModalStyles] = createContext$2({
  name: `ModalStylesContext`,
  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Modal />" `
});
var [ModalContextProvider, useModalContext] = createContext$2({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var Modal = (props2) => {
  const modalProps = {
    scrollBehavior: "outside",
    autoFocus: true,
    trapFocus: true,
    returnFocusOnClose: true,
    blockScrollOnMount: true,
    allowPinchZoom: false,
    motionPreset: "scale",
    lockFocusAcrossFrames: true,
    ...props2
  };
  const {
    portalProps,
    children,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames,
    onCloseComplete
  } = modalProps;
  const styles2 = useMultiStyleConfig("Modal", modalProps);
  const modal = useModal(modalProps);
  const context2 = {
    ...modal,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalContextProvider, { value: context2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ModalStylesProvider, { value: styles2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { onExitComplete: onCloseComplete, children: context2.isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, { ...portalProps, children }) }) }) });
};
Modal.displayName = "Modal";
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";
var effectCar = createSidecarMedium();
var nothing = function() {
  return;
};
var RemoveScroll$1 = reactExports.forwardRef(function(props2, parentRef) {
  var ref = reactExports.useRef(null);
  var _a4 = reactExports.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a4[0], setCallbacks = _a4[1];
  var forwardProps = props2.forwardProps, children = props2.children, className = props2.className, removeScrollBar = props2.removeScrollBar, enabled = props2.enabled, shards = props2.shards, sideCar = props2.sideCar, noIsolation = props2.noIsolation, inert = props2.inert, allowPinchZoom = props2.allowPinchZoom, _b3 = props2.as, Container2 = _b3 === void 0 ? "div" : _b3, gapMode = props2.gapMode, rest = __rest(props2, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    enabled && reactExports.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
    forwardProps ? reactExports.cloneElement(reactExports.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : reactExports.createElement(Container2, __assign({}, containerProps, { className, ref: containerRef }), children)
  );
});
RemoveScroll$1.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll$1.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};
var getNonce = function() {
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter2 = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter2 == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter2++;
    },
    remove: function() {
      counter2--;
      if (!counter2 && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles2, isDynamic) {
    reactExports.useEffect(function() {
      sheet.add(styles2);
      return function() {
        sheet.remove();
      };
    }, [styles2 && isDynamic]);
  };
};
var styleSingleton = function() {
  var useStyle2 = styleHookSingleton();
  var Sheet = function(_a4) {
    var styles2 = _a4.styles, dynamic = _a4.dynamic;
    useStyle2(styles2, dynamic);
    return null;
  };
  return Sheet;
};
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse$1 = function(x2) {
  return parseInt(x2 || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse$1(left), parse$1(top), parse$1(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a4, allowRelative, gapMode, important) {
  var left = _a4.left, top = _a4.top, right = _a4.right, gap = _a4.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var getCurrentUseCounter = function() {
  var counter2 = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter2) ? counter2 : 0;
};
var useLockAttribute = function() {
  reactExports.useEffect(function() {
    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
    return function() {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
var RemoveScrollBar = function(_a4) {
  var noRelative = _a4.noRelative, noImportant = _a4.noImportant, _b3 = _a4.gapMode, gapMode = _b3 === void 0 ? "margin" : _b3;
  useLockAttribute();
  var gap = reactExports.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return reactExports.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    var options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var nonPassive = passiveSupported ? { passive: false } : false;
var alwaysContainsScroll = function(node2) {
  return node2.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node2, overflow) {
  var styles2 = window.getComputedStyle(node2);
  return (
    // not-not-scrollable
    styles2[overflow] !== "hidden" && // contains scroll inside self
    !(styles2.overflowY === styles2.overflowX && !alwaysContainsScroll(node2) && styles2[overflow] === "visible")
  );
};
var elementCouldBeVScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowY");
};
var elementCouldBeHScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowX");
};
var locationCouldBeScrolled = function(axis, node2) {
  var ownerDocument = node2.ownerDocument;
  var current = node2;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a4 = getScrollVariables(axis, current), s = _a4[1], d2 = _a4[2];
      if (s > d2) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function(_a4) {
  var scrollTop = _a4.scrollTop, scrollHeight = _a4.scrollHeight, clientHeight = _a4.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a4) {
  var scrollLeft = _a4.scrollLeft, scrollWidth = _a4.scrollWidth, clientWidth = _a4.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node2) {
  return axis === "v" ? elementCouldBeVScrolled(node2) : elementCouldBeHScrolled(node2);
};
var getScrollVariables = function(axis, node2) {
  return axis === "v" ? getVScrollVariables(node2) : getHScrollVariables(node2);
};
var getDirectionFactor = function(axis, direction2) {
  return axis === "h" && direction2 === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event2, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event2.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a4 = getScrollVariables(axis, target), position2 = _a4[0], scroll_1 = _a4[1], capacity = _a4[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position2;
    if (position2 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position2;
      }
    }
    if (target instanceof ShadowRoot) {
      target = target.host;
    } else {
      target = target.parentNode;
    }
  } while (
    // portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target)
  );
  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};
var getTouchXY = function(event2) {
  return "changedTouches" in event2 ? [event2.changedTouches[0].clientX, event2.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event2) {
  return [event2.deltaX, event2.deltaY];
};
var extractRef2 = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x2, y2) {
  return x2[0] === y2[0] && x2[1] === y2[1];
};
var generateStyle = function(id2) {
  return "\n  .block-interactivity-".concat(id2, " {pointer-events: none;}\n  .allow-interactivity-").concat(id2, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props2) {
  var shouldPreventQueue = reactExports.useRef([]);
  var touchStartRef = reactExports.useRef([0, 0]);
  var activeAxis = reactExports.useRef();
  var id2 = reactExports.useState(idCounter++)[0];
  var Style2 = reactExports.useState(styleSingleton)[0];
  var lastProps = reactExports.useRef(props2);
  reactExports.useEffect(function() {
    lastProps.current = props2;
  }, [props2]);
  reactExports.useEffect(function() {
    if (props2.inert) {
      document.body.classList.add("block-interactivity-".concat(id2));
      var allow_1 = __spreadArray([props2.lockRef.current], (props2.shards || []).map(extractRef2), true).filter(Boolean);
      allow_1.forEach(function(el2) {
        return el2.classList.add("allow-interactivity-".concat(id2));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id2));
        allow_1.forEach(function(el2) {
          return el2.classList.remove("allow-interactivity-".concat(id2));
        });
      };
    }
    return;
  }, [props2.inert, props2.lockRef.current, props2.shards]);
  var shouldCancelEvent = reactExports.useCallback(function(event2, parent) {
    if ("touches" in event2 && event2.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event2);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event2 ? event2.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event2 ? event2.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event2.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event2 && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event2 && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event2, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = reactExports.useCallback(function(_event) {
    var event2 = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event2 ? getDeltaXY(event2) : getTouchXY(event2);
    var sourceEvent = shouldPreventQueue.current.filter(function(e2) {
      return e2.name === event2.type && (e2.target === event2.target || event2.target === e2.shadowParent) && deltaCompare(e2.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event2.cancelable) {
        event2.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef2).filter(Boolean).filter(function(node2) {
        return node2.contains(event2.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event2, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event2.cancelable) {
          event2.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = reactExports.useCallback(function(name, delta, target, should) {
    var event2 = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
    shouldPreventQueue.current.push(event2);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e2) {
        return e2 !== event2;
      });
    }, 1);
  }, []);
  var scrollTouchStart = reactExports.useCallback(function(event2) {
    touchStartRef.current = getTouchXY(event2);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = reactExports.useCallback(function(event2) {
    shouldCancel(event2.type, getDeltaXY(event2), event2.target, shouldCancelEvent(event2, props2.lockRef.current));
  }, []);
  var scrollTouchMove = reactExports.useCallback(function(event2) {
    shouldCancel(event2.type, getTouchXY(event2), event2.target, shouldCancelEvent(event2, props2.lockRef.current));
  }, []);
  reactExports.useEffect(function() {
    lockStack.push(Style2);
    props2.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props2.removeScrollBar, inert = props2.inert;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    inert ? reactExports.createElement(Style2, { styles: generateStyle(id2) }) : null,
    removeScrollBar ? reactExports.createElement(RemoveScrollBar, { gapMode: props2.gapMode }) : null
  );
}
function getOutermostShadowParent(node2) {
  var shadowParent = null;
  while (node2 !== null) {
    if (node2 instanceof ShadowRoot) {
      shadowParent = node2.host;
      node2 = node2.host;
    }
    node2 = node2.parentNode;
  }
  return shadowParent;
}
const SideCar = exportSidecar(effectCar, RemoveScrollSideCar);
var ReactRemoveScroll = reactExports.forwardRef(function(props2, ref) {
  return reactExports.createElement(RemoveScroll$1, __assign({}, props2, { ref, sideCar: SideCar }));
});
ReactRemoveScroll.classNames = RemoveScroll$1.classNames;
const RemoveScroll = ReactRemoveScroll;
function ModalFocusScope(props2) {
  const {
    autoFocus,
    trapFocus,
    dialogRef,
    initialFocusRef,
    blockScrollOnMount,
    allowPinchZoom,
    finalFocusRef,
    returnFocusOnClose,
    preserveScrollBarGap,
    lockFocusAcrossFrames,
    isOpen
  } = useModalContext();
  const [isPresent2, safeToRemove] = usePresence();
  reactExports.useEffect(() => {
    if (!isPresent2 && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent2, safeToRemove]);
  const index2 = useModalManager(dialogRef, isOpen);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    FocusLock,
    {
      autoFocus,
      isDisabled: !trapFocus,
      initialFocusRef,
      finalFocusRef,
      restoreFocus: returnFocusOnClose,
      contentRef: dialogRef,
      lockFocusAcrossFrames,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        RemoveScroll,
        {
          removeScrollBar: !preserveScrollBarGap,
          allowPinchZoom,
          enabled: index2 === 1 && blockScrollOnMount,
          forwardProps: true,
          children: props2.children
        }
      )
    }
  );
}
var ModalContent = forwardRef(
  (props2, ref) => {
    const {
      className,
      children,
      containerProps: rootProps,
      motionProps,
      ...rest
    } = props2;
    const { getDialogProps, getDialogContainerProps } = useModalContext();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = cx("chakra-modal__content", className);
    const styles2 = useModalStyles();
    const dialogStyles = {
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0,
      ...styles2.dialog
    };
    const dialogContainerStyles = {
      display: "flex",
      width: "100vw",
      height: "$100vh",
      position: "fixed",
      left: 0,
      top: 0,
      ...styles2.dialogContainer
    };
    const { motionPreset } = useModalContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalFocusScope, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.div,
      {
        ...containerProps,
        className: "chakra-modal__content-container",
        tabIndex: -1,
        __css: dialogContainerStyles,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ModalTransition,
          {
            preset: motionPreset,
            motionProps,
            className: _className,
            ...dialogProps,
            __css: dialogStyles,
            children
          }
        )
      }
    ) });
  }
);
ModalContent.displayName = "ModalContent";
var ModalFooter = forwardRef(
  (props2, ref) => {
    const { className, ...rest } = props2;
    const _className = cx("chakra-modal__footer", className);
    const styles2 = useModalStyles();
    const footerStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end",
      ...styles2.footer
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.footer,
      {
        ref,
        ...rest,
        __css: footerStyles,
        className: _className
      }
    );
  }
);
ModalFooter.displayName = "ModalFooter";
var ModalHeader = forwardRef(
  (props2, ref) => {
    const { className, ...rest } = props2;
    const { headerId, setHeaderMounted } = useModalContext();
    reactExports.useEffect(() => {
      setHeaderMounted(true);
      return () => setHeaderMounted(false);
    }, [setHeaderMounted]);
    const _className = cx("chakra-modal__header", className);
    const styles2 = useModalStyles();
    const headerStyles = {
      flex: 0,
      ...styles2.header
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.header,
      {
        ref,
        className: _className,
        id: headerId,
        ...rest,
        __css: headerStyles
      }
    );
  }
);
ModalHeader.displayName = "ModalHeader";
var MotionDiv = chakra(motion.div);
var ModalOverlay = forwardRef(
  (props2, ref) => {
    const { className, transition: transition2, motionProps: _motionProps, ...rest } = props2;
    const _className = cx("chakra-modal__overlay", className);
    const styles2 = useModalStyles();
    const overlayStyle = {
      pos: "fixed",
      left: "0",
      top: "0",
      w: "100vw",
      h: "100vh",
      ...styles2.overlay
    };
    const { motionPreset } = useModalContext();
    const defaultMotionProps = motionPreset === "none" ? {} : fadeConfig;
    const motionProps = _motionProps || defaultMotionProps;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      MotionDiv,
      {
        ...motionProps,
        __css: overlayStyle,
        ref,
        className: _className,
        ...rest
      }
    );
  }
);
ModalOverlay.displayName = "ModalOverlay";
var ModalBody = forwardRef((props2, ref) => {
  const { className, ...rest } = props2;
  const { bodyId, setBodyMounted } = useModalContext();
  reactExports.useEffect(() => {
    setBodyMounted(true);
    return () => setBodyMounted(false);
  }, [setBodyMounted]);
  const _className = cx("chakra-modal__body", className);
  const styles2 = useModalStyles();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.div,
    {
      ref,
      className: _className,
      id: bodyId,
      ...rest,
      __css: styles2.body
    }
  );
});
ModalBody.displayName = "ModalBody";
var ModalCloseButton = forwardRef(
  (props2, ref) => {
    const { onClick, className, ...rest } = props2;
    const { onClose } = useModalContext();
    const _className = cx("chakra-modal__close-btn", className);
    const styles2 = useModalStyles();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      CloseButton,
      {
        ref,
        __css: styles2.closeButton,
        className: _className,
        onClick: callAllHandlers$1(onClick, (event2) => {
          event2.stopPropagation();
          onClose();
        }),
        ...rest
      }
    );
  }
);
ModalCloseButton.displayName = "ModalCloseButton";
var SelectField = forwardRef(
  function SelectField2(props2, ref) {
    const { children, placeholder, className, ...rest } = props2;
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
      chakra.select,
      {
        ...rest,
        ref,
        className: cx("chakra-select", className),
        children: [
          placeholder && /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: placeholder }),
          children
        ]
      }
    );
  }
);
SelectField.displayName = "SelectField";
function split(object, keys2) {
  const picked = {};
  const omitted = {};
  for (const [key, value] of Object.entries(object)) {
    if (keys2.includes(key))
      picked[key] = value;
    else
      omitted[key] = value;
  }
  return [picked, omitted];
}
var Select = forwardRef((props2, ref) => {
  var _a4;
  const styles2 = useMultiStyleConfig("Select", props2);
  const {
    rootProps,
    placeholder,
    icon,
    color: color2,
    height,
    h: h3,
    minH,
    minHeight,
    iconColor,
    iconSize,
    ...rest
  } = omitThemingProps(props2);
  const [layoutProps, otherProps] = split(rest, layoutPropNames);
  const ownProps = useFormControl(otherProps);
  const rootStyles = {
    width: "100%",
    height: "fit-content",
    position: "relative",
    color: color2
  };
  const fieldStyles = {
    paddingEnd: "2rem",
    ...styles2.field,
    _focus: {
      zIndex: "unset",
      ...(_a4 = styles2.field) == null ? void 0 : _a4["_focus"]
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    chakra.div,
    {
      className: "chakra-select__wrapper",
      __css: rootStyles,
      ...layoutProps,
      ...rootProps,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          SelectField,
          {
            ref,
            height: h3 != null ? h3 : height,
            minH: minH != null ? minH : minHeight,
            placeholder,
            ...ownProps,
            __css: fieldStyles,
            children: props2.children
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          SelectIcon,
          {
            "data-disabled": dataAttr(ownProps.disabled),
            ...(iconColor || color2) && { color: iconColor || color2 },
            __css: styles2.icon,
            ...iconSize && { fontSize: iconSize },
            children: icon
          }
        )
      ]
    }
  );
});
Select.displayName = "Select";
var DefaultIcon = (props2) => /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", ...props2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
  "path",
  {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }
) });
var IconWrapper = chakra("div", {
  baseStyle: {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var SelectIcon = (props2) => {
  const { children = /* @__PURE__ */ jsxRuntimeExports.jsx(DefaultIcon, {}), ...rest } = props2;
  const clone2 = reactExports.cloneElement(children, {
    role: "presentation",
    className: "chakra-select__icon",
    focusable: false,
    "aria-hidden": true,
    // force icon to adhere to `IconWrapper` styles
    style: {
      width: "1em",
      height: "1em",
      color: "currentColor"
    }
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(IconWrapper, { ...rest, className: "chakra-select__icon-wrapper", children: reactExports.isValidElement(children) ? clone2 : null });
};
SelectIcon.displayName = "SelectIcon";
var [TableStylesProvider, useTableStyles] = createContext$2({
  name: `TableStylesContext`,
  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
});
var Table = forwardRef((props2, ref) => {
  const styles2 = useMultiStyleConfig("Table", props2);
  const { className, layout: layout2, ...tableProps } = omitThemingProps(props2);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TableStylesProvider, { value: styles2, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    chakra.table,
    {
      ref,
      __css: { tableLayout: layout2, ...styles2.table },
      className: cx("chakra-table", className),
      ...tableProps
    }
  ) });
});
Table.displayName = "Table";
var Thead = forwardRef((props2, ref) => {
  const styles2 = useTableStyles();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.thead, { ...props2, ref, __css: styles2.thead });
});
var Tr = forwardRef((props2, ref) => {
  const styles2 = useTableStyles();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.tr, { ...props2, ref, __css: styles2.tr });
});
var Tbody = forwardRef((props2, ref) => {
  const styles2 = useTableStyles();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.tbody, { ...props2, ref, __css: styles2.tbody });
});
var Td = forwardRef(
  ({ isNumeric, ...rest }, ref) => {
    const styles2 = useTableStyles();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.td,
      {
        ...rest,
        ref,
        __css: styles2.td,
        "data-is-numeric": isNumeric
      }
    );
  }
);
var Th = forwardRef(
  ({ isNumeric, ...rest }, ref) => {
    const styles2 = useTableStyles();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      chakra.th,
      {
        ...rest,
        ref,
        __css: styles2.th,
        "data-is-numeric": isNumeric
      }
    );
  }
);
/**
 * @remix-run/router v1.15.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$3() {
  _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash: hash2 = ""
    } = parsePath(window2.location.hash.substr(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      {
        pathname,
        search,
        hash: hash2
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to2) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to2 === "string" ? to2 : createPath(to2));
  }
  function validateHashLocation(location, to2) {
    warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to2) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to2, state2, key) {
  if (state2 === void 0) {
    state2 = null;
  }
  let location = _extends$3({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to2 === "string" ? parsePath(to2) : to2, {
    state: state2,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to2 && to2.key || key || createKey()
  });
  return location;
}
function createPath(_ref2) {
  let {
    pathname = "/",
    search = "",
    hash: hash2 = ""
  } = _ref2;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash2 && hash2 !== "#")
    pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$3({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state2 = globalHistory.state || {
      idx: null
    };
    return state2.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to2, state2) {
    action = Action.Push;
    let location = createLocation(history.location, to2, state2);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace2(to2, state2) {
    action = Action.Replace;
    let location = createLocation(history.location, to2, state2);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to2) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to2 === "string" ? to2 : createPath(to2);
    href = href.replace(/ $/, "%20");
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to2) {
      return createHref(window2, to2);
    },
    createURL,
    encodeLocation(to2) {
      let url = createURL(to2);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i], decoded);
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
}
const paramRe = /^:[\w-]+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s) => s === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b2) {
  let siblings = a.length === b2.length && a.slice(0, -1).every((n2, i) => n2 === b2[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b2[b2.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = compiledParams.reduce((memo2, _ref2, index2) => {
    let {
      paramName,
      isOptional
    } = _ref2;
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index2];
    if (isOptional && !value) {
      memo2[paramName] = void 0;
    } else {
      memo2[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo2;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v2) => decodeURIComponent(v2).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to2, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash: hash2 = ""
  } = typeof to2 === "string" ? parsePath(to2) : to2;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash2)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1)
        segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char2, field, dest, path) {
  return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match2, idx) => idx === matches.length - 1 ? match2.pathname : match2.pathnameBase);
  }
  return pathMatches.map((match2) => match2.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to2;
  if (typeof toArg === "string") {
    to2 = parsePath(toArg);
  } else {
    to2 = _extends$3({}, toArg);
    invariant(!to2.pathname || !to2.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to2));
    invariant(!to2.pathname || !to2.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to2));
    invariant(!to2.search || !to2.search.includes("#"), getInvalidPathError("#", "search", "hash", to2));
  }
  let isEmptyPath = toArg === "" || to2.pathname === "";
  let toPathname = isEmptyPath ? "/" : to2.pathname;
  let from2;
  if (toPathname == null) {
    from2 = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to2.pathname = toSegments.join("/");
    }
    from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to2, from2);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
const normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);
/**
 * React Router v6.22.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useHref(to2, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    basename,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    hash: hash2,
    pathname,
    search
  } = useResolvedPath(to2, {
    relative
  });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash: hash2
  });
}
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useIsomorphicLayoutEffect(cb2) {
  let isStatic = reactExports.useContext(NavigationContext).static;
  if (!isStatic) {
    reactExports.useLayoutEffect(cb2);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = reactExports.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? invariant(false) : void 0;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let {
    basename,
    future,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to2 === "number") {
      navigator2.go(to2);
      return;
    }
    let path = resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
function useResolvedPath(to2, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    future
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  return reactExports.useMemo(() => resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to2, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends$2({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props2) {
    super(props2);
    this.state = {
      location: props2.location,
      revalidation: props2.revalidation,
      error: props2.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props2, state2) {
    if (state2.location !== props2.location || state2.revalidation !== "idle" && props2.revalidation === "idle") {
      return {
        error: props2.error,
        location: props2.location,
        revalidation: props2.revalidation
      };
    }
    return {
      error: props2.error !== void 0 ? props2.error : state2.error,
      location: state2.location,
      revalidation: props2.revalidation || state2.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref2) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref2;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState2;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
    !(errorIndex >= 0) ? invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match2 = renderedMatches[i];
      if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match2.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors2 || errors2[match2.route.id] === void 0);
        if (match2.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match2, index2) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match2.route.id ? errors[match2.route.id] : void 0;
      errorElement = match2.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index2 === 0) {
          warningOnce("route-fallback", false);
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index2) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match2.route.Component) {
        children = /* @__PURE__ */ reactExports.createElement(match2.route.Component, null);
      } else if (match2.route.element) {
        children = match2.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook$1 = /* @__PURE__ */ function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
  DataRouterHook2["UseNavigateStable"] = "useNavigate";
  return DataRouterHook2;
}(DataRouterHook$1 || {});
var DataRouterStateHook$1 = /* @__PURE__ */ function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
  return DataRouterStateHook2;
}(DataRouterStateHook$1 || {});
function useDataRouterContext(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  !ctx ? invariant(false) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state2 = reactExports.useContext(DataRouterStateContext);
  !state2 ? invariant(false) : void 0;
  return state2;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state2 = useDataRouterState(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state2.errors) == null ? void 0 : _state$errors[routeId];
}
function useNavigateStable() {
  let {
    router
  } = useDataRouterContext(DataRouterHook$1.UseNavigateStable);
  let id2 = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to2 === "number") {
      router.navigate(to2);
    } else {
      router.navigate(to2, _extends$2({
        fromRouteId: id2
      }, options));
    }
  }, [router, id2]);
  return navigate;
}
const alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
  }
}
function Route(_props) {
  invariant(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends$2({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash: hash2 = "",
    state: state2 = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash: hash2,
        state: state2,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash2, state2, key, navigationType]);
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? invariant(false) : void 0;
    !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
/**
 * React Router DOM v6.22.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isModifiedEvent(event2) {
  return !!(event2.metaKey || event2.altKey || event2.ctrlKey || event2.shiftKey);
}
function shouldProcessLinkClick(event2, target) {
  return event2.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event2);
}
const _excluded$1 = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"];
const REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e2) {
}
const START_TRANSITION = "startTransition";
const startTransitionImpl = React$1[START_TRANSITION];
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref5;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state2, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state2.location,
    navigationType: state2.action,
    navigator: history,
    future
  });
}
const isBrowser$1 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const Link = /* @__PURE__ */ reactExports.forwardRef(function LinkWithRef(_ref7, ref) {
  let {
    onClick,
    relative,
    reloadDocument,
    replace: replace2,
    state: state2,
    target,
    to: to2,
    preventScrollReset,
    unstable_viewTransition
  } = _ref7, rest = _objectWithoutPropertiesLoose$1(_ref7, _excluded$1);
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let absoluteHref;
  let isExternal = false;
  if (typeof to2 === "string" && ABSOLUTE_URL_REGEX.test(to2)) {
    absoluteHref = to2;
    if (isBrowser$1) {
      try {
        let currentUrl = new URL(window.location.href);
        let targetUrl = to2.startsWith("//") ? new URL(currentUrl.protocol + to2) : new URL(to2);
        let path = stripBasename(targetUrl.pathname, basename);
        if (targetUrl.origin === currentUrl.origin && path != null) {
          to2 = path + targetUrl.search + targetUrl.hash;
        } else {
          isExternal = true;
        }
      } catch (e2) {
      }
    }
  }
  let href = useHref(to2, {
    relative
  });
  let internalOnClick = useLinkClickHandler(to2, {
    replace: replace2,
    state: state2,
    target,
    preventScrollReset,
    relative,
    unstable_viewTransition
  });
  function handleClick(event2) {
    if (onClick)
      onClick(event2);
    if (!event2.defaultPrevented) {
      internalOnClick(event2);
    }
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ reactExports.createElement("a", _extends$1({}, rest, {
      href: absoluteHref || href,
      onClick: isExternal || reloadDocument ? onClick : handleClick,
      ref,
      target
    }))
  );
});
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmit"] = "useSubmit";
  DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook2["UseFetcher"] = "useFetcher";
  DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetcher"] = "useFetcher";
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
function useLinkClickHandler(to2, _temp) {
  let {
    target,
    replace: replaceProp,
    state: state2,
    preventScrollReset,
    relative,
    unstable_viewTransition
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to2, {
    relative
  });
  return reactExports.useCallback((event2) => {
    if (shouldProcessLinkClick(event2, target)) {
      event2.preventDefault();
      let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
      navigate(to2, {
        replace: replace2,
        state: state2,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
    }
  }, [location, navigate, path, replaceProp, state2, target, to2, preventScrollReset, relative, unstable_viewTransition]);
}
var SunIcon = createIcon({
  displayName: "SunIcon",
  path: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "g",
    {
      strokeLinejoin: "round",
      strokeLinecap: "round",
      strokeWidth: "2",
      fill: "none",
      stroke: "currentColor",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "5" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 1v2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 21v2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4.22 4.22l1.42 1.42" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18.36 18.36l1.42 1.42" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M1 12h2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M21 12h2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4.22 19.78l1.42-1.42" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18.36 5.64l1.42-1.42" })
      ]
    }
  )
});
var MoonIcon = createIcon({
  d: "M21.4,13.7C20.6,13.9,19.8,14,19,14c-5,0-9-4-9-9c0-0.8,0.1-1.6,0.3-2.4c0.1-0.3,0-0.7-0.3-1 c-0.3-0.3-0.6-0.4-1-0.3C4.3,2.7,1,7.1,1,12c0,6.1,4.9,11,11,11c4.9,0,9.3-3.3,10.6-8.1c0.1-0.3,0-0.7-0.3-1 C22.1,13.7,21.7,13.6,21.4,13.7z",
  displayName: "MoonIcon"
});
const MzcetLogo = "" + new URL("Mount-2-_SlBYW4n.png", import.meta.url).href;
function Navbar() {
  const { colorMode, toggleColorMode } = useColorMode();
  useDisclosure();
  const [time2, setTime] = reactExports.useState(/* @__PURE__ */ new Date());
  reactExports.useEffect(() => {
    const timer = setInterval(() => {
      setTime(/* @__PURE__ */ new Date());
    }, 1e3);
    return () => clearInterval(timer);
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      className: "fixed z-50 top-0  ",
      bg: useColorModeValue("gray.100", "gray.900"),
      px: 4,
      py: 4,
      boxShadow: "lg",
      width: "100%",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Flex$2, { h: 70, alignItems: "center", justifyContent: "space-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Image$1, { boxSize: 100, objectFit: "contain", src: MzcetLogo, alt: "Dan Abramov" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Flex$2, { alignItems: "center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Stack, { direction: "row", alignItems: "center", justifyContent: "start", spacing: 7, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { onClick: toggleColorMode, children: colorMode === "light" ? /* @__PURE__ */ jsxRuntimeExports.jsx(MoonIcon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(SunIcon, {}) }) }) })
      ] })
    }
  ) });
}
/*! js-cookie v3.0.5 | MIT */
function assign$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init(converter, defaultAttributes) {
  function set2(name, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign$1({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = name + "=" + converter.write(value, name) + stringifiedAttributes;
  }
  function get2(name) {
    if (typeof document === "undefined" || arguments.length && !name) {
      return;
    }
    var cookies2 = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i = 0; i < cookies2.length; i++) {
      var parts = cookies2[i].split("=");
      var value = parts.slice(1).join("=");
      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);
        if (name === found) {
          break;
        }
      } catch (e2) {
      }
    }
    return name ? jar[name] : jar;
  }
  return Object.create(
    {
      set: set2,
      get: get2,
      remove: function(name, attributes) {
        set2(
          name,
          "",
          assign$1({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init(this.converter, assign$1({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init(assign$1({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api = init(defaultConverter, { path: "/" });
function bind(fn, thisArg) {
  return function wrap2() {
    return fn.apply(thisArg, arguments);
  };
}
const { toString } = Object.prototype;
const { getPrototypeOf: getPrototypeOf$1 } = Object;
const kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
const typeOfTest = (type) => (thing) => typeof thing === type;
const { isArray: isArray$1 } = Array;
const isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
const isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
const isString = typeOfTest("string");
const isFunction$1 = typeOfTest("function");
const isNumber$1 = typeOfTest("number");
const isObject$1 = (thing) => thing !== null && typeof thing === "object";
const isBoolean = (thing) => thing === true || thing === false;
const isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype2 = getPrototypeOf$1(val);
  return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
const isDate = kindOfTest("Date");
const isFile = kindOfTest("File");
const isBlob = kindOfTest("Blob");
const isFileList = kindOfTest("FileList");
const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);
const isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$1(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction$1(thing.toString) && thing.toString() === "[object FormData]"));
};
const isURLSearchParams = kindOfTest("URLSearchParams");
const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l2;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$1(obj)) {
    for (i = 0, l2 = obj.length; i < l2; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
const _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
const isContextDefined = (context2) => !isUndefined(context2) && context2 !== _global;
function merge$1() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge$1(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge$1({}, val);
    } else if (isArray$1(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l2 = arguments.length; i < l2; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
const extend = (a, b2, thisArg, { allOwnKeys } = {}) => {
  forEach(b2, (val, key) => {
    if (thisArg && isFunction$1(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
const inherits$2 = (constructor, superConstructor, props2, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props2 && Object.assign(constructor.prototype, props2);
};
const toFlatObject = (sourceObj, destObj, filter3, propFilter) => {
  let props2;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props2 = Object.getOwnPropertyNames(sourceObj);
    i = props2.length;
    while (i-- > 0) {
      prop = props2[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter3 !== false && getPrototypeOf$1(sourceObj);
  } while (sourceObj && (!filter3 || filter3(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
const endsWith = (str, searchString, position2) => {
  str = String(str);
  if (position2 === void 0 || position2 > str.length) {
    position2 = str.length;
  }
  position2 -= searchString.length;
  const lastIndex = str.indexOf(searchString, position2);
  return lastIndex !== -1 && lastIndex === position2;
};
const toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray$1(thing))
    return thing;
  let i = thing.length;
  if (!isNumber$1(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
const isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf$1(Uint8Array));
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m2, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
const hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
const isRegExp = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction$1(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction$1(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
const toObjectSet = (arrayOrString, delimiter2) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray$1(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter2));
  return obj;
};
const noop$1 = () => {
};
const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
const ALPHA = "abcdefghijklmnopqrstuvwxyz";
const DIGIT = "0123456789";
const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
const generateString = (size2 = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length: length2 } = alphabet;
  while (size2--) {
    str += alphabet[Math.random() * length2 | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction$1(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
const toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject$1(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray$1(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing) => thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);
const utils$1 = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber: isNumber$1,
  isBoolean,
  isObject: isObject$1,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge: merge$1,
  extend,
  trim,
  stripBOM,
  inherits: inherits$2,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop: noop$1,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};
function AxiosError(message, code, config2, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config2 && (this.config = config2);
  request && (this.request = request);
  response && (this.response = response);
}
utils$1.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
const prototype$1 = AxiosError.prototype;
const descriptors$1 = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors$1[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors$1);
Object.defineProperty(prototype$1, "isAxiosError", { value: true });
AxiosError.from = (error, code, config2, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);
  utils$1.toFlatObject(error, axiosError, function filter3(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config2, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
const httpAdapter = null;
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}
function removeBrackets(key) {
  return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each2(token2, i) {
    token2 = removeBrackets(token2);
    return !dots && i ? "[" + token2 + "]" : token2;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new FormData();
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined2(option, source) {
    return !utils$1.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
  if (!utils$1.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils$1.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError("Blob is not supported. Use a Buffer instead.");
    }
    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils$1.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each2(el2, index2) {
          !(utils$1.isUndefined(el2) || el2 === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
            convertValue(el2)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils$1.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils$1.forEach(value, function each2(el2, key) {
      const result = !(utils$1.isUndefined(el2) || el2 === null) && visitor.call(
        formData,
        el2,
        utils$1.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el2, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils$1.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
function encode$1(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
    return charMap[match2];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append2(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;
  return this._pairs.map(function each2(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}
class InterceptorManager {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id2) {
    if (this.handlers[id2]) {
      this.handlers[id2] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h3) {
      if (h3 !== null) {
        fn(h3);
      }
    });
  }
}
const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
const platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: Blob$1
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};
const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
const hasStandardBrowserEnv = ((product) => {
  return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
})(typeof navigator !== "undefined" && navigator.product);
const hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv,
  hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv
}, Symbol.toStringTag, { value: "Module" }));
const platform = {
  ...utils,
  ...platform$1
};
function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
function parsePropPath(name) {
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
    return match2[0] === "[]" ? "" : match2[1] || match2[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index2) {
    let name = path[index2++];
    if (name === "__proto__")
      return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index2 >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index2);
    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};
    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults$1 = {
  transitional: transitionalDefaults,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils$1.isObject(data);
    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils$1.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }
    if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data)) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults$1.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw AxiosError.from(e2, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e2;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults$1.headers[method] = {};
});
const defaults$2 = defaults$1;
const ignoreDuplicateOf = utils$1.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
const parseHeaders = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line2) {
    i = line2.indexOf(":");
    key = line2.substring(0, i).trim().toLowerCase();
    val = line2.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};
const $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens2 = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match2;
  while (match2 = tokensRE.exec(str)) {
    tokens2[match2[1]] = match2[2];
  }
  return tokens2;
}
const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context2, value, header, filter3, isHeaderNameFilter) {
  if (utils$1.isFunction(filter3)) {
    return filter3.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils$1.isString(value))
    return;
  if (utils$1.isString(filter3)) {
    return value.indexOf(filter3) !== -1;
  }
  if (utils$1.isRegExp(filter3)) {
    return filter3.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char2, str) => {
    return char2.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils$1.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils$1.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys2 = Object.keys(this);
    let i = keys2.length;
    let deleted = false;
    while (i--) {
      const key = keys2[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype2 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype2, _header);
        accessors[lHeader] = true;
      }
    }
    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
}
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils$1.freezeMethods(AxiosHeaders);
const AxiosHeaders$1 = AxiosHeaders;
function transformData(fns, response) {
  const config2 = this || defaults$2;
  const context2 = response || config2;
  const headers = AxiosHeaders$1.from(context2.headers);
  let data = context2.data;
  utils$1.forEach(fns, function transform2(fn) {
    data = fn.call(config2, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
function CanceledError(message, config2, request) {
  AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config2, request);
  this.name = "CanceledError";
}
utils$1.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});
function settle(resolve2, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve2(response);
  } else {
    reject(new AxiosError(
      "Request failed with status code " + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
const cookies = platform.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils$1.isString(path) && cookie.push("path=" + path);
      utils$1.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match2 ? decodeURIComponent(match2[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
const isURLSameOrigin = platform.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin2(requestURL) {
      const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  /* @__PURE__ */ function nonStandardBrowserEnv() {
    return function isURLSameOrigin2() {
      return true;
    };
  }()
);
function parseProtocol(url) {
  const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match2 && match2[1] || "";
}
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now2 = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now2;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now2;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now2 - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now2 - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);
  return (e2) => {
    const loaded = e2.loaded;
    const total = e2.lengthComputable ? e2.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange2 = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange2 ? (total - loaded) / rate : void 0,
      event: e2
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
const xhrAdapter = isXHRAdapterSupported && function(config2) {
  return new Promise(function dispatchXhrRequest(resolve2, reject) {
    let requestData = config2.data;
    const requestHeaders = AxiosHeaders$1.from(config2.headers).normalize();
    let { responseType, withXSRFToken } = config2;
    let onCanceled;
    function done() {
      if (config2.cancelToken) {
        config2.cancelToken.unsubscribe(onCanceled);
      }
      if (config2.signal) {
        config2.signal.removeEventListener("abort", onCanceled);
      }
    }
    let contentType;
    if (utils$1.isFormData(requestData)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        const [type, ...tokens2] = contentType ? contentType.split(";").map((token2) => token2.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || "multipart/form-data", ...tokens2].join("; "));
      }
    }
    let request = new XMLHttpRequest();
    if (config2.auth) {
      const username = config2.auth.username || "";
      const password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config2.baseURL, config2.url);
    request.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
    request.timeout = config2.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders$1.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config2,
        request
      };
      settle(function _resolve2(value) {
        resolve2(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config2, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config2.transitional || transitionalDefaults;
      if (config2.timeoutErrorMessage) {
        timeoutErrorMessage = config2.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config2,
        request
      ));
      request = null;
    };
    if (platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config2));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {
        const xsrfValue = config2.xsrfHeaderName && config2.xsrfCookieName && cookies.read(config2.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config2.xsrfHeaderName, xsrfValue);
        }
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils$1.isUndefined(config2.withCredentials)) {
      request.withCredentials = !!config2.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config2.responseType;
    }
    if (typeof config2.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config2.onDownloadProgress, true));
    }
    if (typeof config2.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config2.onUploadProgress));
    }
    if (config2.cancelToken || config2.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config2, request) : cancel);
        request.abort();
        request = null;
      };
      config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
      if (config2.signal) {
        config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config2));
      return;
    }
    request.send(requestData || null);
  });
};
const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter
};
utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e2) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
const renderReason = (reason) => `- ${reason}`;
const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
const adapters$1 = {
  getAdapter: (adapters2) => {
    adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
    const { length: length2 } = adapters2;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length2; i++) {
      nameOrAdapter = adapters2[i];
      let id2;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError(`Unknown adapter '${id2}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id2 || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id2, state2]) => `adapter ${id2} ` + (state2 === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length2 ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new CanceledError(null, config2);
  }
}
function dispatchRequest(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = AxiosHeaders$1.from(config2.headers);
  config2.data = transformData.call(
    config2,
    config2.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
    config2.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters$1.getAdapter(config2.adapter || defaults$2.adapter);
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData.call(
      config2,
      config2.transformResponse,
      response
    );
    response.headers = AxiosHeaders$1.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config2,
          config2.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config3 = {};
  function getMergedValue(target, source, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({ caseless }, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b2, caseless) {
    if (!utils$1.isUndefined(b2)) {
      return getMergedValue(a, b2, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b2) {
    if (!utils$1.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    }
  }
  function defaultToConfig2(a, b2) {
    if (!utils$1.isUndefined(b2)) {
      return getMergedValue(void 0, b2);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b2, prop) {
    if (prop in config2) {
      return getMergedValue(a, b2);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b2) => mergeDeepProperties(headersToObject(a), headersToObject(b2), true)
  };
  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
}
const VERSION = "1.6.8";
const validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators$1[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
const deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}
const validator = {
  assertOptions,
  validators: validators$1
};
const validators = validator.validators;
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config2) {
    try {
      return await this._request(configOrUrl, config2);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;
        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        if (!err.stack) {
          err.stack = stack;
        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
          err.stack += "\n" + stack;
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config2) {
    if (typeof configOrUrl === "string") {
      config2 = config2 || {};
      config2.url = configOrUrl;
    } else {
      config2 = configOrUrl || {};
    }
    config2 = mergeConfig(this.defaults, config2);
    const { transitional: transitional2, paramsSerializer, headers } = config2;
    if (transitional2 !== void 0) {
      validator.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config2.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }
    config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config2.method]
    );
    headers && utils$1.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config2);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config2;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config2) {
    config2 = mergeConfig(this.defaults, config2);
    const fullPath = buildFullPath(config2.baseURL, config2.url);
    return buildURL(fullPath, config2.params, config2.paramsSerializer);
  }
}
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config2) {
    return this.request(mergeConfig(config2 || {}, {
      method,
      url,
      data: (config2 || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config2) {
      return this.request(mergeConfig(config2 || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
const Axios$1 = Axios;
class CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve2) {
      resolvePromise = resolve2;
    });
    const token2 = this;
    this.promise.then((cancel) => {
      if (!token2._listeners)
        return;
      let i = token2._listeners.length;
      while (i-- > 0) {
        token2._listeners[i](cancel);
      }
      token2._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve2;
      const promise = new Promise((resolve2) => {
        token2.subscribe(resolve2);
        _resolve2 = resolve2;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token2.unsubscribe(_resolve2);
      };
      return promise;
    };
    executor(function cancel(message, config2, request) {
      if (token2.reason) {
        return;
      }
      token2.reason = new CanceledError(message, config2, request);
      resolvePromise(token2.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index2 = this._listeners.indexOf(listener);
    if (index2 !== -1) {
      this._listeners.splice(index2, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token2 = new CancelToken(function executor(c2) {
      cancel = c2;
    });
    return {
      token: token2,
      cancel
    };
  }
}
const CancelToken$1 = CancelToken;
function spread(callback2) {
  return function wrap2(arr) {
    return callback2.apply(null, arr);
  };
}
function isAxiosError(payload) {
  return utils$1.isObject(payload) && payload.isAxiosError === true;
}
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
const HttpStatusCode$1 = HttpStatusCode;
function createInstance(defaultConfig) {
  const context2 = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context2);
  utils$1.extend(instance, Axios$1.prototype, context2, { allOwnKeys: true });
  utils$1.extend(instance, context2, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
const axios = createInstance(defaults$2);
axios.Axios = Axios$1;
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;
axios.AxiosError = AxiosError;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters$1.getAdapter;
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;
function LoginScreen() {
  const [username, setUsername] = reactExports.useState("");
  const [password, setPassword] = reactExports.useState("");
  const [loggedIn, setLoggedIn] = reactExports.useState(false);
  const [isloading, setIsLoading] = reactExports.useState(false);
  reactExports.useState(false);
  reactExports.useState(false);
  const toast = useToast();
  const toasterr = useToast();
  const navigate = useNavigate();
  function handleError(errorMessage) {
    toasterr({
      title: "Error",
      description: errorMessage.toString(),
      status: "error",
      duration: 5e3,
      isClosable: true
    });
  }
  const handlesubmit = async (e2) => {
    e2.preventDefault();
    if (email === "" || password === "") {
      toast({
        title: "MZCET Course Attainment Portal",
        description: "The Fields Username and Password Are Required",
        status: "warning",
        duration: 9e3,
        isClosable: true
      });
    } else {
      try {
        setLoggedIn(true);
        const response = await axios.post("http://localhost:5000/login", { username, password });
        console.log("username ", response.data.result[0].Staff_Id);
        if (response.status === 200 && response.data.result[0].Staff_Id === username && response.data.result[0].Password === password) {
          api.set("loggedIn", "true");
          localStorage.setItem("loggedIn", "true");
          setLoggedIn(true);
          navigate("/home");
        } else {
          console.log("Invalid username or password");
          handleError("Invalid username or password");
          setIsLoading(false);
        }
      } catch (err) {
        if (err.response && err.response.status === 401) {
          console.log("Invalid username or password");
          handleError("Invalid username or password");
        } else {
          console.log(err.toString());
        }
      }
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Navbar, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { mt: 155 }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Flex$2,
      {
        mt: -155,
        minH: "100vh",
        align: "center",
        justify: "center",
        bg: useColorModeValue("gray.50", "gray.800"),
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 8, mx: "auto", maxW: "lg", py: 12, px: 6, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Stack, { align: "center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { fontSize: "3xl", className: "text-center", color: "gray.600", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { as: "span", color: "orange.400", children: [
              "MZCET ",
              " "
            ] }),
            " ",
            "Course Attainment Portal"
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Box,
            {
              rounded: "lg",
              bg: useColorModeValue("white", "gray.700"),
              boxShadow: "lg",
              p: 8,
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 4, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { id: "email", isRequired: true, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Username" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      type: "text",
                      value: username,
                      onChange: (e2) => setUsername(e2.target.value)
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { id: "password", isRequired: true, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Password" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      type: "password",
                      value: password,
                      onChange: (e2) => setPassword(e2.target.value)
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 3, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Stack,
                    {
                      direction: { base: "column", sm: "row" },
                      align: "start",
                      justify: "space-between"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button$2,
                    {
                      isLoading: isloading,
                      onClick: handlesubmit,
                      bg: "blue.400",
                      color: "white",
                      _hover: {
                        bg: "blue.500"
                      },
                      children: "Login"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, {})
                ] })
              ] })
            }
          )
        ] })
      }
    )
  ] });
}
var reactdatagridCommunity = {};
var interopRequireDefault = { exports: {} };
(function(module) {
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  module.exports = _interopRequireDefault2, module.exports.__esModule = true, module.exports["default"] = module.exports;
})(interopRequireDefault);
var interopRequireDefaultExports = interopRequireDefault.exports;
var factory = {};
var _typeof = { exports: {} };
var hasRequired_typeof;
function require_typeof() {
  if (hasRequired_typeof)
    return _typeof.exports;
  hasRequired_typeof = 1;
  (function(module) {
    function _typeof2(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof);
  return _typeof.exports;
}
var objectWithoutProperties = { exports: {} };
var objectWithoutPropertiesLoose = { exports: {} };
var hasRequiredObjectWithoutPropertiesLoose;
function requireObjectWithoutPropertiesLoose() {
  if (hasRequiredObjectWithoutPropertiesLoose)
    return objectWithoutPropertiesLoose.exports;
  hasRequiredObjectWithoutPropertiesLoose = 1;
  (function(module) {
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    module.exports = _objectWithoutPropertiesLoose2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(objectWithoutPropertiesLoose);
  return objectWithoutPropertiesLoose.exports;
}
var hasRequiredObjectWithoutProperties;
function requireObjectWithoutProperties() {
  if (hasRequiredObjectWithoutProperties)
    return objectWithoutProperties.exports;
  hasRequiredObjectWithoutProperties = 1;
  (function(module) {
    var objectWithoutPropertiesLoose2 = requireObjectWithoutPropertiesLoose();
    function _objectWithoutProperties2(source, excluded) {
      if (source == null)
        return {};
      var target = objectWithoutPropertiesLoose2(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    module.exports = _objectWithoutProperties2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(objectWithoutProperties);
  return objectWithoutProperties.exports;
}
var slicedToArray = { exports: {} };
var arrayWithHoles = { exports: {} };
var hasRequiredArrayWithHoles;
function requireArrayWithHoles() {
  if (hasRequiredArrayWithHoles)
    return arrayWithHoles.exports;
  hasRequiredArrayWithHoles = 1;
  (function(module) {
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(arrayWithHoles);
  return arrayWithHoles.exports;
}
var iterableToArrayLimit = { exports: {} };
var hasRequiredIterableToArrayLimit;
function requireIterableToArrayLimit() {
  if (hasRequiredIterableToArrayLimit)
    return iterableToArrayLimit.exports;
  hasRequiredIterableToArrayLimit = 1;
  (function(module) {
    function _iterableToArrayLimit(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e2, n2, i, u2, a = [], f2 = true, o = false;
        try {
          if (i = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o)
              throw n2;
          }
        }
        return a;
      }
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(iterableToArrayLimit);
  return iterableToArrayLimit.exports;
}
var unsupportedIterableToArray = { exports: {} };
var arrayLikeToArray = { exports: {} };
var hasRequiredArrayLikeToArray;
function requireArrayLikeToArray() {
  if (hasRequiredArrayLikeToArray)
    return arrayLikeToArray.exports;
  hasRequiredArrayLikeToArray = 1;
  (function(module) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(arrayLikeToArray);
  return arrayLikeToArray.exports;
}
var hasRequiredUnsupportedIterableToArray;
function requireUnsupportedIterableToArray() {
  if (hasRequiredUnsupportedIterableToArray)
    return unsupportedIterableToArray.exports;
  hasRequiredUnsupportedIterableToArray = 1;
  (function(module) {
    var arrayLikeToArray2 = requireArrayLikeToArray();
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return arrayLikeToArray2(o, minLen);
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(unsupportedIterableToArray);
  return unsupportedIterableToArray.exports;
}
var nonIterableRest = { exports: {} };
var hasRequiredNonIterableRest;
function requireNonIterableRest() {
  if (hasRequiredNonIterableRest)
    return nonIterableRest.exports;
  hasRequiredNonIterableRest = 1;
  (function(module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(nonIterableRest);
  return nonIterableRest.exports;
}
var hasRequiredSlicedToArray;
function requireSlicedToArray() {
  if (hasRequiredSlicedToArray)
    return slicedToArray.exports;
  hasRequiredSlicedToArray = 1;
  (function(module) {
    var arrayWithHoles2 = requireArrayWithHoles();
    var iterableToArrayLimit2 = requireIterableToArrayLimit();
    var unsupportedIterableToArray2 = requireUnsupportedIterableToArray();
    var nonIterableRest2 = requireNonIterableRest();
    function _slicedToArray(arr, i) {
      return arrayWithHoles2(arr) || iterableToArrayLimit2(arr, i) || unsupportedIterableToArray2(arr, i) || nonIterableRest2();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(slicedToArray);
  return slicedToArray.exports;
}
var toConsumableArray = { exports: {} };
var arrayWithoutHoles = { exports: {} };
var hasRequiredArrayWithoutHoles;
function requireArrayWithoutHoles() {
  if (hasRequiredArrayWithoutHoles)
    return arrayWithoutHoles.exports;
  hasRequiredArrayWithoutHoles = 1;
  (function(module) {
    var arrayLikeToArray2 = requireArrayLikeToArray();
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return arrayLikeToArray2(arr);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(arrayWithoutHoles);
  return arrayWithoutHoles.exports;
}
var iterableToArray = { exports: {} };
var hasRequiredIterableToArray;
function requireIterableToArray() {
  if (hasRequiredIterableToArray)
    return iterableToArray.exports;
  hasRequiredIterableToArray = 1;
  (function(module) {
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(iterableToArray);
  return iterableToArray.exports;
}
var nonIterableSpread = { exports: {} };
var hasRequiredNonIterableSpread;
function requireNonIterableSpread() {
  if (hasRequiredNonIterableSpread)
    return nonIterableSpread.exports;
  hasRequiredNonIterableSpread = 1;
  (function(module) {
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(nonIterableSpread);
  return nonIterableSpread.exports;
}
var hasRequiredToConsumableArray;
function requireToConsumableArray() {
  if (hasRequiredToConsumableArray)
    return toConsumableArray.exports;
  hasRequiredToConsumableArray = 1;
  (function(module) {
    var arrayWithoutHoles2 = requireArrayWithoutHoles();
    var iterableToArray2 = requireIterableToArray();
    var unsupportedIterableToArray2 = requireUnsupportedIterableToArray();
    var nonIterableSpread2 = requireNonIterableSpread();
    function _toConsumableArray(arr) {
      return arrayWithoutHoles2(arr) || iterableToArray2(arr) || unsupportedIterableToArray2(arr) || nonIterableSpread2();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(toConsumableArray);
  return toConsumableArray.exports;
}
var defineProperty = { exports: {} };
var toPropertyKey = { exports: {} };
var toPrimitive = { exports: {} };
var hasRequiredToPrimitive;
function requireToPrimitive() {
  if (hasRequiredToPrimitive)
    return toPrimitive.exports;
  hasRequiredToPrimitive = 1;
  (function(module) {
    var _typeof2 = require_typeof()["default"];
    function toPrimitive2(t2, r2) {
      if ("object" != _typeof2(t2) || !t2)
        return t2;
      var e2 = t2[Symbol.toPrimitive];
      if (void 0 !== e2) {
        var i = e2.call(t2, r2 || "default");
        if ("object" != _typeof2(i))
          return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    module.exports = toPrimitive2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(toPrimitive);
  return toPrimitive.exports;
}
var hasRequiredToPropertyKey;
function requireToPropertyKey() {
  if (hasRequiredToPropertyKey)
    return toPropertyKey.exports;
  hasRequiredToPropertyKey = 1;
  (function(module) {
    var _typeof2 = require_typeof()["default"];
    var toPrimitive2 = requireToPrimitive();
    function toPropertyKey2(t2) {
      var i = toPrimitive2(t2, "string");
      return "symbol" == _typeof2(i) ? i : i + "";
    }
    module.exports = toPropertyKey2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(toPropertyKey);
  return toPropertyKey.exports;
}
var hasRequiredDefineProperty;
function requireDefineProperty() {
  if (hasRequiredDefineProperty)
    return defineProperty.exports;
  hasRequiredDefineProperty = 1;
  (function(module) {
    var toPropertyKey2 = requireToPropertyKey();
    function _defineProperty2(obj, key, value) {
      key = toPropertyKey2(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module.exports = _defineProperty2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(defineProperty);
  return defineProperty.exports;
}
var src$l = {};
var classCallCheck = { exports: {} };
var hasRequiredClassCallCheck;
function requireClassCallCheck() {
  if (hasRequiredClassCallCheck)
    return classCallCheck.exports;
  hasRequiredClassCallCheck = 1;
  (function(module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(classCallCheck);
  return classCallCheck.exports;
}
var createClass = { exports: {} };
var hasRequiredCreateClass;
function requireCreateClass() {
  if (hasRequiredCreateClass)
    return createClass.exports;
  hasRequiredCreateClass = 1;
  (function(module) {
    var toPropertyKey2 = requireToPropertyKey();
    function _defineProperties(target, props2) {
      for (var i = 0; i < props2.length; i++) {
        var descriptor = props2[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, toPropertyKey2(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(createClass);
  return createClass.exports;
}
var assertThisInitialized = { exports: {} };
var hasRequiredAssertThisInitialized;
function requireAssertThisInitialized() {
  if (hasRequiredAssertThisInitialized)
    return assertThisInitialized.exports;
  hasRequiredAssertThisInitialized = 1;
  (function(module) {
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(assertThisInitialized);
  return assertThisInitialized.exports;
}
var inherits$1 = { exports: {} };
var setPrototypeOf = { exports: {} };
var hasRequiredSetPrototypeOf;
function requireSetPrototypeOf() {
  if (hasRequiredSetPrototypeOf)
    return setPrototypeOf.exports;
  hasRequiredSetPrototypeOf = 1;
  (function(module) {
    function _setPrototypeOf2(o, p2) {
      module.exports = _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf2(o, p2);
    }
    module.exports = _setPrototypeOf2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(setPrototypeOf);
  return setPrototypeOf.exports;
}
var hasRequiredInherits$1;
function requireInherits$1() {
  if (hasRequiredInherits$1)
    return inherits$1.exports;
  hasRequiredInherits$1 = 1;
  (function(module) {
    var setPrototypeOf2 = requireSetPrototypeOf();
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        setPrototypeOf2(subClass, superClass);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(inherits$1);
  return inherits$1.exports;
}
var possibleConstructorReturn = { exports: {} };
var hasRequiredPossibleConstructorReturn;
function requirePossibleConstructorReturn() {
  if (hasRequiredPossibleConstructorReturn)
    return possibleConstructorReturn.exports;
  hasRequiredPossibleConstructorReturn = 1;
  (function(module) {
    var _typeof2 = require_typeof()["default"];
    var assertThisInitialized2 = requireAssertThisInitialized();
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return assertThisInitialized2(self2);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(possibleConstructorReturn);
  return possibleConstructorReturn.exports;
}
var getPrototypeOf = { exports: {} };
var hasRequiredGetPrototypeOf;
function requireGetPrototypeOf() {
  if (hasRequiredGetPrototypeOf)
    return getPrototypeOf.exports;
  hasRequiredGetPrototypeOf = 1;
  (function(module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf(o);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(getPrototypeOf);
  return getPrototypeOf.exports;
}
var shallowequal$2 = {};
var hasRequiredShallowequal$2;
function requireShallowequal$2() {
  if (hasRequiredShallowequal$2)
    return shallowequal$2;
  hasRequiredShallowequal$2 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(shallowequal$2, "__esModule", {
    value: true
  });
  shallowequal$2.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  function shallowequal2(object1, object2) {
    if (object1 === object2) {
      return true;
    }
    if ((0, _typeof2.default)(object1) !== "object" || object1 === null || (0, _typeof2.default)(object2) !== "object" || object2 === null) {
      return false;
    }
    var keys1 = Object.keys(object1);
    var keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    var equal2 = true;
    for (var i = 0, len = keys1.length; i < len; i++) {
      var key = keys1[i];
      if (object1[key] !== object2[key]) {
        equal2 = false;
        break;
      }
    }
    return equal2;
  }
  var _default2 = shallowequal2;
  shallowequal$2.default = _default2;
  return shallowequal$2;
}
var debounce$2 = {};
var lodash_debounce;
var hasRequiredLodash_debounce;
function requireLodash_debounce() {
  if (hasRequiredLodash_debounce)
    return lodash_debounce;
  hasRequiredLodash_debounce = 1;
  var FUNC_ERROR_TEXT = "Expected a function";
  var NAN = 0 / 0;
  var symbolTag = "[object Symbol]";
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var nativeMax = Math.max, nativeMin = Math.min;
  var now2 = function() {
    return root.Date.now();
  };
  function debounce2(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject2(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
      return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now2();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now2());
    }
    function debounced() {
      var time2 = now2(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject2(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject2(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, "");
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  lodash_debounce = debounce2;
  return lodash_debounce;
}
var hasRequiredDebounce$1;
function requireDebounce$1() {
  if (hasRequiredDebounce$1)
    return debounce$2;
  hasRequiredDebounce$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(debounce$2, "__esModule", {
    value: true
  });
  debounce$2.default = void 0;
  var _lodash = _interopRequireDefault2(requireLodash_debounce());
  var _default2 = _lodash.default;
  debounce$2.default = _default2;
  return debounce$2;
}
var getGlobal = {};
var hasRequiredGetGlobal;
function requireGetGlobal() {
  if (hasRequiredGetGlobal)
    return getGlobal;
  hasRequiredGetGlobal = 1;
  Object.defineProperty(getGlobal, "__esModule", {
    value: true
  });
  getGlobal.getGlobal = getGlobal$1;
  function getGlobal$1() {
    return typeof globalThis !== "undefined" ? globalThis : window;
  }
  return getGlobal;
}
var hasRequiredSrc$l;
function requireSrc$l() {
  if (hasRequiredSrc$l)
    return src$l;
  hasRequiredSrc$l = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$l, "__esModule", {
    value: true
  });
  src$l.default = src$l.NotifyResize = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = requirePropTypes();
  var _shallowequal = _interopRequireDefault2(requireShallowequal$2());
  var _debounce = _interopRequireDefault2(requireDebounce$1());
  var _getGlobal = requireGetGlobal();
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var STYLE_DISPLAY_NONE = {
    display: "none"
  };
  var emptyFn = function emptyFn2() {
  };
  var immediateFn = function immediateFn2(fn) {
    return fn();
  };
  var notifyResizeStyle = {
    contain: "strict",
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    zIndex: -1,
    overflow: "hidden",
    display: "block",
    pointerEvents: "none",
    opacity: 0,
    direction: "ltr",
    textAlign: "start"
  };
  var expandToolStyle = {
    contain: "strict",
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    overflow: "auto"
  };
  var contractToolStyle = {
    contain: "strict",
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    overflow: "auto"
  };
  var contractToolInnerStyle = {
    contain: "strict",
    position: "absolute",
    top: 0,
    left: 0,
    width: "200%",
    height: "200%"
  };
  var InovuaNotifyResize = function(_React$Component) {
    (0, _inherits2.default)(InovuaNotifyResize2, _React$Component);
    var _super = _createSuper(InovuaNotifyResize2);
    function InovuaNotifyResize2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaNotifyResize2);
      _this = _super.call(this, props2);
      _this.checkResize = _this.checkResize.bind((0, _assertThisInitialized2.default)(_this));
      _this.onResize = _this.onResize.bind((0, _assertThisInitialized2.default)(_this));
      if (props2.notifyResizeDelay > 0) {
        _this.onResize = (0, _debounce.default)(_this.onResize, props2.notifyResizeDelay);
      }
      if (props2.checkResizeDelay > 0) {
        _this.checkResize = (0, _debounce.default)(_this.checkResize, props2.checkResizeDelay);
      }
      _this.refNotifyResize = function(node2) {
        _this.notifyResizeNode = node2;
      };
      _this.refContractTool = function(node2) {
        _this.contractToolNode = node2;
      };
      _this.refExpandTool = function(node2) {
        _this.expandToolNode = node2;
      };
      _this.refExpandToolInner = function(node2) {
        _this.expandToolInnerNode = node2;
      };
      _this.refContractToolInner = function(node2) {
        _this.contractToolInnerNode = node2;
      };
      _this.state = {
        notifyResizeWidth: 0,
        notifyResizeHeight: 0,
        expandToolWidth: 0,
        expandToolHeight: 0,
        contractToolWidth: 0,
        contractToolHeight: 0
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaNotifyResize2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        if (typeof nextProps.shouldComponentUpdate === "function") {
          return nextProps.shouldComponentUpdate(nextProps, this.props, nextState, this.state);
        }
        return !(0, _shallowequal.default)(nextState, this.state) || !(0, _shallowequal.default)(nextProps, this.props);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.__willUnmount = true;
        if (this.observer) {
          if (this.observer.unobserve) {
            this.observer.unobserve(this.target);
          }
          if (this.observer.disconnect) {
            this.observer.disconnect();
          }
          delete this.observer;
        }
        delete this.target;
      }
    }, {
      key: "getDOMNode",
      value: function getDOMNode() {
        return this.notifyResizeNode;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        this.__willUnmount = false;
        var ResizeObserver2 = globalObject.ResizeObserver || this.props.ResizeObserver;
        if (this.props.useNativeIfAvailable && ResizeObserver2) {
          var node2 = this.getDOMNode();
          var target = node2.parentNode;
          this.target = target;
          var observer = new ResizeObserver2(function(entries) {
            if (_this2.props.onObserverResize) {
              _this2.props.onObserverResize(entries);
            }
            var first = entries[0];
            if (first) {
              _this2.onResize(first.contentRect);
            }
          });
          observer.observe(target);
          this.observer = observer;
        }
        if (typeof this.props.onMount === "function") {
          this.props.onMount(this);
        }
        if (this.observer) {
          return;
        }
        this.resetResizeTool(function() {
          if (_this2.props.notifyOnMount) {
            var _this2$state = _this2.state, width = _this2$state.notifyResizeWidth, height = _this2$state.notifyResizeHeight;
            _this2.onResize({
              width,
              height
            });
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var ResizeObserver2 = globalObject.ResizeObserver || this.props.ResizeObserver;
        if (this.props.useNativeIfAvailable && ResizeObserver2) {
          return _react.default.createElement("div", {
            ref: this.refNotifyResize,
            style: STYLE_DISPLAY_NONE,
            "data-name": "@inovua/react-observer-placeholder"
          });
        }
        return _react.default.createElement("div", {
          ref: this.refNotifyResize,
          style: notifyResizeStyle,
          onScroll: this.checkResize
        }, this.renderExpandTool(), this.renderContractTool());
      }
    }, {
      key: "renderExpandTool",
      value: function renderExpandTool() {
        return _react.default.createElement("div", {
          ref: this.refExpandTool,
          style: expandToolStyle
        }, _react.default.createElement("div", {
          ref: this.refExpandToolInner,
          style: {
            position: "absolute",
            top: 0,
            left: 0,
            width: this.state.expandToolWidth,
            height: this.state.expandToolHeight
          }
        }));
      }
    }, {
      key: "renderContractTool",
      value: function renderContractTool() {
        return _react.default.createElement("div", {
          ref: this.refContractTool,
          style: contractToolStyle
        }, _react.default.createElement("div", {
          ref: this.refContractToolInner,
          style: contractToolInnerStyle
        }));
      }
    }, {
      key: "resetResizeTool",
      value: function resetResizeTool(callback2) {
        var _this3 = this;
        this.setDimensions(function() {
          _this3.scrollToBottomExpandTool();
          if (typeof callback2 == "function") {
            callback2();
          }
        });
      }
    }, {
      key: "setDimensions",
      value: function setDimensions(callback2) {
        var _this4 = this;
        this.getDimensions(function(size2) {
          var notifyResizeWidth = size2.notifyResizeWidth, notifyResizeHeight = size2.notifyResizeHeight;
          if (_this4.__willUnmount) {
            return;
          }
          _this4.setState({
            notifyResizeWidth,
            notifyResizeHeight,
            expandToolWidth: notifyResizeWidth + 1,
            expandToolHeight: notifyResizeHeight + 1
          }, callback2);
        });
      }
    }, {
      key: "getDimensions",
      value: function getDimensions(callback2) {
        var _this5 = this;
        if (!callback2 || typeof callback2 != "function") {
          callback2 = emptyFn;
        }
        var notifyResize = this.notifyResizeNode;
        if (!notifyResize) {
          return;
        }
        var node2 = notifyResize.parentElement || notifyResize;
        var size2;
        var fn = this.props.useRaf ? requestAnimationFrame : immediateFn;
        fn(function() {
          if (typeof _this5.props.measureSize == "function") {
            size2 = _this5.props.measureSize(node2, notifyResize);
          } else {
            size2 = {
              width: node2.offsetWidth,
              height: node2.offsetHeight
            };
          }
          callback2({
            notifyResizeWidth: size2.width,
            notifyResizeHeight: size2.height
          });
        });
      }
    }, {
      key: "scrollToBottomExpandTool",
      value: function scrollToBottomExpandTool(callback2) {
        var _this6 = this;
        if (this.notifyResizeNode) {
          requestAnimationFrame(function() {
            var expandTool = _this6.expandToolNode;
            var contractTool = _this6.contractToolNode;
            var expandToolScrollHeight;
            var expandToolScrollWidth;
            var contractToolScrollHeight;
            var contractToolScrollWidth;
            if (expandTool) {
              expandToolScrollHeight = expandTool.scrollHeight;
              expandToolScrollWidth = expandTool.scrollWidth;
            }
            if (contractTool) {
              contractToolScrollHeight = contractTool.scrollHeight;
              contractToolScrollWidth = contractTool.scrollWidth;
            }
            if (expandTool) {
              expandTool.scrollTop = expandToolScrollHeight;
              expandTool.scrollLeft = expandToolScrollWidth;
            }
            if (contractTool) {
              contractTool.scrollTop = contractToolScrollHeight;
              contractTool.scrollLeft = contractToolScrollWidth;
            }
            if (typeof callback2 == "function") {
              callback2();
            }
          });
        }
      }
    }, {
      key: "checkResize",
      value: function checkResize() {
        var _this7 = this;
        this.getDimensions(function(_ref2) {
          var notifyResizeWidth = _ref2.notifyResizeWidth, notifyResizeHeight = _ref2.notifyResizeHeight;
          if (notifyResizeWidth !== _this7.state.notifyResizeWidth || notifyResizeHeight !== _this7.state.notifyResizeHeight) {
            _this7.onResize({
              width: notifyResizeWidth,
              height: notifyResizeHeight
            });
            _this7.resetResizeTool();
          }
        });
      }
    }, {
      key: "onResize",
      value: function onResize(_ref2) {
        var width = _ref2.width, height = _ref2.height;
        if (this.__willUnmount) {
          return;
        }
        if (typeof this.props.onResize === "function") {
          this.props.onResize({
            width,
            height
          });
        }
      }
    }]);
    return InovuaNotifyResize2;
  }(_react.default.Component);
  src$l.NotifyResize = InovuaNotifyResize;
  InovuaNotifyResize.defaultProps = {
    useNativeIfAvailable: true,
    useWillChange: false,
    useRaf: true
  };
  InovuaNotifyResize.propTypes = {
    ResizeObserver: _propTypes.func,
    onResize: _propTypes.func,
    onObserverResize: _propTypes.func,
    useNativeIfAvailable: _propTypes.bool,
    onMount: _propTypes.func,
    useWillChange: _propTypes.bool,
    useRaf: _propTypes.bool,
    notifyOnMount: _propTypes.bool,
    notifyResizeDelay: _propTypes.number,
    checkResizeDelay: _propTypes.number
  };
  var _default2 = InovuaNotifyResize;
  src$l.default = _default2;
  return src$l;
}
var uglified = {};
var hasRequiredUglified;
function requireUglified() {
  if (hasRequiredUglified)
    return uglified;
  hasRequiredUglified = 1;
  Object.defineProperty(uglified, "__esModule", {
    value: true
  });
  uglified.default = void 0;
  function myFunction() {
  }
  var _default2 = myFunction.toString() != "function myFunction(abc) { /* this is a simple comment */ }";
  uglified.default = _default2;
  return uglified;
}
var useProperty = {};
var isControlledValue = {};
var hasRequiredIsControlledValue;
function requireIsControlledValue() {
  if (hasRequiredIsControlledValue)
    return isControlledValue;
  hasRequiredIsControlledValue = 1;
  Object.defineProperty(isControlledValue, "__esModule", {
    value: true
  });
  isControlledValue.default = void 0;
  var _default2 = function _default3(value) {
    return value !== void 0;
  };
  isControlledValue.default = _default2;
  return isControlledValue;
}
var toUpperFirst = {};
var hasRequiredToUpperFirst;
function requireToUpperFirst() {
  if (hasRequiredToUpperFirst)
    return toUpperFirst;
  hasRequiredToUpperFirst = 1;
  Object.defineProperty(toUpperFirst, "__esModule", {
    value: true
  });
  toUpperFirst.default = void 0;
  var _default2 = function _default3(s) {
    return "".concat(s.charAt(0).toUpperCase()).concat(s.substring(1));
  };
  toUpperFirst.default = _default2;
  return toUpperFirst;
}
var hasRequiredUseProperty;
function requireUseProperty() {
  if (hasRequiredUseProperty)
    return useProperty;
  hasRequiredUseProperty = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useProperty, "__esModule", {
    value: true
  });
  useProperty.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var _isControlledValue = _interopRequireDefault2(requireIsControlledValue());
  var _toUpperFirst = _interopRequireDefault2(requireToUpperFirst());
  var emptyFn = function emptyFn2() {
  };
  var useProperty$1 = function useProperty2(props2, propName, defaultValue, config2) {
    var context2 = (0, _react.useContext)(props2.context);
    var PropName = (0, _toUpperFirst.default)(propName);
    var defaultValueFromProps = props2["default".concat(PropName)];
    var defaultValueFromRestoredState = context2.state[propName];
    if (defaultValueFromRestoredState !== void 0) {
      defaultValueFromProps = defaultValueFromRestoredState;
    }
    defaultValue = defaultValueFromProps === void 0 ? defaultValue : defaultValueFromProps;
    var _useState = (0, _react.useState)(defaultValue), _useState2 = (0, _slicedToArray2.default)(_useState, 2), stateValue = _useState2[0], setStateProperty = _useState2[1];
    var value = props2[propName];
    var controlled = (0, _isControlledValue.default)(value);
    var onChange = config2 && config2.onChange ? config2.onChange : props2["on".concat(PropName, "Change")] || emptyFn;
    var setter = function setter2(value2) {
      context2.state[propName] = value2;
      if (!controlled) {
        setStateProperty(value2);
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      onChange.apply(void 0, [value2].concat(args));
    };
    if (!controlled) {
      value = stateValue;
    }
    return [value, setter];
  };
  var _default2 = useProperty$1;
  useProperty.default = _default2;
  return useProperty;
}
var getScrollbarWidth = {};
var hasRequiredGetScrollbarWidth;
function requireGetScrollbarWidth() {
  if (hasRequiredGetScrollbarWidth)
    return getScrollbarWidth;
  hasRequiredGetScrollbarWidth = 1;
  Object.defineProperty(getScrollbarWidth, "__esModule", {
    value: true
  });
  getScrollbarWidth.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var document2 = globalObject ? globalObject.document : null;
  var hideNativeScrollbarWidth;
  var _default2 = function _default3(hideNativeScrollbarIfPossible) {
    if (hideNativeScrollbarIfPossible) {
      if (hideNativeScrollbarWidth !== void 0) {
        return hideNativeScrollbarWidth;
      }
    }
    var result;
    if (document2) {
      var div = document2.createElement("div");
      var divStyle = div.style;
      if (hideNativeScrollbarIfPossible) {
        div.className = "inovua--hide-native-scroll-if-possible";
      }
      divStyle.width = "100px";
      divStyle.height = "100px";
      divStyle.position = "absolute";
      divStyle.visibility = "hidden";
      divStyle.boxSizing = "content-box";
      divStyle.top = "-99999px";
      divStyle.overflow = "scroll";
      divStyle.MsOverflowStyle = "scrollbar";
      document2.body.appendChild(div);
      var inner = document2.createElement("div");
      div.appendChild(inner);
      result = div.offsetWidth - inner.offsetWidth;
      document2.body.removeChild(div);
    } else {
      result = 0;
    }
    if (hideNativeScrollbarIfPossible) {
      hideNativeScrollbarWidth = result;
    }
    return result;
  };
  getScrollbarWidth.default = _default2;
  return getScrollbarWidth;
}
var clamp$1 = {};
var hasRequiredClamp$1;
function requireClamp$1() {
  if (hasRequiredClamp$1)
    return clamp$1;
  hasRequiredClamp$1 = 1;
  Object.defineProperty(clamp$1, "__esModule", {
    value: true
  });
  clamp$1.default = void 0;
  var _default2 = function _default3(value, min, max) {
    if (min == null) {
      min = value;
    }
    return value < min ? min : max != null && value > max ? max : value;
  };
  clamp$1.default = _default2;
  return clamp$1;
}
var isMobile$1 = {};
var hasTouch = {};
var hasRequiredHasTouch;
function requireHasTouch() {
  if (hasRequiredHasTouch)
    return hasTouch;
  hasRequiredHasTouch = 1;
  Object.defineProperty(hasTouch, "__esModule", {
    value: true
  });
  hasTouch.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var _default2 = !!("ontouchstart" in globalObject || globalObject.DocumentTouch && document instanceof DocumentTouch);
  hasTouch.default = _default2;
  return hasTouch;
}
var hasRequiredIsMobile$1;
function requireIsMobile$1() {
  if (hasRequiredIsMobile$1)
    return isMobile$1;
  hasRequiredIsMobile$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(isMobile$1, "__esModule", {
    value: true
  });
  isMobile$1.default = void 0;
  var _hasTouch = _interopRequireDefault2(requireHasTouch());
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var mobileTest = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(globalObject.navigator ? globalObject.navigator.userAgent : "");
  var _default2 = _hasTouch.default && mobileTest;
  isMobile$1.default = _default2;
  return isMobile$1;
}
var Layout = {};
var PaginationToolbar$1 = {};
var src$k = {};
var PaginationToolbar = {};
var autoBind = {};
var hasRequiredAutoBind;
function requireAutoBind() {
  if (hasRequiredAutoBind)
    return autoBind;
  hasRequiredAutoBind = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(autoBind, "__esModule", {
    value: true
  });
  autoBind.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var skipMethods = {
    constructor: 1,
    render: 1,
    shouldComponentUpdate: 1,
    componentWillMount: 1,
    componentDidMount: 1,
    componentWillReceiveProps: 1,
    componentWillUpdate: 1,
    componentDidUpdate: 1,
    componentWillUnmount: 1
  };
  function autoBind$1(object, filter3) {
    var proto = object.constructor.prototype;
    var filterFn = typeof filter3 == "function" ? filter3 : filter3 && (0, _typeof2.default)(filter3) == "object" ? function(key) {
      return !filter3[key] && skipMethods[key] !== 1 && typeof proto[key] === "function";
    } : function(key) {
      return skipMethods[key] !== 1 && typeof proto[key] === "function";
    };
    var names2 = Object.getOwnPropertyNames(proto).filter(filterFn);
    names2.push("setState");
    names2.forEach(function(key) {
      object[key] = object[key].bind(object);
    });
    return object;
  }
  var _default2 = autoBind$1;
  autoBind.default = _default2;
  return autoBind;
}
var NumericInput = {};
var src$j = {};
var NumberInput = {};
var raf = {};
var hasRequiredRaf;
function requireRaf() {
  if (hasRequiredRaf)
    return raf;
  hasRequiredRaf = 1;
  Object.defineProperty(raf, "__esModule", {
    value: true
  });
  raf.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var _default2 = globalObject.requestAnimationFrame;
  raf.default = _default2;
  return raf;
}
var join$3 = {};
var hasRequiredJoin$3;
function requireJoin$3() {
  if (hasRequiredJoin$3)
    return join$3;
  hasRequiredJoin$3 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(join$3, "__esModule", {
    value: true
  });
  join$3.default = _default2;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var notEmpty = function notEmpty2(x2) {
    return !!x2 && x2 !== true;
  };
  function _default2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length == 1 && Array.isArray(args[0])) {
      args = args[0];
    }
    return (0, _toConsumableArray2.default)(args).filter(notEmpty).join(" ");
  }
  return join$3;
}
var clamp = {};
var hasRequiredClamp;
function requireClamp() {
  if (hasRequiredClamp)
    return clamp;
  hasRequiredClamp = 1;
  Object.defineProperty(clamp, "__esModule", {
    value: true
  });
  clamp.default = void 0;
  function clamp$12(value, min, max) {
    if (isNaN(value)) {
      return value;
    }
    var minUndefined = typeof min === "undefined";
    var maxUndefined = typeof max === "undefined";
    if (minUndefined && maxUndefined) {
      return value;
    }
    if (minUndefined) {
      if (!maxUndefined) {
        return value > max ? max : value;
      }
    }
    if (maxUndefined) {
      if (!minUndefined) {
        return value < min ? min : value;
      }
    }
    if (min > max) {
      return clamp$12(value, max, min);
    }
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  }
  var _default2 = clamp$12;
  clamp.default = _default2;
  return clamp;
}
var debounce$1 = {};
var hasRequiredDebounce;
function requireDebounce() {
  if (hasRequiredDebounce)
    return debounce$1;
  hasRequiredDebounce = 1;
  Object.defineProperty(debounce$1, "__esModule", {
    value: true
  });
  debounce$1.default = void 0;
  function debounce2(func, wait) {
    var _this = this;
    var immediate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var timeout;
    var args;
    var context2;
    var timestamp;
    var result;
    var later = function later2() {
      var last = Date.now() - timestamp;
      if (last < wait && last >= 0) {
        timeout = setTimeout(later2, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context2, args);
          if (!timeout) {
            context2 = null;
            args = null;
          }
        }
      }
    };
    return function() {
      var callNow = immediate && !timeout;
      context2 = _this;
      for (var _len = arguments.length, internalArgs = new Array(_len), _key = 0; _key < _len; _key++) {
        internalArgs[_key] = arguments[_key];
      }
      args = internalArgs;
      timestamp = Date.now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context2, args);
        context2 = args = null;
      }
      return result;
    };
  }
  var _default2 = debounce2;
  debounce$1.default = _default2;
  return debounce$1;
}
var cleanProps = {};
var hasRequiredCleanProps;
function requireCleanProps() {
  if (hasRequiredCleanProps)
    return cleanProps;
  hasRequiredCleanProps = 1;
  Object.defineProperty(cleanProps, "__esModule", {
    value: true
  });
  cleanProps.default = void 0;
  function cleanProps$1(props2, propTypes2) {
    if (!props2 || !propTypes2) {
      return Object.assign({}, props2);
    }
    var newProps = Object.keys(props2).reduce(function(acc, propName) {
      if (!propTypes2[propName]) {
        acc[propName] = props2[propName];
      }
      return acc;
    }, {});
    return newProps;
  }
  var _default2 = cleanProps$1;
  cleanProps.default = _default2;
  return cleanProps;
}
var eventNames = {};
var isMobile = {};
var hasRequiredIsMobile;
function requireIsMobile() {
  if (hasRequiredIsMobile)
    return isMobile;
  hasRequiredIsMobile = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get2() {
        return _isMobile.default;
      }
    });
    var _isMobile = _interopRequireDefault2(requireIsMobile$1());
  })(isMobile);
  return isMobile;
}
var hasRequiredEventNames;
function requireEventNames() {
  if (hasRequiredEventNames)
    return eventNames;
  hasRequiredEventNames = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(eventNames, "__esModule", {
    value: true
  });
  eventNames.default = void 0;
  var _isMobile = _interopRequireDefault2(requireIsMobile());
  var _default2 = _isMobile.default ? {
    onMouseDown: "onTouchStart",
    onMouseUp: "onTouchEnd",
    onMouseMove: "onTouchMove"
  } : {
    onMouseDown: "onMouseDown",
    onMouseUp: "onMouseUp",
    onMouseMove: "onMouseMove"
  };
  eventNames.default = _default2;
  return eventNames;
}
var getSelectionRange = {};
var getSelectionStart$1 = {};
var hasRequiredGetSelectionStart$1;
function requireGetSelectionStart$1() {
  if (hasRequiredGetSelectionStart$1)
    return getSelectionStart$1;
  hasRequiredGetSelectionStart$1 = 1;
  Object.defineProperty(getSelectionStart$1, "__esModule", {
    value: true
  });
  getSelectionStart$1.default = getSelectionStart2;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var document2 = globalObject.document;
  function getSelectionStart2(o) {
    if (o.createTextRange && !globalObject.getSelection) {
      var r2 = document2.selection.createRange().duplicate();
      r2.moveEnd("character", o.value.length);
      if (r2.text == "")
        return o.value.length;
      return o.value.lastIndexOf(r2.text);
    }
    return o.selectionStart;
  }
  return getSelectionStart$1;
}
var getSelectionEnd$1 = {};
var hasRequiredGetSelectionEnd$1;
function requireGetSelectionEnd$1() {
  if (hasRequiredGetSelectionEnd$1)
    return getSelectionEnd$1;
  hasRequiredGetSelectionEnd$1 = 1;
  Object.defineProperty(getSelectionEnd$1, "__esModule", {
    value: true
  });
  getSelectionEnd$1.default = getSelectionEnd2;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var document2 = globalObject.document;
  function getSelectionEnd2(o) {
    if (o.createTextRange && !globalObject.getSelection) {
      var r2 = document2.selection.createRange().duplicate();
      r2.moveStart("character", -o.value.length);
      return r2.text.length;
    }
    return o.selectionEnd;
  }
  return getSelectionEnd$1;
}
var hasRequiredGetSelectionRange;
function requireGetSelectionRange() {
  if (hasRequiredGetSelectionRange)
    return getSelectionRange;
  hasRequiredGetSelectionRange = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getSelectionRange, "__esModule", {
    value: true
  });
  getSelectionRange.default = getSelectedRange;
  var _getSelectionStart = _interopRequireDefault2(requireGetSelectionStart$1());
  var _getSelectionEnd = _interopRequireDefault2(requireGetSelectionEnd$1());
  function getSelectedRange(dom) {
    var api2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _api$getSelectionEnd = api2.getSelectionEnd, getSelectionEnd2 = _api$getSelectionEnd === void 0 ? _getSelectionEnd.default : _api$getSelectionEnd, _api$getSelectionStar = api2.getSelectionStart, getSelectionStart2 = _api$getSelectionStar === void 0 ? _getSelectionStart.default : _api$getSelectionStar;
    return {
      start: getSelectionStart2(dom),
      end: getSelectionEnd2(dom)
    };
  }
  return getSelectionRange;
}
var setCaretPosition = {};
var hasRequiredSetCaretPosition;
function requireSetCaretPosition() {
  if (hasRequiredSetCaretPosition)
    return setCaretPosition;
  hasRequiredSetCaretPosition = 1;
  Object.defineProperty(setCaretPosition, "__esModule", {
    value: true
  });
  setCaretPosition.default = setCaretPosition$1;
  function setCaretPosition$1(elem, caretPos) {
    var start = caretPos;
    var end = caretPos;
    if (caretPos && (caretPos.start != void 0 || caretPos.end != void 0)) {
      start = caretPos.start || 0;
      end = caretPos.end || start;
    }
    if (elem != null) {
      if (elem.createTextRange) {
        var range2 = elem.createTextRange();
        range2.moveStart("character", start);
        range2.moveEnd("character", end);
        range2.select();
      } else {
        elem.setSelectionRange(start, end);
      }
    }
  }
  return setCaretPosition;
}
var getDecimalDelimiter = {};
var hasRequiredGetDecimalDelimiter;
function requireGetDecimalDelimiter() {
  if (hasRequiredGetDecimalDelimiter)
    return getDecimalDelimiter;
  hasRequiredGetDecimalDelimiter = 1;
  Object.defineProperty(getDecimalDelimiter, "__esModule", {
    value: true
  });
  getDecimalDelimiter.default = getDecimalDelimiter$1;
  function getDecimalDelimiter$1(locale) {
    return 1.1.toLocaleString(locale).replace(/1/g, "") || ".";
  }
  return getDecimalDelimiter;
}
var getTransformedStringValues = {};
var getDigitGroupDelimiter = {};
var hasRequiredGetDigitGroupDelimiter;
function requireGetDigitGroupDelimiter() {
  if (hasRequiredGetDigitGroupDelimiter)
    return getDigitGroupDelimiter;
  hasRequiredGetDigitGroupDelimiter = 1;
  Object.defineProperty(getDigitGroupDelimiter, "__esModule", {
    value: true
  });
  getDigitGroupDelimiter.default = getDigitGroupDelimiter$1;
  function getDigitGroupDelimiter$1(locale) {
    var number2 = 1e3;
    return number2.toLocaleString(locale).replace(/[01]/g, "") || ",";
  }
  return getDigitGroupDelimiter;
}
var convertStringToNumber = {};
var hasRequiredConvertStringToNumber;
function requireConvertStringToNumber() {
  if (hasRequiredConvertStringToNumber)
    return convertStringToNumber;
  hasRequiredConvertStringToNumber = 1;
  Object.defineProperty(convertStringToNumber, "__esModule", {
    value: true
  });
  convertStringToNumber.default = convertStringToNumber$1;
  function convertStringToNumber$1(stringToConvert) {
    var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _props$decimalDelimit = props2.decimalDelimiter, decimalDelimiter = _props$decimalDelimit === void 0 ? "." : _props$decimalDelimit, _props$digitGroupDeli = props2.digitGroupDelimiter, digitGroupDelimiter = _props$digitGroupDeli === void 0 ? "," : _props$digitGroupDeli, _props$min = props2.min, min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min, _props$max = props2.max, max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max;
    if (digitGroupDelimiter == "") {
      return ",";
    }
    if (!stringToConvert) {
      return NaN;
    }
    var cleanedString = stringToConvert;
    var decmialPosition = cleanedString.lastIndexOf(decimalDelimiter);
    if (decmialPosition !== -1 && decimalDelimiter !== ".") {
      cleanedString = [cleanedString.substring(0, decmialPosition).replace(new RegExp("[\\".concat(digitGroupDelimiter, "]"), "g"), ""), cleanedString.substring(decmialPosition).replace(new RegExp("[\\".concat(decimalDelimiter, "]"), "g"), ".")].join("");
    } else {
      cleanedString = cleanedString.replace(new RegExp("[\\".concat(digitGroupDelimiter, "]"), "g"), "");
    }
    var result = parseFloat(cleanedString, 10);
    if (result < min) {
      result = min;
    }
    if (result > max) {
      result = max;
    }
    return result;
  }
  return convertStringToNumber;
}
var hasRequiredGetTransformedStringValues;
function requireGetTransformedStringValues() {
  if (hasRequiredGetTransformedStringValues)
    return getTransformedStringValues;
  hasRequiredGetTransformedStringValues = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getTransformedStringValues, "__esModule", {
    value: true
  });
  getTransformedStringValues.countDecimalDigits = void 0;
  getTransformedStringValues.default = getTransformedStringValues$1;
  getTransformedStringValues.getDecimalDelimiterPosition = void 0;
  var _getDecimalDelimiter = _interopRequireDefault2(requireGetDecimalDelimiter());
  var _getDigitGroupDelimiter = _interopRequireDefault2(requireGetDigitGroupDelimiter());
  var _convertStringToNumber = _interopRequireDefault2(requireConvertStringToNumber());
  var getDecimalDelimiterPosition = function getDecimalDelimiterPosition2(value, decimalDelimiter) {
    var string = value && value.toString();
    var position2 = string && string.indexOf(decimalDelimiter);
    return position2 !== -1 ? position2 : false;
  };
  getTransformedStringValues.getDecimalDelimiterPosition = getDecimalDelimiterPosition;
  var countDecimalDigits = function countDecimalDigits2(string, decimalDelimiter, decimalPosition) {
    var position2 = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);
    if (isNaN(position2)) {
      return 0;
    }
    if (typeof position2 === "number" && position2 < string.length) {
      return string.length - position2 - 1;
    }
    return 0;
  };
  getTransformedStringValues.countDecimalDigits = countDecimalDigits;
  function getTransformedStringValues$1(stringInput) {
    var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var internalApi = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (typeof stringInput !== "string") {
      stringInput += "";
    }
    if (!stringInput) {
      return ["", null];
    }
    stringInput = stringInput.replace(/[^0-9\,\.\-\+]/g, "");
    if (stringInput === "-" || stringInput === "-.") {
      return [stringInput, null];
    }
    var locale = props2.locale, _props$min = props2.min, min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min, _props$max = props2.max, max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max, suffix = props2.suffix, prefix2 = props2.prefix;
    var precision = props2.precision || null;
    if (precision > 20) {
      precision = 20;
    }
    var _internalApi$getDecim = internalApi.getDecimalDelimiter, getDecimalDelimiter2 = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim, _internalApi$getDigit = internalApi.getDigitGroupDelimiter, getDigitGroupDelimiter2 = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit, _internalApi$convertS = internalApi.convertStringToNumber, convertStringToNumber2 = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;
    var decimalDelimiter = getDecimalDelimiter2(locale);
    if (stringInput === decimalDelimiter) {
      return [stringInput, null];
    }
    var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);
    var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);
    if (precision || precision === 0 && decimalDigitsInInput > precision) {
      stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));
    }
    var digitGroupDelimiter = getDigitGroupDelimiter2(locale);
    var parsedResult = convertStringToNumber2(stringInput, {
      digitGroupDelimiter,
      decimalDelimiter,
      min,
      max
    });
    if (isNaN(parsedResult)) {
      return ["", null];
    }
    var numberWasClamped = parsedResult === min || parsedResult === max;
    if (numberWasClamped) {
      decimalDigitsInInput = 0;
    }
    var formatingOptions = {
      maximumFractionDigits: precision ? Math.min(precision, 20) : 20,
      minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)
    };
    var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);
    if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {
      stringRepresentation += ".";
    }
    if (prefix2) {
      stringRepresentation = "".concat(prefix2, " ").concat(stringRepresentation);
    }
    if (suffix) {
      stringRepresentation = "".concat(stringRepresentation, " ").concat(suffix);
    }
    return [stringRepresentation, parsedResult];
  }
  return getTransformedStringValues;
}
var getCurrencyForCountryCode = {};
var countryCurrencyCodes = {};
var hasRequiredCountryCurrencyCodes;
function requireCountryCurrencyCodes() {
  if (hasRequiredCountryCurrencyCodes)
    return countryCurrencyCodes;
  hasRequiredCountryCurrencyCodes = 1;
  Object.defineProperty(countryCurrencyCodes, "__esModule", {
    value: true
  });
  countryCurrencyCodes.default = void 0;
  var _default2 = [{
    code: "AED",
    number: "784",
    digits: 2,
    currency: "United Arab Emirates dirham",
    countries: ["united arab emirates"]
  }, {
    code: "AFN",
    number: "971",
    digits: 2,
    currency: "Afghan afghani",
    countries: ["afghanistan"]
  }, {
    code: "ALL",
    number: "008",
    digits: 2,
    currency: "Albanian lek",
    countries: ["albania"]
  }, {
    code: "AMD",
    number: "051",
    digits: 2,
    currency: "Armenian dram",
    countries: ["armenia"]
  }, {
    code: "ANG",
    number: "532",
    digits: 2,
    currency: "Netherlands Antillean guilder",
    countries: ["curaçao", "sint maarten"]
  }, {
    code: "AOA",
    number: "973",
    digits: 2,
    currency: "Angolan kwanza",
    countries: ["angola"]
  }, {
    code: "ARS",
    number: "032",
    digits: 2,
    currency: "Argentine peso",
    countries: ["argentina"]
  }, {
    code: "AUD",
    number: "036",
    digits: 2,
    currency: "Australian dollar",
    countries: ["australia", "australian antarctic territory", "christmas island", "cocos (keeling) islands", "heard and mcdonald islands", "kiribati", "nauru", "norfolk island", "tuvalu"]
  }, {
    code: "AWG",
    number: "533",
    digits: 2,
    currency: "Aruban florin",
    countries: ["aruba"]
  }, {
    code: "AZN",
    number: "944",
    digits: 2,
    currency: "Azerbaijani manat",
    countries: ["azerbaijan"]
  }, {
    code: "BAM",
    number: "977",
    digits: 2,
    currency: "Bosnia and Herzegovina convertible mark",
    countries: ["bosnia and herzegovina"]
  }, {
    code: "BBD",
    number: "052",
    digits: 2,
    currency: "Barbados dollar",
    countries: ["barbados"]
  }, {
    code: "BDT",
    number: "050",
    digits: 2,
    currency: "Bangladeshi taka",
    countries: ["bangladesh"]
  }, {
    code: "BGN",
    number: "975",
    digits: 2,
    currency: "Bulgarian lev",
    countries: ["bulgaria"]
  }, {
    code: "BHD",
    number: "048",
    digits: 3,
    currency: "Bahraini dinar",
    countries: ["bahrain"]
  }, {
    code: "BIF",
    number: "108",
    digits: 0,
    currency: "Burundian franc",
    countries: ["burundi"]
  }, {
    code: "BMD",
    number: "060",
    digits: 2,
    currency: "Bermudian dollar",
    countries: ["bermuda"]
  }, {
    code: "BND",
    number: "096",
    digits: 2,
    currency: "Brunei dollar",
    countries: ["brunei", "singapore"]
  }, {
    code: "BOB",
    number: "068",
    digits: 2,
    currency: "Boliviano",
    countries: ["bolivia"]
  }, {
    code: "BOV",
    number: "984",
    digits: 2,
    currency: "Bolivian Mvdol (funds code)",
    countries: ["bolivia"]
  }, {
    code: "BRL",
    number: "986",
    digits: 2,
    currency: "Brazilian real",
    countries: ["brazil"]
  }, {
    code: "BSD",
    number: "044",
    digits: 2,
    currency: "Bahamian dollar",
    countries: ["bahamas"]
  }, {
    code: "BTN",
    number: "064",
    digits: 2,
    currency: "Bhutanese ngultrum",
    countries: ["bhutan"]
  }, {
    code: "BWP",
    number: "072",
    digits: 2,
    currency: "Botswana pula",
    countries: ["botswana"]
  }, {
    code: "BYR",
    number: "974",
    digits: 0,
    currency: "Belarusian ruble",
    countries: ["belarus"]
  }, {
    code: "BZD",
    number: "084",
    digits: 2,
    currency: "Belize dollar",
    countries: ["belize"]
  }, {
    code: "CAD",
    number: "124",
    digits: 2,
    currency: "Canadian dollar",
    countries: ["canada", "saint pierre and miquelon"]
  }, {
    code: "CDF",
    number: "976",
    digits: 2,
    currency: "Congolese franc",
    countries: ["democratic republic of congo"]
  }, {
    code: "CHE",
    number: "947",
    digits: 2,
    currency: "WIR Euro (complementary currency)",
    countries: ["switzerland"]
  }, {
    code: "CHF",
    number: "756",
    digits: 2,
    currency: "Swiss franc",
    countries: ["switzerland", "liechtenstein"]
  }, {
    code: "CHW",
    number: "948",
    digits: 2,
    currency: "WIR Franc (complementary currency)",
    countries: ["switzerland"]
  }, {
    code: "CLF",
    number: "990",
    digits: 0,
    currency: "Unidad de Fomento (funds code)",
    countries: ["chile"]
  }, {
    code: "CLP",
    number: "152",
    digits: 0,
    currency: "Chilean peso",
    countries: ["chile"]
  }, {
    code: "CNY",
    number: "156",
    digits: 2,
    currency: "Chinese yuan",
    countries: ["china"]
  }, {
    code: "COP",
    number: "170",
    digits: 2,
    currency: "Colombian peso",
    countries: ["colombia"]
  }, {
    code: "COU",
    number: "970",
    digits: 2,
    currency: "Unidad de Valor Real",
    countries: ["colombia"]
  }, {
    code: "CRC",
    number: "188",
    digits: 2,
    currency: "Costa Rican colon",
    countries: ["costa rica"]
  }, {
    code: "CUC",
    number: "931",
    digits: 2,
    currency: "Cuban convertible peso",
    countries: ["cuba"]
  }, {
    code: "CUP",
    number: "192",
    digits: 2,
    currency: "Cuban peso",
    countries: ["cuba"]
  }, {
    code: "CVE",
    number: "132",
    digits: 0,
    currency: "Cape Verde escudo",
    countries: ["cape verde"]
  }, {
    code: "CZK",
    number: "203",
    digits: 2,
    currency: "Czech koruna",
    countries: ["czech republic"]
  }, {
    code: "DJF",
    number: "262",
    digits: 0,
    currency: "Djiboutian franc",
    countries: ["djibouti"]
  }, {
    code: "DKK",
    number: "208",
    digits: 2,
    currency: "Danish krone",
    countries: ["denmark", "faroe islands", "greenland"]
  }, {
    code: "DOP",
    number: "214",
    digits: 2,
    currency: "Dominican peso",
    countries: ["dominican republic"]
  }, {
    code: "DZD",
    number: "012",
    digits: 2,
    currency: "Algerian dinar",
    countries: ["algeria"]
  }, {
    code: "EGP",
    number: "818",
    digits: 2,
    currency: "Egyptian pound",
    countries: ["egypt", "palestinian territories"]
  }, {
    code: "ERN",
    number: "232",
    digits: 2,
    currency: "Eritrean nakfa",
    countries: ["eritrea"]
  }, {
    code: "ETB",
    number: "230",
    digits: 2,
    currency: "Ethiopian birr",
    countries: ["ethiopia"]
  }, {
    code: "EUR",
    number: "978",
    digits: 2,
    currency: "Euro",
    countries: ["andorra", "austria", "belgium", "cyprus", "estonia", "finland", "france", "germany", "greece", "ireland", "italy", "kosovo", "luxembourg", "malta", "monaco", "montenegro", "netherlands", "portugal", "san marino", "slovakia", "slovenia", "spain", "vatican city"]
  }, {
    code: "FJD",
    number: "242",
    digits: 2,
    currency: "Fiji dollar",
    countries: ["fiji"]
  }, {
    code: "FKP",
    number: "238",
    digits: 2,
    currency: "Falkland Islands pound",
    countries: ["falkland islands"]
  }, {
    code: "GBP",
    number: "826",
    digits: 2,
    currency: "Pound sterling",
    countries: ["united kingdom", "british crown dependencies (the  isle of man and the channel islands)", "south georgia and the south sandwich islands", "british antarctic territory", "british indian ocean territory"]
  }, {
    code: "GEL",
    number: "981",
    digits: 2,
    currency: "Georgian lari",
    countries: ["georgia"]
  }, {
    code: "GHS",
    number: "936",
    digits: 2,
    currency: "Ghanaian cedi",
    countries: ["ghana"]
  }, {
    code: "GIP",
    number: "292",
    digits: 2,
    currency: "Gibraltar pound",
    countries: ["gibraltar"]
  }, {
    code: "GMD",
    number: "270",
    digits: 2,
    currency: "Gambian dalasi",
    countries: ["gambia"]
  }, {
    code: "GNF",
    number: "324",
    digits: 0,
    currency: "Guinean franc",
    countries: ["guinea"]
  }, {
    code: "GTQ",
    number: "320",
    digits: 2,
    currency: "Guatemalan quetzal",
    countries: ["guatemala"]
  }, {
    code: "GYD",
    number: "328",
    digits: 2,
    currency: "Guyanese dollar",
    countries: ["guyana"]
  }, {
    code: "HKD",
    number: "344",
    digits: 2,
    currency: "Hong Kong dollar",
    countries: ["hong kong", "macao"]
  }, {
    code: "HNL",
    number: "340",
    digits: 2,
    currency: "Honduran lempira",
    countries: ["honduras"]
  }, {
    code: "HRK",
    number: "191",
    digits: 2,
    currency: "Croatian kuna",
    countries: ["croatia"]
  }, {
    code: "HTG",
    number: "332",
    digits: 2,
    currency: "Haitian gourde",
    countries: ["haiti"]
  }, {
    code: "HUF",
    number: "348",
    digits: 2,
    currency: "Hungarian forint",
    countries: ["hungary"]
  }, {
    code: "IDR",
    number: "360",
    digits: 0,
    currency: "Indonesian rupiah",
    countries: ["indonesia"]
  }, {
    code: "ILS",
    number: "376",
    digits: 2,
    currency: "Israeli new shekel",
    countries: ["israel", "palestinian territories"]
  }, {
    code: "INR",
    number: "356",
    digits: 2,
    currency: "Indian rupee",
    countries: ["india"]
  }, {
    code: "IQD",
    number: "368",
    digits: 3,
    currency: "Iraqi dinar",
    countries: ["iraq"]
  }, {
    code: "IRR",
    number: "364",
    digits: 0,
    currency: "Iranian rial",
    countries: ["iran"]
  }, {
    code: "ISK",
    number: "352",
    digits: 0,
    currency: "Icelandic króna",
    countries: ["iceland"]
  }, {
    code: "JMD",
    number: "388",
    digits: 2,
    currency: "Jamaican dollar",
    countries: ["jamaica"]
  }, {
    code: "JOD",
    number: "400",
    digits: 3,
    currency: "Jordanian dinar",
    countries: ["jordan"]
  }, {
    code: "JPY",
    number: "392",
    digits: 0,
    currency: "Japanese yen",
    countries: ["japan"]
  }, {
    code: "KES",
    number: "404",
    digits: 2,
    currency: "Kenyan shilling",
    countries: ["kenya"]
  }, {
    code: "KGS",
    number: "417",
    digits: 2,
    currency: "Kyrgyzstani som",
    countries: ["kyrgyzstan"]
  }, {
    code: "KHR",
    number: "116",
    digits: 2,
    currency: "Cambodian riel",
    countries: ["cambodia"]
  }, {
    code: "KMF",
    number: "174",
    digits: 0,
    currency: "Comoro franc",
    countries: ["comoros"]
  }, {
    code: "KPW",
    number: "408",
    digits: 0,
    currency: "North Korean won",
    countries: ["north korea"]
  }, {
    code: "KRW",
    number: "410",
    digits: 0,
    currency: "South Korean won",
    countries: ["south korea"]
  }, {
    code: "KWD",
    number: "414",
    digits: 3,
    currency: "Kuwaiti dinar",
    countries: ["kuwait"]
  }, {
    code: "KYD",
    number: "136",
    digits: 2,
    currency: "Cayman Islands dollar",
    countries: ["cayman islands"]
  }, {
    code: "KZT",
    number: "398",
    digits: 2,
    currency: "Kazakhstani tenge",
    countries: ["kazakhstan"]
  }, {
    code: "LAK",
    number: "418",
    digits: 0,
    currency: "Lao kip",
    countries: ["laos"]
  }, {
    code: "LBP",
    number: "422",
    digits: 0,
    currency: "Lebanese pound",
    countries: ["lebanon"]
  }, {
    code: "LKR",
    number: "144",
    digits: 2,
    currency: "Sri Lankan rupee",
    countries: ["sri lanka"]
  }, {
    code: "LRD",
    number: "430",
    digits: 2,
    currency: "Liberian dollar",
    countries: ["liberia"]
  }, {
    code: "LSL",
    number: "426",
    digits: 2,
    currency: "Lesotho loti",
    countries: ["lesotho"]
  }, {
    code: "LTL",
    number: "440",
    digits: 2,
    currency: "Lithuanian litas",
    countries: ["lithuania"]
  }, {
    code: "LVL",
    number: "428",
    digits: 2,
    currency: "Latvian lats",
    countries: ["latvia"]
  }, {
    code: "LYD",
    number: "434",
    digits: 3,
    currency: "Libyan dinar",
    countries: ["libya"]
  }, {
    code: "MAD",
    number: "504",
    digits: 2,
    currency: "Moroccan dirham",
    countries: ["morocco"]
  }, {
    code: "MDL",
    number: "498",
    digits: 2,
    currency: "Moldovan leu",
    countries: ["moldova (except  transnistria)"]
  }, {
    code: "MGA",
    number: "969",
    digits: 0,
    currency: "*[8]	Malagasy ariary",
    countries: ["madagascar"]
  }, {
    code: "MKD",
    number: "807",
    digits: 0,
    currency: "Macedonian denar",
    countries: ["macedonia"]
  }, {
    code: "MMK",
    number: "104",
    digits: 0,
    currency: "Myanma kyat",
    countries: ["myanmar"]
  }, {
    code: "MNT",
    number: "496",
    digits: 2,
    currency: "Mongolian tugrik",
    countries: ["mongolia"]
  }, {
    code: "MOP",
    number: "446",
    digits: 2,
    currency: "Macanese pataca",
    countries: ["macao"]
  }, {
    code: "MRO",
    number: "478",
    digits: 0,
    currency: "*[8]	Mauritanian ouguiya",
    countries: ["mauritania"]
  }, {
    code: "MUR",
    number: "480",
    digits: 2,
    currency: "Mauritian rupee",
    countries: ["mauritius"]
  }, {
    code: "MVR",
    number: "462",
    digits: 2,
    currency: "Maldivian rufiyaa",
    countries: ["maldives"]
  }, {
    code: "MWK",
    number: "454",
    digits: 2,
    currency: "Malawian kwacha",
    countries: ["malawi"]
  }, {
    code: "MXN",
    number: "484",
    digits: 2,
    currency: "Mexican peso",
    countries: ["mexico"]
  }, {
    code: "MXV",
    number: "979",
    digits: 2,
    currency: "Mexican Unidad de Inversion (UDI) (funds code)",
    countries: ["mexico"]
  }, {
    code: "MYR",
    number: "458",
    digits: 2,
    currency: "Malaysian ringgit",
    countries: ["malaysia"]
  }, {
    code: "MZN",
    number: "943",
    digits: 2,
    currency: "Mozambican metical",
    countries: ["mozambique"]
  }, {
    code: "NAD",
    number: "516",
    digits: 2,
    currency: "Namibian dollar",
    countries: ["namibia"]
  }, {
    code: "NGN",
    number: "566",
    digits: 2,
    currency: "Nigerian naira",
    countries: ["nigeria"]
  }, {
    code: "NIO",
    number: "558",
    digits: 2,
    currency: "Nicaraguan córdoba",
    countries: ["nicaragua"]
  }, {
    code: "NOK",
    number: "578",
    digits: 2,
    currency: "Norwegian krone",
    countries: ["norway", "svalbard", "jan mayen", "bouvet island", "queen maud land", "peter i island"]
  }, {
    code: "NPR",
    number: "524",
    digits: 2,
    currency: "Nepalese rupee",
    countries: ["nepal"]
  }, {
    code: "NZD",
    number: "554",
    digits: 2,
    currency: "New Zealand dollar",
    countries: ["cook islands", "new zealand", "niue", "pitcairn", "tokelau", "ross dependency"]
  }, {
    code: "OMR",
    number: "512",
    digits: 3,
    currency: "Omani rial",
    countries: ["oman"]
  }, {
    code: "PAB",
    number: "590",
    digits: 2,
    currency: "Panamanian balboa",
    countries: ["panama"]
  }, {
    code: "PEN",
    number: "604",
    digits: 2,
    currency: "Peruvian nuevo sol",
    countries: ["peru"]
  }, {
    code: "PGK",
    number: "598",
    digits: 2,
    currency: "Papua New Guinean kina",
    countries: ["papua new guinea"]
  }, {
    code: "PHP",
    number: "608",
    digits: 2,
    currency: "Philippine peso",
    countries: ["philippines"]
  }, {
    code: "PKR",
    number: "586",
    digits: 2,
    currency: "Pakistani rupee",
    countries: ["pakistan"]
  }, {
    code: "PLN",
    number: "985",
    digits: 2,
    currency: "Polish złoty",
    countries: ["poland"]
  }, {
    code: "PYG",
    number: "600",
    digits: 0,
    currency: "Paraguayan guaraní",
    countries: ["paraguay"]
  }, {
    code: "QAR",
    number: "634",
    digits: 2,
    currency: "Qatari riyal",
    countries: ["qatar"]
  }, {
    code: "RON",
    number: "946",
    digits: 2,
    currency: "Romanian new leu",
    countries: ["romania"]
  }, {
    code: "RSD",
    number: "941",
    digits: 2,
    currency: "Serbian dinar",
    countries: ["serbia"]
  }, {
    code: "RUB",
    number: "643",
    digits: 2,
    currency: "Russian rouble",
    countries: ["russia", "abkhazia", "south ossetia"]
  }, {
    code: "RWF",
    number: "646",
    digits: 0,
    currency: "Rwandan franc",
    countries: ["rwanda"]
  }, {
    code: "SAR",
    number: "682",
    digits: 2,
    currency: "Saudi riyal",
    countries: ["saudi arabia"]
  }, {
    code: "SBD",
    number: "090",
    digits: 2,
    currency: "Solomon Islands dollar",
    countries: ["solomon islands"]
  }, {
    code: "SCR",
    number: "690",
    digits: 2,
    currency: "Seychelles rupee",
    countries: ["seychelles"]
  }, {
    code: "SDG",
    number: "938",
    digits: 2,
    currency: "Sudanese pound",
    countries: ["sudan"]
  }, {
    code: "SEK",
    number: "752",
    digits: 2,
    currency: "Swedish krona/kronor",
    countries: ["sweden"]
  }, {
    code: "SGD",
    number: "702",
    digits: 2,
    currency: "Singapore dollar",
    countries: ["singapore", "brunei"]
  }, {
    code: "SHP",
    number: "654",
    digits: 2,
    currency: "Saint Helena pound",
    countries: ["saint helena"]
  }, {
    code: "SLL",
    number: "694",
    digits: 0,
    currency: "Sierra Leonean leone",
    countries: ["sierra leone"]
  }, {
    code: "SOS",
    number: "706",
    digits: 2,
    currency: "Somali shilling",
    countries: ["somalia"]
  }, {
    code: "SRD",
    number: "968",
    digits: 2,
    currency: "Surinamese dollar",
    countries: ["suriname"]
  }, {
    code: "SSP",
    number: "728",
    digits: 2,
    currency: "South Sudanese pound",
    countries: ["south sudan"]
  }, {
    code: "STD",
    number: "678",
    digits: 0,
    currency: "São Tomé and Príncipe dobra",
    countries: ["são tomé and príncipe"]
  }, {
    code: "SYP",
    number: "760",
    digits: 2,
    currency: "Syrian pound",
    countries: ["syria"]
  }, {
    code: "SZL",
    number: "748",
    digits: 2,
    currency: "Swazi lilangeni",
    countries: ["swaziland"]
  }, {
    code: "THB",
    number: "764",
    digits: 2,
    currency: "Thai baht",
    countries: ["thailand"]
  }, {
    code: "TJS",
    number: "972",
    digits: 2,
    currency: "Tajikistani somoni",
    countries: ["tajikistan"]
  }, {
    code: "TMT",
    number: "934",
    digits: 2,
    currency: "Turkmenistani manat",
    countries: ["turkmenistan"]
  }, {
    code: "TND",
    number: "788",
    digits: 3,
    currency: "Tunisian dinar",
    countries: ["tunisia"]
  }, {
    code: "TOP",
    number: "776",
    digits: 2,
    currency: "Tongan paʻanga",
    countries: ["tonga"]
  }, {
    code: "TRY",
    number: "949",
    digits: 2,
    currency: "Turkish lira",
    countries: ["turkey", "northern cyprus"]
  }, {
    code: "TTD",
    number: "780",
    digits: 2,
    currency: "Trinidad and Tobago dollar",
    countries: ["trinidad and tobago"]
  }, {
    code: "TWD",
    number: "901",
    digits: 2,
    currency: "New Taiwan dollar",
    countries: ["republic of china (taiwan)"]
  }, {
    code: "TZS",
    number: "834",
    digits: 2,
    currency: "Tanzanian shilling",
    countries: ["tanzania"]
  }, {
    code: "UAH",
    number: "980",
    digits: 2,
    currency: "Ukrainian hryvnia",
    countries: ["ukraine"]
  }, {
    code: "UGX",
    number: "800",
    digits: 2,
    currency: "Ugandan shilling",
    countries: ["uganda"]
  }, {
    code: "USD",
    number: "840",
    digits: 2,
    currency: "United States dollar",
    countries: ["american samoa", "barbados", "bermuda", "british indian ocean territory", "british virgin islands, caribbean netherlands", "ecuador", "el salvador", "guam", "haiti", "marshall islands", "federated states of micronesia", "northern mariana islands", "palau", "panama", "puerto rico", "timor-leste", "turks and caicos islands", "united states", "u.s. virgin islands", "zimbabwe"]
  }, {
    code: "USN",
    number: "997",
    digits: 2,
    currency: "United States dollar (next day) (funds code)",
    countries: ["united states"]
  }, {
    code: "USS",
    number: "998",
    digits: 2,
    currency: "United States dollar",
    countries: ["united states"]
  }, {
    code: "UYI",
    number: "940",
    digits: 0,
    currency: "Uruguay Peso en Unidades Indexadas",
    countries: ["uruguay"]
  }, {
    code: "UYU",
    number: "858",
    digits: 2,
    currency: "Uruguayan peso",
    countries: ["uruguay"]
  }, {
    code: "UZS",
    number: "860",
    digits: 2,
    currency: "Uzbekistan som",
    countries: ["uzbekistan"]
  }, {
    code: "VEF",
    number: "937",
    digits: 2,
    currency: "Venezuelan bolívar",
    countries: ["venezuela"]
  }, {
    code: "VND",
    number: "704",
    digits: 0,
    currency: "Vietnamese dong",
    countries: ["vietnam"]
  }, {
    code: "VUV",
    number: "548",
    digits: 0,
    currency: "Vanuatu vatu",
    countries: ["vanuatu"]
  }, {
    code: "WST",
    number: "882",
    digits: 2,
    currency: "Samoan tala",
    countries: ["samoa"]
  }, {
    code: "XAF",
    number: "950",
    digits: 0,
    currency: "CFA franc BEAC",
    countries: ["cameroon", "central african republic", "republic of the congo", "chad", "equatorial guinea", "gabon"]
  }, {
    code: "XAG",
    number: "961",
    currency: "Silver (one troy ounce)"
  }, {
    code: "XAU",
    number: "959",
    currency: "Gold (one troy ounce)"
  }, {
    code: "XBA",
    number: "955",
    currency: "European Composite Unit (EURCO) (bond market unit)	"
  }, {
    code: "XBB",
    number: "956",
    currency: "European Monetary Unit (E.M.U.-6) (bond market unit)	"
  }, {
    code: "XBC",
    number: "957",
    currency: "European Unit of Account 9 (E.U.A.-9) (bond market unit)	"
  }, {
    code: "XBD",
    number: "958",
    currency: "European Unit of Account 17 (E.U.A.-17) (bond market unit)	"
  }, {
    code: "XBT",
    currency: "Bitcoin"
  }, {
    code: "XCD",
    number: "951",
    digits: 2,
    currency: "East Caribbean dollar",
    countries: ["anguilla", "antigua and barbuda", "dominica", "grenada", "montserrat", "saint kitts and nevis", "saint lucia", "saint vincent and the grenadines"]
  }, {
    code: "XDR",
    number: "960",
    currency: "Special drawing rights",
    countries: ["international monetary fund"]
  }, {
    code: "XFU",
    currency: "UIC franc (special settlement currency)",
    countries: ["international union of railways"]
  }, {
    code: "XOF",
    number: "952",
    digits: 0,
    currency: "CFA franc BCEAO",
    countries: ["benin", "burkina faso", "côte d'ivoire", "guinea-bissau", "mali", "niger", "senegal", "togo"]
  }, {
    code: "XPD",
    number: "964",
    currency: "Palladium (one troy ounce)"
  }, {
    code: "XPF",
    number: "953",
    digits: 0,
    currency: "CFP franc (Franc du Pacifique)",
    countries: ["french polynesia", "new caledonia", "wallis and futuna"]
  }, {
    code: "XPT",
    number: "962",
    currency: "Platinum (one troy ounce)"
  }, {
    code: "XTS",
    number: "963",
    currency: "Code reserved for testing purposes"
  }, {
    code: "XXX",
    number: "999",
    currency: "No currency"
  }, {
    code: "YER",
    number: "886",
    digits: 2,
    currency: "Yemeni rial",
    countries: ["yemen"]
  }, {
    code: "ZAR",
    number: "710",
    digits: 2,
    currency: "South African rand",
    countries: ["south africa"]
  }, {
    code: "ZMW",
    number: "967",
    digits: 2,
    currency: "Zambian kwacha",
    countries: ["zambia"]
  }];
  countryCurrencyCodes.default = _default2;
  return countryCurrencyCodes;
}
var countries = {};
var hasRequiredCountries;
function requireCountries() {
  if (hasRequiredCountries)
    return countries;
  hasRequiredCountries = 1;
  Object.defineProperty(countries, "__esModule", {
    value: true
  });
  countries.default = void 0;
  var _default2 = [{
    name: "Afghanistan",
    code: "AF"
  }, {
    name: "Åland Islands",
    code: "AX"
  }, {
    name: "Albania",
    code: "AL"
  }, {
    name: "Algeria",
    code: "DZ"
  }, {
    name: "American Samoa",
    code: "AS"
  }, {
    name: "AndorrA",
    code: "AD"
  }, {
    name: "Angola",
    code: "AO"
  }, {
    name: "Anguilla",
    code: "AI"
  }, {
    name: "Antarctica",
    code: "AQ"
  }, {
    name: "Antigua and Barbuda",
    code: "AG"
  }, {
    name: "Argentina",
    code: "AR"
  }, {
    name: "Armenia",
    code: "AM"
  }, {
    name: "Aruba",
    code: "AW"
  }, {
    name: "Australia",
    code: "AU"
  }, {
    name: "Austria",
    code: "AT"
  }, {
    name: "Azerbaijan",
    code: "AZ"
  }, {
    name: "Bahamas",
    code: "BS"
  }, {
    name: "Bahrain",
    code: "BH"
  }, {
    name: "Bangladesh",
    code: "BD"
  }, {
    name: "Barbados",
    code: "BB"
  }, {
    name: "Belarus",
    code: "BY"
  }, {
    name: "Belgium",
    code: "BE"
  }, {
    name: "Belize",
    code: "BZ"
  }, {
    name: "Benin",
    code: "BJ"
  }, {
    name: "Bermuda",
    code: "BM"
  }, {
    name: "Bhutan",
    code: "BT"
  }, {
    name: "Bolivia",
    code: "BO"
  }, {
    name: "Bosnia and Herzegovina",
    code: "BA"
  }, {
    name: "Botswana",
    code: "BW"
  }, {
    name: "Bouvet Island",
    code: "BV"
  }, {
    name: "Brazil",
    code: "BR"
  }, {
    name: "British Indian Ocean Territory",
    code: "IO"
  }, {
    name: "Brunei Darussalam",
    code: "BN"
  }, {
    name: "Bulgaria",
    code: "BG"
  }, {
    name: "Burkina Faso",
    code: "BF"
  }, {
    name: "Burundi",
    code: "BI"
  }, {
    name: "Cambodia",
    code: "KH"
  }, {
    name: "Cameroon",
    code: "CM"
  }, {
    name: "Canada",
    code: "CA"
  }, {
    name: "Cape Verde",
    code: "CV"
  }, {
    name: "Cayman Islands",
    code: "KY"
  }, {
    name: "Central African Republic",
    code: "CF"
  }, {
    name: "Chad",
    code: "TD"
  }, {
    name: "Chile",
    code: "CL"
  }, {
    name: "China",
    code: "CN"
  }, {
    name: "Christmas Island",
    code: "CX"
  }, {
    name: "Cocos (Keeling) Islands",
    code: "CC"
  }, {
    name: "Colombia",
    code: "CO"
  }, {
    name: "Comoros",
    code: "KM"
  }, {
    name: "Congo",
    code: "CG"
  }, {
    name: "Congo, The Democratic Republic of the",
    code: "CD"
  }, {
    name: "Cook Islands",
    code: "CK"
  }, {
    name: "Costa Rica",
    code: "CR"
  }, {
    name: 'Cote D"Ivoire',
    code: "CI"
  }, {
    name: "Croatia",
    code: "HR"
  }, {
    name: "Cuba",
    code: "CU"
  }, {
    name: "Cyprus",
    code: "CY"
  }, {
    name: "Czech Republic",
    code: "CZ"
  }, {
    name: "Denmark",
    code: "DK"
  }, {
    name: "Djibouti",
    code: "DJ"
  }, {
    name: "Dominica",
    code: "DM"
  }, {
    name: "Dominican Republic",
    code: "DO"
  }, {
    name: "Ecuador",
    code: "EC"
  }, {
    name: "Egypt",
    code: "EG"
  }, {
    name: "El Salvador",
    code: "SV"
  }, {
    name: "Equatorial Guinea",
    code: "GQ"
  }, {
    name: "Eritrea",
    code: "ER"
  }, {
    name: "Estonia",
    code: "EE"
  }, {
    name: "Ethiopia",
    code: "ET"
  }, {
    name: "Falkland Islands (Malvinas)",
    code: "FK"
  }, {
    name: "Faroe Islands",
    code: "FO"
  }, {
    name: "Fiji",
    code: "FJ"
  }, {
    name: "Finland",
    code: "FI"
  }, {
    name: "France",
    code: "FR"
  }, {
    name: "French Guiana",
    code: "GF"
  }, {
    name: "French Polynesia",
    code: "PF"
  }, {
    name: "French Southern Territories",
    code: "TF"
  }, {
    name: "Gabon",
    code: "GA"
  }, {
    name: "Gambia",
    code: "GM"
  }, {
    name: "Georgia",
    code: "GE"
  }, {
    name: "Germany",
    code: "DE"
  }, {
    name: "Ghana",
    code: "GH"
  }, {
    name: "Gibraltar",
    code: "GI"
  }, {
    name: "Greece",
    code: "GR"
  }, {
    name: "Greenland",
    code: "GL"
  }, {
    name: "Grenada",
    code: "GD"
  }, {
    name: "Guadeloupe",
    code: "GP"
  }, {
    name: "Guam",
    code: "GU"
  }, {
    name: "Guatemala",
    code: "GT"
  }, {
    name: "Guernsey",
    code: "GG"
  }, {
    name: "Guinea",
    code: "GN"
  }, {
    name: "Guinea-Bissau",
    code: "GW"
  }, {
    name: "Guyana",
    code: "GY"
  }, {
    name: "Haiti",
    code: "HT"
  }, {
    name: "Heard Island and Mcdonald Islands",
    code: "HM"
  }, {
    name: "Holy See (Vatican City State)",
    code: "VA"
  }, {
    name: "Honduras",
    code: "HN"
  }, {
    name: "Hong Kong",
    code: "HK"
  }, {
    name: "Hungary",
    code: "HU"
  }, {
    name: "Iceland",
    code: "IS"
  }, {
    name: "India",
    code: "IN"
  }, {
    name: "Indonesia",
    code: "ID"
  }, {
    name: "Iran, Islamic Republic Of",
    code: "IR"
  }, {
    name: "Iraq",
    code: "IQ"
  }, {
    name: "Ireland",
    code: "IE"
  }, {
    name: "Isle of Man",
    code: "IM"
  }, {
    name: "Israel",
    code: "IL"
  }, {
    name: "Italy",
    code: "IT"
  }, {
    name: "Jamaica",
    code: "JM"
  }, {
    name: "Japan",
    code: "JP"
  }, {
    name: "Jersey",
    code: "JE"
  }, {
    name: "Jordan",
    code: "JO"
  }, {
    name: "Kazakhstan",
    code: "KZ"
  }, {
    name: "Kenya",
    code: "KE"
  }, {
    name: "Kiribati",
    code: "KI"
  }, {
    name: 'Korea, Democratic People"S Republic of',
    code: "KP"
  }, {
    name: "Korea, Republic of",
    code: "KR"
  }, {
    name: "Kuwait",
    code: "KW"
  }, {
    name: "Kyrgyzstan",
    code: "KG"
  }, {
    name: 'Lao People"S Democratic Republic',
    code: "LA"
  }, {
    name: "Latvia",
    code: "LV"
  }, {
    name: "Lebanon",
    code: "LB"
  }, {
    name: "Lesotho",
    code: "LS"
  }, {
    name: "Liberia",
    code: "LR"
  }, {
    name: "Libyan Arab Jamahiriya",
    code: "LY"
  }, {
    name: "Liechtenstein",
    code: "LI"
  }, {
    name: "Lithuania",
    code: "LT"
  }, {
    name: "Luxembourg",
    code: "LU"
  }, {
    name: "Macao",
    code: "MO"
  }, {
    name: "Macedonia, The Former Yugoslav Republic of",
    code: "MK"
  }, {
    name: "Madagascar",
    code: "MG"
  }, {
    name: "Malawi",
    code: "MW"
  }, {
    name: "Malaysia",
    code: "MY"
  }, {
    name: "Maldives",
    code: "MV"
  }, {
    name: "Mali",
    code: "ML"
  }, {
    name: "Malta",
    code: "MT"
  }, {
    name: "Marshall Islands",
    code: "MH"
  }, {
    name: "Martinique",
    code: "MQ"
  }, {
    name: "Mauritania",
    code: "MR"
  }, {
    name: "Mauritius",
    code: "MU"
  }, {
    name: "Mayotte",
    code: "YT"
  }, {
    name: "Mexico",
    code: "MX"
  }, {
    name: "Micronesia, Federated States of",
    code: "FM"
  }, {
    name: "Moldova, Republic of",
    code: "MD"
  }, {
    name: "Monaco",
    code: "MC"
  }, {
    name: "Mongolia",
    code: "MN"
  }, {
    name: "Montserrat",
    code: "MS"
  }, {
    name: "Morocco",
    code: "MA"
  }, {
    name: "Mozambique",
    code: "MZ"
  }, {
    name: "Myanmar",
    code: "MM"
  }, {
    name: "Namibia",
    code: "NA"
  }, {
    name: "Nauru",
    code: "NR"
  }, {
    name: "Nepal",
    code: "NP"
  }, {
    name: "Netherlands",
    code: "NL"
  }, {
    name: "Netherlands Antilles",
    code: "AN"
  }, {
    name: "New Caledonia",
    code: "NC"
  }, {
    name: "New Zealand",
    code: "NZ"
  }, {
    name: "Nicaragua",
    code: "NI"
  }, {
    name: "Niger",
    code: "NE"
  }, {
    name: "Nigeria",
    code: "NG"
  }, {
    name: "Niue",
    code: "NU"
  }, {
    name: "Norfolk Island",
    code: "NF"
  }, {
    name: "Northern Mariana Islands",
    code: "MP"
  }, {
    name: "Norway",
    code: "NO"
  }, {
    name: "Oman",
    code: "OM"
  }, {
    name: "Pakistan",
    code: "PK"
  }, {
    name: "Palau",
    code: "PW"
  }, {
    name: "Palestinian Territory, Occupied",
    code: "PS"
  }, {
    name: "Panama",
    code: "PA"
  }, {
    name: "Papua New Guinea",
    code: "PG"
  }, {
    name: "Paraguay",
    code: "PY"
  }, {
    name: "Peru",
    code: "PE"
  }, {
    name: "Philippines",
    code: "PH"
  }, {
    name: "Pitcairn",
    code: "PN"
  }, {
    name: "Poland",
    code: "PL"
  }, {
    name: "Portugal",
    code: "PT"
  }, {
    name: "Puerto Rico",
    code: "PR"
  }, {
    name: "Qatar",
    code: "QA"
  }, {
    name: "Reunion",
    code: "RE"
  }, {
    name: "Romania",
    code: "RO"
  }, {
    name: "Russian Federation",
    code: "RU"
  }, {
    name: "RWANDA",
    code: "RW"
  }, {
    name: "Saint Helena",
    code: "SH"
  }, {
    name: "Saint Kitts and Nevis",
    code: "KN"
  }, {
    name: "Saint Lucia",
    code: "LC"
  }, {
    name: "Saint Pierre and Miquelon",
    code: "PM"
  }, {
    name: "Saint Vincent and the Grenadines",
    code: "VC"
  }, {
    name: "Samoa",
    code: "WS"
  }, {
    name: "San Marino",
    code: "SM"
  }, {
    name: "Sao Tome and Principe",
    code: "ST"
  }, {
    name: "Saudi Arabia",
    code: "SA"
  }, {
    name: "Senegal",
    code: "SN"
  }, {
    name: "Serbia and Montenegro",
    code: "CS"
  }, {
    name: "Seychelles",
    code: "SC"
  }, {
    name: "Sierra Leone",
    code: "SL"
  }, {
    name: "Singapore",
    code: "SG"
  }, {
    name: "Slovakia",
    code: "SK"
  }, {
    name: "Slovenia",
    code: "SI"
  }, {
    name: "Solomon Islands",
    code: "SB"
  }, {
    name: "Somalia",
    code: "SO"
  }, {
    name: "South Africa",
    code: "ZA"
  }, {
    name: "South Georgia and the South Sandwich Islands",
    code: "GS"
  }, {
    name: "Spain",
    code: "ES"
  }, {
    name: "Sri Lanka",
    code: "LK"
  }, {
    name: "Sudan",
    code: "SD"
  }, {
    name: "Suriname",
    code: "SR"
  }, {
    name: "Svalbard and Jan Mayen",
    code: "SJ"
  }, {
    name: "Swaziland",
    code: "SZ"
  }, {
    name: "Sweden",
    code: "SE"
  }, {
    name: "Switzerland",
    code: "CH"
  }, {
    name: "Syrian Arab Republic",
    code: "SY"
  }, {
    name: "Taiwan, Province of China",
    code: "TW"
  }, {
    name: "Tajikistan",
    code: "TJ"
  }, {
    name: "Tanzania, United Republic of",
    code: "TZ"
  }, {
    name: "Thailand",
    code: "TH"
  }, {
    name: "Timor-Leste",
    code: "TL"
  }, {
    name: "Togo",
    code: "TG"
  }, {
    name: "Tokelau",
    code: "TK"
  }, {
    name: "Tonga",
    code: "TO"
  }, {
    name: "Trinidad and Tobago",
    code: "TT"
  }, {
    name: "Tunisia",
    code: "TN"
  }, {
    name: "Turkey",
    code: "TR"
  }, {
    name: "Turkmenistan",
    code: "TM"
  }, {
    name: "Turks and Caicos Islands",
    code: "TC"
  }, {
    name: "Tuvalu",
    code: "TV"
  }, {
    name: "Uganda",
    code: "UG"
  }, {
    name: "Ukraine",
    code: "UA"
  }, {
    name: "United Arab Emirates",
    code: "AE"
  }, {
    name: "United Kingdom",
    code: "GB"
  }, {
    name: "United States",
    code: "US"
  }, {
    name: "United States Minor Outlying Islands",
    code: "UM"
  }, {
    name: "Uruguay",
    code: "UY"
  }, {
    name: "Uzbekistan",
    code: "UZ"
  }, {
    name: "Vanuatu",
    code: "VU"
  }, {
    name: "Venezuela",
    code: "VE"
  }, {
    name: "Viet Nam",
    code: "VN"
  }, {
    name: "Virgin Islands, British",
    code: "VG"
  }, {
    name: "Virgin Islands, U.S.",
    code: "VI"
  }, {
    name: "Wallis and Futuna",
    code: "WF"
  }, {
    name: "Western Sahara",
    code: "EH"
  }, {
    name: "Yemen",
    code: "YE"
  }, {
    name: "Zambia",
    code: "ZM"
  }, {
    name: "Zimbabwe",
    code: "ZW"
  }];
  countries.default = _default2;
  return countries;
}
var find = {};
var hasRequiredFind;
function requireFind() {
  if (hasRequiredFind)
    return find;
  hasRequiredFind = 1;
  Object.defineProperty(find, "__esModule", {
    value: true
  });
  find.default = void 0;
  function find$1(collection, test2) {
    if (!Array.isArray(collection)) {
      return null;
    }
    if (collection.length === 0) {
      return null;
    }
    if (Array.prototype.find) {
      return collection.find(test2);
    }
    if (typeof test2 !== "function") {
      return null;
    }
    var needle;
    for (var i = 0, len = collection.length; i < len; i++) {
      var item = collection[i];
      if (test2(item)) {
        needle = item;
        break;
      }
    }
    return needle;
  }
  var _default2 = find$1;
  find.default = _default2;
  return find;
}
var hasRequiredGetCurrencyForCountryCode;
function requireGetCurrencyForCountryCode() {
  if (hasRequiredGetCurrencyForCountryCode)
    return getCurrencyForCountryCode;
  hasRequiredGetCurrencyForCountryCode = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getCurrencyForCountryCode, "__esModule", {
    value: true
  });
  getCurrencyForCountryCode.default = getCurrencyForCountryCode$1;
  var _countryCurrencyCodes = _interopRequireDefault2(requireCountryCurrencyCodes());
  var _countries = _interopRequireDefault2(requireCountries());
  var _find = _interopRequireDefault2(requireFind());
  var countriesByCountryCode = _countries.default.reduce(function(accumulator, country) {
    accumulator[country.code] = country.name;
    accumulator[country.code.toLowerCase()] = country.name;
    return accumulator;
  }, {});
  function getCurrencyForCountryCode$1(locale) {
    var currencyDisplay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "symbol";
    var code = locale.split("-")[1];
    var countryNameByCode = countriesByCountryCode[code];
    if (countryNameByCode) {
      var country = countriesByCountryCode[code] && countriesByCountryCode[code].toLowerCase();
      var currency = (0, _find.default)(_countryCurrencyCodes.default, function(countryCode) {
        return (countryCode.countries || []).indexOf(country) !== -1;
      });
      if (currency) {
        return new Number(1).toLocaleString(locale, {
          style: "currency",
          currency: currency.code,
          currencyDisplay
        }).replace(/[0-9\.\,]/g, "");
      }
      return "";
    } else {
      console.error("Cannot get currency based on country code. Country ".concat(code, " not found."));
      return "";
    }
  }
  return getCurrencyForCountryCode;
}
var hasRequiredNumberInput;
function requireNumberInput() {
  if (hasRequiredNumberInput)
    return NumberInput;
  hasRequiredNumberInput = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(NumberInput, "__esModule", {
    value: true
  });
  NumberInput.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _autoBind = _interopRequireDefault2(requireAutoBind());
  var _hasTouch = _interopRequireDefault2(requireHasTouch());
  var _raf = _interopRequireDefault2(requireRaf());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _clamp = _interopRequireDefault2(requireClamp());
  var _debounce = _interopRequireDefault2(requireDebounce());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _eventNames = _interopRequireDefault2(requireEventNames());
  var _getSelectionRange = _interopRequireDefault2(requireGetSelectionRange());
  var _getSelectionStart2 = _interopRequireDefault2(requireGetSelectionStart$1());
  var _setCaretPosition = _interopRequireDefault2(requireSetCaretPosition());
  var _getDecimalDelimiter = _interopRequireDefault2(requireGetDecimalDelimiter());
  var _getTransformedStringValues2 = _interopRequireWildcard(requireGetTransformedStringValues());
  var _getCurrencyForCountryCode = _interopRequireDefault2(requireGetCurrencyForCountryCode());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var preventDefault = function preventDefault2(e2) {
    return e2.preventDefault();
  };
  var emptyObject = {};
  var isNumeric = function isNumeric2(n2) {
    return !isNaN(parseFloat(n2)) && isFinite(n2);
  };
  var getArrowClasses = function getArrowClasses2(spinDirection, props2) {
    var upArrowClass = (0, _join.default)("".concat(props2.rootClassName, "__spinner-arrow"), "".concat(props2.rootClassName, "__spinner-arrow--up"), spinDirection === 1 && "".concat(props2.rootClassName, "__spinner-arrow--active"));
    var downArrowClass = (0, _join.default)("".concat(props2.rootClassName, "__spinner-arrow"), "".concat(props2.rootClassName, "__spinner-arrow--down"), spinDirection === -1 && "".concat(props2.rootClassName, "__spinner-arrow--active"));
    return {
      upArrowClass,
      downArrowClass
    };
  };
  var getClearButtonClassNames = function getClearButtonClassNames2(props2) {
    var clearButtonClassName = (0, _join.default)("".concat(props2.rootClassName, "__clear-button"), "".concat(props2.rootClassName, "__clear-button--").concat(props2.rtl ? "rtl" : "ltr"), props2.clearButtonClassName);
    return {
      clearButtonClassName
    };
  };
  var toUpperFirst2 = function toUpperFirst3(str) {
    return str ? str.charAt(0).toUpperCase() + str.substring(1) : "";
  };
  var isFloat2 = function isFloat3(n2) {
    return Number(n2) === n2 && n2 % 1 !== 0;
  };
  var isFloatString = function isFloatString2(n2) {
    var str = "".concat(n2);
    return isFloat2(str) || isNumeric(str) && str.indexOf(".") !== -1;
  };
  var checkPositive = function checkPositive2(value, _ref4) {
    var allowNegative = _ref4.allowNegative;
    if (allowNegative === false) {
      return isNumeric(value) && value * 1 >= 0;
    }
  };
  var getFormatedValue = function getFormatedValue2(value, props2) {
    if (value || value === 0) {
      var locale = props2.locale, prefix2 = props2.prefix, suffix = props2.suffix, minValue = props2.minValue, maxValue = props2.maxValue, precision = props2.precision;
      return (0, _getTransformedStringValues2.default)(value, {
        locale,
        precision,
        min: minValue,
        max: maxValue,
        prefix: prefix2,
        suffix
      })[0];
    }
  };
  var getCurrentValue = function getCurrentValue2(props2, state2) {
    var value = props2.value, defaultValue = props2.defaultValue;
    var formattedValue = state2.formattedValue;
    if (value != null) {
      return value;
    }
    if (formattedValue == null) {
      return getFormatedValue(defaultValue, props2);
    }
    return formattedValue;
  };
  var isControlled = function isControlled2(props2) {
    return props2.value !== void 0;
  };
  var isControlledPrecision = function isControlledPrecision2(props2) {
    return props2.precision === 0 || !!props2.precision;
  };
  var getSuffix = function getSuffix2(props2) {
    var suffix = props2.suffix, format = props2.format, currencySymbol = props2.currencySymbol, currencyPosition = props2.currencyPosition, locale = props2.locale;
    if (suffix) {
      return suffix;
    }
    if (format === "currency" && currencyPosition === "end") {
      if (currencySymbol) {
        return currencySymbol;
      }
      return (0, _getCurrencyForCountryCode.default)(locale || (globalObject.navigator ? globalObject.navigator.language : ""));
    }
    if (format === "percentage") {
      return "%";
    }
  };
  var getPrefix = function getPrefix2(props2) {
    var prefix2 = props2.prefix, format = props2.format, currencySymbol = props2.currencySymbol, currencyPosition = props2.currencyPosition, locale = props2.locale;
    if (prefix2) {
      return prefix2;
    }
    if (format === "currency" && currencyPosition === "start") {
      if (currencySymbol) {
        return currencySymbol;
      }
      return (0, _getCurrencyForCountryCode.default)(locale || (globalObject.navigator ? globalObject.navigator.language : ""));
    }
  };
  var selectionContainsPosition = function selectionContainsPosition2(selection, position2) {
    if (selection.start === selection.end) {
      return false;
    }
    return selection.start <= position2 && selection.end > position2;
  };
  var InovuaNumericInput = function(_Component) {
    (0, _inherits2.default)(InovuaNumericInput2, _Component);
    var _super = _createSuper(InovuaNumericInput2);
    function InovuaNumericInput2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaNumericInput2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function(svgProps) {
        var result;
        if (_this.props.renderClearIcon && typeof _this.props.renderClearIcon === "function") {
          result = _this.props.renderClearIcon({
            width: svgProps.width,
            height: svgProps.height
          });
        }
        if (result === void 0) {
          result = _react.default.createElement("svg", {
            style: _objectSpread2({}, svgProps),
            viewBox: "0 0 10 10"
          }, _react.default.createElement("path", {
            fill: "none",
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeWidth: "1.33",
            d: "M1 1l8 8m0-8L1 9"
          }));
        }
        return result;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrowUpIcon", function(svgProps) {
        var height = svgProps.height;
        var result;
        if (_this.props.renderArrowUpIcon && typeof _this.props.renderArrowUpIcon === "function") {
          result = _this.props.renderArrowUpIcon(_objectSpread2({}, svgProps));
        }
        if (result === void 0) {
          result = _react.default.createElement("svg", {
            style: _objectSpread2(_objectSpread2({}, svgProps), {}, {
              height: height / 2
            }),
            viewBox: "0 0 10 5"
          }, _react.default.createElement("path", {
            fillRule: "evenodd",
            d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
          }));
        }
        return result;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderArrowDownIcon", function(svgProps) {
        var height = svgProps.height;
        var result;
        if (_this.props.renderArrowDownIcon && typeof _this.props.renderArrowDownIcon === "function") {
          result = _this.props.renderArrowDownIcon(_objectSpread2({}, svgProps));
        }
        if (result === void 0) {
          result = _react.default.createElement("svg", {
            style: _objectSpread2(_objectSpread2({}, svgProps), {}, {
              height: height / 2
            }),
            viewBox: "0 0 10 5"
          }, _react.default.createElement("path", {
            fillRule: "evenodd",
            d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
          }));
        }
        return result;
      });
      (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
      var value = isControlled(props2) ? props2.value : props2.defaultValue;
      if (props2.triggerChangeOnSpinDelay > 0) {
        _this.setValueOnSpin = (0, _debounce.default)(_this.setValueOnSpin, props2.triggerChangeOnSpinDelay);
      }
      _this.state = {
        value,
        focused: false,
        formattedValue: getFormatedValue(value, props2),
        spinDirection: null,
        intermediateValue: null
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaNumericInput2, [{
      key: "setInputRef",
      value: function setInputRef(el2) {
        this.input = el2;
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props, state2 = this.state;
        var toolPosition = props2.toolPosition;
        var _this$p = this.p = this.getProps(props2, state2);
        _this$p.formattedValue;
        var enableSpinnerTools = _this$p.enableSpinnerTools, className = _this$p.className, style = _this$p.style;
        _this$p.enableClearButton;
        var wrapperProps = _this$p.wrapperProps;
        var min = props2.mim;
        if (min === void 0 && !props2.allowNegative) {
          min = 0;
        }
        var currentValue = state2.focused ? this.p.value : this.p.formattedValue;
        if (currentValue == null) {
          currentValue = "";
        }
        var inputProps = props2.inputProps || emptyObject;
        var inputClassName = (0, _join.default)("".concat(props2.rootClassName, "__input"), inputProps.className);
        var input = _react.default.createElement("input", _objectSpread2(_objectSpread2({
          size: Math.max(1, props2.size || 0),
          placeholder: this.props.placeholder
        }, inputProps), {}, {
          ref: this.setInputRef,
          type: "text",
          key: "input",
          className: inputClassName,
          disabled: props2.disabled,
          value: currentValue,
          onWheel: this.handleWheel,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onChange: this.handleChange,
          min
        }));
        var clearButtonWrapper = this.renderClearButtonWrapper();
        var spinnerToolWrapper = this.renderSpinnerToolsWrapper();
        var inputDisplay = [input, clearButtonWrapper, spinnerToolWrapper];
        if (toolPosition === "start") {
          inputDisplay = [spinnerToolWrapper, clearButtonWrapper, input];
        }
        if (enableSpinnerTools === false) {
          inputDisplay = [input, spinnerToolWrapper, clearButtonWrapper];
        }
        if (toolPosition === "start" && enableSpinnerTools === false) {
          inputDisplay = [clearButtonWrapper, input, spinnerToolWrapper];
        }
        var propsToWrapper = (0, _cleanProps.default)(wrapperProps, InovuaNumericInput2.propTypes);
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, propsToWrapper), {}, {
          className: (0, _join.default)(className, wrapperProps ? wrapperProps.className : null),
          style: wrapperProps && wrapperProps.style ? _objectSpread2(_objectSpread2({}, style), wrapperProps.style) : style,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus
        }), inputDisplay);
      }
    }, {
      key: "renderClearButtonWrapper",
      value: function renderClearButtonWrapper() {
        var props2 = this.props, state2 = this.state;
        var enableClearButton = this.props.enableClearButton;
        var _this$p2 = this.p, clearButtonColor = _this$p2.clearButtonColor, clearButtonStyle = _this$p2.clearButtonStyle, clearButtonSize = _this$p2.clearButtonSize;
        var value = isControlled(props2) ? props2.value : state2.value;
        var hasValue = state2.intermediateValue != null ? true : value !== "" && value != null;
        var clearButtonWrapperClassName = (0, _join.default)("".concat(props2.rootClassName, "__clear-button-wrapper"), (!hasValue || !enableClearButton) && "".concat(props2.rootClassName, "__clear-button-wrapper--hidden"));
        return _react.default.createElement("div", {
          key: "clearButton",
          className: clearButtonWrapperClassName
        }, this.renderClearButton(_objectSpread2({
          clearButtonColor,
          clearButtonStyle,
          clearButtonSize
        }, getClearButtonClassNames(props2))));
      }
    }, {
      key: "renderClearButton",
      value: function renderClearButton(config2) {
        var clearButtonColor = config2.clearButtonColor, clearButtonStyle = config2.clearButtonStyle, clearButtonClassName = config2.clearButtonClassName, clearButtonSize = config2.clearButtonSize;
        var svgProps = {};
        var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;
        if (clearButtonColor) {
          svgProps.fill = clearButtonColor;
        }
        if (clearButtonSize) {
          if (Array.isArray(clearButtonSize)) {
            svgProps.width = clearButtonSize[0];
            svgProps.height = clearButtonSize[1];
          } else {
            svgProps.width = clearButtonSize;
            svgProps.height = clearButtonSize;
          }
        }
        return _react.default.createElement("button", {
          key: "clearButton",
          type: "button",
          onClick: this.handleClearButtonClick,
          onMouseDown: preventDefault,
          className: clearButtonClassName,
          style: _objectSpread2({}, clearButtonStyle),
          tabIndex
        }, this.renderClearIcon(svgProps));
      }
    }, {
      key: "renderSpinnerToolsWrapper",
      value: function renderSpinnerToolsWrapper() {
        var props2 = this.props;
        var enableSpinnerTools = props2.enableSpinnerTools, rtl = props2.rtl;
        var _this$p3 = this.p, arrowColor = _this$p3.arrowColor, arrowStyle = _this$p3.arrowStyle, arrowUpStyle = _this$p3.arrowUpStyle, arrowDownStyle = _this$p3.arrowDownStyle, spinDirection = _this$p3.spinDirection, arrowSize = _this$p3.arrowSize;
        var spinnerToolsWrapperClassName = enableSpinnerTools ? "".concat(props2.rootClassName, "__spinner-wrapper ").concat(props2.rootClassName, "__spinner-wrapper--").concat(rtl ? "rtl" : "ltr") : "".concat(props2.rootClassName, "__spinner-wrapper-hidden ").concat(props2.rootClassName, "__spinner-wrapper-hidden--").concat(rtl ? "rtl" : "ltr");
        return _react.default.createElement("div", {
          key: "spinnerTool",
          className: spinnerToolsWrapperClassName
        }, this.renderSpinnerTools(_objectSpread2({
          arrowColor,
          arrowStyle,
          arrowUpStyle,
          arrowDownStyle,
          spinDirection,
          arrowSize
        }, getArrowClasses(spinDirection, props2))));
      }
    }, {
      key: "renderSpinnerTools",
      value: function renderSpinnerTools(config2) {
        var arrowColor = config2.arrowColor, arrowStyle = config2.arrowStyle, arrowUpStyle = config2.arrowUpStyle, arrowDownStyle = config2.arrowDownStyle, upArrowClass = config2.upArrowClass, downArrowClass = config2.downArrowClass, arrowSize = config2.arrowSize;
        var svgProps = {};
        if (arrowColor) {
          svgProps.fill = arrowColor;
        }
        if (arrowSize) {
          if (Array.isArray(arrowSize)) {
            svgProps.width = arrowSize[0];
            svgProps.height = arrowSize[1];
          } else {
            svgProps.width = arrowSize;
            svgProps.height = arrowSize;
          }
        }
        var arrowEvents = this.getArrowEvents();
        return [_react.default.createElement("span", _objectSpread2(_objectSpread2({
          key: "up"
        }, arrowEvents.upEvents), {}, {
          className: upArrowClass,
          style: _objectSpread2(_objectSpread2({}, arrowStyle), arrowUpStyle)
        }), this.renderArrowUpIcon(svgProps)), _react.default.createElement("span", _objectSpread2(_objectSpread2({
          key: "down"
        }, arrowEvents.downEvents), {}, {
          className: downArrowClass,
          style: _objectSpread2(_objectSpread2({}, arrowStyle), arrowDownStyle)
        }), this.renderArrowDownIcon(svgProps))];
      }
    }, {
      key: "getArrowEvents",
      value: function getArrowEvents() {
        return {
          upEvents: (0, _defineProperty2.default)({}, _eventNames.default.onMouseDown, this.handleArrowDown.bind(this, 1)),
          downEvents: (0, _defineProperty2.default)({}, _eventNames.default.onMouseDown, this.handleArrowDown.bind(this, -1))
        };
      }
    }, {
      key: "handleClearButtonClick",
      value: function handleClearButtonClick(event2) {
        this.setState({
          focused: true
        });
        this.setValue(null);
        this.focus();
      }
    }, {
      key: "handleArrowDown",
      value: function handleArrowDown(shiftStep, event2) {
        var _this2 = this;
        event2.preventDefault();
        var step = this.props.step;
        var target = _hasTouch.default ? event2.target : window;
        var eventName = _hasTouch.default ? "touchend" : "click";
        var onUpEvent = function onUpEvent2() {
          _this2.handleMouseUp();
          target.removeEventListener(eventName, onUpEvent2, true);
        };
        target.addEventListener(eventName, onUpEvent, true);
        var shiftKey = event2.shiftKey;
        var direction2 = shiftStep > 0 ? 1 : -1;
        var spinConfig = {
          step: Math.abs(step)
        };
        this.stepTo(direction2, spinConfig);
        this.handleArrowDownTimeoutId = setTimeout(function() {
          _this2.setState({
            shiftKey,
            spinDirection: direction2
          });
          _this2.startSpin(direction2, spinConfig);
        }, 300);
      }
    }, {
      key: "handleMouseUp",
      value: function handleMouseUp() {
        this.stopSpin();
        this.setState({
          spinDirection: null,
          shiftKey: null
        });
      }
    }, {
      key: "getTransformedStringValues",
      value: function getTransformedStringValues2(value) {
        var _this$p4 = this.p, suffix = _this$p4.suffix, prefix2 = _this$p4.prefix, locale = _this$p4.locale, precision = _this$p4.precision, isControlledPrecision2 = _this$p4.isControlledPrecision, minValue = _this$p4.minValue, maxValue = _this$p4.maxValue;
        return (0, _getTransformedStringValues2.default)(value, {
          locale,
          precision: isControlledPrecision2 && precision,
          min: minValue,
          max: maxValue,
          suffix,
          prefix: prefix2
        });
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(event2) {
        var onFocus3 = this.props.onFocus;
        if (event2.target != this.input) {
          return;
        }
        this.setState({
          focused: true
        });
        if (this.props.inputProps && this.props.inputProps.onFocus) {
          this.props.inputProps.onFocus(event2);
        }
        if (onFocus3) {
          onFocus3(event2);
        }
      }
    }, {
      key: "handleBlur",
      value: function handleBlur(event2) {
        this.setState({
          focused: false
        });
        if (this.isSpinning()) {
          this.stopSpin();
        }
        if (this.state.intermediateValue != null) {
          var value = (0, _clamp.default)(parseFloat(this.state.intermediateValue), this.props.minValue, this.props.maxValue);
          if (!this.props.allowEmpty && (isNaN(value) || value == null)) {
            value = this.props.valueOnEmpty !== void 0 ? this.props.valueOnEmpty : this.props.minValue || 0;
          }
          this.setValue(value);
        }
        if (this.props.inputProps && this.props.inputProps.onBlur) {
          this.props.inputProps.onBlur(event2);
        }
        var onBlur3 = this.props.onBlur;
        if (onBlur3) {
          onBlur3(event2);
        }
      }
    }, {
      key: "handleChange",
      value: function handleChange(event2) {
        event2.stopPropagation();
        if (this.props.inputProps && this.props.inputProps.onChange) {
          this.props.inputProps.onChange(event2);
        }
        var value = event2.target.value;
        this.setValue(value);
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        _ref5.silent;
        if (this.props.allowNegative && value === "-") {
          this.setIntermediateValue(value);
          return;
        }
        if (this.props.allowFloat && value === ".") {
          this.setIntermediateValue(value);
          return;
        }
        if (this.props.allowFloat && this.props.allowNegative && value === "-.") {
          this.setIntermediateValue(value);
          return;
        }
        var parseResult = parseFloat(value);
        var parsedValue = isNaN(parseResult) ? null : (0, _clamp.default)(parseResult, this.props.minValue, this.props.maxValue);
        var isSameRepresentation = parsedValue === null || "".concat(value) === parsedValue.toString();
        if (!this.props.allowEmpty && parsedValue === null) {
          this.setIntermediateValue(value || "");
          return;
        }
        if (isSameRepresentation) {
          this.setIntermediateValue(null);
          this.onChange(parsedValue);
        } else {
          this.setIntermediateValue(value);
        }
      }
    }, {
      key: "setIntermediateValue",
      value: function setIntermediateValue(intermediateValue, callback2) {
        if (intermediateValue === this.state.intermediateValue) {
          return;
        }
        this.setState({
          intermediateValue
        });
      }
    }, {
      key: "onChange",
      value: function onChange(value) {
        if (!isControlled(this.props)) {
          this.setState({
            value
          });
        }
        var allowNegative = this.props.allowNegative;
        var isPositive = checkPositive(value, {
          allowNegative
        });
        if (!allowNegative && !isPositive) {
          return;
        }
        if (this.props.onChange) {
          this.props.onChange(value);
        }
      }
    }, {
      key: "handleBackspaceKeyDown",
      value: function handleBackspaceKeyDown(event2) {
        var _this3 = this;
        var _this$p5 = this.p, isControlledPrecision2 = _this$p5.isControlledPrecision, currentValue = _this$p5.currentValue, decimalDelimiter = _this$p5.decimalDelimiter;
        if (isControlledPrecision2) {
          var currentSelection = (0, _getSelectionRange.default)(this.input);
          var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
          if (currentSelection.end - 1 > decimalPosition) {
            this.backspaceOnControlledPrecision = true;
          }
          if (currentSelection.end - 1 === decimalPosition) {
            (0, _raf.default)(function() {
              (0, _setCaretPosition.default)(_this3.input, currentSelection.end - 1);
            });
            event2.preventDefault();
            event2.stopPropagation();
          }
        }
      }
    }, {
      key: "handleDigitKeyDown",
      value: function handleDigitKeyDown() {
        var _this$p6 = this.p, isControlledPrecision2 = _this$p6.isControlledPrecision, currentValue = _this$p6.currentValue, decimalDelimiter = _this$p6.decimalDelimiter;
        if (isControlledPrecision2) {
          var currentSelection = (0, _getSelectionRange.default)(this.input);
          var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
          if (currentSelection.end > decimalPosition) {
            this.digitInputOnControlledPrecision = currentSelection.end > decimalPosition;
          }
        }
      }
    }, {
      key: "handleDecimalDelimiterKeyDown",
      value: function handleDecimalDelimiterKeyDown(event2) {
        var _this$p7 = this.p, allowFloat = _this$p7.allowFloat, value = _this$p7.value;
        if (!allowFloat) {
          event2.preventDefault();
          return;
        }
        var selectedText = this.getSelectedText();
        if (selectedText == ".") {
          return;
        }
        if (isFloatString(selectedText)) {
          return;
        }
        if (isFloatString(value)) {
          event2.preventDefault();
          return;
        }
      }
    }, {
      key: "getSelectedText",
      value: function getSelectedText() {
        var _getSelectedRange = (0, _getSelectionRange.default)(this.input), start = _getSelectedRange.start, end = _getSelectedRange.end;
        var value = "".concat(this.getValue());
        return value.substring(start, end);
      }
    }, {
      key: "handleSelectionOverDecimalDelimiter",
      value: function handleSelectionOverDecimalDelimiter(event2, currentSelection) {
        var _this$p8 = this.p;
        _this$p8.decimalDelimiter;
        var currentValue = _this$p8.currentValue;
        _this$p8.isControlledPrecision;
        var prefix2 = _this$p8.prefix, suffix = _this$p8.suffix;
        currentSelection = currentSelection || (0, _getSelectionRange.default)(this.input);
        var selectionStartsAtBeginningOfNumber = currentSelection.start === 0;
        if (prefix2) {
          selectionStartsAtBeginningOfNumber = currentSelection.start <= prefix2.length + 1;
        }
        var selectionEndsAtEndOfNumber = currentSelection.end === currentValue.length;
        if (suffix) {
          selectionEndsAtEndOfNumber = currentSelection.end >= suffix.length + 1;
        }
        if (selectionStartsAtBeginningOfNumber && selectionEndsAtEndOfNumber) {
          return;
        }
      }
    }, {
      key: "handleKeyUp",
      value: function handleKeyUp(event2) {
        var key = event2.key;
        if (this.props.inputProps && this.props.inputProps.onKeyUp) {
          this.props.inputProps.onKeyUp(event2);
        }
        var name = "handle".concat(toUpperFirst2(key), "KeyUp");
        if (this[name]) {
          this[name](event2);
        }
      }
    }, {
      key: "handleKeyDown",
      value: function handleKeyDown(event2) {
        var key = event2.key;
        var _this$p9 = this.p, decimalDelimiter = _this$p9.decimalDelimiter, decimalDelimiterPosition = _this$p9.decimalDelimiterPosition;
        if (this.props.inputProps && this.props.inputProps.onKeyDown) {
          this.props.inputProps.onKeyDown(event2);
        }
        if (this.props.onKeyDown) {
          this.props.onKeyDown(event2);
        }
        if (!key) {
          return;
        }
        var currentSelection = (0, _getSelectionRange.default)(this.input);
        if (selectionContainsPosition(currentSelection, decimalDelimiterPosition)) {
          this.handleSelectionOverDecimalDelimiter(event2, currentSelection);
        }
        if (key.match(/[0-9]/)) {
          this.handleDigitKeyDown(event2);
          return;
        }
        if (key === decimalDelimiter) {
          this.handleDecimalDelimiterKeyDown(event2);
          return;
        }
        if (key === "-") {
          var caretPos = this.getSelectionStart();
          if (!this.props.allowNegative || caretPos) {
            event2.preventDefault();
          }
          return;
        }
        var isPrintableCharacter = key.length == 1;
        if (isPrintableCharacter && !(event2.metaKey || event2.ctrlKey)) {
          event2.preventDefault();
        }
        var name = "handle".concat(toUpperFirst2(key), "KeyDown");
        if (this[name]) {
          this[name](event2);
        }
      }
    }, {
      key: "handleArrowDownKeyDown",
      value: function handleArrowDownKeyDown(event2) {
        this.handleArrowKeySpin(-1, event2);
      }
    }, {
      key: "handleArrowUpKeyDown",
      value: function handleArrowUpKeyDown(event2) {
        this.handleArrowKeySpin(1, event2);
      }
    }, {
      key: "handleArrowKeySpin",
      value: function handleArrowKeySpin(direction2, event2) {
        var _this4 = this;
        if (this.isSpinning()) {
          event2.preventDefault();
          event2.stopPropagation();
          return;
        }
        if (this.props.spinOnArrowKeys) {
          event2.preventDefault();
          event2.stopPropagation();
          if (!this.isSpinning()) {
            var config2 = {
              shiftKey: event2.shiftKey,
              event: event2
            };
            this.stepTo(direction2, config2);
            this.spinTimeoutId = setTimeout(function() {
              _this4.startSpin(direction2, config2);
            }, 120);
          }
        }
      }
    }, {
      key: "handleArrowUpKeyUp",
      value: function handleArrowUpKeyUp() {
        this.onSpinKeyUp();
      }
    }, {
      key: "handleArrowDownKeyUp",
      value: function handleArrowDownKeyUp() {
        this.onSpinKeyUp();
      }
    }, {
      key: "onSpinKeyUp",
      value: function onSpinKeyUp() {
        this.props.spinOnArrowKeys && this.stopSpin();
      }
    }, {
      key: "getInput",
      value: function getInput() {
        return this.input;
      }
    }, {
      key: "getNumericValue",
      value: function getNumericValue() {
        return this.p.numericValue;
      }
    }, {
      key: "getValue",
      value: function getValue() {
        return this.p.value;
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return !!this.state.focused;
      }
    }, {
      key: "getStepValue",
      value: function getStepValue(props2, direction2, config2) {
        config2 = config2 || {};
        var value = this.p.value;
        var stepValue = config2.step || props2.step;
        if (this.state.shiftKey || config2.shiftKey && props2.shiftStep) {
          stepValue = props2.shiftStep;
        }
        var theValue = isNumeric(this.p.value) ? value * 1 + direction2 * stepValue : this.props.initialStep || 0;
        return (0, _clamp.default)(Math.round(theValue * 1e3) / 1e3, this.props.minValue, this.props.maxValue);
      }
    }, {
      key: "stepTo",
      value: function stepTo(direction2, config2) {
        config2 = config2 || {};
        this.stepToTriggered = true;
        var props2 = this.props;
        var step = config2.step || props2.step;
        var allowNegative = props2.allowNegative;
        if (step != null) {
          var stepFn = typeof props2.stepFn === "function" ? props2.stepFn : this.getStepValue;
          var value = stepFn(props2, direction2, config2);
          var isPositive = checkPositive(value, {
            allowNegative
          });
          if (!allowNegative && !isPositive) {
            return;
          }
          this.spinValue = value;
          if (config2.triggerChangeOnSpin) {
            if (props2.triggerChangeOnSpinDelay > 0) {
              this.setIntermediateValue(value);
            }
            this.setValueOnSpin(value);
          } else {
            this.setIntermediateValue(value);
          }
        }
      }
    }, {
      key: "setValueOnSpin",
      value: function setValueOnSpin(value) {
        this.setValue(value);
      }
    }, {
      key: "stopSpin",
      value: function stopSpin() {
        clearTimeout(this.spinTimeoutId);
        clearTimeout(this.handleArrowDownTimeoutId);
        clearInterval(this.spinIntervalId);
        this.setValue(this.spinValue);
        this.handleArrowDownTimeoutId = null;
        this.spinTimeoutId = null;
        this.spinIntervalId = null;
      }
    }, {
      key: "startSpin",
      value: function startSpin(direction2, config2) {
        if (this.spinIntervalId) {
          clearInterval(this.spinIntervalId);
        }
        this.stepToTriggered = false;
        this.spinValue = this.getValue();
        var stepTo = this.stepTo.bind(this, direction2, _objectSpread2({
          triggerChangeOnSpin: this.props.triggerChangeOnSpin
        }, config2));
        this.spinIntervalId = setInterval(stepTo, this.props.stepDelay);
      }
    }, {
      key: "isSpinning",
      value: function isSpinning() {
        return this.spinIntervalId != null;
      }
    }, {
      key: "handleWheel",
      value: function handleWheel(event2) {
        var props2 = this.props;
        if ((props2.requireFocusOnStep && this.isFocused() || !props2.requireFocusOnStep) && props2.stepOnWheel && props2.step) {
          event2.preventDefault();
          var nativeEvent = event2.nativeEvent;
          var y2 = nativeEvent.wheelDeltaY || nativeEvent.wheelDelta || -nativeEvent.deltaY;
          y2 = y2 < 0 ? -1 : 1;
          this.stepTo(y2, {
            shiftKey: event2.shiftKey,
            event: event2
          });
        }
      }
    }, {
      key: "focus",
      value: function focus() {
        this.input.focus();
      }
    }, {
      key: "getSelectionStart",
      value: function getSelectionStart2() {
        return (0, _getSelectionStart2.default)(this.input);
      }
    }, {
      key: "getProps",
      value: function getProps(props2, state2) {
        props2 = props2 || this.props;
        state2 = state2 || this.state;
        var suffix = getSuffix(props2);
        var prefix2 = getPrefix(props2);
        var currentValue = getCurrentValue(_objectSpread2(_objectSpread2({}, props2), {}, {
          suffix,
          prefix: prefix2
        }), state2);
        var decimalDelimiter = (0, _getDecimalDelimiter.default)(props2.locale);
        var decimalDelimiterPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
        var className = (0, _join.default)(props2.rootClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), "".concat(props2.rootClassName, "--").concat(props2.rtl ? "rtl" : "ltr"), props2.disabled && "".concat(props2.rootClassName, "--disabled"), state2.focused && "".concat(props2.rootClassName, "--focused"), props2.enableSpinnerTools && "".concat(props2.rootClassName, "--enable-spinner-tools"), props2.enableClearButton && "".concat(props2.rootClassName, "--enable-clear-button"), props2.className);
        var controlled = isControlled(props2);
        var value = controlled ? props2.value : state2.value;
        if (state2.intermediateValue !== null) {
          value = state2.intermediateValue;
        }
        var numericValue = Number(value);
        var p2 = _objectSpread2(_objectSpread2({}, props2), {}, {
          className,
          isControlled: controlled,
          isControlledPrecision: isControlledPrecision(props2),
          value,
          numericValue,
          currentValue,
          suffix,
          prefix: prefix2,
          decimalDelimiter,
          decimalDelimiterPosition
        });
        p2.formattedValue = getFormatedValue(value, p2);
        return p2;
      }
    }]);
    return InovuaNumericInput2;
  }(_react.Component);
  InovuaNumericInput.defaultProps = {
    rootClassName: "inovua-react-toolkit-numeric-input",
    spinOnArrowKeys: true,
    numbersOnly: true,
    step: 1,
    shiftStep: 10,
    requireFocusOnStep: true,
    stepOnWheel: true,
    allowNegative: true,
    allowFloat: true,
    triggerChangeOnSpin: true,
    triggerChangeOnSpinDelay: 80,
    stepDelay: 60,
    prefix: "",
    suffix: "",
    theme: "default-light",
    format: "number",
    currencyPosition: "end",
    enableSpinnerTools: true,
    enableClearButton: true,
    acceptClearToolFocus: false,
    allowEmpty: true,
    toolPosition: "end",
    arrowSize: 10,
    clearButtonSize: 10,
    inputProps: {}
  };
  InovuaNumericInput.propTypes = {
    rootClassName: _propTypes.default.string,
    stepDelay: _propTypes.default.number,
    step: _propTypes.default.number,
    initialStep: _propTypes.default.number,
    valueOnEmpty: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    minValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    maxValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    onChange: _propTypes.default.func,
    triggerChangeOnSpin: _propTypes.default.bool,
    allowEmpty: _propTypes.default.bool,
    allowFloat: _propTypes.default.bool,
    requireFocusOnStep: _propTypes.default.bool,
    spinOnArrowKeys: _propTypes.default.bool,
    numbersOnly: _propTypes.default.bool,
    shiftStep: _propTypes.default.number,
    stepOnWheel: _propTypes.default.bool,
    allowNegative: _propTypes.default.bool,
    precision: _propTypes.default.number,
    format: _propTypes.default.oneOf(["currency", "number", "percentage"]),
    locale: _propTypes.default.string,
    prefix: _propTypes.default.string,
    suffix: _propTypes.default.string,
    theme: _propTypes.default.string,
    arrowColor: _propTypes.default.string,
    arrowStyle: _propTypes.default.object,
    currencySymbol: _propTypes.default.string,
    currencyPosition: _propTypes.default.oneOf(["start", "end"]),
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    wrapperProps: _propTypes.default.object,
    disabled: _propTypes.default.bool,
    acceptClearToolFocus: _propTypes.default.bool,
    renderClearIcon: _propTypes.default.func,
    clearButtonSize: _propTypes.default.number,
    clearButtonColor: _propTypes.default.string,
    clearButtonStyle: _propTypes.default.object,
    clearButtonClassName: _propTypes.default.string,
    enableSpinnerTools: _propTypes.default.bool,
    enableClearButton: _propTypes.default.bool,
    toolPosition: _propTypes.default.oneOf(["start", "end"]),
    arrowSize: _propTypes.default.number,
    arrowDownStyle: _propTypes.default.object,
    arrowUpStyle: _propTypes.default.object,
    inputProps: _propTypes.default.object,
    rtl: _propTypes.default.bool
  };
  globalObject.isNumeric = isNumeric;
  var _default2 = InovuaNumericInput;
  NumberInput.default = _default2;
  return NumberInput;
}
var hasRequiredSrc$k;
function requireSrc$k() {
  if (hasRequiredSrc$k)
    return src$j;
  hasRequiredSrc$k = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$j, "__esModule", {
    value: true
  });
  src$j.default = void 0;
  var _NumberInput = _interopRequireDefault2(requireNumberInput());
  var _default2 = _NumberInput.default;
  src$j.default = _default2;
  return src$j;
}
var hasRequiredNumericInput;
function requireNumericInput() {
  if (hasRequiredNumericInput)
    return NumericInput;
  hasRequiredNumericInput = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(NumericInput, "__esModule", {
    value: true
  });
  NumericInput.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$k());
  var _default2 = _src.default;
  NumericInput.default = _default2;
  return NumericInput;
}
var ComboBox$1 = {};
var src$i = {};
var ComboBox = {};
var NotifyResize = {};
var reactNotifyResize = {};
var hasRequiredReactNotifyResize;
function requireReactNotifyResize() {
  if (hasRequiredReactNotifyResize)
    return reactNotifyResize;
  hasRequiredReactNotifyResize = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _src = _interopRequireWildcard(requireSrc$l());
    Object.keys(_src).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _src[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get2() {
          return _src[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _src.default;
    exports.default = _default2;
  })(reactNotifyResize);
  return reactNotifyResize;
}
var hasRequiredNotifyResize;
function requireNotifyResize() {
  if (hasRequiredNotifyResize)
    return NotifyResize;
  hasRequiredNotifyResize = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NotifyResize", {
      enumerable: true,
      get: function get2() {
        return _reactNotifyResize.NotifyResize;
      }
    });
    exports.default = void 0;
    var _reactNotifyResize = _interopRequireWildcard(requireReactNotifyResize());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _reactNotifyResize.default;
    exports.default = _default2;
  })(NotifyResize);
  return NotifyResize;
}
var throttle$2 = {};
var hasRequiredThrottle$1;
function requireThrottle$1() {
  if (hasRequiredThrottle$1)
    return throttle$2;
  hasRequiredThrottle$1 = 1;
  Object.defineProperty(throttle$2, "__esModule", {
    value: true
  });
  throttle$2.default = void 0;
  function throttle2(func, wait) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var context2;
    var args;
    var result;
    var timeout = null;
    var previous = 0;
    var later = function later2() {
      previous = options.leading === false ? 0 : Date.now();
      timeout = null;
      result = func.apply(context2, args);
      if (!timeout) {
        context2 = null;
        args = null;
      }
    };
    return function() {
      var now2 = Date.now();
      if (!previous && options.leading === false) {
        previous = now2;
      }
      var remaining = wait - (now2 - previous);
      context2 = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now2;
        result = func.apply(context2, args);
        if (!timeout)
          context2 = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  }
  var _default2 = throttle2;
  throttle$2.default = _default2;
  return throttle$2;
}
var containsNode = {};
var hasRequiredContainsNode;
function requireContainsNode() {
  if (hasRequiredContainsNode)
    return containsNode;
  hasRequiredContainsNode = 1;
  Object.defineProperty(containsNode, "__esModule", {
    value: true
  });
  containsNode.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  function containsNode$1(parent, child) {
    if (!parent || !child || !(parent instanceof Element) || !(child instanceof Element)) {
      return false;
    }
    if (!globalObject.document.body.contains(child)) {
      return false;
    }
    var result = true;
    if (parent !== child && !parent.contains(child)) {
      result = false;
    }
    return result;
  }
  var _default2 = containsNode$1;
  containsNode.default = _default2;
  return containsNode;
}
var TextInput$1 = {};
var getSelectionStart = {};
var hasRequiredGetSelectionStart;
function requireGetSelectionStart() {
  if (hasRequiredGetSelectionStart)
    return getSelectionStart;
  hasRequiredGetSelectionStart = 1;
  Object.defineProperty(getSelectionStart, "__esModule", {
    value: true
  });
  getSelectionStart.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  function getSelectionStart$12(input) {
    if (!input) {
      return null;
    }
    if (input.createTextRange && !globalObject.getSelection) {
      var document2 = globalObject.document;
      var range2 = document2.selection.createRange().duplicate();
      range2.moveEnd("character", input.value.length);
      if (range2.text == "") {
        return input.value.length;
      }
      return input.value.lastIndexOf(range2.text);
    }
    return input.selectionStart;
  }
  var _default2 = getSelectionStart$12;
  getSelectionStart.default = _default2;
  return getSelectionStart;
}
var getSelectionEnd = {};
var hasRequiredGetSelectionEnd;
function requireGetSelectionEnd() {
  if (hasRequiredGetSelectionEnd)
    return getSelectionEnd;
  hasRequiredGetSelectionEnd = 1;
  Object.defineProperty(getSelectionEnd, "__esModule", {
    value: true
  });
  getSelectionEnd.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  function getSelectionEnd$12(input) {
    if (!input) {
      return null;
    }
    var document2 = globalObject.document;
    if (input.createTextRange && !globalObject.getSelection) {
      var range2 = document2.selection.crangeeateRange().duplicate();
      range2.moveStart("character", -input.value.length);
      return range2.text.length;
    }
    return input.selectionEnd;
  }
  var _default2 = getSelectionEnd$12;
  getSelectionEnd.default = _default2;
  return getSelectionEnd;
}
var setInputSelection = {};
var hasRequiredSetInputSelection;
function requireSetInputSelection() {
  if (hasRequiredSetInputSelection)
    return setInputSelection;
  hasRequiredSetInputSelection = 1;
  Object.defineProperty(setInputSelection, "__esModule", {
    value: true
  });
  setInputSelection.default = void 0;
  function setInputSelection$1(input, startPos, endPos) {
    if (input.selectionStart !== void 0) {
      input.selectionStart = startPos;
      input.selectionEnd = endPos;
    } else if (document.selection && document.selection.createRange) {
      input.select();
      var range2 = document.selection.createRange();
      range2.collapse(true);
      range2.moveEnd("character", endPos);
      range2.moveStart("character", startPos);
      range2.select();
    }
  }
  var _default2 = setInputSelection$1;
  setInputSelection.default = _default2;
  return setInputSelection;
}
var getCursorPosition = {};
var hasRequiredGetCursorPosition;
function requireGetCursorPosition() {
  if (hasRequiredGetCursorPosition)
    return getCursorPosition;
  hasRequiredGetCursorPosition = 1;
  Object.defineProperty(getCursorPosition, "__esModule", {
    value: true
  });
  getCursorPosition.default = void 0;
  function getCursorPosition$1(field) {
    var cursorPosition = 0;
    if (document.selection) {
      field.focus();
      var oSel = document.selection.createRange();
      oSel.moveStart("character", -field.value.length);
      cursorPosition = oSel.text.length;
    } else if (field.selectionStart || field.selectionStart == "0") {
      cursorPosition = field.selectionStart;
    }
    return cursorPosition;
  }
  var _default2 = getCursorPosition$1;
  getCursorPosition.default = _default2;
  return getCursorPosition;
}
var hasRequiredTextInput$1;
function requireTextInput$1() {
  if (hasRequiredTextInput$1)
    return TextInput$1;
  hasRequiredTextInput$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(TextInput$1, "__esModule", {
    value: true
  });
  TextInput$1.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _getSelectionStart2 = _interopRequireDefault2(requireGetSelectionStart());
  var _getSelectionEnd2 = _interopRequireDefault2(requireGetSelectionEnd());
  var _setInputSelection = _interopRequireDefault2(requireSetInputSelection());
  var _throttle = _interopRequireDefault2(requireThrottle$1());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _getCursorPosition = _interopRequireDefault2(requireGetCursorPosition());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var TextInput2 = function(_Component) {
    (0, _inherits2.default)(TextInput3, _Component);
    var _super = _createSuper(TextInput3);
    function TextInput3(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, TextInput3);
      _this = _super.call(this, props2);
      _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2.default)(_this));
      _this.updateValue = _this.updateValue.bind((0, _assertThisInitialized2.default)(_this));
      if (props2.throttle) {
        _this.updateThrottledUpdateValue(props2.throttle);
      }
      _this.state = {
        value: props2.value
      };
      return _this;
    }
    (0, _createClass2.default)(TextInput3, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;
        var previousValue = prevProps.value || "";
        var currentValue = this.props.value || "";
        if (previousValue != currentValue) {
          clearTimeout(this.suggestionTimeOut);
        }
        if (this.props.suggestion && this.props.suggestion !== currentValue && this.props.autocomplete && currentValue !== previousValue && currentValue.length > previousValue.length) {
          this.suggestionTimeOut = setTimeout(function() {
            _this2.selectForwardIfNecessary();
          }, this.props.autocompleteDelay);
        }
        if (this.props.throttle && prevProps.value !== this.props.value) {
          this.setState({
            value: this.props.value
          });
        }
        if (prevProps.throttle !== this.props.throttle) {
          this.updateThrottledUpdateValue(this.props.throttle);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.suggestionTimeOut) {
          clearTimeout(this.suggestionTimeOut);
          this.suggestionTimeOut = null;
        }
      }
    }, {
      key: "updateThrottledUpdateValue",
      value: function updateThrottledUpdateValue(throttleDelay) {
        this.throttledUpdateValue = (0, _throttle.default)(this.updateValue, throttleDelay, {
          trailing: true,
          leading: false
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        var _this$props = this.props, rootClassName = _this$props.rootClassName, onClick = _this$props.onClick, maxWidth = _this$props.maxWidth, visible = _this$props.visible, searchable = _this$props.searchable;
        var className = (0, _join.default)("".concat(rootClassName, "__wrapper"), this.props.className, !visible && "".concat(rootClassName, "__wrapper--invisible"), !searchable && "".concat(rootClassName, "__wrapper--non-searchable"));
        var value = this.getValue() || "";
        var valueLength = value != null && value.length;
        var size2 = valueLength ? valueLength + 1 : 1;
        var inputStyle = {};
        if (size2 === 1 && valueLength === 0) {
          inputStyle.width = 1;
        }
        if (maxWidth) {
          inputStyle.maxWidth = maxWidth;
        }
        return _react.default.createElement("span", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(this.props, TextInput3.propTypes)), {}, {
          onClick,
          className
        }), _react.default.createElement("input", {
          style: inputStyle,
          className: rootClassName,
          ref: function ref(_ref2) {
            return _this3.inputNode = _ref2;
          },
          type: "text",
          value: value || "",
          onChange: this.handleChange,
          onClick: this.onClick,
          tabIndex: this.props.tabIndex,
          onMouseDown: this.handleMouseDown,
          size: size2
        }), !value && this.renderPlaceholder());
      }
    }, {
      key: "renderPlaceholder",
      value: function renderPlaceholder() {
        var _this4 = this;
        if (!this.props.placeholder) {
          return null;
        }
        var placeholderProps = {
          className: "".concat(this.props.rootClassName, "__placeholder")
        };
        return _react.default.createElement("span", _objectSpread2(_objectSpread2({}, placeholderProps), {}, {
          ref: function ref(_ref2) {
            return _this4.placeholderNode = _ref2;
          }
        }), this.props.placeholder);
      }
    }, {
      key: "getValue",
      value: function getValue() {
        var value = this.props.throttle ? this.state.value : this.props.value;
        return value;
      }
    }, {
      key: "focus",
      value: function focus() {
        if (this.inputNode && this.inputNode.focus) {
          this.inputNode.focus();
        }
      }
    }, {
      key: "blur",
      value: function blur2() {
        if (this.inputNode && this.inputNode.blur) {
          this.inputNode.blur();
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        var activeElement = globalObject && globalObject.document && globalObject.document.activeElement;
        return this.inputNode === activeElement;
      }
    }, {
      key: "handleChange",
      value: function handleChange(event2) {
        var value = event2.target.value;
        if (this.props.throttle) {
          this.setState({
            value
          });
          this.throttledUpdateValue(value);
        } else {
          this.updateValue(value);
        }
      }
    }, {
      key: "handleMouseDown",
      value: function handleMouseDown(event2) {
        event2.stopPropagation();
      }
    }, {
      key: "onClick",
      value: function onClick(event2) {
        event2.stopPropagation();
      }
    }, {
      key: "updateValue",
      value: function updateValue(value) {
        this.props.onChange(value);
      }
    }, {
      key: "selectForwardIfNecessary",
      value: function selectForwardIfNecessary() {
        var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props.value;
        if (!value || typeof value !== "string") {
          return null;
        }
        var suggestion = this.props.suggestion;
        if (typeof suggestion !== "string") {
          return null;
        }
        if (suggestion.toLowerCase().indexOf(value.toLowerCase()) === -1) {
          return null;
        }
        var firstPartLength = value.length;
        var inputNode = this.inputNode;
        this.inputNode.value = suggestion;
        this.inputNode.size = this.inputNode.value.length;
        this.inputNode.style.width = "auto";
        (0, _setInputSelection.default)(inputNode, firstPartLength, suggestion.length);
        return true;
      }
    }, {
      key: "getSelectionStart",
      value: function getSelectionStart2() {
        return (0, _getSelectionStart2.default)(this.inputNode);
      }
    }, {
      key: "getSelectionEnd",
      value: function getSelectionEnd2() {
        return (0, _getSelectionEnd2.default)(this.inputNode);
      }
    }, {
      key: "hasSelection",
      value: function hasSelection() {
        return this.getSelectionStart() !== this.getSelectionEnd();
      }
    }, {
      key: "isCursorAtStartPosition",
      value: function isCursorAtStartPosition() {
        return this.getSelectionStart() === 0;
      }
    }, {
      key: "isCursorAtEndPosition",
      value: function isCursorAtEndPosition() {
        var cursorLastPissiblePosition = this.props.value && this.props.value.length;
        return (0, _getCursorPosition.default)(this.inputNode) === cursorLastPissiblePosition;
      }
    }]);
    return TextInput3;
  }(_react.Component);
  function emptyFn() {
  }
  TextInput2.defaultProps = {
    onChange: emptyFn,
    value: "",
    autocomplete: true
  };
  TextInput2.propTypes = {
    rootClassName: _propTypes.default.string,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.arrayOf(_propTypes.default.number)]),
    placeholder: _propTypes.default.node,
    onChange: _propTypes.default.func,
    maxWidth: _propTypes.default.number,
    throttle: _propTypes.default.number,
    tabIndex: _propTypes.default.number,
    autocomplete: _propTypes.default.bool,
    autocompleteDelay: _propTypes.default.number,
    visible: _propTypes.default.bool,
    suggestion: _propTypes.default.any,
    searchable: _propTypes.default.bool
  };
  var _default2 = TextInput2;
  TextInput$1.default = _default2;
  return TextInput$1;
}
var Value = {};
var join$2 = {};
var hasRequiredJoin$2;
function requireJoin$2() {
  if (hasRequiredJoin$2)
    return join$2;
  hasRequiredJoin$2 = 1;
  Object.defineProperty(join$2, "__esModule", {
    value: true
  });
  join$2.default = _default2;
  var notEmpty = function notEmpty2(x2) {
    return !!x2;
  };
  function _default2() {
    return [].slice.call(arguments).filter(notEmpty).join(" ");
  }
  return join$2;
}
var Tag = {};
var getMinMaxSize$2 = {};
var hasRequiredGetMinMaxSize$2;
function requireGetMinMaxSize$2() {
  if (hasRequiredGetMinMaxSize$2)
    return getMinMaxSize$2;
  hasRequiredGetMinMaxSize$2 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getMinMaxSize$2, "__esModule", {
    value: true
  });
  getMinMaxSize$2.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  function getMinMaxSize2(props2) {
    var sizeType;
    var single;
    var style = props2.style || {};
    var result = {};
    if (props2.minSize) {
      sizeType = (0, _typeof2.default)(props2.minSize);
      single = sizeType == "number" || sizeType == "string";
      if (single) {
        result.minWidth = props2.minSize;
        result.minHeight = props2.minSize;
      } else {
        if (props2.minSize.width) {
          result.minWidth = props2.minSize.width;
        }
        if (props2.minSize.height) {
          result.minHeight = props2.minSize.height;
        }
      }
    }
    if (props2.maxSize) {
      sizeType = (0, _typeof2.default)(props2.maxSize);
      single = sizeType == "number" || sizeType == "string";
      if (single) {
        result.maxWidth = props2.maxSize;
        result.maxHeight = props2.maxSize;
      } else {
        if (props2.maxSize.width) {
          result.maxWidth = props2.maxSize.width;
        }
        if (props2.maxSize.height) {
          result.maxHeight = props2.maxSize.height;
        }
      }
    }
    if (result.minWidth == void 0 && style.minWidth != void 0) {
      result.minWidth = style.minWidth;
    }
    if (result.maxWidth == void 0 && style.maxWidth != void 0) {
      result.maxWidth = style.maxWidth;
    }
    if (result.minHeight == void 0 && style.minHeight != void 0) {
      result.minHeight = style.minHeight;
    }
    if (result.maxHeight == void 0 && style.maxHeight != void 0) {
      result.maxHeight = style.maxHeight;
    }
    return result;
  }
  var _default2 = getMinMaxSize2;
  getMinMaxSize$2.default = _default2;
  return getMinMaxSize$2;
}
var Icons = {};
var hasRequiredIcons$1;
function requireIcons$1() {
  if (hasRequiredIcons$1)
    return Icons;
  hasRequiredIcons$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Icons, "__esModule", {
    value: true
  });
  Icons.CloseIcon = CloseIcon2;
  Icons.LoadingIcon = LoadingIcon;
  Icons.ToggleIcon = ToggleIcon2;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _objectWithoutProperties2 = _interopRequireDefault2(requireObjectWithoutProperties());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _excluded2 = ["size", "className", "svgProps"], _excluded22 = ["onClick", "className", "expanded", "size"], _excluded3 = ["size", "svgProps", "className"];
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function CloseIcon2(_ref2) {
    var _ref$size = _ref2.size, size2 = _ref$size === void 0 ? 10 : _ref$size, className = _ref2.className, svgProps = _ref2.svgProps, rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, rest), {}, {
      className
    }), _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, svgProps), {}, {
      width: size2,
      height: size2,
      viewBox: "0 0 10 10"
    }), _react.default.createElement("path", {
      fill: "none",
      fillRule: "evenodd",
      strokeLinecap: "round",
      strokeWidth: "1.33",
      d: "M1 1l8 8m0-8L1 9"
    })));
  }
  CloseIcon2.propTypes = {
    className: _propTypes.default.string,
    size: _propTypes.default.number
  };
  function ToggleIcon2(_ref2) {
    var onClick = _ref2.onClick, className = _ref2.className, expanded = _ref2.expanded, _ref2$size = _ref2.size, size2 = _ref2$size === void 0 ? 10 : _ref2$size, rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded22);
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, rest), {}, {
      className,
      onClick
    }), _react.default.createElement("svg", {
      width: size2,
      height: size2 / 2,
      viewBox: "0 0 10 5"
    }, expanded ? _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
    }) : _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
    })));
  }
  function LoadingIcon(_ref3) {
    var _ref3$size = _ref3.size, size2 = _ref3$size === void 0 ? 17 : _ref3$size, _ref3$svgProps = _ref3.svgProps, svgProps = _ref3$svgProps === void 0 ? {} : _ref3$svgProps, className = _ref3.className, rest = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, rest), {}, {
      className
    }), _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, svgProps), {}, {
      width: size2,
      height: size2,
      viewBox: "0 0 24 24"
    }), _react.default.createElement("path", {
      d: "M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"
    })));
  }
  LoadingIcon.propTypes = {
    size: _propTypes.default.number
  };
  return Icons;
}
var hasRequiredTag;
function requireTag() {
  if (hasRequiredTag)
    return Tag;
  hasRequiredTag = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof3 = require_typeof();
  Object.defineProperty(Tag, "__esModule", {
    value: true
  });
  Tag.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _join = _interopRequireDefault2(requireJoin$2());
  var _getMinMaxSize = _interopRequireDefault2(requireGetMinMaxSize$2());
  var _Icons = requireIcons$1();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var Tag$1 = function(_Component) {
    (0, _inherits2.default)(Tag2, _Component);
    var _super = _createSuper(Tag2);
    function Tag2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, Tag2);
      _this = _super.call(this, props2);
      _this.handleOnClose = _this.handleOnClose.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleOnMultipleClose = _this.handleOnMultipleClose.bind((0, _assertThisInitialized2.default)(_this));
      return _this;
    }
    (0, _createClass2.default)(Tag2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var item = props2.item, index2 = props2.index, items = props2.items, rootClassName = props2.rootClassName, closeIconPosition = props2.closeIconPosition, _onClick = props2.onClick, active = props2.active;
        props2.multiple;
        var renderTag = props2.renderTag, isMultiple = props2.isMultiple;
        var className = this.getClassName({
          active
        });
        var labelClassName = "".concat(rootClassName, "__label");
        var style = this.getStyle();
        var closeIcon = this.renderCloseIcon();
        var label = this.renderLabel();
        var domProps = _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, Tag2.propTypes)), {}, {
          key: "tag_".concat(index2),
          style,
          className,
          onMouseDown: function onMouseDown(event2) {
            event2.preventDefault();
          },
          onClick: function onClick(event2) {
            event2.stopPropagation();
            _onClick(item.id);
          },
          children: [closeIconPosition === "start" && closeIcon, _react.default.createElement("span", {
            key: "tag_label",
            className: labelClassName
          }, label), closeIconPosition === "end" && closeIcon]
        });
        var result;
        if (typeof renderTag === "function") {
          result = renderTag({
            domProps,
            item,
            index: index2,
            items,
            isMultiple,
            props: props2
          });
        }
        if (result === void 0) {
          return _react.default.createElement("div", _objectSpread2({}, domProps));
        }
        return result || null;
      }
    }, {
      key: "getClassName",
      value: function getClassName2(_ref2) {
        var active = _ref2.active;
        var _this$props = this.props, rootClassName = _this$props.rootClassName, ellipsis = _this$props.ellipsis, isMultiple = _this$props.isMultiple;
        var className = (0, _join.default)(rootClassName, active && "".concat(rootClassName, "--active"), ellipsis && "".concat(rootClassName, "--ellipsis"), isMultiple && "".concat(rootClassName, "--multiple"));
        return className;
      }
    }, {
      key: "getStyle",
      value: function getStyle2() {
        var props2 = this.props;
        var border2 = props2.border, padding = props2.padding, height = props2.height, width = props2.width, maxWidth = props2.maxWidth, activeStyle = props2.activeStyle, active = props2.active;
        var minMaxSize = (0, _getMinMaxSize.default)(props2);
        var style = _objectSpread2(_objectSpread2({}, props2.style), minMaxSize);
        if (border2) {
          style.border = border2;
        }
        if (padding) {
          style.padding = padding;
        }
        if (width) {
          style.width = width;
        }
        if (height) {
          style.height = height;
        }
        if (maxWidth) {
          style.maxWidth = maxWidth;
        }
        if (active && activeStyle) {
          style = _objectSpread2(_objectSpread2({}, style), activeStyle);
        }
        return style;
      }
    }, {
      key: "renderLabel",
      value: function renderLabel() {
        var _this$props2 = this.props, index2 = _this$props2.index, maxTagsLength = _this$props2.maxTagsLength, renderTagLabel = _this$props2.renderTagLabel, items = _this$props2.items, item = _this$props2.item, isMultiple = _this$props2.isMultiple;
        var label = item.label;
        if (isMultiple) {
          if (item.length === 1) {
            label = item[0].label;
          } else {
            label = items.length === item.length ? "".concat(item.length, " item").concat(item.length ? "s" : "", " selected") : "and other ".concat(item.length, " selected");
          }
        }
        if (renderTagLabel) {
          return renderTagLabel({
            label,
            item,
            items,
            count: items.length,
            index: index2,
            isMultiple,
            maxTagsLength,
            combined: isMultiple
          });
        }
        return label;
      }
    }, {
      key: "renderCloseIcon",
      value: function renderCloseIcon() {
        var _this$props3 = this.props, closeIcon = _this$props3.closeIcon, rootClassName = _this$props3.rootClassName, isMultiple = _this$props3.isMultiple, item = _this$props3.item;
        var closeClassName = "".concat(rootClassName, "__clear-icon");
        if (!closeIcon) {
          return null;
        }
        var closeIconProps = {
          key: "close_icon",
          onClick: isMultiple ? this.handleOnMultipleClose : this.handleOnClose,
          className: closeClassName
        };
        var closeIconEl = closeIcon;
        if (typeof closeIcon === "function") {
          var closeIconParams = {
            item,
            onDeselect: closeIconProps.onClick,
            domProps: closeIconProps
          };
          closeIconEl = closeIcon(closeIconParams);
        } else {
          if (closeIcon && (0, _typeof2.default)(closeIcon) == "object") {
            closeIconEl = (0, _react.cloneElement)(closeIcon, {
              className: (0, _join.default)(closeIcon.props && closeIcon.props.className, closeIconProps.className),
              onClick: closeIcon.props && closeIcon.props.onClick ? function(event2) {
                closeIcon.props.onClick(event2);
                closeIconProps.onClick(event2);
              } : closeIconProps.onClick
            });
          }
        }
        if (closeIconEl === true || closeIconEl === void 0) {
          closeIconEl = _react.default.createElement(_Icons.CloseIcon, _objectSpread2({}, closeIconProps));
        }
        return closeIconEl;
      }
    }, {
      key: "handleOnMultipleClose",
      value: function handleOnMultipleClose() {
        var ids = this.props.item.map(function(item) {
          return item.id;
        });
        this.props.onMultipleTagClose(ids);
      }
    }, {
      key: "handleOnClose",
      value: function handleOnClose(event2) {
        var _this$props4 = this.props, onCloseTagClick = _this$props4.onCloseTagClick, item = _this$props4.item;
        event2.preventDefault();
        event2.stopPropagation();
        var id2 = item.id;
        onCloseTagClick(id2);
      }
    }]);
    return Tag2;
  }(_react.Component);
  Tag$1.displayName = "Tag";
  function emptyFn() {
  }
  Tag$1.defaultProps = {
    onCloseTagClick: emptyFn,
    onMultipleTagClose: emptyFn,
    onClick: emptyFn,
    closeIconPosition: "end",
    item: {},
    ellipsis: true,
    closeIcon: true
  };
  Tag$1.propTypes = {
    active: _propTypes.default.bool,
    renderTag: _propTypes.default.func,
    renderTagLabel: _propTypes.default.func,
    index: _propTypes.default.number,
    onCloseTagClick: _propTypes.default.func,
    onMultipleTagClose: _propTypes.default.func,
    closeIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node, _propTypes.default.func]),
    closeIconPosition: _propTypes.default.oneOf(["start", "end"]),
    isRemaining: _propTypes.default.bool,
    onClick: _propTypes.default.func,
    item: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
    items: _propTypes.default.array,
    isMultiple: _propTypes.default.bool,
    rootClassName: _propTypes.default.string,
    tags: _propTypes.default.array,
    border: _propTypes.default.string,
    visibleItems: _propTypes.default.array,
    activeStyle: _propTypes.default.object,
    padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    maxTagsLength: _propTypes.default.number,
    ellipsis: _propTypes.default.bool
  };
  var _default2 = Tag$1;
  Tag.default = _default2;
  return Tag;
}
var hasRequiredValue;
function requireValue() {
  if (hasRequiredValue)
    return Value;
  hasRequiredValue = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Value, "__esModule", {
    value: true
  });
  Value.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _join = _interopRequireDefault2(requireJoin$2());
  var _ComboBox = requireComboBox$1();
  var _Tag = _interopRequireDefault2(requireTag());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var Value$1 = function(_Component) {
    (0, _inherits2.default)(Value2, _Component);
    var _super = _createSuper(Value2);
    function Value2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, Value2);
      _this = _super.call(this, props2);
      _this.state = {
        size: null
      };
      return _this;
    }
    (0, _createClass2.default)(Value2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var value = props2.value, multiple = props2.multiple, rootClassName = props2.rootClassName, toolsSize = props2.toolsSize, focus = props2.focus, rtl = props2.rtl, searchable = props2.searchable, wrapMultiple = props2.wrapMultiple;
        props2.label;
        var showTags = value != null && multiple;
        var style = _objectSpread2({}, props2.style);
        if (toolsSize) {
          style.maxWidth = "calc(100% - ".concat(toolsSize.width, "px)");
        }
        var className = (0, _join.default)(rootClassName, wrapMultiple ? "".concat(rootClassName, "--wrap") : "".concat(rootClassName, "--no-wrap"), "".concat(rootClassName, "--").concat(rtl ? "rtl" : "ltr"));
        var isDisplayValueVisible = !showTags && !focus;
        if (!showTags && !searchable) {
          isDisplayValueVisible = true;
        }
        if (value == null) {
          isDisplayValueVisible = false;
        }
        var displayValue = isDisplayValueVisible ? this.renderDisplayValue() : null;
        return _react.default.createElement("div", {
          className,
          style
        }, showTags && this.renderTags(), displayValue, this.renderTextInput({
          isDisplayValueVisible: displayValue
        }));
      }
    }, {
      key: "renderTextInput",
      value: function renderTextInput(_ref2) {
        var isDisplayValueVisible = _ref2.isDisplayValueVisible;
        var textInput = this.props.textInput;
        if (!textInput) {
          return null;
        }
        if (textInput.type !== "input") {
          return _react.default.cloneElement(textInput, _objectSpread2(_objectSpread2({}, textInput.props), {}, {
            visible: !isDisplayValueVisible && this.props.searchable
          }));
        }
        return textInput;
      }
    }, {
      key: "renderDisplayValue",
      value: function renderDisplayValue() {
        var _this$props = this.props, rootClassName = _this$props.rootClassName, label = _this$props.label, renderDisplayValue2 = _this$props.renderDisplayValue;
        var domProps = {
          className: "".concat(rootClassName, "__display-value"),
          children: label
        };
        var result = null;
        if (typeof renderDisplayValue2 === "function") {
          result = renderDisplayValue2({
            domProps,
            label
          });
        }
        if (result == null) {
          result = _react.default.createElement("div", _objectSpread2({}, domProps));
        }
        return result;
      }
    }, {
      key: "renderTags",
      value: function renderTags() {
        var _this2 = this;
        var _this$props2 = this.props, renderTags2 = _this$props2.renderTags, value = _this$props2.value, items = _this$props2.items, groupedItems = _this$props2.groupedItems;
        if (!items) {
          return null;
        }
        var remainingItems;
        var visibleItems;
        if (groupedItems) {
          remainingItems = groupedItems.remainingItems;
          visibleItems = groupedItems.visibleItems;
        } else {
          visibleItems = items;
        }
        var remainingTags = remainingItems && this.renderTag(remainingItems, this.props.maxTagsLength, {
          visibleItems
        });
        var visibleTags = visibleItems && visibleItems.map(function(item, index2) {
          return _this2.renderTag(item, index2);
        });
        var tags2 = [].concat((0, _toConsumableArray2.default)(visibleTags), [remainingTags]);
        if (typeof renderTags2 === "function") {
          tags2 = renderTags2({
            tags: tags2,
            items,
            value,
            visibleItems,
            remainingItems
          });
        }
        return tags2;
      }
    }, {
      key: "renderTag",
      value: function renderTag(item, index2) {
        var config2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var items = this.props.items;
        if (!item) {
          return null;
        }
        var _this$props3 = this.props, rootClassName = _this$props3.rootClassName, renderTag2 = _this$props3.renderTag, activeTag = _this$props3.activeTag, maxTagsLength = _this$props3.maxTagsLength, renderTagLabel = _this$props3.renderTagLabel, renderRemainingTags = _this$props3.renderRemainingTags;
        var tagRootClassName = "".concat(rootClassName, "__tag");
        var isMultiple = Array.isArray(item);
        var active = isMultiple ? activeTag === _ComboBox.REMAINING_ITEMS : activeTag === item.id;
        var tagProps = _objectSpread2(_objectSpread2(_objectSpread2({
          item,
          items,
          active,
          isMultiple,
          renderTagLabel,
          maxTagsLength,
          index: index2,
          renderTag: renderTag2
        }, config2), this.props.tagProps), {}, {
          rootClassName: tagRootClassName,
          key: index2
        });
        var tag;
        if (isMultiple && typeof renderRemainingTags === "function") {
          tag = renderRemainingTags({
            remainingItems: item,
            visibleItems: config2.visibleItems,
            domProps: tagProps
          });
        }
        if (tag === void 0) {
          tag = _react.default.createElement(_Tag.default, _objectSpread2({}, tagProps));
        }
        return tag;
      }
    }]);
    return Value2;
  }(_react.Component);
  Value$1.defaultProps = {
    tagProps: {},
    groupedItems: null,
    items: []
  };
  var VALUE_TYPE = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool]))]);
  Value$1.propTypes = {
    size: _propTypes.default.shape({
      width: _propTypes.default.number,
      height: _propTypes.default.number
    }),
    focus: _propTypes.default.bool,
    items: _propTypes.default.array,
    item: _propTypes.default.object,
    groupedItems: _propTypes.default.shape({
      visibleItems: _propTypes.default.array,
      remainingItems: _propTypes.default.array
    }),
    renderTag: _propTypes.default.func,
    renderRemainingTags: _propTypes.default.func,
    renderTags: _propTypes.default.func,
    renderTagLabel: _propTypes.default.func,
    tagProps: _propTypes.default.object,
    maxTagsLength: _propTypes.default.number,
    rootClassName: _propTypes.default.string,
    multiple: _propTypes.default.bool,
    textInput: _propTypes.default.node,
    value: VALUE_TYPE
  };
  var _default2 = Value$1;
  Value.default = _default2;
  return Value;
}
var ClearButton = {};
var hasRequiredClearButton;
function requireClearButton() {
  if (hasRequiredClearButton)
    return ClearButton;
  hasRequiredClearButton = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(ClearButton, "__esModule", {
    value: true
  });
  ClearButton.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _Icons = requireIcons$1();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var ClearButton$1 = function ClearButton2(_ref2) {
    var onClear = _ref2.onClear, className = _ref2.className, closeIcon = _ref2.closeIcon, size2 = _ref2.size;
    var closeIconProps = {
      className,
      size: size2,
      onClick: function onClick(event2) {
        event2.preventDefault();
        event2.stopPropagation();
        onClear();
      }
    };
    var closeIconEl;
    if (closeIcon && closeIcon !== true) {
      var closeIconParams = {
        onClear,
        domProps: closeIconProps
      };
      closeIconEl = typeof closeIcon === "function" ? closeIcon(closeIconParams) : closeIcon;
    }
    if (closeIconEl === void 0) {
      closeIconEl = _react.default.createElement(_Icons.CloseIcon, _objectSpread2({}, closeIconProps));
    }
    return closeIconEl;
  };
  ClearButton$1.defaultProps = {
    size: 10
  };
  var _default2 = ClearButton$1;
  ClearButton.default = _default2;
  return ClearButton;
}
var ToggleButton = {};
var hasRequiredToggleButton;
function requireToggleButton() {
  if (hasRequiredToggleButton)
    return ToggleButton;
  hasRequiredToggleButton = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(ToggleButton, "__esModule", {
    value: true
  });
  ToggleButton.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _Icons = requireIcons$1();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var ToggleButton$1 = function ToggleButton2(_ref2) {
    var onToggle = _ref2.onToggle, className = _ref2.className, toggleIcon = _ref2.toggleIcon, size2 = _ref2.size, expanded = _ref2.expanded;
    var toggleIconProps = {
      className,
      size: size2,
      expanded,
      onClick: function onClick(event2) {
        event2.preventDefault();
        onToggle();
      }
    };
    var toggleButtonEl;
    if (toggleIcon) {
      var params = {
        onToggle,
        expanded,
        domProps: toggleIconProps
      };
      toggleButtonEl = typeof toggleIcon === "function" ? toggleIcon(params) : toggleIcon;
    }
    if (toggleButtonEl === true || toggleButtonEl == void 0) {
      toggleButtonEl = _react.default.createElement(_Icons.ToggleIcon, _objectSpread2({}, toggleIconProps));
    }
    return toggleButtonEl;
  };
  ToggleButton$1.defaultProps = {
    size: 10
  };
  ToggleButton$1.propTypes = {
    expanded: _propTypes.default.bool,
    size: _propTypes.default.number
  };
  var _default2 = ToggleButton$1;
  ToggleButton.default = _default2;
  return ToggleButton;
}
var List$2 = {};
var List$1 = {};
var Overlay$1 = {};
var src$h = {};
var Overlay = {};
var assign = {};
var hasRequiredAssign;
function requireAssign() {
  if (hasRequiredAssign)
    return assign;
  hasRequiredAssign = 1;
  Object.defineProperty(assign, "__esModule", {
    value: true
  });
  assign.assign = assign$12;
  assign.default = void 0;
  function assign$12(target) {
    if (target === null || target === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    for (var _len = arguments.length, to2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      to2[_key - 1] = arguments[_key];
    }
    to2.forEach(function(toItem) {
      toItem = Object(toItem);
      Object.keys(toItem).forEach(function(key) {
        target[key] = toItem[key];
      });
    });
    return target;
  }
  var _default2 = typeof Object.assign === "function" ? Object.assign : assign$12;
  assign.default = _default2;
  return assign;
}
var eventManager$1 = {};
var eventManager = {};
var separateEvents = {};
var hasRequiredSeparateEvents;
function requireSeparateEvents() {
  if (hasRequiredSeparateEvents)
    return separateEvents;
  hasRequiredSeparateEvents = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(separateEvents, "__esModule", {
    value: true
  });
  separateEvents.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  function separateEvents$1(_ref2) {
    var showEvent = _ref2.showEvent, hideEvent = _ref2.hideEvent;
    if (!Array.isArray(showEvent) || !Array.isArray(hideEvent)) {
      return {};
    }
    var normalizedShowEvents = (0, _toConsumableArray2.default)(showEvent);
    var normalizedHideEvents = (0, _toConsumableArray2.default)(hideEvent);
    var toggleEvents = [];
    normalizedShowEvents.forEach(function(eventName, index2) {
      var searchIndex = normalizedHideEvents.indexOf(eventName);
      if (searchIndex !== -1) {
        toggleEvents.push(eventName);
        delete normalizedShowEvents[index2];
        delete normalizedHideEvents[searchIndex];
      }
    });
    normalizedShowEvents = normalizedShowEvents.filter(function(eventName) {
      return eventName;
    });
    normalizedHideEvents = normalizedHideEvents.filter(function(eventName) {
      return eventName;
    });
    return {
      normalizedShowEvents,
      normalizedHideEvents,
      toggleEvents
    };
  }
  var _default2 = separateEvents$1;
  separateEvents.default = _default2;
  return separateEvents;
}
var registerEvents = {};
var hasRequiredRegisterEvents;
function requireRegisterEvents() {
  if (hasRequiredRegisterEvents)
    return registerEvents;
  hasRequiredRegisterEvents = 1;
  Object.defineProperty(registerEvents, "__esModule", {
    value: true
  });
  registerEvents.registerListeners = registerListeners;
  registerEvents.unregisterListeners = unregisterListeners;
  function registerListeners(_ref2) {
    var events = _ref2.events, action = _ref2.action;
    events.forEach(function(eventName) {
      if (eventName === "mouseenter" || eventName === "mouseleave" || eventName === "scroll") {
        document.addEventListener(eventName, action, {
          capture: true
        });
      } else {
        document.addEventListener(eventName, action);
      }
    });
  }
  function unregisterListeners(_ref2) {
    var events = _ref2.events, action = _ref2.action;
    events.forEach(function(eventName) {
      if (eventName === "mouseenter" || eventName === "mouseleave" || eventName === "scroll") {
        document.removeEventListener(eventName, action, {
          capture: true
        });
      } else {
        document.removeEventListener(eventName, action);
      }
    });
  }
  return registerEvents;
}
var generateHandlers = {};
var matchesTarget = {};
var matchesSelector$1 = {};
var hasRequiredMatchesSelector$1;
function requireMatchesSelector$1() {
  if (hasRequiredMatchesSelector$1)
    return matchesSelector$1;
  hasRequiredMatchesSelector$1 = 1;
  Object.defineProperty(matchesSelector$1, "__esModule", {
    value: true
  });
  matchesSelector$1.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var proto = globalObject && globalObject.Element ? Element.prototype : {
    matches: function matches() {
      return false;
    }
  };
  var vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;
  var _default2 = match2;
  matchesSelector$1.default = _default2;
  function match2(el2, selector) {
    if (vendor)
      return vendor.call(el2, selector);
    var nodes = el2.parentNode.querySelectorAll(selector);
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i] == el2)
        return true;
    }
    return false;
  }
  return matchesSelector$1;
}
var hasRequiredMatchesTarget;
function requireMatchesTarget() {
  if (hasRequiredMatchesTarget)
    return matchesTarget;
  hasRequiredMatchesTarget = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(matchesTarget, "__esModule", {
    value: true
  });
  matchesTarget.default = void 0;
  var _matchesSelector = _interopRequireDefault2(requireMatchesSelector$1());
  var _containsNode = _interopRequireDefault2(requireContainsNode());
  function matchesTarget$1(target, node2) {
    if (node2 === document) {
      return null;
    }
    if (target === node2) {
      return true;
    }
    if (typeof target === "string" && (0, _matchesSelector.default)(node2, target)) {
      return true;
    }
    if ((0, _containsNode.default)(target, node2)) {
      return true;
    }
    return false;
  }
  var _default2 = matchesTarget$1;
  matchesTarget.default = _default2;
  return matchesTarget;
}
var hasRequiredGenerateHandlers;
function requireGenerateHandlers() {
  if (hasRequiredGenerateHandlers)
    return generateHandlers;
  hasRequiredGenerateHandlers = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(generateHandlers, "__esModule", {
    value: true
  });
  generateHandlers.createHideHandler = createHideHandler;
  generateHandlers.createShowHandler = createShowHandler;
  generateHandlers.createToggleHandler = createToggleHandler;
  var _matchesTarget = _interopRequireDefault2(requireMatchesTarget());
  var _assign = _interopRequireDefault2(requireAssign());
  function createShowHandler(_ref2) {
    var action = _ref2.action, target = _ref2.target, getDelay = _ref2.getDelay, timeoutState = _ref2.timeoutState;
    return function(event2) {
      var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var delay2 = getDelay && getDelay();
      if (config2.target) {
        event2 = (0, _assign.default)({}, event2, {
          target: config2.target
        });
      }
      var node2 = event2.target;
      if (!(0, _matchesTarget.default)(target, node2)) {
        return null;
      }
      var activeTargetNode = timeoutState.targetThatTriggeredEvent;
      timeoutState.targetThatTriggeredEvent = node2;
      if (timeoutState.hideId) {
        clearTimeout(timeoutState.hideId);
        timeoutState.hideId = null;
      }
      if (delay2) {
        if (timeoutState.showId && activeTargetNode === node2) {
          return null;
        }
        if (timeoutState.showId) {
          clearTimeout(timeoutState.showId);
        }
        timeoutState.showId = setTimeout(function() {
          timeoutState.showId = null;
          action(event2);
        }, delay2);
      } else {
        action(event2);
      }
    };
  }
  function createHideHandler(_ref2) {
    var action = _ref2.action, target = _ref2.target, getDelay = _ref2.getDelay, timeoutState = _ref2.timeoutState;
    return function(event2) {
      var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var delay2 = getDelay && getDelay();
      if (config2.target) {
        event2 = (0, _assign.default)({}, event2, {
          target: config2.target
        });
      }
      var node2 = event2.target;
      if (config2.target !== null) {
        if (!(0, _matchesTarget.default)(target, node2)) {
          return null;
        }
      }
      var activeTargetNode = timeoutState.targetThatTriggeredEvent;
      timeoutState.targetThatTriggeredEvent = node2;
      if (activeTargetNode === node2 && timeoutState.showId) {
        clearTimeout(timeoutState.showId);
        timeoutState.showId = null;
      }
      if (delay2) {
        if (timeoutState.hideId && activeTargetNode === node2) {
          return null;
        }
        timeoutState.hideId = setTimeout(function() {
          timeoutState.hideId = null;
          action(event2);
        }, delay2);
      } else {
        action(event2);
      }
    };
  }
  function createToggleHandler(_ref3) {
    var onHide = _ref3.onHide, onShow = _ref3.onShow, target = _ref3.target, getActiveTargetNode = _ref3.getActiveTargetNode, getVisible = _ref3.getVisible;
    return function(event2) {
      var activeTargetNode = getActiveTargetNode();
      var node2 = event2.target;
      if (!(0, _matchesTarget.default)(target, node2)) {
        return null;
      }
      if (getVisible() && node2 === activeTargetNode) {
        onHide(event2);
      } else {
        onShow(event2);
      }
    };
  }
  return generateHandlers;
}
var createHideOnClickOutsideAction = {};
var hasRequiredCreateHideOnClickOutsideAction;
function requireCreateHideOnClickOutsideAction() {
  if (hasRequiredCreateHideOnClickOutsideAction)
    return createHideOnClickOutsideAction;
  hasRequiredCreateHideOnClickOutsideAction = 1;
  Object.defineProperty(createHideOnClickOutsideAction, "__esModule", {
    value: true
  });
  createHideOnClickOutsideAction.default = void 0;
  function createHideOnClickOutsideAction$1(_ref2) {
    var getOverlayNode = _ref2.getOverlayNode, getActiveTargetNode = _ref2.getActiveTargetNode, onHide = _ref2.onHide;
    return function(event2) {
      var node2 = event2.target;
      var activeTargetNode = getActiveTargetNode();
      var overlayNode = getOverlayNode();
      if (!activeTargetNode || !overlayNode) {
        return null;
      }
      if (overlayNode !== node2 && !overlayNode.contains(node2) && activeTargetNode !== node2 && !activeTargetNode.contains(node2)) {
        onHide(event2, {
          target: null
        });
      }
    };
  }
  var _default2 = createHideOnClickOutsideAction$1;
  createHideOnClickOutsideAction.default = _default2;
  return createHideOnClickOutsideAction;
}
var hasRequiredEventManager$1;
function requireEventManager$1() {
  if (hasRequiredEventManager$1)
    return eventManager;
  hasRequiredEventManager$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(eventManager, "__esModule", {
    value: true
  });
  eventManager.default = void 0;
  var _separateEvents2 = _interopRequireDefault2(requireSeparateEvents());
  var _registerEvents = requireRegisterEvents();
  var _generateHandlers = requireGenerateHandlers();
  var _createHideOnClickOutsideAction = _interopRequireDefault2(requireCreateHideOnClickOutsideAction());
  function eventManager$12(config2) {
    var _config$showEvent = config2.showEvent, showEvent = _config$showEvent === void 0 ? [] : _config$showEvent, _config$hideEvent = config2.hideEvent, hideEvent = _config$hideEvent === void 0 ? [] : _config$hideEvent, target = config2.target, hideOnScroll = config2.hideOnScroll, hideOnClickOutside = config2.hideOnClickOutside, hideOnEscape = config2.hideOnEscape, onShow = config2.onShow, onHide = config2.onHide, getShowDelay = config2.getShowDelay, getHideDelay = config2.getHideDelay, getVisible = config2.getVisible, _config$getOverlayNod = config2.getOverlayNode, getOverlayNode = _config$getOverlayNod === void 0 ? function() {
    } : _config$getOverlayNod, getActiveTargetNode = config2.getActiveTargetNode;
    var timeoutState = {
      showId: null,
      hideId: null,
      targetThatTriggeredEvent: null
    };
    var _separateEvents = (0, _separateEvents2.default)({
      showEvent,
      hideEvent
    }), normalizedShowEvents = _separateEvents.normalizedShowEvents, normalizedHideEvents = _separateEvents.normalizedHideEvents, toggleEvents = _separateEvents.toggleEvents;
    var showAction = (0, _generateHandlers.createShowHandler)({
      timeoutState,
      target,
      getActiveTargetNode,
      action: onShow,
      getDelay: getShowDelay
    });
    if (normalizedShowEvents && onShow) {
      (0, _registerEvents.registerListeners)({
        events: normalizedShowEvents,
        action: showAction
      });
    }
    var hideAction = (0, _generateHandlers.createHideHandler)({
      timeoutState,
      target,
      getActiveTargetNode,
      action: onHide,
      getDelay: getHideDelay
    });
    if (normalizedHideEvents && onHide) {
      (0, _registerEvents.registerListeners)({
        events: normalizedHideEvents,
        action: hideAction
      });
    }
    var toggleAction;
    if (toggleEvents.length) {
      toggleAction = (0, _generateHandlers.createToggleHandler)({
        target,
        getActiveTargetNode,
        getVisible,
        onHide: hideAction,
        onShow: showAction
      });
      (0, _registerEvents.registerListeners)({
        events: toggleEvents,
        action: toggleAction
      });
    }
    var hideOnClickOutsideAction;
    if (hideOnClickOutside) {
      hideOnClickOutsideAction = (0, _createHideOnClickOutsideAction.default)({
        getOverlayNode,
        getActiveTargetNode,
        onHide: hideAction
      });
      (0, _registerEvents.registerListeners)({
        events: ["click"],
        action: hideOnClickOutsideAction
      });
    }
    var hideOnScrollAction;
    if (hideOnScroll) {
      hideOnScrollAction = function hideOnScrollAction2(event2) {
        if (getVisible()) {
          hideAction(event2, {
            target: null
          });
        }
      };
      (0, _registerEvents.registerListeners)({
        events: ["scroll"],
        action: hideOnScrollAction
      });
    }
    var hideOnEscapeAction;
    if (hideOnEscape) {
      hideOnEscapeAction = function hideOnEscapeAction2(event2) {
        if (getVisible() && event2.key === "Escape") {
          hideAction(event2, {
            target: null
          });
        }
      };
      (0, _registerEvents.registerListeners)({
        events: ["keydown"],
        action: hideOnEscapeAction
      });
    }
    var handleOverlayShowAction;
    var handleOverlayHideAction;
    if (normalizedHideEvents.indexOf("mouseleave") !== -1) {
      handleOverlayShowAction = function handleOverlayShowAction2(event2) {
        if (event2.target === getOverlayNode()) {
          var activeTargetNode = getActiveTargetNode();
          showAction(event2, {
            target: activeTargetNode
          });
        }
      };
      (0, _registerEvents.registerListeners)({
        events: ["mouseenter"],
        action: handleOverlayShowAction
      });
      handleOverlayHideAction = function handleOverlayHideAction2(event2) {
        if (event2.target === getOverlayNode()) {
          var activeTargetNode = getActiveTargetNode();
          hideAction(event2, {
            target: activeTargetNode
          });
        }
      };
      (0, _registerEvents.registerListeners)({
        events: ["mouseleave"],
        action: handleOverlayHideAction
      });
    }
    return {
      unregister: function unregister() {
        if (normalizedShowEvents && showAction) {
          (0, _registerEvents.unregisterListeners)({
            events: normalizedShowEvents,
            action: showAction
          });
        }
        if (normalizedHideEvents && hideAction) {
          (0, _registerEvents.unregisterListeners)({
            events: normalizedHideEvents,
            action: hideAction
          });
        }
        if (toggleEvents && toggleAction) {
          (0, _registerEvents.unregisterListeners)({
            events: toggleEvents,
            action: toggleAction
          });
        }
        if (hideOnClickOutsideAction) {
          (0, _registerEvents.unregisterListeners)({
            events: ["click"],
            action: hideOnClickOutsideAction
          });
        }
        if (hideOnScrollAction) {
          (0, _registerEvents.unregisterListeners)({
            events: ["scroll"],
            action: hideOnScrollAction
          });
        }
        if (handleOverlayShowAction) {
          (0, _registerEvents.unregisterListeners)({
            events: ["mouseenter"],
            action: handleOverlayShowAction
          });
        }
        if (handleOverlayHideAction) {
          (0, _registerEvents.unregisterListeners)({
            events: ["mouseleave"],
            action: handleOverlayHideAction
          });
        }
        if (hideOnEscapeAction) {
          (0, _registerEvents.unregisterListeners)({
            events: ["keydown"],
            action: hideOnEscapeAction
          });
        }
      }
    };
  }
  var _default2 = eventManager$12;
  eventManager.default = _default2;
  return eventManager;
}
var hasRequiredEventManager;
function requireEventManager() {
  if (hasRequiredEventManager)
    return eventManager$1;
  hasRequiredEventManager = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(eventManager$1, "__esModule", {
    value: true
  });
  eventManager$1.default = void 0;
  var _eventManager = _interopRequireDefault2(requireEventManager$1());
  var _default2 = _eventManager.default;
  eventManager$1.default = _default2;
  return eventManager$1;
}
var getMinMaxSize$1 = {};
var hasRequiredGetMinMaxSize$1;
function requireGetMinMaxSize$1() {
  if (hasRequiredGetMinMaxSize$1)
    return getMinMaxSize$1;
  hasRequiredGetMinMaxSize$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getMinMaxSize$1, "__esModule", {
    value: true
  });
  getMinMaxSize$1.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  function getMinMaxSize2(props2) {
    var sizeType;
    var single;
    var style = props2.style || {};
    var result = {};
    if (props2.minSize) {
      sizeType = (0, _typeof2.default)(props2.minSize);
      single = sizeType == "number" || sizeType == "string";
      if (single) {
        result.minWidth = props2.minSize;
        result.minHeight = props2.minSize;
      } else {
        if (props2.minSize.width) {
          result.minWidth = props2.minSize.width;
        }
        if (props2.minSize.height) {
          result.minHeight = props2.minSize.height;
        }
      }
    }
    if (props2.maxSize) {
      sizeType = (0, _typeof2.default)(props2.maxSize);
      single = sizeType == "number" || sizeType == "string";
      if (single) {
        result.maxWidth = props2.maxSize;
        result.maxHeight = props2.maxSize;
      } else {
        if (props2.maxSize.width) {
          result.maxWidth = props2.maxSize.width;
        }
        if (props2.maxSize.height) {
          result.maxHeight = props2.maxSize.height;
        }
      }
    }
    if (result.minWidth == void 0 && style.minWidth != void 0) {
      result.minWidth = style.minWidth;
    }
    if (result.maxWidth == void 0 && style.maxWidth != void 0) {
      result.maxWidth = style.maxWidth;
    }
    if (result.minHeight == void 0 && style.minHeight != void 0) {
      result.minHeight = style.minHeight;
    }
    if (result.maxHeight == void 0 && style.maxHeight != void 0) {
      result.maxHeight = style.maxHeight;
    }
    return result;
  }
  var _default2 = getMinMaxSize2;
  getMinMaxSize$1.default = _default2;
  return getMinMaxSize$1;
}
var join$1 = {};
var hasRequiredJoin$1;
function requireJoin$1() {
  if (hasRequiredJoin$1)
    return join$1;
  hasRequiredJoin$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(join$1, "__esModule", {
    value: true
  });
  join$1.default = void 0;
  var _join = _interopRequireDefault2(requireJoin$3());
  var _default2 = _join.default;
  join$1.default = _default2;
  return join$1;
}
var shouldComponentUpdate$5 = {};
var shouldComponentUpdate$4 = {};
var shouldComponentUpdate$3 = {};
var shallowequal$1 = {};
var hasRequiredShallowequal$1;
function requireShallowequal$1() {
  if (hasRequiredShallowequal$1)
    return shallowequal$1;
  hasRequiredShallowequal$1 = 1;
  Object.defineProperty(shallowequal$1, "__esModule", {
    value: true
  });
  shallowequal$1.default = equal2;
  shallowequal$1.equalReturnKey = equalReturnKey;
  var keyList = Object.keys;
  var EMPTY_OBJECT = {};
  function equal2(a, b2) {
    var except = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : EMPTY_OBJECT;
    if (a === b2)
      return true;
    if (!(a instanceof Object) || !(b2 instanceof Object))
      return false;
    var keys2 = keyList(a);
    var length2 = keys2.length;
    var key;
    for (var i = 0; i < length2; i++) {
      key = keys2[i];
      if (except[key]) {
        continue;
      }
      if (!(key in b2))
        return false;
    }
    for (var i = 0; i < length2; i++) {
      key = keys2[i];
      if (except[key]) {
        continue;
      }
      if (a[key] !== b2[key])
        return false;
    }
    return length2 === keyList(b2).length;
  }
  function equalReturnKey(a, b2) {
    var except = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : EMPTY_OBJECT;
    if (a === b2)
      return {
        result: true,
        key: void 0
      };
    if (!(a instanceof Object) || !(b2 instanceof Object))
      return {
        result: false,
        key: void 0
      };
    var keys2 = keyList(a);
    var length2 = keys2.length;
    var key;
    for (var i = 0; i < length2; i++) {
      key = keys2[i];
      if (except[key]) {
        continue;
      }
      if (!(key in b2))
        return {
          result: false,
          key
        };
    }
    for (var i = 0; i < length2; i++) {
      key = keys2[i];
      if (except[key]) {
        continue;
      }
      if (a[key] !== b2[key])
        return {
          result: false,
          key
        };
    }
    return {
      result: length2 === keyList(b2).length,
      key: void 0
    };
  }
  return shallowequal$1;
}
var hasRequiredShouldComponentUpdate$5;
function requireShouldComponentUpdate$5() {
  if (hasRequiredShouldComponentUpdate$5)
    return shouldComponentUpdate$3;
  hasRequiredShouldComponentUpdate$5 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(shouldComponentUpdate$3, "__esModule", {
    value: true
  });
  shouldComponentUpdate$3.default = void 0;
  var _shallowequal = _interopRequireDefault2(requireShallowequal$1());
  var _default2 = function _default3(inst, nextProps, nextState) {
    var props2 = inst.props;
    var state2 = inst.state;
    if (nextProps.shouldComponentUpdate) {
      return nextProps.shouldComponentUpdate({
        nextProps,
        props: props2,
        nextState,
        state: state2
      });
    }
    return !(0, _shallowequal.default)(nextProps, props2) || !(0, _shallowequal.default)(nextState, state2);
  };
  shouldComponentUpdate$3.default = _default2;
  return shouldComponentUpdate$3;
}
var hasRequiredShouldComponentUpdate$4;
function requireShouldComponentUpdate$4() {
  if (hasRequiredShouldComponentUpdate$4)
    return shouldComponentUpdate$4;
  hasRequiredShouldComponentUpdate$4 = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get2() {
        return _shouldComponentUpdate.default;
      }
    });
    var _shouldComponentUpdate = _interopRequireDefault2(requireShouldComponentUpdate$5());
  })(shouldComponentUpdate$4);
  return shouldComponentUpdate$4;
}
var hasRequiredShouldComponentUpdate$3;
function requireShouldComponentUpdate$3() {
  if (hasRequiredShouldComponentUpdate$3)
    return shouldComponentUpdate$5;
  hasRequiredShouldComponentUpdate$3 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(shouldComponentUpdate$5, "__esModule", {
    value: true
  });
  shouldComponentUpdate$5.default = void 0;
  var _shouldComponentUpdate = _interopRequireDefault2(requireShouldComponentUpdate$4());
  var _default2 = _shouldComponentUpdate.default;
  shouldComponentUpdate$5.default = _default2;
  return shouldComponentUpdate$5;
}
var normalizeEvent = {};
var hasRequiredNormalizeEvent;
function requireNormalizeEvent() {
  if (hasRequiredNormalizeEvent)
    return normalizeEvent;
  hasRequiredNormalizeEvent = 1;
  Object.defineProperty(normalizeEvent, "__esModule", {
    value: true
  });
  normalizeEvent.default = void 0;
  function normalizeEvent$1(events) {
    return Array.isArray(events) ? events : [events];
  }
  var _default2 = normalizeEvent$1;
  normalizeEvent.default = _default2;
  return normalizeEvent;
}
var getFocusableElements$2 = {};
var getFocusableElements$1 = {};
var getFocusableElements = {};
var hasRequiredGetFocusableElements$2;
function requireGetFocusableElements$2() {
  if (hasRequiredGetFocusableElements$2)
    return getFocusableElements;
  hasRequiredGetFocusableElements$2 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getFocusableElements, "__esModule", {
    value: true
  });
  getFocusableElements.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var focusableSelector = "input, select, textarea, button, object, a[href], [tabindex]";
  var _default2 = function _default3(node2) {
    if (!node2) {
      return null;
    }
    var nodes = (0, _toConsumableArray2.default)(node2.querySelectorAll(focusableSelector));
    nodes = nodes.filter(function(el2) {
      return !!el2.offsetParent;
    });
    return nodes;
  };
  getFocusableElements.default = _default2;
  return getFocusableElements;
}
var hasRequiredGetFocusableElements$1;
function requireGetFocusableElements$1() {
  if (hasRequiredGetFocusableElements$1)
    return getFocusableElements$1;
  hasRequiredGetFocusableElements$1 = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get2() {
        return _getFocusableElements.default;
      }
    });
    var _getFocusableElements = _interopRequireDefault2(requireGetFocusableElements$2());
  })(getFocusableElements$1);
  return getFocusableElements$1;
}
var hasRequiredGetFocusableElements;
function requireGetFocusableElements() {
  if (hasRequiredGetFocusableElements)
    return getFocusableElements$2;
  hasRequiredGetFocusableElements = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getFocusableElements$2, "__esModule", {
    value: true
  });
  getFocusableElements$2.default = void 0;
  var _getFocusableElements = _interopRequireDefault2(requireGetFocusableElements$1());
  var _default2 = _getFocusableElements.default;
  getFocusableElements$2.default = _default2;
  return getFocusableElements$2;
}
var getPositionRelativeToElement = {};
var positionsMap = {};
var hasRequiredPositionsMap;
function requirePositionsMap() {
  if (hasRequiredPositionsMap)
    return positionsMap;
  hasRequiredPositionsMap = 1;
  Object.defineProperty(positionsMap, "__esModule", {
    value: true
  });
  positionsMap.posiblePositions = positionsMap.default = void 0;
  var positionMap = {
    top: {
      alias: "top",
      position: "bc-tc",
      offset: {
        x: 1,
        y: -1,
        resetNumeric: "x"
      }
    },
    "bc-tc": {
      alias: "top",
      position: "bc-tc",
      offset: {
        x: 1,
        y: -1,
        resetNumeric: "x"
      }
    },
    "bl-tl": {
      alias: "topAlignedLeft",
      position: "bl-tl",
      offset: {
        x: 1,
        y: -1,
        resetNumeric: "x"
      }
    },
    "br-tr": {
      alias: "topAlignedRight",
      position: "br-tr",
      offset: {
        x: 1,
        y: -1,
        resetNumeric: "x"
      }
    },
    "br-tl": {
      alias: "topLeft",
      position: "br-tl",
      offset: {
        x: -1,
        y: -1
      }
    },
    right: {
      position: "lc-rc",
      alias: "right",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "lc-rc": {
      position: "lc-rc",
      alias: "right",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "tl-tr": {
      position: "tl-tr",
      alias: "rightAlignedTop",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "bl-br": {
      position: "bl-br",
      alias: "rightAlignedBottom",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "tl-br": {
      position: "tl-br",
      alias: "bottomRight",
      offset: {
        x: 1,
        y: 1
      }
    },
    bottom: {
      position: "tc-bc",
      alias: "bottom",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "x"
      }
    },
    "tc-bc": {
      position: "tc-bc",
      alias: "bottom",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "x"
      }
    },
    "tl-bl": {
      position: "tl-bl",
      alias: "bottomAlinedLeft",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "x"
      }
    },
    "tr-br": {
      position: "tr-br",
      alias: "bottomAlignedRight",
      offset: {
        x: 1,
        y: 1,
        resetNumeric: "x"
      }
    },
    "tr-tr": {
      position: "tr-tr",
      offset: {
        x: 1,
        y: -1
      }
    },
    "tr-bl": {
      position: "tr-bl",
      alias: "bottomLeft",
      offset: {
        x: -1,
        y: 1
      }
    },
    left: {
      position: "rc-lc",
      alias: "left",
      offset: {
        x: -1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "rc-lc": {
      position: "rc-lc",
      alias: "left",
      offset: {
        x: -1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "tr-tl": {
      position: "tr-tl",
      alias: "leftAlignedTop",
      offset: {
        x: -1,
        y: 1,
        resetNumeric: "y"
      }
    },
    "br-bl": {
      position: "br-bl",
      alias: "leftAlignedBottom",
      offset: {
        x: -1,
        y: 1,
        resetNumeric: "y"
      }
    }
  };
  var posiblePositions = Object.keys(positionMap);
  positionsMap.posiblePositions = posiblePositions;
  var _default2 = positionMap;
  positionsMap.default = _default2;
  return positionsMap;
}
var getPosition = {};
var regionAlign = {};
var region = {};
var src$g = {};
var construct = { exports: {} };
var isNativeReflectConstruct = { exports: {} };
var hasRequiredIsNativeReflectConstruct;
function requireIsNativeReflectConstruct() {
  if (hasRequiredIsNativeReflectConstruct)
    return isNativeReflectConstruct.exports;
  hasRequiredIsNativeReflectConstruct = 1;
  (function(module) {
    function _isNativeReflectConstruct() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(isNativeReflectConstruct);
  return isNativeReflectConstruct.exports;
}
var hasRequiredConstruct;
function requireConstruct() {
  if (hasRequiredConstruct)
    return construct.exports;
  hasRequiredConstruct = 1;
  (function(module) {
    var setPrototypeOf2 = requireSetPrototypeOf();
    var isNativeReflectConstruct2 = requireIsNativeReflectConstruct();
    function _construct(t2, e2, r2) {
      if (isNativeReflectConstruct2())
        return Reflect.construct.apply(null, arguments);
      var o = [null];
      o.push.apply(o, e2);
      var p2 = new (t2.bind.apply(t2, o))();
      return r2 && setPrototypeOf2(p2, r2.prototype), p2;
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(construct);
  return construct.exports;
}
var hasOwn = {};
var hasRequiredHasOwn;
function requireHasOwn() {
  if (hasRequiredHasOwn)
    return hasOwn;
  hasRequiredHasOwn = 1;
  Object.defineProperty(hasOwn, "__esModule", {
    value: true
  });
  hasOwn.default = void 0;
  var hasOwn$1 = Object.prototype.hasOwnProperty;
  function curry2(fn, n2) {
    if (typeof n2 !== "number") {
      n2 = fn.length;
    }
    function getCurryClosure(prevArgs) {
      function curryClosure() {
        var len = arguments.length;
        var args = [].concat(prevArgs);
        if (len) {
          args.push.apply(args, arguments);
        }
        if (args.length < n2) {
          return getCurryClosure(args);
        }
        return fn.apply(this, args);
      }
      return curryClosure;
    }
    return getCurryClosure([]);
  }
  var _default2 = curry2(function(object, property) {
    return hasOwn$1.call(object, property);
  });
  hasOwn.default = _default2;
  return hasOwn;
}
var statics = {};
var validate = {};
var hasRequiredValidate;
function requireValidate() {
  if (hasRequiredValidate)
    return validate;
  hasRequiredValidate = 1;
  Object.defineProperty(validate, "__esModule", {
    value: true
  });
  validate.default = validate$1;
  function validate$1(region2) {
    var isValid = true;
    if (region2.right < region2.left) {
      isValid = false;
      region2.right = region2.left;
    }
    if (region2.bottom < region2.top) {
      isValid = false;
      region2.bottom = region2.top;
    }
    return isValid;
  }
  return validate;
}
var hasRequiredStatics;
function requireStatics() {
  if (hasRequiredStatics)
    return statics;
  hasRequiredStatics = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(statics, "__esModule", {
    value: true
  });
  statics.default = _default2;
  var _hasOwn = _interopRequireDefault2(requireHasOwn());
  var _validate = _interopRequireDefault2(requireValidate());
  function _default2(REGION) {
    var MAX = Math.max;
    var MIN = Math.min;
    var statics2 = {
      init: function init2() {
        var exportAsNonStatic = {
          getIntersection: true,
          getIntersectionArea: true,
          getIntersectionHeight: true,
          getIntersectionWidth: true,
          getUnion: true
        };
        var thisProto = REGION.prototype;
        var newName;
        var exportHasOwn = (0, _hasOwn.default)(exportAsNonStatic);
        var methodName;
        for (methodName in exportAsNonStatic)
          if (exportHasOwn(methodName)) {
            newName = exportAsNonStatic[methodName];
            if (typeof newName != "string") {
              newName = methodName;
            }
            (function(proto, methodName2, protoMethodName) {
              proto[methodName2] = function(region2) {
                if (!REGION[protoMethodName]) {
                  console.warn("cannot find method ", protoMethodName, " on ", REGION);
                }
                return REGION[protoMethodName](this, region2);
              };
            })(thisProto, newName, methodName);
          }
      },
      validate: _validate.default,
      getDocRegion: function getDocRegion() {
        return REGION.fromDOM(document.documentElement);
      },
      from: function from2(reg) {
        if (!reg) {
          return;
        }
        if (reg.__IS_REGION) {
          return reg;
        }
        if (typeof document != "undefined") {
          if (reg && reg.getBoundingClientRect) {
            return REGION.fromDOM(reg);
          }
          if (reg.type && typeof reg.pageX !== "undefined" && typeof reg.pageY !== "undefined") {
            return REGION.fromEvent(reg);
          }
        }
        return REGION(reg);
      },
      fromEvent: function fromEvent(event2) {
        return REGION.fromPoint({
          x: event2.pageX,
          y: event2.pageY
        });
      },
      fromDOM: function fromDOM(dom) {
        var rect = dom.getBoundingClientRect();
        return new REGION({
          top: rect.top,
          left: rect.left,
          bottom: rect.bottom,
          right: rect.right
        });
      },
      getIntersection: function getIntersection(first, second) {
        var area = this.getIntersectionArea(first, second);
        if (area) {
          return new REGION(area);
        }
        return false;
      },
      getIntersectionWidth: function getIntersectionWidth(first, second) {
        var minRight = MIN(first.right, second.right);
        var maxLeft = MAX(first.left, second.left);
        if (maxLeft < minRight) {
          return minRight - maxLeft;
        }
        return 0;
      },
      getIntersectionHeight: function getIntersectionHeight(first, second) {
        var maxTop = MAX(first.top, second.top);
        var minBottom = MIN(first.bottom, second.bottom);
        if (maxTop < minBottom) {
          return minBottom - maxTop;
        }
        return 0;
      },
      getIntersectionArea: function getIntersectionArea(first, second) {
        var maxTop = MAX(first.top, second.top);
        var minRight = MIN(first.right, second.right);
        var minBottom = MIN(first.bottom, second.bottom);
        var maxLeft = MAX(first.left, second.left);
        if (maxTop < minBottom && maxLeft < minRight) {
          return {
            top: maxTop,
            right: minRight,
            bottom: minBottom,
            left: maxLeft,
            width: minRight - maxLeft,
            height: minBottom - maxTop
          };
        }
        return false;
      },
      getUnion: function getUnion(first, second) {
        var top = MIN(first.top, second.top);
        var right = MAX(first.right, second.right);
        var bottom = MAX(first.bottom, second.bottom);
        var left = MIN(first.left, second.left);
        return new REGION(top, right, bottom, left);
      },
      getRegion: function getRegion(reg) {
        return REGION.from(reg);
      },
      fromPoint: function fromPoint(xy) {
        return new REGION({
          top: xy.y,
          bottom: xy.y,
          left: xy.x,
          right: xy.x
        });
      }
    };
    Object.keys(statics2).forEach(function(key) {
      REGION[key] = statics2[key];
    });
    REGION.init();
  }
  return statics;
}
var eventemitter3 = { exports: {} };
var hasRequiredEventemitter3;
function requireEventemitter3() {
  if (hasRequiredEventemitter3)
    return eventemitter3.exports;
  hasRequiredEventemitter3 = 1;
  (function(module) {
    var has = Object.prototype.hasOwnProperty, prefix2 = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix2 = false;
    }
    function EE(fn, context2, once2) {
      this.fn = fn;
      this.context = context2;
      this.once = once2 || false;
    }
    function addListener2(emitter, event2, fn, context2, once2) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context2 || emitter, once2), evt = prefix2 ? prefix2 + event2 : event2;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames2() {
      var names2 = [], events, name;
      if (this._eventsCount === 0)
        return names2;
      for (name in events = this._events) {
        if (has.call(events, name))
          names2.push(prefix2 ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names2.concat(Object.getOwnPropertySymbols(events));
      }
      return names2;
    };
    EventEmitter.prototype.listeners = function listeners(event2) {
      var evt = prefix2 ? prefix2 + event2 : event2, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l2 = handlers.length, ee2 = new Array(l2); i < l2; i++) {
        ee2[i] = handlers[i].fn;
      }
      return ee2;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event2) {
      var evt = prefix2 ? prefix2 + event2 : event2, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event2, a1, a2, a3, a4, a5) {
      var evt = prefix2 ? prefix2 + event2 : event2;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event2, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length2 = listeners.length, j;
        for (i = 0; i < length2; i++) {
          if (listeners[i].once)
            this.removeListener(event2, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event2, fn, context2) {
      return addListener2(this, event2, fn, context2, false);
    };
    EventEmitter.prototype.once = function once2(event2, fn, context2) {
      return addListener2(this, event2, fn, context2, true);
    };
    EventEmitter.prototype.removeListener = function removeListener2(event2, fn, context2, once2) {
      var evt = prefix2 ? prefix2 + event2 : event2;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once2 || listeners.once) && (!context2 || listeners.context === context2)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length2 = listeners.length; i < length2; i++) {
          if (listeners[i].fn !== fn || once2 && !listeners[i].once || context2 && listeners[i].context !== context2) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event2) {
      var evt;
      if (event2) {
        evt = prefix2 ? prefix2 + event2 : event2;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix2;
    EventEmitter.EventEmitter = EventEmitter;
    {
      module.exports = EventEmitter;
    }
  })(eventemitter3);
  return eventemitter3.exports;
}
var inherits = {};
var hasRequiredInherits;
function requireInherits() {
  if (hasRequiredInherits)
    return inherits;
  hasRequiredInherits = 1;
  Object.defineProperty(inherits, "__esModule", {
    value: true
  });
  inherits.default = _default2;
  function _default2(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  }
  return inherits;
}
var hasRequiredSrc$j;
function requireSrc$j() {
  if (hasRequiredSrc$j)
    return src$g;
  hasRequiredSrc$j = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$g, "__esModule", {
    value: true
  });
  src$g.default = void 0;
  var _construct2 = _interopRequireDefault2(requireConstruct());
  var _hasOwn = _interopRequireDefault2(requireHasOwn());
  var _statics = _interopRequireDefault2(requireStatics());
  var _eventemitter = _interopRequireDefault2(requireEventemitter3());
  var _inherits = _interopRequireDefault2(requireInherits());
  var _validate = _interopRequireDefault2(requireValidate());
  var objectToString = Object.prototype.toString;
  var isObject2 = function isObject3(value) {
    return objectToString.apply(value) === "[object Object]";
  };
  function copyList(source, target, list2) {
    if (source) {
      list2.forEach(function(key) {
        if ((0, _hasOwn.default)(source, key)) {
          target[key] = source[key];
        }
      });
    }
    return target;
  }
  var POINT_POSITIONS = {
    cy: "YCenter",
    cx: "XCenter",
    t: "Top",
    tc: "TopCenter",
    tl: "TopLeft",
    tr: "TopRight",
    b: "Bottom",
    bc: "BottomCenter",
    bl: "BottomLeft",
    br: "BottomRight",
    l: "Left",
    lc: "LeftCenter",
    r: "Right",
    rc: "RightCenter",
    c: "Center"
  };
  var REGION = function REGION2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var top = args[0], right = args[1], bottom = args[2], left = args[3];
    if (!(this instanceof REGION2)) {
      return (0, _construct2.default)(REGION2, args);
    }
    _eventemitter.default.call(this);
    if (isObject2(top)) {
      copyList(top, this, ["top", "right", "bottom", "left"]);
      if (top.bottom == null && top.height != null) {
        this.bottom = this.top + top.height;
      }
      if (top.right == null && top.width != null) {
        this.right = this.left + top.width;
      }
      if (this.right == null) {
        this.right = this.left;
      }
      if (this.bottom == null) {
        this.bottom = this.top;
      }
      if (top.emitChangeEvents) {
        this.emitChangeEvents = top.emitChangeEvents;
      }
    } else {
      this.top = top;
      this.right = right;
      this.bottom = bottom;
      this.left = left;
    }
    this[0] = this.left;
    this[1] = this.top;
    (0, _validate.default)(this);
  };
  (0, _inherits.default)(REGION, _eventemitter.default);
  Object.assign(REGION.prototype, {
    emitChangeEvents: false,
    getRegion: function getRegion(clone2) {
      return clone2 ? this.clone() : this;
    },
    setRegion: function setRegion(reg) {
      if (reg instanceof REGION) {
        this.set(reg.get());
      } else {
        this.set(reg);
      }
      return this;
    },
    validate: function validate2() {
      return REGION.validate(this);
    },
    _before: function _before() {
      if (this.emitChangeEvents) {
        return copyList(this, {}, ["left", "top", "bottom", "right"]);
      }
    },
    _after: function _after(before) {
      if (this.emitChangeEvents) {
        if (this.top != before.top || this.left != before.left) {
          this.emitPositionChange();
        }
        if (this.right != before.right || this.bottom != before.bottom) {
          this.emitSizeChange();
        }
      }
    },
    notifyPositionChange: function notifyPositionChange() {
      this.emit("changeposition", this);
    },
    emitPositionChange: function emitPositionChange() {
      this.notifyPositionChange();
    },
    notifySizeChange: function notifySizeChange() {
      this.emit("changesize", this);
    },
    emitSizeChange: function emitSizeChange() {
      this.notifySizeChange();
    },
    add: function add2(directions) {
      var before = this._before();
      var direction2;
      for (direction2 in directions)
        if ((0, _hasOwn.default)(directions, direction2)) {
          this[direction2] += directions[direction2];
        }
      this[0] = this.left;
      this[1] = this.top;
      this._after(before);
      return this;
    },
    substract: function substract(directions) {
      var before = this._before();
      var direction2;
      for (direction2 in directions)
        if ((0, _hasOwn.default)(directions, direction2)) {
          this[direction2] -= directions[direction2];
        }
      this[0] = this.left;
      this[1] = this.top;
      this._after(before);
      return this;
    },
    getSize: function getSize2() {
      return {
        width: this.width,
        height: this.height
      };
    },
    setPosition: function setPosition(position2) {
      var width = this.width;
      var height = this.height;
      if (position2.left != void 0) {
        position2.right = position2.left + width;
      }
      if (position2.top != void 0) {
        position2.bottom = position2.top + height;
      }
      return this.set(position2);
    },
    setSize: function setSize(size2) {
      if (size2.height != void 0 && size2.width != void 0) {
        return this.set({
          right: this.left + size2.width,
          bottom: this.top + size2.height
        });
      }
      if (size2.width != void 0) {
        this.setWidth(size2.width);
      }
      if (size2.height != void 0) {
        this.setHeight(size2.height);
      }
      return this;
    },
    setWidth: function setWidth(width) {
      return this.set({
        right: this.left + width
      });
    },
    setHeight: function setHeight(height) {
      return this.set({
        bottom: this.top + height
      });
    },
    set: function set2(directions) {
      var before = this._before();
      copyList(directions, this, ["left", "top", "bottom", "right"]);
      if (directions.bottom == null && directions.height != null) {
        this.bottom = this.top + directions.height;
      }
      if (directions.right == null && directions.width != null) {
        this.right = this.left + directions.width;
      }
      this[0] = this.left;
      this[1] = this.top;
      this._after(before);
      return this;
    },
    get: function get2(dir) {
      return dir ? this[dir] : copyList(this, {}, ["left", "right", "top", "bottom"]);
    },
    shift: function shift(directions) {
      var before = this._before();
      if (directions.top) {
        this.top += directions.top;
        this.bottom += directions.top;
      }
      if (directions.left) {
        this.left += directions.left;
        this.right += directions.left;
      }
      this[0] = this.left;
      this[1] = this.top;
      this._after(before);
      return this;
    },
    unshift: function unshift(directions) {
      if (directions.top) {
        directions.top *= -1;
      }
      if (directions.left) {
        directions.left *= -1;
      }
      return this.shift(directions);
    },
    equals: function equals(region2) {
      return this.equalsPosition(region2) && this.equalsSize(region2);
    },
    equalsSize: function equalsSize(size2) {
      var isInstance = size2 instanceof REGION;
      var s = {
        width: size2.width == null && isInstance ? size2.getWidth() : size2.width,
        height: size2.height == null && isInstance ? size2.getHeight() : size2.height
      };
      return this.getWidth() == s.width && this.getHeight() == s.height;
    },
    equalsPosition: function equalsPosition(region2) {
      return this.top == region2.top && this.left == region2.left;
    },
    addLeft: function addLeft(left) {
      var before = this._before();
      this.left = this[0] = this.left + left;
      this._after(before);
      return this;
    },
    addTop: function addTop(top) {
      var before = this._before();
      this.top = this[1] = this.top + top;
      this._after(before);
      return this;
    },
    addBottom: function addBottom(bottom) {
      var before = this._before();
      this.bottom += bottom;
      this._after(before);
      return this;
    },
    addRight: function addRight(right) {
      var before = this._before();
      this.right += right;
      this._after(before);
      return this;
    },
    minTop: function minTop() {
      return this.expand({
        top: 1
      });
    },
    maxBottom: function maxBottom() {
      return this.expand({
        bottom: 1
      });
    },
    minLeft: function minLeft() {
      return this.expand({
        left: 1
      });
    },
    maxRight: function maxRight() {
      return this.expand({
        right: 1
      });
    },
    expand: function expand(directions, region2) {
      var docRegion = region2 || REGION.getDocRegion();
      var list2 = [];
      var direction2;
      var before = this._before();
      for (direction2 in directions)
        if ((0, _hasOwn.default)(directions, direction2)) {
          list2.push(direction2);
        }
      copyList(docRegion, this, list2);
      this[0] = this.left;
      this[1] = this.top;
      this._after(before);
      return this;
    },
    clone: function clone2() {
      return new REGION({
        top: this.top,
        left: this.left,
        right: this.right,
        bottom: this.bottom
      });
    },
    containsPoint: function containsPoint(x2, y2) {
      if (arguments.length == 1) {
        y2 = x2.y;
        x2 = x2.x;
      }
      return this.left <= x2 && x2 <= this.right && this.top <= y2 && y2 <= this.bottom;
    },
    containsRegion: function containsRegion(region2) {
      return this.containsPoint(region2.left, region2.top) && this.containsPoint(region2.right, region2.bottom);
    },
    diffHeight: function diffHeight(region2) {
      return this.diff(region2, {
        top: true,
        bottom: true
      });
    },
    diffWidth: function diffWidth(region2) {
      return this.diff(region2, {
        left: true,
        right: true
      });
    },
    diff: function diff(region2, directions) {
      var result = {};
      var dirName;
      for (dirName in directions)
        if ((0, _hasOwn.default)(directions, dirName)) {
          result[dirName] = this[dirName] - region2[dirName];
        }
      return result;
    },
    getPosition: function getPosition2() {
      return {
        left: this.left,
        top: this.top
      };
    },
    getPoint: function getPoint2(position2, asLeftTop) {
      if (!POINT_POSITIONS[position2]) {
        console.warn("The position ", position2, " could not be found! Available options are tl, bl, tr, br, l, r, t, b.");
      }
      var method = "getPoint" + POINT_POSITIONS[position2], result = this[method]();
      if (asLeftTop) {
        return {
          left: result.x,
          top: result.y
        };
      }
      return result;
    },
    getPointYCenter: function getPointYCenter() {
      return {
        x: null,
        y: this.top + this.getHeight() / 2
      };
    },
    getPointXCenter: function getPointXCenter() {
      return {
        x: this.left + this.getWidth() / 2,
        y: null
      };
    },
    getPointTop: function getPointTop() {
      return {
        x: null,
        y: this.top
      };
    },
    getPointTopCenter: function getPointTopCenter() {
      return {
        x: this.left + this.getWidth() / 2,
        y: this.top
      };
    },
    getPointTopLeft: function getPointTopLeft() {
      return {
        x: this.left,
        y: this.top
      };
    },
    getPointTopRight: function getPointTopRight() {
      return {
        x: this.right,
        y: this.top
      };
    },
    getPointBottom: function getPointBottom() {
      return {
        x: null,
        y: this.bottom
      };
    },
    getPointBottomCenter: function getPointBottomCenter() {
      return {
        x: this.left + this.getWidth() / 2,
        y: this.bottom
      };
    },
    getPointBottomLeft: function getPointBottomLeft() {
      return {
        x: this.left,
        y: this.bottom
      };
    },
    getPointBottomRight: function getPointBottomRight() {
      return {
        x: this.right,
        y: this.bottom
      };
    },
    getPointLeft: function getPointLeft() {
      return {
        x: this.left,
        y: null
      };
    },
    getPointLeftCenter: function getPointLeftCenter() {
      return {
        x: this.left,
        y: this.top + this.getHeight() / 2
      };
    },
    getPointRight: function getPointRight() {
      return {
        x: this.right,
        y: null
      };
    },
    getPointRightCenter: function getPointRightCenter() {
      return {
        x: this.right,
        y: this.top + this.getHeight() / 2
      };
    },
    getPointCenter: function getPointCenter() {
      return {
        x: this.left + this.getWidth() / 2,
        y: this.top + this.getHeight() / 2
      };
    },
    getHeight: function getHeight() {
      return this.bottom - this.top;
    },
    getWidth: function getWidth() {
      return this.right - this.left;
    },
    getTop: function getTop() {
      return this.top;
    },
    getLeft: function getLeft() {
      return this.left;
    },
    getBottom: function getBottom() {
      return this.bottom;
    },
    getRight: function getRight() {
      return this.right;
    },
    getArea: function getArea() {
      return this.getWidth() * this.getHeight();
    },
    constrainTo: function constrainTo(contrain) {
      var intersect = this.getIntersection(contrain);
      var shift;
      if (!intersect || !intersect.equals(this)) {
        var contrainWidth = contrain.getWidth(), contrainHeight = contrain.getHeight();
        if (this.getWidth() > contrainWidth) {
          this.left = contrain.left;
          this.setWidth(contrainWidth);
        }
        if (this.getHeight() > contrainHeight) {
          this.top = contrain.top;
          this.setHeight(contrainHeight);
        }
        shift = {};
        if (this.right > contrain.right) {
          shift.left = contrain.right - this.right;
        }
        if (this.bottom > contrain.bottom) {
          shift.top = contrain.bottom - this.bottom;
        }
        if (this.left < contrain.left) {
          shift.left = contrain.left - this.left;
        }
        if (this.top < contrain.top) {
          shift.top = contrain.top - this.top;
        }
        this.shift(shift);
        return true;
      }
      return false;
    },
    __IS_REGION: true
  });
  Object.defineProperties(REGION.prototype, {
    width: {
      get: function get2() {
        return this.getWidth();
      },
      set: function set2(width) {
        return this.setWidth(width);
      }
    },
    height: {
      get: function get2() {
        return this.getHeight();
      },
      set: function set2(height) {
        return this.setHeight(height);
      }
    }
  });
  (0, _statics.default)(REGION);
  var _default2 = REGION;
  src$g.default = _default2;
  return src$g;
}
var hasRequiredRegion;
function requireRegion() {
  if (hasRequiredRegion)
    return region;
  hasRequiredRegion = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(region, "__esModule", {
    value: true
  });
  region.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$j());
  var _default2 = _src.default;
  region.default = _default2;
  return region;
}
var Region_static = {};
var hasRequiredRegion_static;
function requireRegion_static() {
  if (hasRequiredRegion_static)
    return Region_static;
  hasRequiredRegion_static = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _region = _interopRequireDefault2(requireRegion());
  _region.default.align = function(sourceRegion, targetRegion, align2) {
    targetRegion = _region.default.from(targetRegion);
    align2 = (align2 || "c-c").split("-");
    if (align2.length != 2) {
      console.warn("Incorrect region alignment! The align parameter need to be in the form 'br-c', that is, a - separated string!", align2);
    }
    return _region.default.alignToPoint(sourceRegion, targetRegion.getPoint(align2[1]), align2[0]);
  };
  _region.default.alignToPoint = function(region2, point, anchor) {
    region2 = _region.default.from(region2);
    var sourcePoint = region2.getPoint(anchor);
    var count = 0;
    var shiftObj = {};
    if (sourcePoint.x != null && point.x != null) {
      count++;
      shiftObj.left = point.x - sourcePoint.x;
    }
    if (sourcePoint.y != null && point.y != null) {
      count++;
      shiftObj.top = point.y - sourcePoint.y;
    }
    if (count) {
      region2.shift(shiftObj);
    }
    return region2;
  };
  return Region_static;
}
var Region_proto = {};
var hasRequiredRegion_proto;
function requireRegion_proto() {
  if (hasRequiredRegion_proto)
    return Region_proto;
  hasRequiredRegion_proto = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _region = _interopRequireDefault2(requireRegion());
  _region.default.prototype.alignToRegion = function(region2, alignPositions) {
    _region.default.align(this, region2, alignPositions);
    return this;
  };
  _region.default.prototype.alignToPoint = function(point, anchor) {
    _region.default.alignToPoint(this, point, anchor);
    return this;
  };
  return Region_proto;
}
var computeAlignRegion = {};
var alignToNormalized = {};
var hasRequiredAlignToNormalized;
function requireAlignToNormalized() {
  if (hasRequiredAlignToNormalized)
    return alignToNormalized;
  hasRequiredAlignToNormalized = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(alignToNormalized, "__esModule", {
    value: true
  });
  alignToNormalized.default = void 0;
  var _region = _interopRequireDefault2(requireRegion());
  function ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions2, config2) {
    targetRegion = _region.default.from(targetRegion);
    config2 = config2 || {};
    var constrainTo = config2.constrain, syncOption = config2.sync, offsets = config2.offset || [], syncWidth = false, syncHeight = false, sourceClone = sourceRegion.clone();
    if (!Array.isArray(positions2)) {
      positions2 = positions2 ? [positions2] : [];
    }
    if (!Array.isArray(offsets)) {
      offsets = offsets ? [offsets] : [];
    }
    if (constrainTo) {
      constrainTo = constrainTo === true ? _region.default.getDocRegion() : constrainTo.getRegion();
    }
    if (syncOption) {
      if (syncOption.size) {
        syncWidth = true;
        syncHeight = true;
      } else {
        syncWidth = syncOption === true ? true : syncOption.width || false;
        syncHeight = syncOption === true ? true : syncOption.height || false;
      }
    }
    if (syncWidth) {
      sourceClone.setWidth(targetRegion.getWidth());
    }
    if (syncHeight) {
      sourceClone.setHeight(targetRegion.getHeight());
    }
    var offset, i = 0, len = positions2.length, pos, intersection, itArea, maxArea = -1, maxAreaIndex = -1;
    for (; i < len; i++) {
      pos = positions2[i];
      offset = offsets[i];
      sourceClone.alignToRegion(targetRegion, pos);
      if (offset) {
        if (!Array.isArray(offset)) {
          offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top];
        }
        sourceClone.shift({
          left: offset[0],
          top: offset[1]
        });
      }
      if (constrainTo) {
        intersection = sourceClone.getIntersection(constrainTo);
        if (intersection && intersection.equals(sourceClone)) {
          sourceRegion.set(sourceClone);
          return pos;
        } else {
          if (intersection && (itArea = intersection.getArea()) > maxArea) {
            maxArea = itArea;
            maxAreaIndex = i;
          }
        }
      } else {
        sourceRegion.set(sourceClone);
        return pos;
      }
    }
    if (~maxAreaIndex) {
      pos = positions2[maxAreaIndex];
      offset = offsets[maxAreaIndex];
      sourceClone.alignToRegion(targetRegion, pos);
      if (offset) {
        sourceClone.shift({
          left: offset[0],
          top: offset[1]
        });
      }
      intersection = sourceClone.getIntersection(constrainTo);
      sourceClone.setRegion(intersection);
      sourceClone.alignToRegion(targetRegion, pos);
      if (offset) {
        sourceClone.shift({
          left: offset[0],
          top: offset[1]
        });
      }
      sourceRegion.set(sourceClone);
      return pos;
    }
  }
  var _default2 = ALIGN_TO_NORMALIZED;
  alignToNormalized.default = _default2;
  return alignToNormalized;
}
var hasRequiredComputeAlignRegion;
function requireComputeAlignRegion() {
  if (hasRequiredComputeAlignRegion)
    return computeAlignRegion;
  hasRequiredComputeAlignRegion = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(computeAlignRegion, "__esModule", {
    value: true
  });
  computeAlignRegion.default = void 0;
  var _region = _interopRequireDefault2(requireRegion());
  var _alignToNormalized = _interopRequireDefault2(requireAlignToNormalized());
  function COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions2, config2) {
    sourceRegion = _region.default.from(sourceRegion);
    var sourceClone = sourceRegion.clone();
    var position2 = (0, _alignToNormalized.default)(sourceClone, targetRegion, positions2, config2);
    return {
      position: position2,
      region: sourceClone,
      widthChanged: sourceClone.getWidth() != sourceRegion.getWidth(),
      heightChanged: sourceClone.getHeight() != sourceRegion.getHeight(),
      positionChanged: sourceClone.equalsPosition(sourceRegion)
    };
  }
  var _default2 = COMPUTE_ALIGN_REGION;
  computeAlignRegion.default = _default2;
  return computeAlignRegion;
}
var hasRequiredRegionAlign;
function requireRegionAlign() {
  if (hasRequiredRegionAlign)
    return regionAlign;
  hasRequiredRegionAlign = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(regionAlign, "__esModule", {
    value: true
  });
  regionAlign.default = void 0;
  var _region = _interopRequireDefault2(requireRegion());
  requireRegion_static();
  requireRegion_proto();
  var _computeAlignRegion = _interopRequireDefault2(requireComputeAlignRegion());
  _region.default.alignRegions = function(sourceRegion, targetRegion, positions2, config2) {
    var result = (0, _computeAlignRegion.default)(sourceRegion, targetRegion, positions2, config2);
    var alignedRegion = result.region;
    if (!alignedRegion.equals(sourceRegion)) {
      sourceRegion.setRegion(alignedRegion);
    }
    return result.position;
  };
  _region.default.prototype.alignTo = function(target, positions2, config2) {
    config2 = config2 || {};
    var sourceRegion = this;
    var targetRegion = _region.default.from(target);
    var result = (0, _computeAlignRegion.default)(sourceRegion, targetRegion, positions2, config2);
    var resultRegion = result.region;
    if (!resultRegion.equalsSize(sourceRegion)) {
      this.setSize(resultRegion.getSize());
    }
    if (!resultRegion.equalsPosition(sourceRegion)) {
      this.setPosition(resultRegion.getPosition(), {
        absolute: !!config2.absolute
      });
    }
    return result.position;
  };
  var _default2 = _region.default;
  regionAlign.default = _default2;
  return regionAlign;
}
var getPositionOffsets = {};
var hasRequiredGetPositionOffsets;
function requireGetPositionOffsets() {
  if (hasRequiredGetPositionOffsets)
    return getPositionOffsets;
  hasRequiredGetPositionOffsets = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getPositionOffsets, "__esModule", {
    value: true
  });
  getPositionOffsets.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _positionsMap = _interopRequireDefault2(requirePositionsMap());
  function createEmptyArray(length2, fn) {
    return Array.apply(null, Array(length2)).map(fn);
  }
  function handleNumericOffset(offset, offsetCorrection) {
    var normalizedOffset = {
      x: offset * offsetCorrection.x,
      y: offset * offsetCorrection.y
    };
    if (offsetCorrection.resetNumeric) {
      normalizedOffset[offsetCorrection.resetNumeric] = 0;
    }
    return normalizedOffset;
  }
  function handleObjectOffset(offset, offsetCorrection) {
    var normalizedOffset = {
      x: offset.x === void 0 ? 0 : offset.x * offsetCorrection.x,
      y: offset.y === void 0 ? 0 : offset.y * offsetCorrection.y
    };
    return normalizedOffset;
  }
  function normalizeOffset(offset, positionsLength) {
    var normalizedOffsets = null;
    if (typeof offset === "number" || !Array.isArray(offset) && (0, _typeof2.default)(offset) === "object") {
      normalizedOffsets = createEmptyArray(positionsLength, function() {
        return offset;
      });
    } else if (Array.isArray(offset)) {
      if (offset.length < positionsLength) {
        var lastOffsetItem = offset[offset.length - 1];
        var extraOffsets = createEmptyArray(positionsLength - offset.length, function() {
          return lastOffsetItem;
        });
        normalizedOffsets = [].concat((0, _toConsumableArray2.default)(offset), (0, _toConsumableArray2.default)(extraOffsets));
      } else {
        normalizedOffsets = offset;
      }
    }
    return normalizedOffsets;
  }
  function getPositionOffsets$1(positions2, offset) {
    var normalizedOffsets = normalizeOffset(offset, positions2.length);
    var positionOffsets = normalizedOffsets.map(function(normalizedOffset, index2) {
      var position2 = positions2[index2];
      var positionMap = _positionsMap.default[position2];
      var offsetCorrection = positionMap ? positionMap.offset : position2.offset || {
        x: 0,
        y: 0
      };
      if (typeof normalizedOffset === "number") {
        return handleNumericOffset(normalizedOffset, offsetCorrection);
      }
      return handleObjectOffset(normalizedOffset, offsetCorrection);
    });
    return positionOffsets;
  }
  var _default2 = getPositionOffsets$1;
  getPositionOffsets.default = _default2;
  return getPositionOffsets;
}
var getArrowPosition = {};
var getArrowPositionDirection = {};
var hasRequiredGetArrowPositionDirection;
function requireGetArrowPositionDirection() {
  if (hasRequiredGetArrowPositionDirection)
    return getArrowPositionDirection;
  hasRequiredGetArrowPositionDirection = 1;
  Object.defineProperty(getArrowPositionDirection, "__esModule", {
    value: true
  });
  getArrowPositionDirection.default = void 0;
  var topPositions = ["top", "bc-tc", "bl-tl", "br-tr"];
  var bottomPositions = ["bottom", "tc-bc", "tl-bl", "tr-br"];
  var rightPositions = ["right", "lc-rc", "tl-tr", "bl-br"];
  var leftPositions = ["left", "rc-lc", "tr-tl", "br-bl"];
  function isTopPosition(position2) {
    return topPositions.indexOf(position2) !== -1;
  }
  function isBottomPosition(position2) {
    return bottomPositions.indexOf(position2) !== -1;
  }
  function isLeftPosition(position2) {
    return leftPositions.indexOf(position2) !== -1;
  }
  function isRightPosition(position2) {
    return rightPositions.indexOf(position2) !== -1;
  }
  function getArrowPositionDirection$1(position2) {
    var positionTest = {
      top: isTopPosition(position2),
      bottom: isBottomPosition(position2),
      right: isRightPosition(position2),
      left: isLeftPosition(position2)
    };
    return Object.keys(positionTest).filter(function(position3) {
      return !!positionTest[position3];
    })[0];
  }
  var _default2 = getArrowPositionDirection$1;
  getArrowPositionDirection.default = _default2;
  return getArrowPositionDirection;
}
var hasRequiredGetArrowPosition;
function requireGetArrowPosition() {
  if (hasRequiredGetArrowPosition)
    return getArrowPosition;
  hasRequiredGetArrowPosition = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getArrowPosition, "__esModule", {
    value: true
  });
  getArrowPosition.default = void 0;
  var _getArrowPositionDirection = _interopRequireDefault2(requireGetArrowPositionDirection());
  var _clamp = _interopRequireDefault2(requireClamp());
  function getLeftPosition(overlayRegion, targetRegion) {
    return targetRegion.left - overlayRegion.left + targetRegion.width / 2;
  }
  function getTopPosition(overlayRegion, targetRegion) {
    return targetRegion.top - overlayRegion.top + targetRegion.height / 2;
  }
  function getArrowPosition$1(_ref2) {
    var overlayRegion = _ref2.overlayRegion, targetRegion = _ref2.targetRegion, position2 = _ref2.position, arrowSize = _ref2.arrowSize;
    var arrowPosition = null;
    var positionDirection = (0, _getArrowPositionDirection.default)(position2);
    var left = (0, _clamp.default)(getLeftPosition(overlayRegion, targetRegion), arrowSize / 2, overlayRegion.width - arrowSize / 2);
    var top = (0, _clamp.default)(getTopPosition(overlayRegion, targetRegion), arrowSize / 2, overlayRegion.height - arrowSize / 2);
    arrowPosition = {
      top: {
        position: {
          left,
          top: "calc(100% - 1px)"
        },
        location: "top"
      },
      bottom: {
        position: {
          left,
          bottom: "calc(100% - 1px)"
        },
        location: "bottom"
      },
      right: {
        position: {
          top,
          right: "calc(100% - 1px)"
        },
        location: "right"
      },
      left: {
        position: {
          top,
          left: "calc(100% - 1px)"
        },
        location: "left"
      }
    }[positionDirection];
    return arrowPosition;
  }
  var _default2 = getArrowPosition$1;
  getArrowPosition.default = _default2;
  return getArrowPosition;
}
var getConstrainRegion$1 = {};
var selectParent = {};
var hasRequiredSelectParent;
function requireSelectParent() {
  if (hasRequiredSelectParent)
    return selectParent;
  hasRequiredSelectParent = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(selectParent, "__esModule", {
    value: true
  });
  selectParent.default = void 0;
  var _matchesSelector = _interopRequireDefault2(requireMatchesSelector$1());
  function selectParent$1(selector, node2) {
    node2 = node2.parentElement;
    while (node2) {
      if ((0, _matchesSelector.default)(node2, selector)) {
        return node2;
      }
      node2 = node2.parentElement;
    }
    return false;
  }
  var _default2 = selectParent$1;
  selectParent.default = _default2;
  return selectParent;
}
var getViewportRegion = {};
var hasRequiredGetViewportRegion;
function requireGetViewportRegion() {
  if (hasRequiredGetViewportRegion)
    return getViewportRegion;
  hasRequiredGetViewportRegion = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getViewportRegion, "__esModule", {
    value: true
  });
  getViewportRegion.default = void 0;
  var _region = _interopRequireDefault2(requireRegion());
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var CACHED;
  var LISTENING_WINDOW_RESIZE;
  var setupWindowResize = function setupWindowResize2() {
    LISTENING_WINDOW_RESIZE = true;
    globalObject.addEventListener("resize", function() {
      CACHED = null;
    });
  };
  function getViewportRegion$1() {
    if (CACHED) {
      return CACHED;
    }
    if (!LISTENING_WINDOW_RESIZE) {
      setupWindowResize();
    }
    var viewportWidth = Math.max(globalObject.document.documentElement.clientWidth, globalObject.innerWidth || 0);
    var viewportHeight = Math.max(globalObject.document.documentElement.clientHeight, globalObject.innerHeight || 0);
    return CACHED = _region.default.from({
      top: 0,
      left: 0,
      width: viewportWidth,
      height: viewportHeight
    });
  }
  var _default2 = getViewportRegion$1;
  getViewportRegion.default = _default2;
  return getViewportRegion;
}
var hasRequiredGetConstrainRegion$1;
function requireGetConstrainRegion$1() {
  if (hasRequiredGetConstrainRegion$1)
    return getConstrainRegion$1;
  hasRequiredGetConstrainRegion$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getConstrainRegion$1, "__esModule", {
    value: true
  });
  getConstrainRegion$1.default = _default2;
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _selectParent = _interopRequireDefault2(requireSelectParent());
  var _getViewportRegion = _interopRequireDefault2(requireGetViewportRegion());
  function _default2(constrainTo, domNode) {
    var constrainRegion;
    if (constrainTo === true) {
      constrainRegion = (0, _getViewportRegion.default)();
    }
    if (!constrainRegion && typeof constrainTo === "function") {
      constrainTo = _regionAlign.default.from(constrainTo(domNode));
    }
    if (!constrainRegion && typeof constrainTo === "string") {
      constrainTo = (0, _selectParent.default)(constrainTo, domNode);
    }
    if (!constrainRegion && constrainTo) {
      constrainRegion = _regionAlign.default.from(constrainTo);
    }
    return constrainRegion;
  }
  return getConstrainRegion$1;
}
var isPositionBottom = {};
var hasRequiredIsPositionBottom;
function requireIsPositionBottom() {
  if (hasRequiredIsPositionBottom)
    return isPositionBottom;
  hasRequiredIsPositionBottom = 1;
  Object.defineProperty(isPositionBottom, "__esModule", {
    value: true
  });
  isPositionBottom.default = void 0;
  var bottomPositions = {
    "tl-br": true,
    "tc-bc": true,
    "tl-bl": true,
    "tr-br": true,
    "tr-bl": true
  };
  function isPositionBottom$1(position2) {
    return !!bottomPositions[position2];
  }
  var _default2 = isPositionBottom$1;
  isPositionBottom.default = _default2;
  return isPositionBottom;
}
var hasRequiredGetPosition;
function requireGetPosition() {
  if (hasRequiredGetPosition)
    return getPosition;
  hasRequiredGetPosition = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getPosition, "__esModule", {
    value: true
  });
  getPosition.default = void 0;
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _assign = _interopRequireDefault2(requireAssign());
  var _getPositionOffsets = _interopRequireDefault2(requireGetPositionOffsets());
  var _positionsMap = _interopRequireDefault2(requirePositionsMap());
  var _getArrowPosition = _interopRequireDefault2(requireGetArrowPosition());
  var _getConstrainRegion = _interopRequireDefault2(requireGetConstrainRegion$1());
  var _isPositionBottom = _interopRequireDefault2(requireIsPositionBottom());
  var posiblePositions = Object.keys(_positionsMap.default);
  function getPosition$1(_ref2) {
    var _ref$constrainTo = _ref2.constrainTo, constrainTo = _ref$constrainTo === void 0 ? true : _ref$constrainTo, targetNode = _ref2.targetNode, overlayNode = _ref2.overlayNode, _ref$offset = _ref2.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$positions = _ref2.positions, positions2 = _ref$positions === void 0 ? posiblePositions : _ref$positions, _ref$relativeToViewpo = _ref2.relativeToViewport, relativeToViewport = _ref$relativeToViewpo === void 0 ? true : _ref$relativeToViewpo, _ref$arrowSize = _ref2.arrowSize, arrowSize = _ref$arrowSize === void 0 ? 10 : _ref$arrowSize, _ref$adjustOnPosition = _ref2.adjustOnPositionBottom, adjustOnPositionBottom = _ref$adjustOnPosition === void 0 ? true : _ref$adjustOnPosition, _ref$showArrow = _ref2.showArrow, showArrow = _ref$showArrow === void 0 ? true : _ref$showArrow;
    if (!constrainTo || !overlayNode || !targetNode) {
      return null;
    }
    var constrain = (0, _getConstrainRegion.default)(constrainTo, targetNode);
    var overlayRegion = _regionAlign.default.from(overlayNode);
    var alignRegion = _regionAlign.default.from(targetNode);
    var newRegion = overlayRegion.clone();
    var positionsNormalized = positions2.map(function(position3) {
      var normalizedPosition;
      if (_positionsMap.default[position3]) {
        normalizedPosition = _positionsMap.default[position3].position;
      } else {
        normalizedPosition = position3.position || position3;
      }
      return normalizedPosition;
    });
    var positionsOffsets = (0, _getPositionOffsets.default)(positions2, offset);
    var positionsOffsetsClone = positionsOffsets.map(function(offset2) {
      return (0, _assign.default)({}, offset2);
    });
    var succesfullPosition = newRegion.alignTo(alignRegion, positionsNormalized, {
      constrain,
      offset: positionsOffsetsClone
    });
    var constrainedWidth = newRegion.getWidth() != overlayRegion.getWidth();
    var constrainedHeight = newRegion.getHeight() != overlayRegion.getHeight();
    var arrowConfig = null;
    if (showArrow) {
      arrowConfig = (0, _getArrowPosition.default)({
        arrowSize,
        overlayRegion: newRegion,
        targetRegion: alignRegion,
        position: succesfullPosition
      });
    }
    var position2 = {
      top: newRegion.top,
      left: newRegion.left
    };
    if (!relativeToViewport && overlayNode.offsetParent) {
      var offsetParentRegion = _regionAlign.default.from(overlayNode.offsetParent);
      position2.left -= offsetParentRegion.left;
      position2.top -= offsetParentRegion.top;
    }
    if ((0, _isPositionBottom.default)(succesfullPosition) && adjustOnPositionBottom) {
      position2.bottom = -(overlayRegion.height + (alignRegion.height - position2.top));
      delete position2.top;
    }
    return {
      alignRegion,
      constrainedHeight,
      constrainedWidth,
      constrained: constrainedHeight || constrainedWidth,
      positionRegion: newRegion,
      arrowConfig,
      position: position2,
      succesfullPosition
    };
  }
  var _default2 = getPosition$1;
  getPosition.default = _default2;
  return getPosition;
}
var hasRequiredGetPositionRelativeToElement;
function requireGetPositionRelativeToElement() {
  if (hasRequiredGetPositionRelativeToElement)
    return getPositionRelativeToElement;
  hasRequiredGetPositionRelativeToElement = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "positionsMap", {
      enumerable: true,
      get: function get2() {
        return _positionsMap.default;
      }
    });
    var _positionsMap = _interopRequireDefault2(requirePositionsMap());
    var _getPosition = _interopRequireDefault2(requireGetPosition());
    var _default2 = _getPosition.default;
    exports.default = _default2;
  })(getPositionRelativeToElement);
  return getPositionRelativeToElement;
}
var Arrow$1 = {};
var hasRequiredArrow$1;
function requireArrow$1() {
  if (hasRequiredArrow$1)
    return Arrow$1;
  hasRequiredArrow$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Arrow$1, "__esModule", {
    value: true
  });
  Arrow$1.default = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _assign = _interopRequireDefault2(requireAssign());
  function Arrow2(props2) {
    var style = (0, _assign.default)({}, props2.style);
    var wrapperStyle = (0, _assign.default)({}, props2.position);
    var arrowSize = {
      height: props2.size,
      width: props2.size
    };
    (0, _assign.default)(style, arrowSize);
    var wrapperSize = 2 * (0.5 * props2.size * Math.pow(2, 0.5));
    if (wrapperSize) {
      wrapperStyle.width = wrapperSize;
      wrapperStyle.height = wrapperSize;
    }
    return _react.default.createElement("div", {
      className: props2.wrapperClassName,
      style: wrapperStyle
    }, _react.default.createElement("div", {
      className: props2.className,
      style
    }));
  }
  Arrow2.propTypes = {
    className: _propTypes.default.string,
    style: _propTypes.default.object,
    size: _propTypes.default.number,
    position: _propTypes.default.shape({
      top: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      left: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })
  };
  var _default2 = Arrow2;
  Arrow$1.default = _default2;
  return Arrow$1;
}
var hasRequiredOverlay$1;
function requireOverlay$1() {
  if (hasRequiredOverlay$1)
    return Overlay;
  hasRequiredOverlay$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof3 = require_typeof();
  Object.defineProperty(Overlay, "__esModule", {
    value: true
  });
  Overlay.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _assign = _interopRequireDefault2(requireAssign());
  var _eventManager = _interopRequireDefault2(requireEventManager());
  var _getMinMaxSize = _interopRequireDefault2(requireGetMinMaxSize$1());
  var _join = _interopRequireDefault2(requireJoin$1());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$3());
  var _normalizeEvent = _interopRequireDefault2(requireNormalizeEvent());
  var _getFocusableElements = _interopRequireDefault2(requireGetFocusableElements());
  var _getPositionRelativeToElement = _interopRequireDefault2(requireGetPositionRelativeToElement());
  var _Arrow = _interopRequireDefault2(requireArrow$1());
  var _positionsMap = requirePositionsMap();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var InovuaOverlay = function(_Component) {
    (0, _inherits2.default)(InovuaOverlay2, _Component);
    var _super = _createSuper(InovuaOverlay2);
    function InovuaOverlay2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaOverlay2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
        if (prevProps.visible !== _this.props.visible) {
          _this.handleVisibleChange(_this.props.visible);
        }
      });
      _this.state = {
        visible: props2.defaultVisible,
        position: null,
        arrowConfig: null,
        renderTrigger: null
      };
      _this.handleDocumentScroll = _this.handleDocumentScroll.bind((0, _assertThisInitialized2.default)(_this));
      _this.onHide = _this.onHide.bind((0, _assertThisInitialized2.default)(_this));
      _this.onShow = _this.onShow.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
      _this.getOverlayNode = _this.getOverlayNode.bind((0, _assertThisInitialized2.default)(_this));
      _this.getVisible = _this.getVisible.bind((0, _assertThisInitialized2.default)(_this));
      _this.getActiveTargetNode = _this.getActiveTargetNode.bind((0, _assertThisInitialized2.default)(_this));
      _this.rootRef = function(node2) {
        _this.rootNode = node2;
      };
      _this.fixedRef = function(node2) {
        _this.fixedNode = node2;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaOverlay2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        this.register();
        this.componentIsMounted = true;
        if (this.props.updatePositionOnScroll) {
          window.addEventListener("scroll", this.handleDocumentScroll, true);
        }
        var doPosition = function doPosition2() {
          var target = _this2.getTarget();
          if ((0, _typeof2.default)(target) === "object") {
            _this2.activeTargetNode = target;
            _this2.setPosition(_this2.props.onInitialPosition);
            if (_this2.getVisible()) {
              _this2.onShow({
                target
              });
            }
          }
        };
        if (this.props.rafOnMount) {
          requestAnimationFrame(doPosition);
        } else {
          doPosition();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unregister();
        this.componentIsMounted = null;
        this.activeTargetNode = null;
        if (this.props.updatePositionOnScroll) {
          window.removeEventListener("scroll", this.handleDocumentScroll, true);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var className = this.prepareClassName();
        var contentClassName = this.prepareContentClassName();
        var style = this.prepareStyle();
        var contentStyle = this.prepareContentStyle();
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, InovuaOverlay2.propTypes)), {}, {
          className,
          ref: this.rootRef,
          style,
          onKeyDown: this.handleKeyDown
        }), _react.default.createElement("div", _objectSpread2(_objectSpread2({
          className: contentClassName
        }, this.getChildrenProps()), {}, {
          style: contentStyle
        })), props2.arrow && this.renderArrow(), props2.relativeToViewport && this.renderFixed());
      }
    }, {
      key: "renderFixed",
      value: function renderFixed() {
        return _react.default.createElement("div", {
          style: {
            position: "fixed",
            top: 0,
            left: 0,
            width: 0,
            height: 0
          },
          ref: this.fixedRef
        });
      }
    }, {
      key: "renderArrow",
      value: function renderArrow() {
        if (!this.state.arrowConfig) {
          return null;
        }
        var rootClassName = this.props.rootClassName;
        var position2 = this.state.arrowConfig.position;
        var location = this.state.arrowConfig.location;
        var className = (0, _join.default)("".concat(rootClassName, "__arrow"), "".concat(rootClassName, "__arrow--").concat(location), this.props.arrowClassName);
        var style = (0, _assign.default)({}, this.props.arrowStyle);
        if (this.props.border) {
          (0, _assign.default)(style, {
            border: this.props.border
          });
        }
        if (this.props.background != void 0) {
          (0, _assign.default)(style, {
            background: this.props.background
          });
        }
        var wrapperClassName = (0, _join.default)("".concat(rootClassName, "__arrow-wrapper"), "".concat(rootClassName, "__arrow-wrapper--").concat(location));
        return _react.default.createElement(_Arrow.default, {
          className,
          wrapperClassName,
          position: position2,
          style,
          size: this.props.arrowSize
        });
      }
    }, {
      key: "getChildrenProps",
      value: function getChildrenProps() {
        var children = this.props.children;
        var targetNode = this.getPositionTarget();
        var childrenProps = {
          children
        };
        var childrenParams = {
          targetNode,
          visible: this.getVisible()
        };
        if (typeof children === "function") {
          return {
            children: children(childrenParams)
          };
        }
        if (children === void 0 && targetNode) {
          var tooltip = targetNode.getAttribute("data-tooltip");
          if (tooltip != null) {
            return {
              dangerouslySetInnerHTML: {
                __html: tooltip
              }
            };
          }
        }
        return childrenProps;
      }
    }, {
      key: "prepareClassName",
      value: function prepareClassName2() {
        var props2 = this.props, state2 = this.state;
        var rootClassName = props2.rootClassName, theme2 = props2.theme, visibleClassName = props2.visibleClassName, relativeToViewport = props2.relativeToViewport;
        var visible = this.getVisible();
        var className = (0, _join.default)(rootClassName, props2.className, visible && "".concat(rootClassName, "--visible"), visible && visibleClassName, !visible && "".concat(rootClassName, "--invisible"), relativeToViewport && "".concat(rootClassName, "--position-fixed"), theme2 && "".concat(rootClassName, "--theme-").concat(theme2));
        if (this.props.fade) {
          className = (0, _join.default)(className, props2.fade && "".concat(rootClassName, "--has-transition"), state2.transitionEnter && "".concat(rootClassName, "--transition-enter"), state2.transitionEnterActive && "".concat(rootClassName, "--transition-enter-active"), state2.transitionLeave && "".concat(rootClassName, "--transition-leave"), state2.transitionLeaveActive && "".concat(rootClassName, "--transition-leave-active"));
        }
        return className;
      }
    }, {
      key: "prepareContentClassName",
      value: function prepareContentClassName() {
        return (0, _join.default)(this.props.contentClassName, "".concat(this.props.rootClassName, "__content"));
      }
    }, {
      key: "prepareStyle",
      value: function prepareStyle2() {
        var style = (0, _assign.default)({
          zIndex: this.props.zIndex
        }, this.props.style);
        if (this.props.fade) {
          (0, _assign.default)(style, this.getTransitionStyle());
        }
        if (this.props.border) {
          (0, _assign.default)(style, {
            border: this.props.border
          });
        }
        if (this.state.position) {
          if (this.props.useTransform) {
            style.transform = "translate3d(".concat(Math.round(this.state.position.left || 0), "px, ").concat(Math.round(this.state.position.top || 0), "px, 0px)");
            style.left = 0;
            style.top = 0;
          } else {
            (0, _assign.default)(style, {
              left: Math.round(this.state.position.left)
            });
            if (this.state.position.top != null) {
              style.top = Math.round(this.state.position.top);
            }
          }
          if (this.state.position.bottom != null) {
            style.bottom = Math.round(this.state.position.bottom);
          }
          if (this.state.position.width) {
            style.width = this.state.position.width;
          }
        }
        return style;
      }
    }, {
      key: "prepareContentStyle",
      value: function prepareContentStyle() {
        var style = (0, _assign.default)({}, this.props.contentStyle);
        if (this.props.background != void 0) {
          (0, _assign.default)(style, {
            background: this.props.background
          });
        }
        if (this.props.padding != void 0) {
          (0, _assign.default)(style, {
            padding: this.props.padding
          });
        }
        if (this.props.height != void 0) {
          (0, _assign.default)(style, {
            height: this.props.height
          });
        }
        if (this.props.width != void 0) {
          (0, _assign.default)(style, {
            width: this.props.width
          });
        }
        var maxMinSize = (0, _getMinMaxSize.default)(this.props);
        (0, _assign.default)(style, maxMinSize);
        return style;
      }
    }, {
      key: "getTransitionStyle",
      value: function getTransitionStyle() {
        var state2 = this.state;
        var style = {};
        if (state2.transitionEnterActive || state2.transitionLeaveActive) {
          style.transitionDuration = state2.transitionEnterActive ? "".concat(this.getFadeInDuration(), "ms") : "".concat(this.getFadeOutDuration(), "ms");
          style.transitionTimingFunction = state2.transitionEnterActive ? this.getFadeInTransitionFunction() : this.getFadeOutTransitionFunction();
        }
        return style;
      }
    }, {
      key: "onShow",
      value: function onShow(event2) {
        var _this3 = this;
        this.activeTargetNode = event2.target;
        this.setState({
          renderTrigger: !this.state.renderTrigger
        }, function() {
          _this3.setPosition();
          _this3.setVisible(true);
        });
      }
    }, {
      key: "onHide",
      value: function onHide(event2) {
        this.setVisible(false);
      }
    }, {
      key: "register",
      value: function register() {
        var _this4 = this;
        this.eventManager = this.getEventManager()({
          showEvent: (0, _normalizeEvent.default)(this.props.showEvent),
          hideEvent: (0, _normalizeEvent.default)(this.props.hideEvent),
          target: this.getTarget(),
          hideOnScroll: this.props.hideOnScroll,
          hideOnClickOutside: this.props.hideOnClickOutside,
          hideOnEscape: this.props.hideOnEscape,
          onShow: this.onShow,
          onHide: this.onHide,
          getShowDelay: function getShowDelay() {
            return _this4.props.showDelay;
          },
          getHideDelay: function getHideDelay() {
            return _this4.props.hideDelay;
          },
          getVisible: this.getVisible,
          getOverlayNode: this.getOverlayNode,
          getActiveTargetNode: this.getActiveTargetNode
        });
      }
    }, {
      key: "unregister",
      value: function unregister() {
        if (this.eventManager) {
          this.eventManager.unregister();
        }
      }
    }, {
      key: "getEventManager",
      value: function getEventManager() {
        return this.props.eventManager;
      }
    }, {
      key: "getTarget",
      value: function getTarget() {
        var target;
        var rootNode = this.getOverlayNode();
        if (this.props.target) {
          target = this.props.target;
          if (typeof target === "function") {
            target = target(this.props, rootNode, this);
          }
        } else {
          if (rootNode) {
            target = rootNode.parentElement;
          }
        }
        return target;
      }
    }, {
      key: "setVisible",
      value: function setVisible(visible) {
        if (!this.isVisibleControlled()) {
          if (visible !== this.getVisible()) {
            this.handleVisibleChange(visible);
          }
          this.setState({
            visible
          });
        }
        if (visible) {
          this.props.onShow();
        } else {
          this.props.onHide();
        }
        this.props.onVisibleChange(visible);
      }
    }, {
      key: "isVisibleControlled",
      value: function isVisibleControlled() {
        return this.props.visible != null;
      }
    }, {
      key: "getVisible",
      value: function getVisible() {
        return this.isVisibleControlled() ? this.props.visible : this.state.visible;
      }
    }, {
      key: "setPosition",
      value: function setPosition(callback2) {
        this.setState(this.getPositionConfig(), callback2);
      }
    }, {
      key: "getPositionConfig",
      value: function getPositionConfig() {
        var _this$props = this.props, constrainTo = _this$props.constrainTo, offset = _this$props.offset, syncWidth = _this$props.syncWidth;
        var positions2 = this.props.positions;
        var targetNode = this.getPositionTarget();
        var tooltipPositions = targetNode ? targetNode.getAttribute("data-tooltip-positions") : null;
        if (tooltipPositions) {
          positions2 = tooltipPositions.split(",").map(function(position2) {
            return position2 && position2.trim ? position2.trim() : position2;
          });
        }
        var normalizedPositions = Array.isArray(positions2) ? positions2 : [positions2];
        var newState = (0, _getPositionRelativeToElement.default)({
          showArrow: true,
          constrainTo,
          offset,
          targetNode,
          overlayNode: this.getOverlayNode(),
          positions: normalizedPositions,
          adjustOnPositionBottom: this.props.adjustOnPositionBottom,
          relativeToViewport: this.props.relativeToViewport,
          arrowSize: this.props.arrowSize
        });
        if (this.props.relativeToViewport && this.fixedNode) {
          var fixedRect = this.fixedNode.getBoundingClientRect();
          if (newState && newState.position) {
            var useTransform = this.props.useTransform;
            newState.position = {
              top: newState.position.top - (useTransform ? 0 : fixedRect.top),
              left: newState.position.left - (useTransform ? 0 : fixedRect.left)
            };
            if (syncWidth) {
              newState.position.width = newState.alignRegion.width;
            }
          }
        }
        return newState;
      }
    }, {
      key: "handleDocumentScroll",
      value: function handleDocumentScroll() {
        if (this.props.updatePositionOnScroll) {
          this.updateDomPosition();
        }
      }
    }, {
      key: "updateDomPosition",
      value: function updateDomPosition() {
        var positionConfig = this.getPositionConfig();
        if (this.rootNode && positionConfig) {
          var newPosition = positionConfig.position;
          if (newPosition.bottom !== void 0) {
            this.rootNode.style.bottom = "".concat(newPosition.bottom, "px");
          }
          if (this.props.useTransform) {
            var oldPosition = this.state.position || {
              top: 0,
              left: 0
            };
            this.rootNode.style.transform = "translate3d(".concat(Math.round(newPosition.left || oldPosition.left), "px, ").concat(Math.round(newPosition.top || oldPosition.top), "px, 0px)");
          } else {
            if (newPosition.top !== void 0) {
              this.rootNode.style.top = "".concat(Math.round(newPosition.top), "px");
            }
            this.rootNode.style.left = "".concat(Math.round(newPosition.left), "px");
          }
        }
      }
    }, {
      key: "getOverlayNode",
      value: function getOverlayNode() {
        return this.rootNode;
      }
    }, {
      key: "getActiveTargetNode",
      value: function getActiveTargetNode() {
        return this.activeTargetNode;
      }
    }, {
      key: "getPositionTarget",
      value: function getPositionTarget() {
        var target = this.getTarget();
        if (target instanceof Element) {
          return target;
        }
        return this.getActiveTargetNode();
      }
    }, {
      key: "handleVisibleChange",
      value: function handleVisibleChange(visible) {
        if (!this.props.fade) {
          return null;
        }
        if (visible) {
          this.setupEnterTransition();
        } else {
          this.setupLeaveTransition();
        }
      }
    }, {
      key: "setupEnterTransition",
      value: function setupEnterTransition() {
        var _this5 = this;
        this.props.onFadeInStart();
        this.setState({
          transitionEnter: true,
          transitionEnterActive: false,
          transitionLeave: false,
          transitionLeaveActive: false
        }, function() {
          setTimeout(function() {
            if (_this5.componentIsMounted) {
              _this5.setState({
                transitionEnterActive: true
              }, function() {
                _this5.props.onFadeInEnd();
              });
            }
          }, 16);
        });
      }
    }, {
      key: "setupLeaveTransition",
      value: function setupLeaveTransition() {
        var _this6 = this;
        this.props.onFadeOutStart();
        this.setState({
          transitionLeave: true,
          transitionLeaveActive: false,
          transitionEnter: false,
          transitionEnterActive: false
        }, function() {
          setTimeout(function() {
            if (_this6.componentIsMounted) {
              _this6.setState({
                transitionLeaveActive: true
              }, function() {
                setTimeout(function() {
                  if (_this6.componentIsMounted) {
                    _this6.setState({
                      transitionLeave: false,
                      transitionLeaveActive: false
                    }, function() {
                      _this6.props.onFadeOutEnd();
                    });
                  }
                }, _this6.getFadeOutDuration());
              });
            }
          }, 16);
        });
      }
    }, {
      key: "getFadeInDuration",
      value: function getFadeInDuration() {
        if (this.props.fadeInDuration) {
          return this.props.fadeInDuration;
        }
        return this.props.fadeDuration;
      }
    }, {
      key: "getFadeOutDuration",
      value: function getFadeOutDuration() {
        if (this.props.fadeOutDuration) {
          return this.props.fadeOutDuration;
        }
        return this.props.fadeDuration;
      }
    }, {
      key: "getFadeInTransitionFunction",
      value: function getFadeInTransitionFunction() {
        if (this.props.fadeInTransitionFunction) {
          return this.props.fadeInTransitionFunction;
        }
        return this.props.fadeTransitionFunction;
      }
    }, {
      key: "getFadeOutTransitionFunction",
      value: function getFadeOutTransitionFunction() {
        if (this.props.fadeOutTransitionFunction) {
          return this.props.fadeOutTransitionFunction;
        }
        return this.props.fadeTransitionFunction;
      }
    }, {
      key: "handleKeyDown",
      value: function handleKeyDown(event2) {
        if (this.props.captureTabNavigation && event2.key === "Tab") {
          this.captureTabNavigation(event2);
        }
        if (this.props.onKeyDown) {
          this.props.onKeyDown(event2);
        }
      }
    }, {
      key: "captureTabNavigation",
      value: function captureTabNavigation(event2) {
        var shiftKey = event2.shiftKey;
        var nodes = (0, _getFocusableElements.default)(this.rootNode);
        if (!nodes.length) {
          return null;
        }
        var firstNode = nodes[0];
        var lastNode = nodes[nodes.length - 1];
        if (lastNode === event2.target && !shiftKey) {
          firstNode.focus();
          event2.preventDefault();
          event2.stopPropagation();
        }
        if (firstNode === event2.target && shiftKey) {
          lastNode.focus();
          event2.preventDefault();
          event2.stopPropagation();
        }
      }
    }, {
      key: "show",
      value: function show() {
        this.setVisible(true);
      }
    }, {
      key: "hide",
      value: function hide() {
        this.setVisible(false);
      }
    }]);
    return InovuaOverlay2;
  }(_react.Component);
  var emptyFn = function emptyFn2() {
  };
  InovuaOverlay.defaultProps = {
    captureTabNavigation: false,
    updatePositionOnScroll: false,
    zIndex: 100,
    theme: "default",
    rootClassName: "inovua-react-toolkit-overlay",
    background: null,
    padding: null,
    eventManager: _eventManager.default,
    target: null,
    showEvent: ["mouseenter"],
    hideEvent: ["mouseleave"],
    defaultVisible: false,
    arrow: true,
    arrowStyle: {},
    arrowSize: 11,
    showDelay: null,
    hideDelay: null,
    hideOnClickOutside: true,
    hideOnScroll: false,
    fade: false,
    fadeDuration: 300,
    fadeInDuration: 300,
    fadeOutDuration: 50,
    fadeTransitionFunction: "ease",
    positions: _positionsMap.posiblePositions,
    constrainTo: true,
    offset: 10,
    rafOnMount: true,
    relativeToViewport: true,
    adjustOnPositionBottom: false,
    onVisibleChange: emptyFn,
    onShow: emptyFn,
    onHide: emptyFn,
    onFadeInStart: emptyFn,
    onFadeOutStart: emptyFn,
    onFadeInEnd: emptyFn,
    onFadeOutEnd: emptyFn
  };
  InovuaOverlay.propTypes = {
    shouldComponentUpdate: _propTypes.default.func,
    captureTabNavigation: _propTypes.default.bool,
    updatePositionOnScroll: _propTypes.default.bool,
    children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
    rootClassName: _propTypes.default.string,
    border: _propTypes.default.string,
    background: _propTypes.default.string,
    theme: _propTypes.default.string,
    zIndex: _propTypes.default.number,
    contentStyle: _propTypes.default.object,
    contentClassName: _propTypes.default.string,
    padding: _propTypes.default.number,
    height: _propTypes.default.number,
    width: _propTypes.default.number,
    minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    arrow: _propTypes.default.bool,
    arrowClassName: _propTypes.default.string,
    arrowStyle: _propTypes.default.object,
    arrowSize: _propTypes.default.number,
    visible: _propTypes.default.bool,
    visibleClassName: _propTypes.default.string,
    defaultVisible: _propTypes.default.bool,
    target: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func]),
    eventManager: _propTypes.default.func,
    showEvent: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string]),
    hideEvent: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.string]),
    showDelay: _propTypes.default.number,
    hideDelay: _propTypes.default.number,
    hideOnClickOutside: _propTypes.default.bool,
    hideOnScroll: _propTypes.default.bool,
    hideOnEscape: _propTypes.default.bool,
    useTransform: _propTypes.default.bool,
    fade: _propTypes.default.bool,
    fadeDuration: _propTypes.default.number,
    fadeInDuration: _propTypes.default.number,
    fadeOutDuration: _propTypes.default.number,
    fadeTransitionFunction: _propTypes.default.string,
    fadeInTransitionFunction: _propTypes.default.string,
    fadeOutTransitionFunction: _propTypes.default.string,
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func, _propTypes.default.bool]),
    positions: function positions2(props2, propName, componentName) {
      var positions3 = props2[propName];
      if (typeof positions3 === "string") {
        if (_positionsMap.posiblePositions.indexOf(positions3) === -1) {
          return new Error("\nInvalid prop ".concat(propName, " suplied to ").concat(componentName, ".\nFollowing values are allowed: ").concat(_positionsMap.posiblePositions.join(", "), "\n"));
        }
      }
    },
    offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    })]))]),
    rafOnMount: _propTypes.default.bool,
    relativeToViewport: _propTypes.default.bool,
    adjustOnPositionBottom: _propTypes.default.bool,
    syncWidth: _propTypes.default.bool,
    onInitialPosition: _propTypes.default.func,
    onVisibleChange: _propTypes.default.func,
    onShow: _propTypes.default.func,
    onHide: _propTypes.default.func,
    onFadeInStart: emptyFn,
    onFadeOutStart: emptyFn,
    onFadeInEnd: emptyFn,
    onFadeOutEnd: emptyFn
  };
  var _default2 = InovuaOverlay;
  Overlay.default = _default2;
  return Overlay;
}
var hasRequiredSrc$i;
function requireSrc$i() {
  if (hasRequiredSrc$i)
    return src$h;
  hasRequiredSrc$i = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$h, "__esModule", {
    value: true
  });
  src$h.default = void 0;
  var _Overlay = _interopRequireDefault2(requireOverlay$1());
  var _default2 = _Overlay.default;
  src$h.default = _default2;
  return src$h;
}
var hasRequiredOverlay;
function requireOverlay() {
  if (hasRequiredOverlay)
    return Overlay$1;
  hasRequiredOverlay = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Overlay$1, "__esModule", {
    value: true
  });
  Overlay$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$i());
  var _default2 = _src.default;
  Overlay$1.default = _default2;
  return Overlay$1;
}
var FakeVirtualList = {};
var hasRequiredFakeVirtualList;
function requireFakeVirtualList() {
  if (hasRequiredFakeVirtualList)
    return FakeVirtualList;
  hasRequiredFakeVirtualList = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(FakeVirtualList, "__esModule", {
    value: true
  });
  FakeVirtualList.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var FakeVirtualList$1 = function(_Component) {
    (0, _inherits2.default)(FakeVirtualList2, _Component);
    var _super = _createSuper(FakeVirtualList2);
    function FakeVirtualList2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, FakeVirtualList2);
      _this = _super.call(this, props2);
      _this.handleOnScroll = _this.handleOnScroll.bind((0, _assertThisInitialized2.default)(_this));
      _this.targetRef = function(node2) {
        if (!node2) {
          _this.targetNode = null;
        }
        _this.targetNode = node2;
      };
      return _this;
    }
    (0, _createClass2.default)(FakeVirtualList2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var count = this.props.count;
        var list2 = [];
        if (count > 0) {
          for (var i = 0; i < count; i++) {
            list2.push(props2.renderRow({
              index: i
            }));
          }
        }
        var listProps = _objectSpread2(_objectSpread2({
          ref: this.targetRef,
          children: list2
        }, (0, _cleanProps.default)(props2, FakeVirtualList2.propTypes)), {}, {
          onScroll: this.handleOnScroll
        });
        var result;
        if (this.props.renderListScroller) {
          result = this.props.renderListScroller(listProps);
        }
        if (result === void 0) {
          result = _react.default.createElement("div", _objectSpread2({}, listProps));
        }
        return result;
      }
    }, {
      key: "getContainerNode",
      value: function getContainerNode() {
        return this.targetNode && this.targetNode.getContainerTargetNode ? this.targetNode.getContainerTargetNode() : this.targetNode;
      }
    }, {
      key: "getRootNode",
      value: function getRootNode() {
        return this.targetNode;
      }
    }, {
      key: "getScrollerNode",
      value: function getScrollerNode() {
        return this.targetNode && this.targetNode.getScrollerNode ? this.targetNode.getScrollerNode() : this.targetNode;
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(index2) {
        var containerNode = this.getContainerNode();
        var rootNode = this.getRootNode();
        var scrollerNode = this.getScrollerNode();
        if (!containerNode) {
          return null;
        }
        if (containerNode && !containerNode.childNodes.length) {
          return null;
        }
        var itemNode = containerNode.childNodes[index2];
        if (!itemNode) {
          return null;
        }
        var itemHeight = itemNode.offsetHeight;
        var itemOffsetTop = itemNode.offsetTop;
        var scrollTop = scrollerNode.scrollTop;
        var containerHeight = rootNode.offsetHeight;
        if (scrollTop > itemOffsetTop) {
          scrollerNode.scrollTop = itemOffsetTop;
        }
        if (scrollTop + containerHeight < itemHeight + itemOffsetTop) {
          scrollerNode.scrollTop = itemOffsetTop + itemHeight - containerHeight;
        }
        return true;
      }
    }, {
      key: "handleOnScroll",
      value: function handleOnScroll(event2) {
        var rootNode = this.getRootNode();
        var scrollTop = event2.target.scrollTop;
        var listHeight = rootNode.offsetHeight;
        var scrollHeight = rootNode.scrollHeight;
        if (scrollTop + listHeight + 5 >= scrollHeight) {
          this.props.scrollProps.onContainerScrollVerticalMax();
        }
      }
    }]);
    return FakeVirtualList2;
  }(_react.Component);
  FakeVirtualList$1.propTypes = {
    autoHide: _propTypes.default.bool,
    count: _propTypes.default.number,
    renderRow: _propTypes.default.func,
    minRowHeight: _propTypes.default.number,
    tagIndex: _propTypes.default.number,
    shouldComponentUpdate: _propTypes.default.func,
    renderListScroller: _propTypes.default.func,
    scrollProps: _propTypes.default.object,
    virtualized: _propTypes.default.bool,
    showScrollbars: _propTypes.default.bool
  };
  var _default2 = FakeVirtualList$1;
  FakeVirtualList.default = _default2;
  return FakeVirtualList;
}
var Item$1 = {};
var hasRequiredItem$1;
function requireItem$1() {
  if (hasRequiredItem$1)
    return Item$1;
  hasRequiredItem$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof3 = require_typeof();
  Object.defineProperty(Item$1, "__esModule", {
    value: true
  });
  Item$1.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _join = _interopRequireDefault2(requireJoin$2());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var Item2 = function(_Component) {
    (0, _inherits2.default)(Item3, _Component);
    var _super = _createSuper(Item3);
    function Item3(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, Item3);
      _this = _super.call(this, props2);
      _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
      return _this;
    }
    (0, _createClass2.default)(Item3, [{
      key: "render",
      value: function render() {
        var _this$props = this.props, selected = _this$props.selected, rootClassName = _this$props.rootClassName, selectedStyle = _this$props.selectedStyle, active = _this$props.active, background2 = _this$props.background, item = _this$props.item, index2 = _this$props.index, disabledStyle = _this$props.disabledStyle, disabledClassName = _this$props.disabledClassName, activeStyle = _this$props.activeStyle, activeClassName = _this$props.activeClassName, selectedClassName = _this$props.selectedClassName, renderItem = _this$props.renderItem, rtl = _this$props.rtl, itemHeight = _this$props.itemHeight, itemEllipsis = _this$props.itemEllipsis;
        var disabled = item.disabled;
        var className = (0, _join.default)(this.props.className, rootClassName, selected && "".concat(rootClassName, "--selected"), rtl && "".concat(rootClassName, "--rtl"), active && "".concat(rootClassName, "--active"), disabled && "".concat(rootClassName, "--disabled"), itemEllipsis && "".concat(rootClassName, "--ellipsis"), disabled && disabledClassName, active && activeClassName, selected && selectedClassName);
        var style = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, this.props.style), active && activeStyle), disabled && disabledStyle), selected && selectedStyle);
        if (itemHeight) {
          style.height = itemHeight;
        }
        if (background2) {
          style.background = background2;
        }
        var label = this.props.label;
        var matchText = item.matchText;
        if (typeof label === "string" && matchText) {
          label = matchText.map(function(textPart, index3) {
            if ((0, _typeof2.default)(textPart) === "object") {
              return _react.default.createElement("span", {
                className: "".concat(rootClassName, "__highlight"),
                key: index3
              }, textPart.match);
            }
            return textPart;
          });
        }
        var domProps = _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(this.props, Item3.propTypes)), {}, {
          style,
          className,
          onClick: this.handleClick,
          onMouseDown: this.handleMouseDown,
          children: label
        });
        var result;
        if (typeof renderItem === "function") {
          result = renderItem({
            domProps,
            label,
            item,
            index: index2
          });
        }
        if (result === void 0) {
          result = _react.default.createElement("div", _objectSpread2({}, domProps));
        }
        return result;
      }
    }, {
      key: "handleMouseDown",
      value: function handleMouseDown(event2) {
        event2.preventDefault();
      }
    }, {
      key: "handleClick",
      value: function handleClick() {
        if (this.props.item.disabled) {
          return null;
        }
        this.props.onClick(this.props.id);
      }
    }]);
    return Item3;
  }(_react.Component);
  function emptyFn() {
  }
  Item2.defaultProps = {
    onClick: emptyFn,
    selectedStyle: {},
    item: {}
  };
  Item2.propTypes = {
    rootClassName: _propTypes.default.string,
    itemHeight: _propTypes.default.number,
    itemEllipsis: _propTypes.default.bool,
    renderItem: _propTypes.default.func,
    selectedClassName: _propTypes.default.string,
    selectedStyle: _propTypes.default.object,
    background: _propTypes.default.string,
    active: _propTypes.default.bool,
    label: _propTypes.default.node,
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
    item: _propTypes.default.object,
    onClick: _propTypes.default.func,
    index: _propTypes.default.number,
    rtl: _propTypes.default.bool,
    disabledStyle: _propTypes.default.object,
    disabledClassName: _propTypes.default.string,
    activeStyle: _propTypes.default.object,
    activeClassName: _propTypes.default.string
  };
  var _default2 = Item2;
  Item$1.default = _default2;
  return Item$1;
}
var getClassName = {};
var hasRequiredGetClassName;
function requireGetClassName() {
  if (hasRequiredGetClassName)
    return getClassName;
  hasRequiredGetClassName = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getClassName, "__esModule", {
    value: true
  });
  getClassName.default = void 0;
  var _join = _interopRequireDefault2(requireJoin$2());
  function getClassName$1(_ref2) {
    var props2 = _ref2.props, _ref$state = _ref2.state, state2 = _ref$state === void 0 ? {} : _ref$state;
    var listPosition = props2.listPosition, _props$data = props2.data, data = _props$data === void 0 ? [] : _props$data, className = props2.className, theme2 = props2.theme, rootClassName = props2.rootClassName, loading = props2.loading, relativeToViewport = props2.relativeToViewport;
    var succesfullPosition = state2.succesfullPosition;
    var constructedClassName = (0, _join.default)(rootClassName, className, listPosition && "".concat(rootClassName, "--").concat(listPosition), loading && "".concat(rootClassName, "--loading"), theme2 && "".concat(rootClassName, "--theme-").concat(theme2), relativeToViewport && "".concat(rootClassName, "--relative-to-viewport"), data && !data.length && "".concat(rootClassName, "--empty"));
    if (succesfullPosition) {
      var positionName = succesfullPosition === "bc-tc" ? "top" : "bottom";
      constructedClassName = (0, _join.default)(constructedClassName, "".concat(rootClassName, "--position-").concat(positionName));
    }
    return constructedClassName;
  }
  var _default2 = getClassName$1;
  getClassName.default = _default2;
  return getClassName;
}
var isSelected = {};
var hasRequiredIsSelected;
function requireIsSelected() {
  if (hasRequiredIsSelected)
    return isSelected;
  hasRequiredIsSelected = 1;
  Object.defineProperty(isSelected, "__esModule", {
    value: true
  });
  isSelected.default = void 0;
  function isSelected$1(_ref2) {
    var id2 = _ref2.id, value = _ref2.value;
    if (Array.isArray(value)) {
      return value.indexOf(id2) !== -1;
    }
    return id2 === value;
  }
  var _default2 = isSelected$1;
  isSelected.default = _default2;
  return isSelected;
}
var hasRequiredList$2;
function requireList$2() {
  if (hasRequiredList$2)
    return List$1;
  hasRequiredList$2 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(List$1, "__esModule", {
    value: true
  });
  List$1.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _Overlay = _interopRequireDefault2(requireOverlay());
  var _FakeVirtualList = _interopRequireDefault2(requireFakeVirtualList());
  var _Item = _interopRequireDefault2(requireItem$1());
  var _getClassName = _interopRequireDefault2(requireGetClassName());
  var _isSelected = _interopRequireDefault2(requireIsSelected());
  var _getPositionRelativeToElement = _interopRequireDefault2(requireGetPositionRelativeToElement());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var List2 = function(_Component) {
    (0, _inherits2.default)(List3, _Component);
    var _super = _createSuper(List3);
    function List3(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, List3);
      _this = _super.call(this, props2);
      _this.renderRow = _this.renderRow.bind((0, _assertThisInitialized2.default)(_this));
      _this.getOverlayTarget = _this.getOverlayTarget.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleOnClick = _this.handleOnClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleItemClick = _this.handleItemClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.virtualListShouldComponentUpdate = _this.virtualListShouldComponentUpdate.bind((0, _assertThisInitialized2.default)(_this));
      _this.setRootNode = function(ref) {
        _this.listNode = ref;
      };
      _this.addVirtualListRef = function(ref) {
        _this.virtualListNode = ref;
      };
      _this.state = {
        succesfullPosition: "bottom"
      };
      _this.listAligned = false;
      return _this;
    }
    (0, _createClass2.default)(List3, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.componentIsMounted = false;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        this.componentIsMounted = true;
        if (!this.props.relativeToViewport) {
          setTimeout(function() {
            _this2.updateListPosition();
          }, 0);
        }
        if (this.props.activeItemIndex != null) {
          setTimeout(function() {
            if (_this2.componentIsMounted) {
              _this2.scrollToIndex(_this2.props.activeItemIndex);
            }
          }, 16);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var state2 = this.state, props2 = this.props;
        var renderFooter = props2.renderFooter, renderHeader2 = props2.renderHeader, isNewCustomTagValid = props2.isNewCustomTagValid;
        this.currentGroup = null;
        var className = (0, _getClassName.default)({
          state: state2,
          props: props2
        });
        var style = props2.style;
        if (this.state.position) {
          style = _objectSpread2(_objectSpread2({}, style), this.state.position);
        }
        if (this.state.succesfullPosition && this.props.offset) {
          var positionName = this.state.succesfullPosition === "bc-tc" ? "top" : "bottom";
          if (this.props.offset) {
            style = _objectSpread2(_objectSpread2({}, style), {}, (0, _defineProperty2.default)({}, positionName == "top" ? "marginBottom" : "marginTop", this.props.offset));
          }
        }
        if (!this.props.relativeToViewport && !this.listAligned) {
          style = _objectSpread2(_objectSpread2({}, style), {}, {
            visibility: "hidden",
            position: "fixed"
          });
        }
        var result = _react.default.createElement("div", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, List3.propTypes)), {}, {
          className,
          style,
          ref: this.setRootNode,
          onClick: this.handleOnClick
        }), this.renderLoadingText(), isNewCustomTagValid && this.renderNewCustomTagText(), typeof renderHeader2 === "function" && this.renderHeader(), this.renderEmptyText(), this.renderVirtualList(), typeof renderFooter === "function" && this.renderFooter());
        if (this.props.relativeToViewport) {
          var overlayProps = _objectSpread2(_objectSpread2({}, props2.overlayProps), {}, {
            target: this.getOverlayTarget,
            relativeToViewport: this.props.relativeToViewport,
            constrainTo: this.props.constrainTo,
            positions: this.props.positions
          });
          return _react.default.createElement(_Overlay.default, _objectSpread2({}, overlayProps), result);
        }
        return result;
      }
    }, {
      key: "getOverlayTarget",
      value: function getOverlayTarget() {
        return this.props.getComboNode();
      }
    }, {
      key: "renderFooter",
      value: function renderFooter() {
        return this.props.renderFooter({
          props: this.props,
          data: this.props.data,
          value: this.props.value
        });
      }
    }, {
      key: "renderHeader",
      value: function renderHeader2() {
        return this.props.renderHeader({
          props: this.props,
          data: this.props.data,
          value: this.props.value
        });
      }
    }, {
      key: "renderEmptyText",
      value: function renderEmptyText() {
        var data = this.props.data;
        if (data && data.length || this.props.loading) {
          return null;
        }
        if (this.props.isNewCustomTagValid) {
          return null;
        }
        return _react.default.createElement("div", {
          className: "".concat(this.props.rootClassName, "__empty-text")
        }, this.props.emptyText);
      }
    }, {
      key: "renderNewCustomTagText",
      value: function renderNewCustomTagText() {
        var text = this.props.text;
        if (this.props.newCustomTagText) {
          return typeof this.props.newCustomTagText === "function" ? this.props.newCustomTagText({
            text
          }) : this.props.newCustomTagText;
        }
        return _react.default.createElement("div", {
          className: "".concat(this.props.rootClassName, "__new-custom-tag-text")
        }, 'Create option "', text, '"');
      }
    }, {
      key: "renderLoadingText",
      value: function renderLoadingText() {
        if (!this.props.loading) {
          return null;
        }
        if (!this.props.loadingText) {
          return null;
        }
        return _react.default.createElement("div", {
          className: "".concat(this.props.rootClassName, "__loading-text")
        }, this.props.loadingText);
      }
    }, {
      key: "renderVirtualList",
      value: function renderVirtualList() {
        var className = "".concat(this.props.rootClassName, "__virtual-list");
        var count = this.props.dataLength;
        var VirtualList2 = this.props.virtualListFactory;
        var renderVirtualList2 = this.props.renderVirtualList;
        if (!count) {
          return null;
        }
        var style = {};
        if (this.props.maxHeight) {
          style.maxHeight = this.props.maxHeight;
        }
        if (this.state.constrainedHeight) {
          var constrainedOffset = 16;
          var constrainedHeight = this.props.maxHeight ? Math.min(this.props.maxHeight, this.state.constrainedHeight - constrainedOffset) : this.state.constrainedHeight - constrainedOffset;
          style.maxHeight = constrainedHeight;
        }
        if (typeof style.maxHeight === "number" && typeof this.props.minHeight == "number") {
          style.maxHeight = Math.max(style.maxHeight || 0, style.minHeight || 0);
        }
        var virtualListProps = {
          ref: this.addVirtualListRef,
          className,
          autoHide: false,
          count,
          theme: this.props.theme,
          renderRow: this.renderRow,
          minRowHeight: 10,
          tabIndex: null,
          shouldComponentUpdate: this.virtualListShouldComponentUpdate,
          scrollProps: {
            onContainerScrollVerticalMax: this.props.onScrollBottom
          },
          style
        };
        var result;
        if (renderVirtualList2) {
          result = renderVirtualList2(virtualListProps);
        }
        if (result === void 0) {
          if (VirtualList2 === _FakeVirtualList.default) {
            virtualListProps.renderListScroller = this.props.renderListScroller;
          }
          result = _react.default.createElement(VirtualList2, _objectSpread2({}, virtualListProps));
        }
        if (result && result.props) {
          this.rowHeight = result.props.rowHeight;
        }
        return result;
      }
    }, {
      key: "virtualListShouldComponentUpdate",
      value: function virtualListShouldComponentUpdate() {
        return true;
      }
    }, {
      key: "renderRow",
      value: function renderRow(_ref2) {
        var index2 = _ref2.index;
        var groups = this.props.groups;
        if (groups && groups[index2]) {
          return this.renderGroup(groups[index2], index2);
        }
        var _this$props = this.props, data = _this$props.data, getIdProperty = _this$props.getIdProperty, getDisplayProperty = _this$props.getDisplayProperty, rootClassName = _this$props.rootClassName, itemEllipsis = _this$props.itemEllipsis, value = _this$props.value, activeItem = _this$props.activeItem, renderItem = _this$props.renderItem, rtl = _this$props.rtl;
        var renderIndex = this.currentGroup ? index2 - this.currentGroup.indexAjustment : index2;
        var item = data[renderIndex];
        var id2 = getIdProperty(item);
        var label = getDisplayProperty(item);
        var selected = (0, _isSelected.default)({
          value,
          id: id2
        });
        var active = id2 === activeItem;
        var itemProps = _objectSpread2(_objectSpread2({}, this.props.itemProps), {}, {
          index: renderIndex,
          itemHeight: this.rowHeight,
          itemEllipsis,
          item,
          id: id2,
          label,
          selected,
          active,
          renderItem,
          rtl,
          rootClassName: "".concat(rootClassName, "__item"),
          onClick: this.handleItemClick,
          key: id2 || label
        });
        return _react.default.createElement(_Item.default, _objectSpread2({}, itemProps));
      }
    }, {
      key: "renderGroup",
      value: function renderGroup(group, index2) {
        this.currentGroup = group;
        var title = group.title;
        var groupProps = {
          children: title,
          key: title,
          className: "".concat(this.props.rootClassName, "__group")
        };
        var result;
        if (typeof this.props.renderGroup === "function") {
          result = this.props.renderGroup({
            domProps: groupProps,
            index: index2,
            group
          });
        }
        if (result === void 0) {
          result = _react.default.createElement("div", _objectSpread2({}, groupProps));
        }
        return result;
      }
    }, {
      key: "handleOnClick",
      value: function handleOnClick(event2) {
        event2.stopPropagation();
      }
    }, {
      key: "handleItemClick",
      value: function handleItemClick(index2) {
        this.props.onItemClick(index2);
      }
    }, {
      key: "updateListPosition",
      value: function updateListPosition() {
        var comboNode = this.props.getComboNode();
        if (!comboNode) {
          return null;
        }
        var listNode = this.listNode;
        if (!listNode) {
          return null;
        }
        var positionConfig = (0, _getPositionRelativeToElement.default)({
          targetNode: comboNode,
          overlayNode: listNode,
          offset: this.props.offset,
          constrainTo: this.props.constrainTo,
          relativeToViewport: this.props.relativeToViewport,
          positions: this.props.positions
        });
        this.listAligned = true;
        if (positionConfig) {
          var constrainedHeight = positionConfig.constrainedHeight, positionRegion = positionConfig.positionRegion, succesfullPosition = positionConfig.succesfullPosition;
          positionConfig.position;
          this.setState({
            positionRegion,
            succesfullPosition,
            constrainedHeight: constrainedHeight ? positionRegion.getHeight() : null
          });
        }
      }
    }, {
      key: "getVirtualListNode",
      value: function getVirtualListNode() {
        return this.virtualListNode;
      }
    }, {
      key: "getlListNode",
      value: function getlListNode() {
        return this.listNode;
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(index2) {
        var virtualListNode = this.getVirtualListNode();
        return virtualListNode && virtualListNode.scrollToIndex(index2);
      }
    }]);
    return List3;
  }(_react.Component);
  function emptyFn() {
  }
  List2.defaultProps = {
    selectedStyle: {},
    style: {},
    onItemClick: emptyFn,
    getComboNode: emptyFn,
    positions: ["bottom", "top"],
    offset: 0,
    constrainTo: true,
    virtualListFactory: _FakeVirtualList.default,
    overlayProps: {
      theme: null,
      syncWidth: true,
      rafOnMount: false,
      adjustOnPositionBottom: false,
      updatePositionOnScroll: true,
      offset: 2,
      visible: true
    }
  };
  List2.propTypes = {
    data: _propTypes.default.array,
    autoPosition: _propTypes.default.bool,
    emptyText: _propTypes.default.node,
    dataLength: _propTypes.default.number,
    rootClassName: _propTypes.default.string,
    highlightFirst: _propTypes.default.bool,
    maxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    minHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    groups: _propTypes.default.object,
    itemEllipsis: _propTypes.default.bool,
    onScrollBottom: _propTypes.default.func,
    renderListScroller: _propTypes.default.func,
    renderGroup: _propTypes.default.func,
    renderFooter: _propTypes.default.func,
    renderHeader: _propTypes.default.func,
    renderItem: _propTypes.default.func,
    activeItemIndex: _propTypes.default.number,
    virtualListFactory: _propTypes.default.func,
    renderVirtualList: _propTypes.default.func,
    text: _propTypes.default.string,
    newCustomTagText: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
    isNewCustomTagValid: _propTypes.default.bool,
    positions: _propTypes.default.arrayOf(_propTypes.default.string),
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
    offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    })]))]),
    loadingText: _propTypes.default.node,
    loading: _propTypes.default.bool,
    relativeToViewport: _propTypes.default.bool,
    overlayProps: _propTypes.default.object,
    itemProps: _propTypes.default.object,
    activeItem: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
    selectedStyle: _propTypes.default.object,
    getIdProperty: _propTypes.default.func,
    getDisplayProperty: _propTypes.default.func,
    rtl: _propTypes.default.bool,
    onItemClick: _propTypes.default.func,
    getComboNode: _propTypes.default.func
  };
  var _default2 = List2;
  List$1.default = _default2;
  return List$1;
}
var hasRequiredList$1;
function requireList$1() {
  if (hasRequiredList$1)
    return List$2;
  hasRequiredList$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(List$2, "__esModule", {
    value: true
  });
  List$2.default = void 0;
  var _List = _interopRequireDefault2(requireList$2());
  var _default2 = _List.default;
  List$2.default = _default2;
  return List$2;
}
var shouldComponentUpdate$2 = {};
var shallowequal = {};
var hasRequiredShallowequal;
function requireShallowequal() {
  if (hasRequiredShallowequal)
    return shallowequal;
  hasRequiredShallowequal = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get2() {
        return _shallowequal.default;
      }
    });
    var _shallowequal = _interopRequireDefault2(requireShallowequal$1());
  })(shallowequal);
  return shallowequal;
}
var hasRequiredShouldComponentUpdate$2;
function requireShouldComponentUpdate$2() {
  if (hasRequiredShouldComponentUpdate$2)
    return shouldComponentUpdate$2;
  hasRequiredShouldComponentUpdate$2 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(shouldComponentUpdate$2, "__esModule", {
    value: true
  });
  shouldComponentUpdate$2.default = void 0;
  var _shallowequal = _interopRequireDefault2(requireShallowequal());
  var _default2 = function _default3(inst, nextProps, nextState) {
    var props2 = inst.props;
    var state2 = inst.state;
    if (nextProps.shouldComponentUpdate) {
      return nextProps.shouldComponentUpdate({
        nextProps,
        props: props2,
        nextState,
        state: state2
      });
    }
    return !(0, _shallowequal.default)(nextProps, props2) || !(0, _shallowequal.default)(nextState, state2);
  };
  shouldComponentUpdate$2.default = _default2;
  return shouldComponentUpdate$2;
}
var getRootClassName = {};
var hasRequiredGetRootClassName;
function requireGetRootClassName() {
  if (hasRequiredGetRootClassName)
    return getRootClassName;
  hasRequiredGetRootClassName = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getRootClassName, "__esModule", {
    value: true
  });
  getRootClassName.default = void 0;
  var _join = _interopRequireDefault2(requireJoin$2());
  function getRootClassName$1(_ref2) {
    var _ref$props = _ref2.props, props2 = _ref$props === void 0 ? {} : _ref$props, _ref$state = _ref2.state, state2 = _ref$state === void 0 ? {} : _ref$state, _ref$computed = _ref2.computed, computed = _ref$computed === void 0 ? {} : _ref$computed;
    var rootClassName = props2.rootClassName, className = props2.className, rtl = props2.rtl, shadow = props2.shadow, showShadowOnMouseOver = props2.showShadowOnMouseOver, disabled = props2.disabled, readOnly = props2.readOnly, emptyClassName = props2.emptyClassName, disabledClassName = props2.disabledClassName, focusedClassName = props2.focusedClassName, inlineFlex = props2.inlineFlex, multiple = props2.multiple, theme2 = props2.theme;
    var over = state2.over, focus = state2.focus;
    var value = computed.value;
    var showShadow = showShadowOnMouseOver ? over && shadow : shadow;
    return (0, _join.default)(rootClassName, className, rtl ? "".concat(rootClassName, "--rtl") : "".concat(rootClassName, "--ltr"), showShadow && "".concat(rootClassName, "--shadow"), multiple && "".concat(rootClassName, "--multiple"), disabled && "".concat(rootClassName, "--disabled"), readOnly && "".concat(rootClassName, "--readOnly"), theme2 && "".concat(rootClassName, "--theme-").concat(theme2), inlineFlex && "".concat(rootClassName, "--inlineFlex"), focus && "".concat(rootClassName, "--focus"), !value && emptyClassName, disabled && disabledClassName, focus && focusedClassName);
  }
  var _default2 = getRootClassName$1;
  getRootClassName.default = _default2;
  return getRootClassName;
}
var getListProps = {};
var hasRequiredGetListProps;
function requireGetListProps() {
  if (hasRequiredGetListProps)
    return getListProps;
  hasRequiredGetListProps = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getListProps, "__esModule", {
    value: true
  });
  getListProps.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function getListProps$1(_ref2) {
    var props2 = _ref2.props, _ref$state = _ref2.state, state2 = _ref$state === void 0 ? {} : _ref$state, computed = _ref2.computed;
    return _objectSpread2(_objectSpread2({}, computed), {}, {
      style: props2.listStyle,
      relativeToViewport: props2.relativeToViewport,
      virtualListFactory: props2.virtualListFactory,
      renderListScroller: props2.renderListScroller,
      renderVirtualList: props2.renderVirtualList,
      className: props2.listClassName,
      rootClassName: "".concat(props2.rootClassName, "__list"),
      emptyText: props2.listEmptyText,
      maxHeight: props2.listMaxHeight,
      minHeight: props2.listMinHeight,
      positions: props2.positions,
      constrainTo: props2.constrainTo,
      offset: props2.offset,
      rtl: props2.rtl,
      theme: props2.theme,
      highlightFirst: props2.highlightFirst,
      loadingText: props2.listLoadingText,
      groups: state2.groups,
      renderGroup: props2.renderGroup,
      renderFooter: props2.renderFooter,
      renderHeader: props2.renderHeader,
      renderItem: props2.renderItem,
      itemEllipsis: props2.itemEllipsis,
      activeItemIndex: state2.activeItemIndex,
      newCustomTagText: props2.newCustomTagText,
      autoPosition: props2.autoPosition,
      itemProps: {
        background: props2.itemBackground,
        disabledStyle: props2.disabledItemStyle,
        disabledClassName: props2.disabledItemClassName,
        activeStyle: props2.activeItemStyle,
        activeClassName: props2.activeItemClassName,
        selectedStyle: props2.selectedStyle,
        selectedClassName: props2.selectedClassName
      }
    });
  }
  var _default2 = getListProps$1;
  getListProps.default = _default2;
  return getListProps;
}
var getValueProps = {};
var hasRequiredGetValueProps;
function requireGetValueProps() {
  if (hasRequiredGetValueProps)
    return getValueProps;
  hasRequiredGetValueProps = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getValueProps, "__esModule", {
    value: true
  });
  getValueProps.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function getValueProps$1(_ref2) {
    var _objectSpread22;
    var state2 = _ref2.state, props2 = _ref2.props, computed = _ref2.computed, tagProps = _ref2.tagProps;
    var multiple = props2.multiple, renderTag = props2.renderTag, renderTags = props2.renderTags, tagBorder = props2.tagBorder, tagStyle = props2.tagStyle, tagPadding = props2.tagPadding, tagHeight = props2.tagHeight, tagWidth = props2.tagWidth, tagMinSize = props2.tagMinSize, tagMaxSize = props2.tagMaxSize, wrapMultiple = props2.wrapMultiple, tagCloseIcon = props2.tagCloseIcon, tagCloseIconPosition = props2.tagCloseIconPosition, maxTagsLength = props2.maxTagsLength, rtl = props2.rtl, renderRemainingTags = props2.renderRemainingTags, renderDisplayValue = props2.renderDisplayValue, searchable = props2.searchable, renderTagLabel = props2.renderTagLabel;
    var focus = state2.focus;
    var rootClassName = "".concat(props2.rootClassName, "__value");
    tagProps = _objectSpread2(_objectSpread2({}, tagProps), {}, {
      closeIcon: tagCloseIcon,
      border: tagBorder,
      style: tagStyle,
      padding: tagPadding,
      height: tagHeight,
      width: tagWidth,
      minSize: tagMinSize,
      maxSize: tagMaxSize,
      closeIconPosition: tagCloseIconPosition,
      ellipsis: props2.tagEllipsis
    });
    var valueProps = _objectSpread2((_objectSpread22 = {
      renderTagLabel,
      multiple,
      searchable,
      rootClassName,
      renderTag,
      renderRemainingTags,
      renderTags,
      tagProps,
      wrapMultiple,
      maxTagsLength,
      focus
    }, (0, _defineProperty2.default)(_objectSpread22, "maxTagsLength", maxTagsLength), (0, _defineProperty2.default)(_objectSpread22, "rtl", rtl), (0, _defineProperty2.default)(_objectSpread22, "renderDisplayValue", renderDisplayValue), _objectSpread22), computed);
    return valueProps;
  }
  var _default2 = getValueProps$1;
  getValueProps.default = _default2;
  return getValueProps;
}
var getDataProp = {};
var hasRequiredGetDataProp;
function requireGetDataProp() {
  if (hasRequiredGetDataProp)
    return getDataProp;
  hasRequiredGetDataProp = 1;
  Object.defineProperty(getDataProp, "__esModule", {
    value: true
  });
  getDataProp.default = void 0;
  var getDataProp$1 = function getDataProp2(propName) {
    if (propName == null) {
      return null;
    }
    return function(item) {
      if (!item) {
        return null;
      }
      return typeof propName === "function" ? propName(item) : item[propName];
    };
  };
  var _default2 = getDataProp$1;
  getDataProp.default = _default2;
  return getDataProp;
}
var getNewMultipleValue = {};
var hasRequiredGetNewMultipleValue;
function requireGetNewMultipleValue() {
  if (hasRequiredGetNewMultipleValue)
    return getNewMultipleValue;
  hasRequiredGetNewMultipleValue = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getNewMultipleValue, "__esModule", {
    value: true
  });
  getNewMultipleValue.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  function getNewMultipleValue$1(_ref2) {
    var id2 = _ref2.id, value = _ref2.value;
    var newValue;
    var isArray2 = Array.isArray(value);
    var hasValue = isArray2 && value.indexOf(id2) !== -1;
    if (hasValue) {
      newValue = value.filter(function(itemId) {
        return itemId !== id2;
      });
      newValue = newValue.length ? newValue : null;
    } else {
      newValue = isArray2 ? [].concat((0, _toConsumableArray2.default)(value), [id2]) : [id2];
    }
    return newValue;
  }
  var _default2 = getNewMultipleValue$1;
  getNewMultipleValue.default = _default2;
  return getNewMultipleValue;
}
var getNewSingleValue = {};
var hasRequiredGetNewSingleValue;
function requireGetNewSingleValue() {
  if (hasRequiredGetNewSingleValue)
    return getNewSingleValue;
  hasRequiredGetNewSingleValue = 1;
  Object.defineProperty(getNewSingleValue, "__esModule", {
    value: true
  });
  getNewSingleValue.default = void 0;
  function getNewSingleValue$1(_ref2) {
    var id2 = _ref2.id, value = _ref2.value, _ref$toggle = _ref2.toggle, toggle = _ref$toggle === void 0 ? true : _ref$toggle;
    if (value == null) {
      return id2;
    }
    if (toggle) {
      return id2 === value ? null : id2;
    }
    return id2;
  }
  var _default2 = getNewSingleValue$1;
  getNewSingleValue.default = _default2;
  return getNewSingleValue;
}
var findItemIndex = {};
var hasRequiredFindItemIndex;
function requireFindItemIndex() {
  if (hasRequiredFindItemIndex)
    return findItemIndex;
  hasRequiredFindItemIndex = 1;
  Object.defineProperty(findItemIndex, "__esModule", {
    value: true
  });
  findItemIndex.default = void 0;
  function findItemIndex$1(_ref2) {
    var id2 = _ref2.id, data = _ref2.data, getIdProperty = _ref2.getIdProperty;
    if (!Array.isArray(data) || !getIdProperty || id2 == null) {
      return null;
    }
    var filteredList = data.reduce(function(acc, item, index2) {
      if (getIdProperty(item) === id2) {
        acc = index2;
      }
      return acc;
    }, null);
    return filteredList !== null ? filteredList : null;
  }
  var _default2 = findItemIndex$1;
  findItemIndex.default = _default2;
  return findItemIndex;
}
var filterByValue = {};
var hasRequiredFilterByValue;
function requireFilterByValue() {
  if (hasRequiredFilterByValue)
    return filterByValue;
  hasRequiredFilterByValue = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(filterByValue, "__esModule", {
    value: true
  });
  filterByValue.default = void 0;
  var _isSelected = _interopRequireDefault2(requireIsSelected());
  function filterByValue$1(_ref2) {
    var data = _ref2.data, getIdProperty = _ref2.getIdProperty, value = _ref2.value;
    return data.filter(function(item) {
      var id2 = getIdProperty(item);
      return !(0, _isSelected.default)({
        id: id2,
        value
      });
    });
  }
  var _default2 = filterByValue$1;
  filterByValue.default = _default2;
  return filterByValue;
}
var filterByText = {};
var hightlightText = {};
var hasRequiredHightlightText;
function requireHightlightText() {
  if (hasRequiredHightlightText)
    return hightlightText;
  hasRequiredHightlightText = 1;
  Object.defineProperty(hightlightText, "__esModule", {
    value: true
  });
  hightlightText.default = void 0;
  function hightlightText$1(_ref2) {
    var queryText = _ref2.queryText, text = _ref2.text, _ref$mode = _ref2.mode, mode2 = _ref$mode === void 0 ? "contains" : _ref$mode;
    var regex = mode2 === "contains" ? new RegExp(queryText, "gi") : new RegExp("^".concat(queryText), "gi");
    var matchText = [];
    var searchQueryLen = queryText.length;
    var localMatch;
    var previousLocalMatch;
    while ((localMatch = regex.exec(text)) !== null) {
      var index2 = localMatch.index;
      var previousSegmentIndex = previousLocalMatch ? previousLocalMatch.index + searchQueryLen : 0;
      matchText.push(text.slice(previousSegmentIndex, index2));
      matchText.push({
        match: text.slice(localMatch.index, localMatch.index + searchQueryLen)
      });
      previousLocalMatch = localMatch;
    }
    matchText.push(text.slice(previousLocalMatch.index + searchQueryLen));
    matchText = matchText.filter(function(match2) {
      return match2;
    });
    return matchText;
  }
  var _default2 = hightlightText$1;
  hightlightText.default = _default2;
  return hightlightText;
}
var hasRequiredFilterByText;
function requireFilterByText() {
  if (hasRequiredFilterByText)
    return filterByText;
  hasRequiredFilterByText = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(filterByText, "__esModule", {
    value: true
  });
  filterByText.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _hightlightText = _interopRequireDefault2(requireHightlightText());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var defaultFilterFunction = function defaultFilterFunction2(_ref2) {
    var label = _ref2.label, text = _ref2.text, mode2 = _ref2.mode;
    label = label.toLowerCase ? label.toLowerCase() : "".concat(label);
    text = text.toLowerCase ? text.toLowerCase() : "".concat(text);
    return mode2 === "contains" ? label.indexOf(text) !== -1 : label.startsWith(text);
  };
  function filterByText$1(_ref2) {
    var data = _ref2.data, getFilterProperty = _ref2.getFilterProperty, text = _ref2.text, _ref2$filterFunction = _ref2.filterFunction, filterFunction = _ref2$filterFunction === void 0 ? defaultFilterFunction : _ref2$filterFunction, _ref2$mode = _ref2.mode, mode2 = _ref2$mode === void 0 ? "contains" : _ref2$mode, hightlight = _ref2.hightlight;
    if (!Array.isArray(data)) {
      return null;
    }
    var filteredData = data.reduce(function(acc, item) {
      var label = getFilterProperty(item);
      var match2 = filterFunction({
        label,
        text,
        item,
        mode: mode2
      });
      if (match2) {
        if (hightlight) {
          var newItem = _objectSpread2(_objectSpread2({}, item), {}, {
            mode: mode2,
            matchText: (0, _hightlightText.default)({
              queryText: text,
              text: label
            })
          });
          acc.push(newItem);
        } else {
          acc.push(item);
        }
      }
      return acc;
    }, []);
    return filteredData;
  }
  var _default2 = filterByText$1;
  filterByText.default = _default2;
  return filterByText;
}
var deselectValue = {};
var hasRequiredDeselectValue;
function requireDeselectValue() {
  if (hasRequiredDeselectValue)
    return deselectValue;
  hasRequiredDeselectValue = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(deselectValue, "__esModule", {
    value: true
  });
  deselectValue.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  function deselectValue$1(_ref2) {
    var id2 = _ref2.id, value = _ref2.value, _ref$getIdProperty = _ref2.getIdProperty, getIdProperty = _ref$getIdProperty === void 0 ? function(item) {
      return item && item.id;
    } : _ref$getIdProperty;
    var newValue;
    var singleValueId = (0, _typeof2.default)(value) === "object" ? getIdProperty(value) : value;
    if (id2 === singleValueId || singleValueId === null) {
      newValue = null;
    }
    if (Array.isArray(value)) {
      newValue = value.filter(function(value2) {
        var valueId = (0, _typeof2.default)(value2) === "object" ? getIdProperty(value2) : value2;
        return valueId !== id2;
      });
      if (!newValue.length) {
        newValue = null;
      }
    }
    return newValue;
  }
  var _default2 = deselectValue$1;
  deselectValue.default = _default2;
  return deselectValue;
}
var getNewActiveTagOnRemove = {};
var hasRequiredGetNewActiveTagOnRemove;
function requireGetNewActiveTagOnRemove() {
  if (hasRequiredGetNewActiveTagOnRemove)
    return getNewActiveTagOnRemove;
  hasRequiredGetNewActiveTagOnRemove = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getNewActiveTagOnRemove, "__esModule", {
    value: true
  });
  getNewActiveTagOnRemove.default = void 0;
  var _clamp = _interopRequireDefault2(requireClamp());
  function getNewActiveTagOnRemove$1(_ref2) {
    var id2 = _ref2.id, value = _ref2.value, dir = _ref2.dir;
    dir = dir || -1;
    if (!Array.isArray(value) || value.length === 1) {
      return null;
    }
    var newActiveTag = null;
    var currentIndex = value.indexOf(id2);
    var lastIndex = value.length - 1;
    var newIndex = (0, _clamp.default)(currentIndex + dir, 0, lastIndex);
    if (dir == 1 && currentIndex === lastIndex) {
      newIndex = (0, _clamp.default)(currentIndex - 1, 0, lastIndex);
    }
    if (dir == -1 && currentIndex == 0 && lastIndex > 0) {
      newIndex = 1;
    }
    newActiveTag = value[newIndex];
    return newActiveTag;
  }
  var _default2 = getNewActiveTagOnRemove$1;
  getNewActiveTagOnRemove.default = _default2;
  return getNewActiveTagOnRemove;
}
var getNextItem = {};
var hasRequiredGetNextItem;
function requireGetNextItem() {
  if (hasRequiredGetNextItem)
    return getNextItem;
  hasRequiredGetNextItem = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getNextItem, "__esModule", {
    value: true
  });
  getNextItem.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _findItemIndex = _interopRequireDefault2(requireFindItemIndex());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function getNextItem$1(config2) {
    var data = config2.data, id2 = config2.id, getIdProperty = config2.getIdProperty, _config$direction = config2.direction, direction2 = _config$direction === void 0 ? 1 : _config$direction;
    if (!Array.isArray(data) || !data.length || !getIdProperty || id2 == null) {
      return null;
    }
    if (data.length === 1) {
      return id2;
    }
    var enabledItems = data.filter(function(item) {
      return !item.disabled;
    });
    if (enabledItems.length === 0) {
      return null;
    }
    var currentIndex = (0, _findItemIndex.default)({
      data,
      id: id2,
      getIdProperty
    });
    var nextIndex;
    if (direction2 === 1) {
      nextIndex = currentIndex + 1;
      nextIndex = nextIndex > data.length - 1 ? 0 : nextIndex;
    } else {
      nextIndex = currentIndex - 1;
      nextIndex = nextIndex >= 0 ? nextIndex : data.length - 1;
    }
    var newItem = data[nextIndex];
    var newActiveId = getIdProperty(newItem);
    if (newItem.disabled) {
      newActiveId = getNextItem$1(_objectSpread2(_objectSpread2({}, config2), {}, {
        id: newActiveId
      }));
    }
    return newActiveId;
  }
  var _default2 = getNextItem$1;
  getNextItem.default = _default2;
  return getNextItem;
}
var groupItems = {};
var hasRequiredGroupItems;
function requireGroupItems() {
  if (hasRequiredGroupItems)
    return groupItems;
  hasRequiredGroupItems = 1;
  Object.defineProperty(groupItems, "__esModule", {
    value: true
  });
  groupItems.default = void 0;
  function groupItems$1(_ref2) {
    var items = _ref2.items, maxTagsLength = _ref2.maxTagsLength;
    var visibleItems = items;
    var remainingItems = null;
    if (items.length > maxTagsLength) {
      var cutFrom = maxTagsLength;
      remainingItems = items.slice(cutFrom);
      visibleItems = items.slice(0, cutFrom);
    }
    return {
      visibleItems,
      remainingItems
    };
  }
  var _default2 = groupItems$1;
  groupItems.default = _default2;
  return groupItems;
}
var getValueMap = {};
var hasRequiredGetValueMap;
function requireGetValueMap() {
  if (hasRequiredGetValueMap)
    return getValueMap;
  hasRequiredGetValueMap = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getValueMap, "__esModule", {
    value: true
  });
  getValueMap.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var contains2 = function contains3(stack, needle) {
    for (var i = 0; i < stack.length; i++) {
      if (stack[i] == needle) {
        return true;
      }
    }
    return false;
  };
  function getValueMap$1(_ref2) {
    var value = _ref2.value, dataMap = _ref2.dataMap, oldValueMap = _ref2.oldValueMap;
    if (value == null) {
      return oldValueMap;
    }
    var valueMap = _objectSpread2({}, oldValueMap);
    value = Array.isArray(value) ? value : [value];
    valueMap = Object.keys(valueMap).reduce(function(acc, id2) {
      if (contains2(value, id2)) {
        acc[id2] = valueMap[id2];
      }
      return acc;
    }, {});
    value.forEach(function(id2) {
      if (dataMap && dataMap[id2]) {
        valueMap[id2] = dataMap[id2];
      }
    });
    return valueMap;
  }
  var _default2 = getValueMap$1;
  getValueMap.default = _default2;
  return getValueMap;
}
var getGroups = {};
var hasRequiredGetGroups;
function requireGetGroups() {
  if (hasRequiredGetGroups)
    return getGroups;
  hasRequiredGetGroups = 1;
  Object.defineProperty(getGroups, "__esModule", {
    value: true
  });
  getGroups.default = void 0;
  function getGroups$1(data) {
    var groupProperty = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "group";
    var groupsConfig = data.reduce(function(acc, item, index2) {
      var groupTitle = item[groupProperty];
      var currentGroup = acc.groups[acc.currentGroup];
      if (groupTitle && groupTitle !== (currentGroup && currentGroup.title)) {
        var newGroup = {
          title: groupTitle,
          indexAjustment: acc.indexAjustment + 1
        };
        var groupIndex = index2 + acc.indexAjustment;
        acc.groups[groupIndex] = newGroup;
        acc.currentGroup = groupIndex;
        acc.indexAjustment += 1;
      }
      return acc;
    }, {
      groups: {},
      currentGroup: 0,
      indexAjustment: 0
    });
    return groupsConfig.groups;
  }
  var _default2 = getGroups$1;
  getGroups.default = _default2;
  return getGroups;
}
var hasRequiredComboBox$1;
function requireComboBox$1() {
  if (hasRequiredComboBox$1)
    return ComboBox;
  hasRequiredComboBox$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof3 = require_typeof();
  Object.defineProperty(ComboBox, "__esModule", {
    value: true
  });
  ComboBox.default = ComboBox.REMAINING_ITEMS = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _NotifyResize = requireNotifyResize();
  var _throttle = _interopRequireDefault2(requireThrottle$1());
  var _containsNode = _interopRequireDefault2(requireContainsNode());
  var _TextInput = _interopRequireDefault2(requireTextInput$1());
  var _Value = _interopRequireDefault2(requireValue());
  var _ClearButton = _interopRequireDefault2(requireClearButton());
  var _ToggleButton = _interopRequireDefault2(requireToggleButton());
  var _List = _interopRequireDefault2(requireList$1());
  var _Icons = requireIcons$1();
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$2());
  var _getRootClassName = _interopRequireDefault2(requireGetRootClassName());
  var _getListProps2 = _interopRequireDefault2(requireGetListProps());
  var _getValueProps2 = _interopRequireDefault2(requireGetValueProps());
  var _getDataProp = _interopRequireDefault2(requireGetDataProp());
  var _getNewMultipleValue = _interopRequireDefault2(requireGetNewMultipleValue());
  var _getNewSingleValue = _interopRequireDefault2(requireGetNewSingleValue());
  var _findItemIndex = _interopRequireDefault2(requireFindItemIndex());
  var _filterByValue = _interopRequireDefault2(requireFilterByValue());
  var _filterByText = _interopRequireDefault2(requireFilterByText());
  var _deselectValue = _interopRequireDefault2(requireDeselectValue());
  var _getNewActiveTagOnRemove = _interopRequireDefault2(requireGetNewActiveTagOnRemove());
  var _getNextItem = _interopRequireDefault2(requireGetNextItem());
  var _groupItems = _interopRequireDefault2(requireGroupItems());
  var _getValueMap = _interopRequireDefault2(requireGetValueMap());
  var _getGroups = _interopRequireDefault2(requireGetGroups());
  var _PaginationToolbar = requirePaginationToolbar();
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var REMAINING_ITEMS = "REMAINING_ITEMS";
  ComboBox.REMAINING_ITEMS = REMAINING_ITEMS;
  var emptyObject = {};
  var InovuaComboBox = function(_Component) {
    (0, _inherits2.default)(InovuaComboBox2, _Component);
    var _super = _createSuper(InovuaComboBox2);
    function InovuaComboBox2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaComboBox2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
        if (_this.isExpandedControlled() && _this.props.expanded !== prevProps.expanded) {
          _this.onExpand();
        }
        if (prevProps.dataSource !== _this.props.dataSource) {
          _this.loadDataSource(_this.props.dataSource, _this.props);
        }
        if (_this.props.idProperty !== prevProps.idProperty) {
          _this.updateGetIdProperty(_this.props);
        }
        if (_this.props.displayProperty !== prevProps.displayProperty) {
          _this.updateGetDisplayProperty(_this.props);
        }
        if (_this.props.filterProperty !== prevProps.filterProperty) {
          _this.updateGetFilterProperty(_this.props);
        }
        if (_this.props.groupProperty !== prevProps.groupProperty) {
          _this.updateGroups({
            groupProperty: _this.props.groupProperty
          });
        }
        if (_this.isTextControled() && _this.props.text !== prevProps.text) {
          _this.onTextUpdate(_this.props.text);
        }
        if (_this.isActiveItemControlled() && prevProps.changeValueOnNavigation && !prevProps.multiple && prevProps.activeItem !== _this.props.activeItem) {
          _this.setValue(_this.props.activeItem, {
            action: "navigate"
          });
        }
        if (_this.isExpandedControlled() && !prevProps.expanded && _this.props.expanded) {
          _this.loadLazyDataSource({
            action: "expand",
            text: ""
          });
        }
      });
      _this.refTools = function(tools) {
        _this.toolsNode = tools;
      };
      _this.state = {
        loading: props2.defaultLoading || !!(props2.dataSource && props2.dataSource.then),
        value: props2.defaultValue,
        valueMap: {},
        text: props2.defaultText,
        activeTag: props2.defaultActiveTag,
        activeItem: props2.defaultActiveItem || !props2.multiple && props2.defaultValue,
        expanded: props2.defaultExpanded,
        toolsSize: {
          width: 0,
          height: 0
        },
        over: false,
        focus: false
      };
      _this.getData = _this.getData.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleItemClick = _this.handleItemClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleTextChange = _this.handleTextChange.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleTextInputClick = _this.handleTextInputClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleTagClick = _this.handleTagClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleRemoveTag = _this.handleRemoveTag.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleComboClick = _this.handleComboClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleComboKeyDown = _this.handleComboKeyDown.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleComboFocus = _this.handleComboFocus.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleComboBlur = _this.handleComboBlur.bind((0, _assertThisInitialized2.default)(_this));
      _this.getComboNode = _this.getComboNode.bind((0, _assertThisInitialized2.default)(_this));
      _this.clear = _this.clear.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseLeave = _this.handleMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
      _this.toggleExpand = _this.toggleExpand.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleToolsSize = _this.handleToolsSize.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleRemoveMultipleTag = _this.handleRemoveMultipleTag.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleListScrollBottom = _this.handleListScrollBottom.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleDelete = _this.handleDelete.bind((0, _assertThisInitialized2.default)(_this));
      _this.getListNode = _this.getListNode.bind((0, _assertThisInitialized2.default)(_this));
      _this.updateGetIdProperty();
      _this.updateGetDisplayProperty();
      _this.updateGetFilterProperty();
      _this.addTextInputRef = function(ref) {
        _this.textInput = ref;
      };
      _this.addRootRef = function(ref) {
        _this.comboNode = ref;
      };
      _this.addListRef = function(ref) {
        _this.listNode = ref;
      };
      _this.setActiveItem = (0, _throttle.default)(_this.setActiveItem, 16);
      return _this;
    }
    (0, _createClass2.default)(InovuaComboBox2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.autoFocus) {
          this.focus();
        }
        if (this.state.activeItem && this.state.activeItemIndex == null) {
          this.setState({
            activeItemIndex: this.getItemIndexById(this.state.activeItem)
          });
        }
        if (!this.isRemoteFilter()) {
          this.doFilter();
        }
        if (!this.props.lazyDataSource) {
          this.loadDataSource(this.props.dataSource);
        }
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props, state2 = this.state;
        var textInput = this.renderTextInput();
        var className = (0, _getRootClassName.default)({
          props: props2,
          state: state2,
          computed: {
            value: this.getValue()
          }
        });
        var expanded = this.getExpanded();
        var items = this.getSelectedItems();
        var groupedItems = this.groupedItems = this.getGroupedItems(this.getSelectedItems());
        this.areItemsGrouped = this.groupedItems && this.groupedItems.remainingItems && this.groupedItems.remainingItems.length;
        var style = this.getRootStyle();
        var filteredData = this.getFilteredData();
        var text = this.getText();
        this.isNewCustomTagValid = (!filteredData || filteredData.length === 0) && !!text && props2.allowCustomTagCreation;
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, InovuaComboBox2.propTypes)), {}, {
          onClick: this.handleComboClick,
          onMouseDown: this.handleComboMouseDown,
          onKeyDown: this.handleComboKeyDown,
          onFocus: this.handleComboFocus,
          onBlur: this.handleComboBlur,
          className,
          style,
          ref: this.addRootRef,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          tabIndex: 0
        }), _react.default.createElement(_Value.default, _objectSpread2(_objectSpread2({}, this.getValueProps({
          items,
          groupedItems
        })), {}, {
          textInput,
          toolsSize: state2.toolsSize
        })), _react.default.createElement("div", {
          className: "".concat(props2.rootClassName, "__tools"),
          ref: this.refTools
        }, this.renderSpinner(), this.renderClearIcon(), this.renderToggleIcon(), this.props.tagEllipsis && _react.default.createElement(_NotifyResize.NotifyResize, {
          notifyOnMount: true,
          onResize: this.handleToolsSize
        })), expanded && this.renderList());
      }
    }, {
      key: "getRootStyle",
      value: function getRootStyle() {
        var props2 = this.props, state2 = this.state;
        var style = _objectSpread2({}, props2.style);
        if (props2.borderRadius) {
          style.borderRadius = props2.borderRadius;
        }
        if (props2.padding) {
          style.padding = props2.padding;
        }
        if (props2.border) {
          style.border = props2.border;
        }
        if (props2.background) {
          style.background = props2.background;
        }
        if (!this.getValue() && props2.emptyStyle) {
          style = _objectSpread2(_objectSpread2({}, style), props2.emptyStyle);
        }
        if (props2.disabledStyle && props2.disabled) {
          style = _objectSpread2(_objectSpread2({}, style), props2.disabledStyle);
        }
        if (state2.focus && props2.focusedStyle) {
          style = _objectSpread2(_objectSpread2({}, style), props2.focusedStyle);
        }
        return style;
      }
    }, {
      key: "renderList",
      value: function renderList() {
        var listProps = this.getListProps();
        var result;
        if (typeof this.props.renderList === "function") {
          result = this.props.renderList({
            domProps: listProps,
            items: this.getFilteredData()
          });
        }
        if (result === void 0) {
          result = _react.default.createElement(_List.default, _objectSpread2({}, listProps));
        }
        if (typeof this.props.renderListComponent === "function") {
          var res = this.props.renderListComponent(result);
          if ((0, _typeof2.default)(res) !== void 0) {
            return res;
          }
          result = res;
        }
        return result;
      }
    }, {
      key: "renderClearIcon",
      value: function renderClearIcon() {
        var props2 = this.props, state2 = this.state;
        var searchable = props2.searchable;
        var text = this.getText();
        var value = this.getValue();
        var showClearIcon = (text || value != null) && props2.clearIcon;
        if (props2.showClearIconOnMouseOver) {
          if (!state2.over) {
            showClearIcon = false;
          }
        }
        if (searchable === false) {
          showClearIcon = false;
        }
        if (!showClearIcon) {
          return null;
        }
        var clearButton = _react.default.createElement(_ClearButton.default, {
          onClear: this.clear,
          closeIcon: props2.clearIcon,
          className: "".concat(props2.rootClassName, "__clear-icon")
        });
        return clearButton;
      }
    }, {
      key: "renderToggleIcon",
      value: function renderToggleIcon() {
        var props2 = this.props;
        if (!props2.toggleIcon) {
          return null;
        }
        return _react.default.createElement(_ToggleButton.default, {
          onToggle: this.toggleExpand,
          className: "".concat(props2.rootClassName, "__toggle-icon"),
          toggleIcon: props2.toggleIcon,
          expanded: this.getExpanded()
        });
      }
    }, {
      key: "renderTextInput",
      value: function renderTextInput() {
        if (this.props.disabled) {
          return null;
        }
        var text = this.getText();
        var value = text;
        if (!this.props.multiple) {
          if (text == null) {
            value = this.getValue() == null ? "" : this.getItemLabel();
          } else {
            value = text;
          }
        }
        var data = this.getFilteredData();
        var suggestion = null;
        if (this.props.minAutocompleteLength <= (value && value.length) && data && data[0]) {
          suggestion = this.getDisplayProperty(data[0]);
        }
        var inputProps = {
          key: "text_input",
          value,
          theme: this.props.theme,
          suggestion,
          placeholder: this.props.placeholder,
          rootClassName: "".concat(this.props.rootClassName, "__input"),
          className: this.props.inputClassName,
          style: this.props.inputStyle,
          onChange: this.handleTextChange,
          ref: this.addTextInputRef,
          onClick: this.handleTextInputClick,
          throttle: this.props.filterDelay,
          autocomplete: this.props.autocomplete,
          tabIndex: this.props.tabIndex,
          autocompleteDelay: this.props.autocompleteDelay,
          searchable: this.props.searchable
        };
        var result;
        if (typeof this.props.renderInput === "function") {
          result = this.props.renderInput({
            text,
            domProps: inputProps,
            onChange: inputProps.onChange
          });
        }
        if (result === void 0) {
          result = _react.default.createElement(_TextInput.default, _objectSpread2({}, inputProps));
        }
        return result;
      }
    }, {
      key: "renderSpinner",
      value: function renderSpinner() {
        if (!this.props.loadingSpinner) {
          return null;
        }
        var loading = this.getLoading();
        if (!loading && !this.getExpanded()) {
          return null;
        }
        var spinner = this.props.loadingSpinner === true ? _react.default.createElement(_Icons.LoadingIcon, {
          className: "".concat(this.props.rootClassName, "__loading-spinner")
        }) : this.props.loadingSpinner;
        return loading ? spinner : (0, _react.cloneElement)(spinner, {
          style: spinner.props.style ? _objectSpread2(_objectSpread2({}, spinner.props.style), {}, {
            display: "none"
          }) : {
            display: "none"
          }
        });
      }
    }, {
      key: "getListProps",
      value: function getListProps2() {
        var props2 = this.props, state2 = this.state;
        var data = this.getFilteredData();
        var groupsLength = this.state.groups && Object.keys(this.state.groups).length || 0;
        var listProps = (0, _getListProps2.default)({
          props: props2,
          state: state2,
          computed: {
            data,
            loading: this.getLoading(),
            activeItem: this.getActiveItem(),
            value: this.getValue(),
            dataLength: data && data.length + groupsLength || 0,
            getIdProperty: this.getIdProperty,
            getDisplayProperty: this.getDisplayProperty,
            onItemClick: this.handleItemClick,
            getComboNode: this.getComboNode,
            ref: this.addListRef,
            onScrollBottom: this.handleListScrollBottom,
            text: this.getText(),
            isNewCustomTagValid: this.isNewCustomTagValid
          }
        });
        return listProps;
      }
    }, {
      key: "getValueProps",
      value: function getValueProps2(_ref2) {
        var items = _ref2.items, groupedItems = _ref2.groupedItems, item = _ref2.item;
        var props2 = this.props, state2 = this.state;
        var value = this.getValue();
        return (0, _getValueProps2.default)({
          props: props2,
          state: state2,
          computed: {
            items,
            item,
            groupedItems,
            value,
            label: this.getItemLabel(),
            activeTag: this.getActiveTag()
          },
          tagProps: {
            activeStyle: props2.tagActiveStyle,
            onClick: this.handleTagClick,
            onCloseTagClick: this.handleRemoveTag,
            onMultipleTagClose: this.handleRemoveMultipleTag
          }
        });
      }
    }, {
      key: "loadDataSource",
      value: function loadDataSource(dataSource) {
        var _this2 = this;
        var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
        var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyObject, appendTo = _ref2.appendTo, action = _ref2.action, value = _ref2.value, text = _ref2.text, skip2 = _ref2.skip, limit = _ref2.limit, hasNextPage = _ref2.hasNextPage;
        if (Array.isArray(dataSource)) {
          if (this.getLoading()) {
            this.setLoading(false);
          }
          this.setData(dataSource, props2, {
            appendTo
          });
          return;
        }
        if (dataSource && Array.isArray(dataSource.data)) {
          if (this.getLoading()) {
            this.setLoading(false);
          }
          this.setData(dataSource.data, props2, {
            remoteCount: dataSource.count != null ? dataSource.count * 1 : null,
            appendTo
          });
          return;
        }
        if (dataSource && dataSource.then) {
          this.setLoading(true);
          dataSource.then(function(data) {
            _this2.props.onDataSourceLoad(data);
            _this2.loadDataSource(data, props2, {
              appendTo
            });
          });
          return;
        }
        if (typeof dataSource === "function") {
          var config2 = _objectSpread2(_objectSpread2({}, props2), {}, {
            data: this.state.data,
            hasNextPage: hasNextPage !== void 0 ? hasNextPage : this.hasNextPage(),
            text: this.isRemoteFilter() ? text !== void 0 ? text : this.getText() : void 0,
            skip: skip2 || 0,
            action,
            append: !!appendTo,
            value: value !== void 0 ? value : this.getValue(),
            limit: limit !== void 0 ? limit : this.props.limit
          });
          var dataResult = dataSource(config2);
          this.loadDataSource(dataResult, void 0, {
            appendTo: config2.append === false ? null : appendTo
          });
        }
        if (!dataSource) {
          this.setData(null, props2);
        }
      }
    }, {
      key: "setData",
      value: function setData(data) {
        var _this3 = this;
        var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
        var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyObject, remoteCount = _ref3.remoteCount, appendTo = _ref3.appendTo;
        if (!data) {
          this.setState({
            data: null,
            dataMap: null,
            filteredData: null,
            remoteCount: null
          });
          return null;
        }
        if (Array.isArray(appendTo)) {
          data = appendTo.concat(data);
        }
        var dataMap = data.reduce(function(acc, item) {
          acc[_this3.getIdProperty(item)] = item;
          return acc;
        }, {});
        if (props2.groupProperty) {
          this.updateGroups({
            data,
            groupProperty: props2.groupProperty
          });
        }
        this.updateValueMap({
          value: this.getValue(props2),
          dataMap,
          oldValueMap: this.getValueMap()
        });
        this.updateFilteredData({
          data
        });
        this.setState({
          data,
          dataMap,
          remoteCount
        });
      }
    }, {
      key: "getPageCount",
      value: function getPageCount() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var count = this.getDataCountForPagination(props2);
        return (0, _PaginationToolbar.getPageCount)({
          count,
          limit: props2.limit
        });
      }
    }, {
      key: "hasNextPage",
      value: function hasNextPage() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return this.getCurrentPage(props2) < this.getPageCount(props2);
      }
    }, {
      key: "getCurrentPage",
      value: function getCurrentPage() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var limit = props2.limit;
        props2.skip;
        return (0, _PaginationToolbar.getCurrentPage)({
          skip: this.previousSkip ? this.previousSkip : 0,
          limit
        });
      }
    }, {
      key: "isLastPage",
      value: function isLastPage() {
        arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
      }
    }, {
      key: "getDataCountForPagination",
      value: function getDataCountForPagination() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var data = this.getData();
        var count = this.isPaginationEnabled(props2) ? props2.remoteCount || this.state.remoteCount : data ? data.length : 0;
        return count || 0;
      }
    }, {
      key: "getFilteredData",
      value: function getFilteredData() {
        return this.state.filteredData;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this.state.data;
      }
    }, {
      key: "loadLazyDataSource",
      value: function loadLazyDataSource(_ref4) {
        var action = _ref4.action, text = _ref4.text;
        if (!this.props.lazyDataSource) {
          return null;
        }
        var params = {
          action,
          text,
          value: this.getValue()
        };
        this.setData(null);
        this.loadDataSource(this.props.dataSource, void 0, params);
        return null;
      }
    }, {
      key: "isPaginationEnabled",
      value: function isPaginationEnabled() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var hasLoadNextPage = typeof props2.loadNextPage === "function";
        var hasFunctionalDataSource = typeof props2.dataSource === "function";
        if (props2.enablePagination === false) {
          return false;
        }
        return props2.enablePagination ? hasLoadNextPage || hasFunctionalDataSource : hasLoadNextPage;
      }
    }, {
      key: "remoteFilterData",
      value: function remoteFilterData() {
        var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref5$text = _ref5.text, text = _ref5$text === void 0 ? this.getText() : _ref5$text, _ref5$value = _ref5.value;
        _ref5$value === void 0 ? this.getValue() : _ref5$value;
        _ref5.filterType;
        this.previousSkip = null;
        this.loadDataSource(this.props.dataSource, void 0, {
          text,
          skip: 0
        });
      }
    }, {
      key: "loadNextPage",
      value: function loadNextPage() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var filteredData = this.getFilteredData();
        if (filteredData && filteredData.length < 3) {
          return null;
        }
        if (this.previousSkip == null) {
          this.previousSkip = props2.skip;
        }
        var limit = props2.limit;
        var hasNextPage = this.hasNextPage();
        var newSkip = this.previousSkip + limit;
        this.previousSkip = newSkip;
        if (!this.isPaginationEnabled()) {
          return;
        }
        var fn = typeof props2.dataSource === "function" ? props2.dataSource : null;
        if (fn && hasNextPage) {
          var currentData = this.state.data;
          this.loadDataSource(this.props.dataSource, void 0, {
            appendTo: currentData,
            hasNextPage,
            skip: newSkip,
            limit,
            filter: this.currentFilter
          });
        }
      }
    }, {
      key: "isRemoteDataSource",
      value: function isRemoteDataSource() {
        return typeof this.props.dataSource === "function";
      }
    }, {
      key: "isRemoteFilter",
      value: function isRemoteFilter() {
        return (0, _typeof2.default)(this.isRemoteDataSource()) && this.props.remoteFilter;
      }
    }, {
      key: "doFilter",
      value: function doFilter() {
        var _ref6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, text = _ref6.text, value = _ref6.value, force = _ref6.force, data = _ref6.data, filterType = _ref6.filterType, action = _ref6.action;
        if (this.currentFilter === text && !force) {
          return;
        }
        this.currentFilter = text;
        if (this.isRemoteFilter()) {
          if (action === "select") {
            return;
          }
          this.remoteFilterData({
            value,
            text,
            filterType
          });
        } else {
          this.updateFilteredData({
            text,
            value,
            data,
            filterType
          });
        }
      }
    }, {
      key: "updateFilteredData",
      value: function updateFilteredData() {
        var _ref7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref7$text = _ref7.text, text = _ref7$text === void 0 ? this.getText() : _ref7$text, _ref7$value = _ref7.value, value = _ref7$value === void 0 ? this.getValue() : _ref7$value, _ref7$data = _ref7.data, data = _ref7$data === void 0 ? this.state.data : _ref7$data, filterType = _ref7.filterType;
        var filteredData = data;
        if (!Array.isArray(filteredData)) {
          return filteredData;
        }
        if (!this.isRemoteFilter()) {
          filteredData = this.filterDataByText({
            text,
            data: filteredData
          });
          filteredData = this.filterDataByValue({
            value,
            text,
            data: filteredData
          });
        }
        var isFilteredByText = filterType === "text" && data.length !== filteredData.length;
        if (isFilteredByText && this.props.activeFirstItemOnFilter) {
          var firstItem = filteredData && filteredData[0];
          if (firstItem) {
            var id2 = this.getIdProperty(firstItem);
            this.setActiveItem(id2);
          } else {
            this.setActiveItem(null);
          }
        }
        this.setState({
          filteredData
        });
      }
    }, {
      key: "filterDataByValue",
      value: function filterDataByValue(_ref8) {
        var _ref8$value = _ref8.value, value = _ref8$value === void 0 ? this.getValue() : _ref8$value, _ref8$data = _ref8.data, data = _ref8$data === void 0 ? this.state.data : _ref8$data;
        if (!Array.isArray(data)) {
          return data;
        }
        var newData = data;
        if (data && value && this.props.removeSelectedItems) {
          newData = (0, _filterByValue.default)({
            data: newData,
            getIdProperty: this.getIdProperty,
            value
          });
        }
        return newData;
      }
    }, {
      key: "filterDataByText",
      value: function filterDataByText(_ref9) {
        var _ref9$text = _ref9.text, text = _ref9$text === void 0 ? this.getText() : _ref9$text, _ref9$data = _ref9.data, data = _ref9$data === void 0 ? this.state.data : _ref9$data;
        if (!data || !text) {
          return data;
        }
        var newData = data;
        if (this.isFilterTextActive()) {
          var filterFunction = this.props.filterFunction;
          newData = (0, _filterByText.default)({
            data,
            text,
            filterFunction,
            getFilterProperty: this.getFilterProperty || this.getDisplayProperty,
            mode: this.props.filterMode,
            hightlight: this.props.highlightMatchedText
          });
        }
        return newData;
      }
    }, {
      key: "getDataMap",
      value: function getDataMap() {
        return this.state.dataMap;
      }
    }, {
      key: "getValueMap",
      value: function getValueMap2() {
        return this.state.valueMap;
      }
    }, {
      key: "isValueControlled",
      value: function isValueControlled() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return props2.value !== void 0;
      }
    }, {
      key: "getValue",
      value: function getValue() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return this.isValueControlled(props2) ? props2.value : this.state.value;
      }
    }, {
      key: "setValue",
      value: function setValue(newValue) {
        var _ref10 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, action = _ref10.action;
        if (this.props.disabled) {
          return null;
        }
        if (this.props.readOnly) {
          return null;
        }
        if (this.props.maxValueLength && newValue && newValue.length > this.props.maxValueLength) {
          return null;
        }
        if (this.props.collapseOnSelect && action !== "navigate") {
          this.collapse();
        }
        if (this.props.autoBlur) {
          this.blur();
        }
        if (!this.isValueControlled()) {
          this.setState({
            value: newValue
          });
        }
        this.setText(null, {
          skipFilter: true
        });
        this.updateValueMap({
          value: newValue
        });
        this.props.onChange(newValue);
      }
    }, {
      key: "isFilterTextActive",
      value: function isFilterTextActive() {
        var text = this.getText();
        var data = this.getFilteredData();
        return data && text && this.props.searchable && text.length >= this.props.filterMinLength;
      }
    }, {
      key: "updateValueMap",
      value: function updateValueMap(_ref11) {
        var _this4 = this;
        var value = _ref11.value, dataMap = _ref11.dataMap, oldValueMap = _ref11.oldValueMap;
        var newValueMap = (0, _getValueMap.default)({
          value,
          dataMap: dataMap || this.getDataMap(),
          oldValueMap: oldValueMap || this.getValueMap()
        });
        if (newValueMap) {
          newValueMap = Object.keys(newValueMap).reduce(function(acc, id2) {
            var item = newValueMap[id2];
            acc[id2] = _objectSpread2(_objectSpread2({}, item), {}, {
              id: _this4.getIdProperty(item),
              label: _this4.getDisplayProperty(item) || item
            });
            return acc;
          }, {});
        }
        this.setState({
          valueMap: newValueMap
        });
      }
    }, {
      key: "selectItem",
      value: function selectItem(id2) {
        var dataMap = this.getDataMap();
        var item = dataMap && dataMap[id2];
        if (!item && !this.props.allowCustomTagCreation) {
          return null;
        }
        if (typeof this.props.isSelectedItemValid === "function") {
          var isItemValid = this.props.isSelectedItemValid(item);
          if (!isItemValid) {
            return null;
          }
        }
        var value = this.getValue();
        var newValue;
        if (this.props.multiple) {
          newValue = (0, _getNewMultipleValue.default)({
            id: id2,
            value
          });
        } else {
          newValue = (0, _getNewSingleValue.default)({
            id: id2,
            value,
            toggle: this.props.changeValueOnNavigation ? false : this.props.allowSelectionToggle
          });
        }
        this.setValue(newValue, {
          action: "select"
        });
        this.props.onItemClick({
          item,
          id: id2
        });
      }
    }, {
      key: "deselectItem",
      value: function deselectItem(id2) {
        var value = this.getValue();
        var newValue = (0, _deselectValue.default)({
          id: id2,
          value,
          getIdProperty: this.getIdProperty
        });
        this.setValue(newValue);
      }
    }, {
      key: "deselectItems",
      value: function deselectItems() {
        var _this5 = this;
        var ids = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var value = this.getValue();
        var newValue = ids.reduce(function(acc, id2) {
          acc = (0, _deselectValue.default)({
            id: id2,
            value: acc,
            getIdProperty: _this5.getIdProperty
          });
          return acc;
        }, value);
        this.setValue(newValue);
      }
    }, {
      key: "getExpanded",
      value: function getExpanded() {
        return this.isExpandedControlled() ? this.props.expanded : this.expanded != null ? this.expanded : this.state.expanded;
      }
    }, {
      key: "isExpandedControlled",
      value: function isExpandedControlled() {
        return this.props.expanded !== void 0;
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded) {
        var _this6 = this;
        if (this.expandedPromise) {
          this.expandedPromise.then(function(result) {
            if (_this6.getExpanded() !== expanded) {
              _this6.setExpanded(expanded);
            }
          });
          return;
        }
        this.expandedPromise = this.doSetExpanded(expanded).then(function() {
          delete _this6.expandedPromise;
        });
      }
    }, {
      key: "doSetExpanded",
      value: function doSetExpanded(expanded) {
        var _this7 = this;
        if (this.props.disabled) {
          return Promise.resolve(null);
        }
        var currentExpanded = this.getExpanded();
        if (currentExpanded === expanded) {
          return Promise.resolve(expanded);
        }
        if (!expanded && this.isRemoteFilter()) {
          this.previousSkip = null;
        }
        globalObject.requestAnimationFrame(function() {
          if (_this7.toolsNode) {
            _this7.handleToolsSize();
          }
        });
        var promise;
        if (!this.isExpandedControlled()) {
          promise = new Promise(function(resolve2, reject) {
            _this7.setState({
              expanded
            }, function() {
              resolve2(expanded);
            });
          });
        } else {
          promise = Promise.resolve(expanded);
        }
        if (expanded) {
          if (this.isRemoteDataSource() && this.state.data === void 0) {
            this.loadDataSource(this.props.dataSource);
          } else {
            if (this.wasExpandedAtLeastOnce) {
              this.doFilter({
                text: "",
                action: "expand",
                force: true
              });
            }
          }
        }
        if (expanded && !this.wasExpandedAtLeastOnce) {
          this.wasExpandedAtLeastOnce = true;
        }
        if (expanded) {
          this.onExpand();
        } else {
          this.props.onCollapse();
        }
        this.props.onExpandChange(expanded);
        this.props.onExpandedChange(expanded);
        return promise;
      }
    }, {
      key: "onExpand",
      value: function onExpand() {
        this.props.onExpand();
        if (this.props.highlightFirst) {
          var activeItem = this.getActiveItem();
          if (!activeItem) {
            var firstItem = this.getItemByIndex(0);
            if (firstItem) {
              var id2 = this.getIdProperty(firstItem);
              this.setActiveItem(id2);
            }
          }
        }
      }
    }, {
      key: "isActiveTagControlled",
      value: function isActiveTagControlled() {
        return this.props.activeTag !== void 0;
      }
    }, {
      key: "setActiveTag",
      value: function setActiveTag(id2) {
        if (this.props.disabled) {
          return null;
        }
        if (!this.isActiveTagControlled()) {
          this.setState({
            activeTag: id2
          });
        }
        this.props.onActiveTagChange(id2);
      }
    }, {
      key: "deselectActiveTag",
      value: function deselectActiveTag() {
        var activeTag = this.getActiveTag();
        if (activeTag) {
          this.setActiveTag(null);
        }
      }
    }, {
      key: "getActiveTag",
      value: function getActiveTag() {
        return this.isActiveTagControlled() ? this.props.activeTag : this.state.activeTag;
      }
    }, {
      key: "getSelectedItems",
      value: function getSelectedItems() {
        var _this8 = this;
        var valueMap = this.getValueMap();
        var value = this.getValue();
        var items = null;
        if (value) {
          value = Array.isArray(value) ? value : [value];
          items = value.map(function(id2) {
            return valueMap[id2] || {
              id: (0, _typeof2.default)(id2) === "object" ? _this8.getIdProperty(id2) : id2,
              label: (0, _typeof2.default)(id2) === "object" ? _this8.getDisplayProperty(id2) : _this8.getItemLabel(id2)
            };
          });
        }
        return items;
      }
    }, {
      key: "getItemLabel",
      value: function getItemLabel(id2) {
        id2 = id2 === void 0 ? this.getValue() : id2;
        var valueMap = this.getValueMap();
        var dataMap = this.getDataMap();
        var label;
        if (valueMap && valueMap[id2]) {
          label = valueMap[id2].label;
        } else if (dataMap && dataMap[id2]) {
          label = this.getDisplayProperty(dataMap[id2]);
        }
        if (label === void 0) {
          label = this.props.defaultDisplayValue !== void 0 && id2 != null ? this.props.defaultDisplayValue : id2;
        }
        return label;
      }
    }, {
      key: "getGroupedItems",
      value: function getGroupedItems2(items) {
        var maxTagsLength = this.props.maxTagsLength;
        if (maxTagsLength == null || !items) {
          return null;
        }
        return (0, _groupItems.default)({
          maxTagsLength,
          items
        });
      }
    }, {
      key: "isActiveItemControlled",
      value: function isActiveItemControlled() {
        return this.props.activeItem !== void 0;
      }
    }, {
      key: "setActiveItem",
      value: function setActiveItem(id2) {
        if (this.props.disabled) {
          return null;
        }
        var activeItem = this.getActiveItem();
        if (activeItem === id2) {
          return null;
        }
        if (!this.isActiveItemControlled()) {
          var activeItemIndex = null;
          if (id2) {
            activeItemIndex = this.getItemIndexById(id2);
          }
          this.setState({
            activeItemIndex,
            activeItem: id2
          });
          if (this.props.changeValueOnNavigation && !this.props.multiple) {
            this.setValue(id2, {
              action: "navigate"
            });
          }
        }
        this.scrollToId(id2);
        this.props.onActiveItemChange(id2);
      }
    }, {
      key: "getActiveItem",
      value: function getActiveItem() {
        return this.isActiveItemControlled() ? this.props.activeItem : this.state.activeItem;
      }
    }, {
      key: "isTextControled",
      value: function isTextControled() {
        return this.props.text != null;
      }
    }, {
      key: "getText",
      value: function getText() {
        return this.isTextControled() ? this.props.text : this.state.text;
      }
    }, {
      key: "setText",
      value: function setText(text) {
        var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject;
        var callback2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyFn;
        if (typeof config2 === "function") {
          callback2 = config2;
          config2 = emptyObject;
        }
        if (text === this.getText()) {
          callback2();
          return;
        }
        if (!this.isTextControled()) {
          this.setStateText(text, config2, callback2);
        }
        this.props.onTextChange(text);
      }
    }, {
      key: "setStateText",
      value: function setStateText(text) {
        var _this9 = this;
        var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject;
        var callback2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyFn;
        if (typeof config2 === "function") {
          callback2 = config2;
          config2 = emptyObject;
        }
        this.setState({
          text
        }, function() {
          _this9.onTextUpdate(text, config2);
          callback2();
        });
      }
    }, {
      key: "onTextUpdate",
      value: function onTextUpdate(text) {
        var _ref12 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, skipFilter = _ref12.skipFilter;
        this.clearValueOnEmptyIfNecessary(text);
        if (!skipFilter) {
          this.doFilter({
            text,
            filterType: "text"
          });
        }
      }
    }, {
      key: "clearValueOnEmptyIfNecessary",
      value: function clearValueOnEmptyIfNecessary(text) {
        if (this.props.clearValueOnEmpty && !this.props.multiple && text === "") {
          this.setValue(null);
        }
      }
    }, {
      key: "getLoading",
      value: function getLoading() {
        return this.isLoadingControlled() ? this.props.loading : this.state.loading;
      }
    }, {
      key: "isLoadingControlled",
      value: function isLoadingControlled() {
        return this.props.loading != null;
      }
    }, {
      key: "setLoading",
      value: function setLoading(loading) {
        if (loading === this.state.loading) {
          return;
        }
        if (!this.isLoadingControlled()) {
          this.setState({
            loading
          });
        }
        this.props.onLoadingChange(loading);
      }
    }, {
      key: "handleComboClick",
      value: function handleComboClick(event2) {
        event2.preventDefault();
        if (this.props.toggleExpandOnClick) {
          this.toggleExpand();
        } else if (this.props.expandOnClick) {
          this.expand();
        }
        if (this.props.focusOnClick && !this.hasFocus()) {
          this.focus();
        }
      }
    }, {
      key: "handleMouseEnter",
      value: function handleMouseEnter() {
        this.setState({
          over: true
        });
      }
    }, {
      key: "handleMouseLeave",
      value: function handleMouseLeave() {
        this.setState({
          over: false
        });
      }
    }, {
      key: "handleComboFocus",
      value: function handleComboFocus() {
        if (this.props.expandOnFocus) {
          this.expand();
        }
        this.setState({
          focus: true
        });
        this.props.onFocus();
      }
    }, {
      key: "handleComboBlur",
      value: function handleComboBlur(event2) {
        var _this10 = this;
        if (this.isFocused() && event2 && event2.relatedTarget && (0, _containsNode.default)(this.comboNode, event2.relatedTarget)) {
          globalObject.requestAnimationFrame(function() {
            _this10.focus();
          });
          return;
        }
        if (this.props.collapseOnBlur) {
          this.collapse();
        }
        if (this.props.clearTextOnBlur) {
          this.setText(null);
        }
        this.setState({
          focus: false
        });
        this.props.onBlur();
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this.state.focus;
      }
    }, {
      key: "handleItemClick",
      value: function handleItemClick(id2) {
        if (!this.isFocused() && this.props.focusOnClick) {
          this.focus();
        }
        this.setActiveItem(id2);
        this.selectItem(id2);
      }
    }, {
      key: "handleTextChange",
      value: function handleTextChange(text) {
        var _this11 = this;
        this.deselectActiveTag();
        this.setText(text, {
          skipFilter: this.props.expandOnTextChange && !this.getExpanded()
        }, function() {
          if (_this11.props.expandOnTextChange) {
            _this11.expand();
          }
        });
      }
    }, {
      key: "handleTextInputClick",
      value: function handleTextInputClick() {
        this.deselectActiveTag();
      }
    }, {
      key: "handleRemoveTag",
      value: function handleRemoveTag(id2) {
        this.removeTag(id2);
      }
    }, {
      key: "handleRemoveMultipleTag",
      value: function handleRemoveMultipleTag(ids) {
        this.deselectItems(ids);
      }
    }, {
      key: "handleListScrollBottom",
      value: function handleListScrollBottom() {
        this.loadNextPage();
      }
    }, {
      key: "removeTag",
      value: function removeTag(id2) {
        var dir = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
        var activeTag = this.getActiveTag();
        if (activeTag === id2 && activeTag != null) {
          var value = this.getValue();
          var newActiveTag = (0, _getNewActiveTagOnRemove.default)({
            id: id2,
            value,
            dir
          });
          this.setActiveTag(newActiveTag);
        }
        this.deselectItem(id2);
      }
    }, {
      key: "removeRemainingTags",
      value: function removeRemainingTags() {
        var ids = this.groupedItems.remainingItems.map(function(item) {
          return item.id;
        });
        var visibleItems = this.groupedItems.visibleItems;
        var activeTag = this.getActiveTag();
        if (activeTag === REMAINING_ITEMS) {
          var lastItem = Array.isArray(visibleItems) && visibleItems[visibleItems.length - 1];
          if (lastItem) {
            this.setActiveTag(lastItem.id);
          }
        } else {
          this.deselectActiveTag();
        }
        this.removeTags(ids);
      }
    }, {
      key: "removeTags",
      value: function removeTags(ids) {
        this.deselectItems(ids);
      }
    }, {
      key: "handleTagClick",
      value: function handleTagClick(id2) {
        var activeTag = this.getActiveTag();
        if (activeTag === id2) {
          this.setActiveTag(null);
        } else {
          this.setActiveTag(id2);
        }
        this.props.onTagClick(this.getItemById(id2));
        if (this.props.focusOnClick && !this.hasFocus()) {
          this.focus();
        }
      }
    }, {
      key: "handleComboMouseDown",
      value: function handleComboMouseDown(event2) {
        event2.preventDefault();
      }
    }, {
      key: "handleComboKeyDown",
      value: function handleComboKeyDown(event2) {
        if (this.props.allowCustomTagCreation && event2.key === "Enter") {
          if (this.isNewCustomTagValid) {
            this.selectItem(this.getText());
            this.setText(null);
          }
        }
        if (this.props.enableNavigation) {
          if (this.props.enableListNavigation) {
            switch (event2.key) {
              case "ArrowDown":
                this.navigateToNextItem(1, event2);
                break;
              case "ArrowUp":
                this.navigateToNextItem(-1, event2);
                break;
              case "Enter":
                this.handleEnterKeyPress(event2);
                break;
              case "Space":
                this.selectActiveItem();
                break;
            }
          }
          if (this.props.enableTagNavigation) {
            switch (event2.key) {
              case "ArrowLeft":
                this.navigateToNextTag(-1, event2);
                break;
              case "ArrowRight":
                this.navigateToNextTag(1, event2);
                break;
              case "Backspace":
                this.handleBackspace(event2);
                break;
              case "Delete":
                this.handleDelete(event2);
            }
          }
        }
        if (event2.key === "Escape") {
          var expanded = this.getExpanded();
          if (this.props.collapseOnEscape) {
            if (expanded) {
              this.collapse();
            }
          }
          if (!expanded && this.getActiveTag()) {
            this.setActiveTag(null);
          }
          if (!this.props.multiple) {
            this.setText(null);
          }
        }
        if (this.props.onKeyDown) {
          this.props.onKeyDown(event2, this);
        }
      }
    }, {
      key: "navigateToNextItem",
      value: function navigateToNextItem(direction2, event2) {
        var data = this.getFilteredData();
        if (event2 && event2.preventDefault) {
          event2.preventDefault();
        }
        if (this.getExpanded()) {
          var activeItem = this.getActiveItem();
          var newActiveItem;
          if (activeItem != null) {
            newActiveItem = (0, _getNextItem.default)({
              direction: direction2,
              data,
              id: activeItem,
              activeItem,
              getIdProperty: this.getIdProperty
            });
          } else {
            var firstItemId;
            var lastItemId;
            if (data && data.length) {
              firstItemId = this.getIdProperty(data[0]);
              lastItemId = this.getIdProperty(data[data.length - 1]);
              if (direction2 && firstItemId != null) {
                newActiveItem = firstItemId;
              }
              if (direction2 === -1 && lastItemId != null) {
                newActiveItem = lastItemId;
              }
            }
          }
          this.setActiveItem(newActiveItem);
        } else {
          this.expand();
        }
      }
    }, {
      key: "selectActiveItem",
      value: function selectActiveItem() {
        var activeItem = this.getActiveItem();
        if (activeItem) {
          this.selectItem(activeItem);
        }
      }
    }, {
      key: "handleEnterKeyPress",
      value: function handleEnterKeyPress(event2) {
        var expanded = this.getExpanded();
        if (expanded) {
          this.selectActiveItem();
        }
        var activeItem = this.getActiveItem();
        if (this.props.collapseOnSelectWithEnter) {
          if (activeItem && expanded) {
            this.collapse();
          }
        }
        if (this.props.navigateToNextAfterSelection && this.props.multiple && activeItem) {
          this.navigateToNextItem(1, event2);
        }
      }
    }, {
      key: "navigateToNextTag",
      value: function navigateToNextTag(direction2, event2) {
        if (!this.isNavigationAllowed(direction2)) {
          return null;
        }
        if (event2 && event2.preventDefault) {
          event2.preventDefault();
        }
        var newActiveTag;
        var items = this.getSelectedItems();
        var itemsIds;
        if (this.areItemsGrouped) {
          var visibleItems = this.groupedItems.visibleItems.map(function(item) {
            return item.id;
          });
          itemsIds = [].concat((0, _toConsumableArray2.default)(visibleItems), [REMAINING_ITEMS]);
        } else {
          itemsIds = items.map(function(item) {
            return item.id;
          });
        }
        var currentActiveTag = this.getActiveTag();
        var currentIndex = itemsIds.indexOf(currentActiveTag);
        var lastIndex = itemsIds.length - 1;
        var lastTag = itemsIds[lastIndex];
        var firstTag = itemsIds[0];
        var isFirstTag = currentIndex === 0;
        var isLastTag = currentIndex === lastIndex;
        if (direction2 === -1 && isFirstTag) {
          this.setActiveTag(null);
          return null;
        }
        if (direction2 === 1 && isLastTag) {
          this.setActiveTag(null);
          return null;
        }
        if (currentActiveTag === null || currentIndex === -1) {
          newActiveTag = direction2 === -1 ? lastTag : firstTag;
        } else {
          if (direction2 === -1) {
            newActiveTag = isFirstTag ? lastTag : itemsIds[currentIndex - 1];
          } else if (direction2 === 1) {
            newActiveTag = isLastTag ? firstTag : itemsIds[currentIndex + 1];
          }
        }
        this.setActiveTag(newActiveTag);
        return null;
      }
    }, {
      key: "isNavigationAllowed",
      value: function isNavigationAllowed(direction2) {
        if (!this.props.multiple) {
          return false;
        }
        var inputNode = this.getTextInputNode();
        if (inputNode.hasSelection()) {
          return false;
        }
        var currentActiveTag = this.getActiveTag();
        var canNavigateLeft = inputNode.isCursorAtStartPosition() && direction2 === -1;
        var canNavigateRight = inputNode.isCursorAtEndPosition() && direction2 === 1;
        if (!canNavigateRight && !canNavigateLeft && !currentActiveTag) {
          return false;
        }
        var items = this.getSelectedItems();
        if (!Array.isArray(items)) {
          return false;
        }
        if (items.length === 1 && currentActiveTag) {
          this.setActiveTag(null);
          return false;
        }
        return true;
      }
    }, {
      key: "handleBackspace",
      value: function handleBackspace(event2) {
        if (this.props.multiple) {
          this.handleTagBackspaceRemove(event2);
        }
      }
    }, {
      key: "handleDelete",
      value: function handleDelete(event2) {
        var activeTag = this.getActiveTag();
        if (this.props.multiple && activeTag) {
          this.removeTag(activeTag, 1);
        }
      }
    }, {
      key: "handleTagBackspaceRemove",
      value: function handleTagBackspaceRemove(event2) {
        if (!this.props.removeTagOnBackspace) {
          return null;
        }
        var value = this.getValue();
        if (!value) {
          return null;
        }
        var activeTag = this.getActiveTag();
        if (activeTag != null) {
          event2.preventDefault();
          if (activeTag === REMAINING_ITEMS) {
            this.removeRemainingTags();
          } else {
            this.removeTag(activeTag, -1);
          }
          return null;
        }
        var inputNode = this.getTextInputNode();
        var canDeleteTag = value && value.length && inputNode.isCursorAtStartPosition();
        if (canDeleteTag) {
          if (this.areItemsGrouped) {
            var ids = this.groupedItems.remainingItems.map(function(item) {
              return item.id;
            });
            this.removeTags(ids);
          } else {
            var items = this.getSelectedItems();
            var lastItem = items[items.length - 1];
            var lastItemId = lastItem.id;
            if (this.props.keepTagTextOnRemove) {
              var label = lastItem.label;
              if (label && typeof label === "string") {
                this.setText(label);
              }
            }
            this.removeTag(lastItemId);
          }
        }
        return null;
      }
    }, {
      key: "handleToolsSize",
      value: function handleToolsSize() {
        var size2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.toolsNode ? this.toolsNode.getBoundingClientRect() : {
          width: 0,
          height: 0
        };
        var node2 = this.comboNode;
        var computedStyle = globalObject.getComputedStyle(node2);
        var width = size2.width + parseInt(computedStyle.paddingLeft, 10) + parseInt(computedStyle.paddingRight, 10);
        this.setState({
          toolsSize: {
            height: size2.height,
            width
          }
        });
      }
    }, {
      key: "expand",
      value: function expand() {
        this.setExpanded(true);
      }
    }, {
      key: "collapse",
      value: function collapse() {
        this.setExpanded(false);
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(index2) {
        var listNode = this.getListNode();
        return listNode && listNode.scrollToIndex(index2);
      }
    }, {
      key: "getItemIndexById",
      value: function getItemIndexById(id2) {
        var index2 = (0, _findItemIndex.default)({
          id: id2,
          data: this.getFilteredData(),
          getIdProperty: this.getIdProperty
        });
        return index2;
      }
    }, {
      key: "scrollToId",
      value: function scrollToId(id2) {
        var index2 = this.getItemIndexById(id2);
        if (index2 != null) {
          this.scrollToIndex(index2);
        }
      }
    }, {
      key: "toggleExpand",
      value: function toggleExpand() {
        var expanded = this.getExpanded();
        if (expanded) {
          this.collapse();
        } else {
          this.expand();
        }
      }
    }, {
      key: "getItemByIndex",
      value: function getItemByIndex(index2) {
        var data = this.getFilteredData();
        if (!data || !Array.isArray(data) || !data[index2]) {
          return null;
        }
        return data[index2];
      }
    }, {
      key: "getItemById",
      value: function getItemById(id2) {
        var dataMap = this.getDataMap();
        return dataMap && dataMap[id2] || id2;
      }
    }, {
      key: "updateGetIdProperty",
      value: function updateGetIdProperty(props2) {
        props2 = props2 || this.props;
        this.getIdProperty = (0, _getDataProp.default)(props2.idProperty);
      }
    }, {
      key: "updateGetDisplayProperty",
      value: function updateGetDisplayProperty(props2) {
        props2 = props2 || this.props;
        this.getDisplayProperty = (0, _getDataProp.default)(props2.displayProperty);
      }
    }, {
      key: "updateGetFilterProperty",
      value: function updateGetFilterProperty(props2) {
        props2 = props2 || this.props;
        this.getFilterProperty = (0, _getDataProp.default)(props2.filterProperty);
      }
    }, {
      key: "updateGroups",
      value: function updateGroups(_ref13) {
        var _ref13$groupProperty = _ref13.groupProperty, groupProperty = _ref13$groupProperty === void 0 ? this.props.groupProperty : _ref13$groupProperty, _ref13$data = _ref13.data, data = _ref13$data === void 0 ? this.getFilteredData() : _ref13$data;
        if (!data) {
          return null;
        }
        var groups = (0, _getGroups.default)(data, groupProperty);
        this.setState({
          groups
        });
      }
    }, {
      key: "focus",
      value: function focus() {
        var textInput = this.getTextInputNode();
        if (textInput && textInput.focus && !this.hasFocus()) {
          textInput.focus();
        }
      }
    }, {
      key: "blur",
      value: function blur2() {
        var textInput = this.getTextInputNode();
        if (textInput && textInput.blur) {
          textInput.blur();
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        var textInput = this.getTextInputNode();
        if (textInput && textInput.hasFocus) {
          return textInput.hasFocus();
        }
        return false;
      }
    }, {
      key: "getTextInputNode",
      value: function getTextInputNode() {
        return this.textInput;
      }
    }, {
      key: "getComboNode",
      value: function getComboNode() {
        return this.comboNode;
      }
    }, {
      key: "getListNode",
      value: function getListNode() {
        return this.listNode;
      }
    }, {
      key: "getVirtualListNode",
      value: function getVirtualListNode() {
        return this.listNode && this.listNode.getVirtualListNode();
      }
    }, {
      key: "getlListNode",
      value: function getlListNode() {
        return this.listNode && this.listNode.getlListNode();
      }
    }, {
      key: "addItem",
      value: function addItem(item) {
        var newData = [].concat((0, _toConsumableArray2.default)(this.getData()), [item]);
        this.setData(newData);
      }
    }, {
      key: "clear",
      value: function clear() {
        var _this12 = this;
        this.setValue(null);
        this.setText(null);
        globalObject.requestAnimationFrame(function() {
          if (_this12.toolsNode) {
            _this12.handleToolsSize();
          }
        });
      }
    }, {
      key: "getItem",
      value: function getItem(id2) {
        return this.getItemById(id2);
      }
    }, {
      key: "getItemCount",
      value: function getItemCount() {
        var data = this.getData();
        return Array.isArray(data) ? data.length : null;
      }
    }, {
      key: "insertItem",
      value: function insertItem(_ref14) {
        var index2 = _ref14.index, item = _ref14.item;
        var data = this.getData();
        var newData = [].concat((0, _toConsumableArray2.default)(data.slice(0, index2)), [item], (0, _toConsumableArray2.default)(data.slice(index2)));
        this.setData(newData);
      }
    }, {
      key: "removeItems",
      value: function removeItems(ids) {
        var _this13 = this;
        ids = Array.isArray(ids) ? ids : [ids];
        var data = this.getData();
        var newData = data.filter(function(item) {
          var id2 = _this13.getIdProperty(item);
          return ids.indexOf(id2) === -1;
        });
        this.setData(newData);
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var expanded = this.getExpanded();
        this.setExpanded(!expanded);
      }
    }]);
    return InovuaComboBox2;
  }(_react.Component);
  function emptyFn() {
  }
  InovuaComboBox.defaultProps = {
    rootClassName: "inovua-react-toolkit-combo-box",
    inlineFlex: false,
    itemEllipsis: true,
    borderRadius: 0,
    shadow: true,
    showShadowOnMouseOver: false,
    clearTextOnBlur: true,
    onKeyDown: emptyFn,
    autoFocus: false,
    autoBlur: false,
    focusOnClick: true,
    onFocus: emptyFn,
    onBlur: emptyFn,
    defaultActiveItem: null,
    highlightFirst: false,
    onTextChange: emptyFn,
    searchable: true,
    tagCloseIconPosition: "end",
    removeTagOnBackspace: true,
    tagEllipsis: true,
    filterMinLength: 0,
    filterDelay: 300,
    activeFirstItemOnFilter: true,
    clearIcon: true,
    toggleIcon: true,
    showClearIconOnMouseOver: false,
    clearTextOnSelect: true,
    filterMode: "contains",
    highlightMatchedText: false,
    onActiveTagChange: emptyFn,
    enableTagNavigation: true,
    onTagClick: emptyFn,
    onActiveItemChange: emptyFn,
    keepTagTextOnRemove: true,
    onItemClick: emptyFn,
    onChange: emptyFn,
    minAutocompleteLength: 3,
    autocompleteDelay: 300,
    autocomplete: false,
    defaultValue: null,
    multiple: false,
    removeSelectedItems: false,
    allowSelectionToggle: true,
    clearValueOnEmpty: true,
    onDataSourceLoad: emptyFn,
    idProperty: "id",
    displayProperty: "label",
    groupProperty: "group",
    limit: 50,
    skip: 0,
    onLoadingChange: emptyFn,
    listLoadingText: "Loading...",
    loadingSpinner: true,
    listEmptyText: "No data found",
    defaultText: null,
    defaultExpanded: false,
    onExpandedChange: emptyFn,
    onExpandChange: emptyFn,
    collapseOnEscape: true,
    expandOnClick: true,
    expandOnFocus: true,
    collapseOnBlur: true,
    onExpand: emptyFn,
    onCollapse: emptyFn,
    expandOnTextChange: true,
    toggleExpandOnClick: true,
    wrapMultiple: true,
    theme: "default-light",
    enableNavigation: true,
    enableListNavigation: true,
    navigateToNextAfterSelection: true,
    positions: ["bottom", "top"],
    offset: 2,
    constrainTo: true
  };
  var VALUE_TYPE = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.object, _propTypes.default.bool]))]);
  InovuaComboBox.propTypes = {
    rootClassName: _propTypes.default.string,
    theme: _propTypes.default.string,
    inlineFlex: _propTypes.default.bool,
    shouldComponentUpdate: _propTypes.default.func,
    lazyDataSource: _propTypes.default.bool,
    remoteFilter: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    readOnly: _propTypes.default.bool,
    rtl: _propTypes.default.bool,
    tabIndex: _propTypes.default.number,
    collapseOnSelect: _propTypes.default.bool,
    clearTextOnBlur: _propTypes.default.bool,
    listEmptyText: _propTypes.default.node,
    listMaxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    listMinHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    maxTagsLength: _propTypes.default.number,
    defaultLoading: _propTypes.default.bool,
    loading: _propTypes.default.bool,
    onLoadingChange: _propTypes.default.func,
    listLoadingText: _propTypes.default.node,
    loadingSpinner: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool]),
    onKeyDown: _propTypes.default.func,
    onTagClick: _propTypes.default.func,
    clearIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
    toggleIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.node]),
    showClearIconOnMouseOver: _propTypes.default.bool,
    autoFocus: _propTypes.default.bool,
    autoBlur: _propTypes.default.bool,
    focusOnClick: _propTypes.default.bool,
    onFocus: _propTypes.default.func,
    onBlur: _propTypes.default.func,
    borderRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    border: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    background: _propTypes.default.string,
    shadow: _propTypes.default.bool,
    showShadowOnMouseOver: _propTypes.default.bool,
    emptyClassName: _propTypes.default.string,
    emptyStyle: _propTypes.default.object,
    disabledClassName: _propTypes.default.string,
    disabledStyle: _propTypes.default.object,
    focusedClassName: _propTypes.default.string,
    focusedStyle: _propTypes.default.object,
    itemBackground: _propTypes.default.string,
    disabledItemStyle: _propTypes.default.object,
    disabledItemClassName: _propTypes.default.string,
    renderItem: _propTypes.default.func,
    itemEllipsis: _propTypes.default.bool,
    activeItemStyle: _propTypes.default.object,
    activeItemClassName: _propTypes.default.string,
    selectedItemStyle: _propTypes.default.object,
    limit: _propTypes.default.number,
    skip: _propTypes.default.number,
    loadNextPage: _propTypes.default.func,
    searchable: _propTypes.default.bool,
    placeholder: _propTypes.default.node,
    text: _propTypes.default.string,
    defaultText: _propTypes.default.string,
    onTextChange: _propTypes.default.func,
    filterFunction: _propTypes.default.func,
    filterProperty: _propTypes.default.string,
    loadLazyDataSource: _propTypes.default.func,
    filterMinLength: _propTypes.default.number,
    filterDelay: _propTypes.default.number,
    activeFirstItemOnFilter: _propTypes.default.bool,
    renderInput: _propTypes.default.func,
    inputClassName: _propTypes.default.string,
    inputStyle: _propTypes.default.object,
    clearTextOnSelect: _propTypes.default.bool,
    filterMode: _propTypes.default.oneOf(["startsWith", "contains"]),
    highlightMatchedText: _propTypes.default.bool,
    autocomplete: _propTypes.default.bool,
    minAutocompleteLength: _propTypes.default.number,
    autocompleteDelay: _propTypes.default.number,
    enableNavigatio: _propTypes.default.bool,
    keepTagTextOnRemove: _propTypes.default.bool,
    tagActiveStyle: _propTypes.default.object,
    enableTagNavigation: _propTypes.default.bool,
    activeTag: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    defaultActiveTag: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    onActiveTagChange: _propTypes.default.func,
    allowCustomTagCreation: _propTypes.default.bool,
    enableNavigation: _propTypes.default.bool,
    enableListNavigation: _propTypes.default.bool,
    highlightFirst: _propTypes.default.bool,
    activeItem: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    defaultActiveItem: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    onActiveItemChange: _propTypes.default.func,
    navigateToNextAfterSelection: _propTypes.default.bool,
    onItemClick: _propTypes.default.func,
    onChange: _propTypes.default.func,
    listClassName: _propTypes.default.string,
    selectedStyle: _propTypes.default.object,
    selectedClassName: _propTypes.default.string,
    renderGroup: _propTypes.default.func,
    renderFooter: _propTypes.default.func,
    renderHeader: _propTypes.default.func,
    renderList: _propTypes.default.func,
    renderListComponent: _propTypes.default.func,
    value: VALUE_TYPE,
    defaultValue: VALUE_TYPE,
    defaultDisplayValue: VALUE_TYPE,
    removeSelectedItems: _propTypes.default.bool,
    isSelectedItemValid: _propTypes.default.func,
    maxValueLength: _propTypes.default.number,
    changeValueOnNavigation: _propTypes.default.bool,
    allowSelectionToggle: _propTypes.default.bool,
    clearSelectedOnTextChange: _propTypes.default.bool,
    clearValueOnEmpty: _propTypes.default.bool,
    isNewCustomTagValid: _propTypes.default.func,
    multiple: _propTypes.default.bool,
    renderTag: _propTypes.default.func,
    renderTagLabel: _propTypes.default.func,
    renderRemainingTags: _propTypes.default.func,
    renderTags: _propTypes.default.func,
    tagStyle: _propTypes.default.object,
    tagBorder: _propTypes.default.string,
    tagPadding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    tagHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    tagWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    tagMinSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    tagMaxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    tagCloseIcon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node, _propTypes.default.func]),
    tagCloseIconPosition: _propTypes.default.oneOf(["start", "end"]),
    tagEllipsis: _propTypes.default.bool,
    removeTagOnBackspace: _propTypes.default.bool,
    renderDisplayValue: _propTypes.default.func,
    dataSource: function dataSource(props2, propName) {
      var dataSource2 = props2[propName];
      if (dataSource2 != null && typeof dataSource2 !== "function" && !Array.isArray(dataSource2) && !(dataSource2 && dataSource2.then)) {
        return new Error("dataSource must be an array, null, a promise or a function returning a promise.");
      }
      return null;
    },
    onDataSourceLoad: _propTypes.default.func,
    idProperty: _propTypes.default.string,
    displayProperty: _propTypes.default.string,
    groupProperty: _propTypes.default.string,
    listStyle: _propTypes.default.object,
    relativeToViewport: _propTypes.default.bool,
    expanded: _propTypes.default.bool,
    defaultExpanded: _propTypes.default.bool,
    onExpandedChange: _propTypes.default.func,
    onExpandChange: _propTypes.default.func,
    collapseOnEscape: _propTypes.default.bool,
    expandOnClick: _propTypes.default.bool,
    expandOnFocus: _propTypes.default.bool,
    collapseOnBlur: _propTypes.default.bool,
    enablePagination: _propTypes.default.bool,
    onExpand: _propTypes.default.func,
    onCollapse: _propTypes.default.func,
    virtualListFactory: _propTypes.default.func,
    renderListScroller: _propTypes.default.func,
    renderVirtualList: _propTypes.default.func,
    expandOnTextChange: _propTypes.default.bool,
    toggleExpandOnClick: _propTypes.default.bool,
    collapseOnSelectWithEnter: _propTypes.default.bool,
    wrapMultiple: _propTypes.default.bool,
    newCustomTagText: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
    positions: _propTypes.default.arrayOf(_propTypes.default.string),
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object, _propTypes.default.bool]),
    offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    })]))])
  };
  var _default2 = InovuaComboBox;
  ComboBox.default = _default2;
  return ComboBox;
}
var hasRequiredSrc$h;
function requireSrc$h() {
  if (hasRequiredSrc$h)
    return src$i;
  hasRequiredSrc$h = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$i, "__esModule", {
    value: true
  });
  src$i.default = void 0;
  var _ComboBox = _interopRequireDefault2(requireComboBox$1());
  var _default2 = _ComboBox.default;
  src$i.default = _default2;
  return src$i;
}
var hasRequiredComboBox;
function requireComboBox() {
  if (hasRequiredComboBox)
    return ComboBox$1;
  hasRequiredComboBox = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(ComboBox$1, "__esModule", {
    value: true
  });
  ComboBox$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$h());
  var _default2 = _src.default;
  ComboBox$1.default = _default2;
  return ComboBox$1;
}
var ToolBar$1 = {};
var src$f = {};
var ToolBar = {};
var ArrowScroller$1 = {};
var src$e = {};
var ArrowScroller = {};
var join = {};
var hasRequiredJoin;
function requireJoin() {
  if (hasRequiredJoin)
    return join;
  hasRequiredJoin = 1;
  Object.defineProperty(join, "__esModule", {
    value: true
  });
  join.default = void 0;
  var notEmpty = function notEmpty2(x2) {
    return !!x2;
  };
  var _default2 = function _default3() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length == 1 && Array.isArray(args[0])) {
      args = args[0];
    }
    return args.filter(notEmpty).join(" ");
  };
  join.default = _default2;
  return join;
}
var Flex$1 = {};
var src$d = {};
var Flex = {};
var props2className = {};
var props2flex = {};
var hasRequiredProps2flex;
function requireProps2flex() {
  if (hasRequiredProps2flex)
    return props2flex;
  hasRequiredProps2flex = 1;
  Object.defineProperty(props2flex, "__esModule", {
    value: true
  });
  props2flex.default = void 0;
  var _default2 = function _default3(props2) {
    return props2.flex === false ? 0 : props2.flex === true ? 1 : props2.flex;
  };
  props2flex.default = _default2;
  return props2flex;
}
var prefix = {};
var hasRequiredPrefix;
function requirePrefix() {
  if (hasRequiredPrefix)
    return prefix;
  hasRequiredPrefix = 1;
  Object.defineProperty(prefix, "__esModule", {
    value: true
  });
  prefix.default = void 0;
  var _default2 = "inovua-react-toolkit-flex-v3";
  prefix.default = _default2;
  return prefix;
}
var hasRequiredProps2className;
function requireProps2className() {
  if (hasRequiredProps2className)
    return props2className;
  hasRequiredProps2className = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(props2className, "__esModule", {
    value: true
  });
  props2className.default = void 0;
  var _join = _interopRequireDefault2(requireJoin$3());
  var _props2flex = _interopRequireDefault2(requireProps2flex());
  var _prefix = _interopRequireDefault2(requirePrefix());
  var PREFIX = _prefix.default;
  var _default2 = function _default3(props2) {
    var column2 = !!props2.column;
    var row = !column2 && !!props2.row;
    var reverse = props2.reverse ? "-reverse" : "";
    var flex = (0, _props2flex.default)(props2);
    var flexGrow = props2.flexGrow;
    var flexShrink = props2.flexShrink;
    var flexBasis = props2.flexBasis;
    var display = props2.inline ? "inline-flex" : props2.display;
    var className = (0, _join.default)(props2.className, props2.alignItems ? "".concat(PREFIX, "--align-items-").concat(props2.alignItems) : null, props2.alignContent ? "".concat(PREFIX, "--align-content-").concat(props2.alignContent) : null, props2.justifyContent ? "".concat(PREFIX, "--justify-content-").concat(props2.justifyContent) : null, props2.wrap ? "".concat(PREFIX, "--wrap") : null, props2.alignSelf ? "".concat(PREFIX, "--align-self-").concat(props2.alignSelf) : null, row ? "".concat(PREFIX, "--row").concat(reverse) : null, column2 ? "".concat(PREFIX, "--column").concat(reverse) : null, flex != null ? "".concat(PREFIX, "--flex-").concat(flex) : null, flexGrow != null ? "".concat(PREFIX, "--flex-grow-").concat(flexGrow) : null, flexShrink != null ? "".concat(PREFIX, "--flex-shrink-").concat(flexShrink) : null, flexBasis != null ? "".concat(PREFIX, "--flex-basis-").concat(flexBasis) : null, display != null ? "".concat(PREFIX, "--display-").concat(display) : null);
    return className;
  };
  props2className.default = _default2;
  return props2className;
}
var cleanup = {};
var hasRequiredCleanup;
function requireCleanup() {
  if (hasRequiredCleanup)
    return cleanup;
  hasRequiredCleanup = 1;
  Object.defineProperty(cleanup, "__esModule", {
    value: true
  });
  cleanup.default = void 0;
  var _default2 = function _default3(props2) {
    delete props2.display;
    delete props2.shouldComponentUpdate;
    delete props2.wrap;
    delete props2.row;
    delete props2.column;
    delete props2.alignItems;
    delete props2.alignSelf;
    delete props2.alignContent;
    delete props2.justifyContent;
    delete props2.flex;
    delete props2.flexGrow;
    delete props2.flexFlow;
    delete props2.flexShrink;
    delete props2.flexBasis;
    delete props2.inline;
    delete props2.wrap;
  };
  cleanup.default = _default2;
  return cleanup;
}
var hasRequiredFlex$1;
function requireFlex$1() {
  if (hasRequiredFlex$1)
    return Flex;
  hasRequiredFlex$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Flex, "__esModule", {
    value: true
  });
  Flex.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _props2className = _interopRequireDefault2(requireProps2className());
  var _cleanup = _interopRequireDefault2(requireCleanup());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var InovuaFlex = (0, _react.forwardRef)(function(props2, ref) {
    var className = (0, _join.default)("inovua-react-toolkit-flex", (0, _props2className.default)(props2));
    var allProps = _objectSpread2({}, props2);
    (0, _cleanup.default)(allProps);
    allProps.className = className;
    delete allProps.livePagination;
    if (props2.factory) {
      return props2.factory(allProps);
    }
    return _react.default.createElement("div", _objectSpread2({
      ref
    }, allProps));
  });
  InovuaFlex.defaultProps = {
    row: true,
    wrap: true,
    alignItems: "center",
    display: "flex"
  };
  InovuaFlex.propTypes = {
    shouldComponentUpdate: _propTypes.default.func,
    flex: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]),
    display: _propTypes.default.oneOf(["flex", "inline-flex"]),
    inline: _propTypes.default.bool,
    reverse: _propTypes.default.bool,
    row: _propTypes.default.bool,
    column: _propTypes.default.bool,
    wrap: _propTypes.default.bool,
    alignItems: _propTypes.default.string,
    alignContent: _propTypes.default.string,
    justifyContent: _propTypes.default.string
  };
  var _default2 = _react.default.memo(InovuaFlex);
  Flex.default = _default2;
  return Flex;
}
var Item = {};
var shouldComponentUpdate$1 = {};
var hasRequiredShouldComponentUpdate$1;
function requireShouldComponentUpdate$1() {
  if (hasRequiredShouldComponentUpdate$1)
    return shouldComponentUpdate$1;
  hasRequiredShouldComponentUpdate$1 = 1;
  Object.defineProperty(shouldComponentUpdate$1, "__esModule", {
    value: true
  });
  shouldComponentUpdate$1.default = void 0;
  var _default2 = function _default3(inst, nextProps, nextState) {
    var props2 = inst.props;
    var state2 = inst.state;
    if (nextProps.shouldComponentUpdate) {
      return nextProps.shouldComponentUpdate({
        nextProps,
        props: props2,
        nextState,
        state: state2
      });
    }
    return true;
  };
  shouldComponentUpdate$1.default = _default2;
  return shouldComponentUpdate$1;
}
var hasRequiredItem;
function requireItem() {
  if (hasRequiredItem)
    return Item;
  hasRequiredItem = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Item, "__esModule", {
    value: true
  });
  Item.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$1());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _props2className = _interopRequireDefault2(requireProps2className());
  var _cleanup = _interopRequireDefault2(requireCleanup());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var InovuaFlexItem = function(_Component) {
    (0, _inherits2.default)(InovuaFlexItem2, _Component);
    var _super = _createSuper(InovuaFlexItem2);
    function InovuaFlexItem2() {
      (0, _classCallCheck2.default)(this, InovuaFlexItem2);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(InovuaFlexItem2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        var shouldUpdate = (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        return shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var className = (0, _join.default)("inovua-react-toolkit-flex-item", (0, _props2className.default)(props2));
        var allProps = _objectSpread2({}, props2);
        (0, _cleanup.default)(allProps);
        allProps.className = className;
        if (props2.factory) {
          return props2.factory(allProps);
        }
        return _react.default.createElement("div", _objectSpread2({}, allProps));
      }
    }]);
    return InovuaFlexItem2;
  }(_react.Component);
  InovuaFlexItem.defaultProps = {
    flex: 1
  };
  InovuaFlexItem.propTypes = {
    shouldComponentUpdate: _propTypes.default.func,
    display: _propTypes.default.oneOf(["flex", "inline-flex"]),
    inline: function inline(props2, propName) {
      if (props2[propName] !== void 0) {
        return new Error(`"inline" prop should not be used on "Item". Use "display='inline-flex'" instead`);
      }
    },
    flex: _propTypes.default.any,
    flexGrow: _propTypes.default.any,
    flexShrink: _propTypes.default.any,
    flexBasis: _propTypes.default.any
  };
  var _default2 = InovuaFlexItem;
  Item.default = _default2;
  return Item;
}
var hasRequiredSrc$g;
function requireSrc$g() {
  if (hasRequiredSrc$g)
    return src$d;
  hasRequiredSrc$g = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Flex", {
      enumerable: true,
      get: function get2() {
        return _Flex.default;
      }
    });
    Object.defineProperty(exports, "Item", {
      enumerable: true,
      get: function get2() {
        return _Item.default;
      }
    });
    exports.default = void 0;
    var _Flex = _interopRequireDefault2(requireFlex$1());
    var _Item = _interopRequireDefault2(requireItem());
    var _default2 = {
      Flex: _Flex.default,
      Item: _Item.default
    };
    exports.default = _default2;
  })(src$d);
  return src$d;
}
var hasRequiredFlex;
function requireFlex() {
  if (hasRequiredFlex)
    return Flex$1;
  hasRequiredFlex = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Flex", {
      enumerable: true,
      get: function get2() {
        return _src.Flex;
      }
    });
    Object.defineProperty(exports, "Item", {
      enumerable: true,
      get: function get2() {
        return _src.Item;
      }
    });
    exports.default = void 0;
    var _src = _interopRequireWildcard(requireSrc$g());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = {
      Flex: _src.default,
      Item: _src.default
    };
    exports.default = _default2;
  })(Flex$1);
  return Flex$1;
}
var InertialScroller$1 = {};
var src$c = {};
var InertialScroller = {};
var hasRequiredInertialScroller$1;
function requireInertialScroller$1() {
  if (hasRequiredInertialScroller$1)
    return InertialScroller;
  hasRequiredInertialScroller$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(InertialScroller, "__esModule", {
    value: true
  });
  InertialScroller.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _isMobile = _interopRequireDefault2(requireIsMobile());
  var _clamp = _interopRequireDefault2(requireClamp());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  function ypos(e2) {
    if (e2.targetTouches && e2.targetTouches.length >= 1) {
      return e2.targetTouches[0].clientY;
    }
    return e2.clientY;
  }
  var InovuaInertialScroller = function(_Component) {
    (0, _inherits2.default)(InovuaInertialScroller2, _Component);
    var _super = _createSuper(InovuaInertialScroller2);
    function InovuaInertialScroller2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaInertialScroller2);
      _this = _super.call(this, props2);
      _this.state = {};
      _this.setRootRef = function(ref) {
        _this.node = ref;
      };
      _this.setViewRef = function(ref) {
        _this.viewNode = ref;
      };
      _this.tap = _this.tap.bind((0, _assertThisInitialized2.default)(_this));
      _this.drag = _this.drag.bind((0, _assertThisInitialized2.default)(_this));
      _this.release = _this.release.bind((0, _assertThisInitialized2.default)(_this));
      _this.track = _this.track.bind((0, _assertThisInitialized2.default)(_this));
      _this.autoScroll = _this.autoScroll.bind((0, _assertThisInitialized2.default)(_this));
      _this.min = 0;
      _this.max = null;
      _this.pressed = null;
      _this.reference = null;
      _this.offset = 0;
      return _this;
    }
    (0, _createClass2.default)(InovuaInertialScroller2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateMaxScroll();
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var className = (0, _join.default)(props2.rootClassName, props2.className, "".concat(props2.rootClassName, "--theme-").concat(props2.theme));
        var events;
        if (_isMobile.default && this.props.enableTouchDrag) {
          events = {
            onTouchStart: this.tap,
            onTouchEnd: this.release,
            onTouchMove: this.drag
          };
        }
        if (!_isMobile.default && props2.enableMouseDrag) {
          events = {
            onMouseDown: this.tap,
            onMouseUp: this.release,
            onMouseMove: this.drag
          };
        }
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, InovuaInertialScroller2.propTypes)), {}, {
          className,
          ref: this.setRootRef
        }, events), _react.default.createElement("div", {
          ref: this.setViewRef,
          className: "".concat(props2.rootClassName, "__view")
        }, props2.children));
      }
    }, {
      key: "tap",
      value: function tap(event2) {
        this.pressed = true;
        this.reference = ypos(event2);
        this.timeStamp = Date.now();
        this.frame = this.offset;
        this.velocity = 0;
        this.amplitude = 0;
        clearInterval(this.ticker);
        this.ticker = setInterval(this.track, 16);
        event2.stopPropagation();
        event2.preventDefault();
      }
    }, {
      key: "drag",
      value: function drag2(event2) {
        if (this.pressed) {
          var y2 = ypos(event2);
          var delta = this.reference - y2;
          if (delta > this.props.threshold || delta < -this.props.threshold) {
            this.reference = y2;
            this.scrollTo(this.offset + delta);
          }
        }
      }
    }, {
      key: "release",
      value: function release(event2) {
        this.pressed = false;
        this.updateMaxScroll();
        event2.stopPropagation();
        event2.preventDefault();
        clearInterval(this.ticker);
        if (this.velocity > 10 || this.velocity < -10) {
          this.amplitude = this.props.initialAmplitude * this.velocity;
          this.target = Math.round(this.offset + this.amplitude);
          this.timestamp = Date.now();
          requestAnimationFrame(this.autoScroll);
        }
      }
    }, {
      key: "scrollTo",
      value: function scrollTo(offset) {
        if (!this.viewNode) {
          return null;
        }
        this.offset = (0, _clamp.default)(offset, 0, this.max);
        this.viewNode.style.transform = "translateY(".concat(-this.offset, "px)");
      }
    }, {
      key: "autoScroll",
      value: function autoScroll() {
        var elapsed, delta;
        var timeConstant = this.props.timeConstant;
        if (this.amplitude) {
          elapsed = Date.now() - this.timestamp;
          delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
          if (delta > 0.1 || delta < -0.1) {
            this.scrollTo(this.target + delta);
            requestAnimationFrame(this.autoScroll);
          } else {
            this.scrollTo(this.target);
          }
        }
      }
    }, {
      key: "updateMaxScroll",
      value: function updateMaxScroll() {
        this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
      }
    }, {
      key: "track",
      value: function track() {
        var now2, elapsed, delta, v2;
        now2 = Date.now();
        elapsed = now2 - this.timeStamp;
        this.timeStamp = now2;
        delta = this.offset - this.frame;
        this.frame = this.offset;
        v2 = 1e3 * delta / (1 + elapsed);
        this.velocity = 0.8 * v2 + 0.2 * this.velocity;
      }
    }]);
    return InovuaInertialScroller2;
  }(_react.Component);
  InovuaInertialScroller.defaultProps = {
    theme: "default",
    rootClassName: "react-toolkit-inertial-scroller",
    threshold: 5,
    timeConstant: 360,
    initialAmplitude: 0.5,
    enableMouseDrag: true,
    enableTouchDrag: true
  };
  InovuaInertialScroller.propTypes = {
    theme: _propTypes.default.string,
    rootClassName: _propTypes.default.string,
    threshold: _propTypes.default.number,
    timeConstant: _propTypes.default.number,
    initialAmplitude: _propTypes.default.number,
    enableMouseDrag: _propTypes.default.bool,
    enableTouchDrag: _propTypes.default.bool
  };
  var _default2 = InovuaInertialScroller;
  InertialScroller.default = _default2;
  return InertialScroller;
}
var InertialManager = {};
var hasRequiredInertialManager;
function requireInertialManager() {
  if (hasRequiredInertialManager)
    return InertialManager;
  hasRequiredInertialManager = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(InertialManager, "__esModule", {
    value: true
  });
  InertialManager.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _isMobile = _interopRequireDefault2(requireIsMobile());
  var _clamp = _interopRequireDefault2(requireClamp());
  var _containsNode = _interopRequireDefault2(requireContainsNode());
  var _matchesSelector = _interopRequireDefault2(requireMatchesSelector$1());
  function ypos(e2) {
    if (e2.targetTouches && e2.targetTouches.length >= 1) {
      return e2.targetTouches[0].clientY;
    }
    return e2.clientY;
  }
  var InertialManager$1 = function() {
    function InertialManager2(_ref2) {
      var node2 = _ref2.node, viewNode = _ref2.viewNode, arrowSelector = _ref2.arrowSelector, _ref$threshold = _ref2.threshold, threshold = _ref$threshold === void 0 ? 5 : _ref$threshold, _ref$timeConstant = _ref2.timeConstant, timeConstant = _ref$timeConstant === void 0 ? 360 : _ref$timeConstant, _ref$initialAmplitude = _ref2.initialAmplitude, initialAmplitude = _ref$initialAmplitude === void 0 ? 0.8 : _ref$initialAmplitude, _ref$enableMouseDrag = _ref2.enableMouseDrag, enableMouseDrag = _ref$enableMouseDrag === void 0 ? true : _ref$enableMouseDrag, _ref$enableTouchDrag = _ref2.enableTouchDrag, enableTouchDrag = _ref$enableTouchDrag === void 0 ? true : _ref$enableTouchDrag, _ref$setScrollPositio = _ref2.setScrollPosition, setScrollPosition = _ref$setScrollPositio === void 0 ? function() {
      } : _ref$setScrollPositio;
      (0, _classCallCheck2.default)(this, InertialManager2);
      this.node = node2;
      this.viewNode = viewNode;
      if (!arrowSelector) {
        throw "Please provide an arrowselector";
      }
      this.arrowSelector = arrowSelector;
      this.tap = this.tap.bind(this);
      this.drag = this.drag.bind(this);
      this.release = this.release.bind(this);
      this.track = this.track.bind(this);
      this.autoScroll = this.autoScroll.bind(this);
      this.min = 0;
      this.max = null;
      this.pressed = null;
      this.reference = null;
      this.offset = 0;
      this.threshold = threshold;
      this.timeConstant = timeConstant;
      this.enableTouchDrag = enableTouchDrag;
      this.enableMouseDrag = enableMouseDrag;
      this.setScrollPosition = setScrollPosition;
      this.initialAmplitude = initialAmplitude;
      this.updateMaxScroll();
      this.addEventListeners();
    }
    (0, _createClass2.default)(InertialManager2, [{
      key: "addEventListeners",
      value: function addEventListeners() {
        if (!this.node || !this.node.addEventListener) {
          return;
        }
        if (_isMobile.default && this.enableTouchDrag) {
          this.node.addEventListener("touchstart", this.tap, {
            passive: false
          });
          this.node.addEventListener("touchend", this.release, {
            passive: false
          });
          this.node.addEventListener("touchmove", this.drag, {
            passive: false
          });
        }
        if (!_isMobile.default && this.enableMouseDrag) {
          this.node.addEventListener("mousedown", this.tap, {
            passive: false
          });
          this.node.addEventListener("mouseup", this.release, {
            passive: false
          });
          this.node.addEventListener("mousemove", this.drag, {
            passive: false
          });
        }
      }
    }, {
      key: "removeEventListeners",
      value: function removeEventListeners() {
        if (this.node && this.node.removeEventListener) {
          this.node.removeEventListener("touchstart", this.tap, {
            passive: false
          });
          this.node.removeEventListener("touchend", this.release, {
            passive: false
          });
          this.node.removeEventListener("touchmove", this.drag, {
            passive: false
          });
          this.node.removeEventListener("mousedown", this.tap, {
            passive: false
          });
          this.node.removeEventListener("mouseup", this.release, {
            passive: false
          });
          this.node.removeEventListener("mousemove", this.drag, {
            passive: false
          });
        }
      }
    }, {
      key: "getEventListneres",
      value: function getEventListneres() {
        var events;
        if (_isMobile.default && this.enableTouchDrag) {
          events = {
            onTouchStart: this.tap,
            onTouchEnd: this.release,
            onTouchMove: this.drag
          };
        }
        if (!_isMobile.default && this.enableMouseDrag) {
          events = {
            onMouseDown: this.tap,
            onMouseUp: this.release,
            onMouseMove: this.drag
          };
        }
        return events;
      }
    }, {
      key: "isArrowTarget",
      value: function isArrowTarget(target) {
        if ((0, _matchesSelector.default)(target, this.arrowSelector)) {
          return true;
        }
        var arrows = this.arrowSelector ? this.arrows || (0, _toConsumableArray2.default)(this.node.querySelectorAll(this.arrowSelector)) : [];
        if (arrows.length) {
          this.arrows = arrows;
        }
        if (arrows.length && arrows.map(function(arrow) {
          return (0, _containsNode.default)(arrow, target);
        }).filter(function(x2) {
          return x2;
        })[0]) {
          return true;
        }
        return false;
      }
    }, {
      key: "tap",
      value: function tap(event2) {
        if (!this.hasScroll()) {
          return;
        }
        if (this.isArrowTarget(event2.target)) {
          event2.preventDefault();
        }
        this.pressed = true;
        this.reference = ypos(event2);
        this.timeStamp = Date.now();
        this.frame = this.offset;
        this.velocity = 0;
        this.amplitude = 0;
        clearInterval(this.ticker);
        this.ticker = setInterval(this.track, 16);
      }
    }, {
      key: "drag",
      value: function drag2(event2) {
        if (this.pressed) {
          if (!this.hasScroll()) {
            return;
          }
          event2.preventDefault();
          var y2 = ypos(event2);
          var delta = this.reference - y2;
          if (delta > this.threshold || delta < -this.threshold) {
            this.reference = y2;
            this.scrollTo(this.offset + delta);
          }
        }
      }
    }, {
      key: "release",
      value: function release(event2) {
        if (!this.hasScroll() || !this.pressed) {
          return;
        }
        this.pressed = false;
        this.updateMaxScroll();
        if (this.isArrowTarget(event2.target)) {
          event2.preventDefault();
        }
        clearInterval(this.ticker);
        if (this.velocity > 10 || this.velocity < -10) {
          this.amplitude = this.initialAmplitude * this.velocity;
          this.target = Math.round(this.offset + this.amplitude);
          this.timestamp = Date.now();
          requestAnimationFrame(this.autoScroll);
        }
      }
    }, {
      key: "scrollTo",
      value: function scrollTo(offset) {
        if (!this.viewNode) {
          return null;
        }
        this.offset = (0, _clamp.default)(offset, 0, this.max);
        this.setScrollPosition(this.offset);
      }
    }, {
      key: "autoScroll",
      value: function autoScroll() {
        var elapsed, delta;
        var timeConstant = this.timeConstant;
        if (this.amplitude) {
          elapsed = Date.now() - this.timestamp;
          delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
          if (delta > 0.1 || delta < -0.1) {
            this.scrollTo(this.target + delta);
            requestAnimationFrame(this.autoScroll);
          } else {
            this.scrollTo(this.target);
          }
        }
      }
    }, {
      key: "updateMaxScroll",
      value: function updateMaxScroll() {
        this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
      }
    }, {
      key: "hasScroll",
      value: function hasScroll() {
        if ((this.viewNode && this.viewNode.offsetHeight) !== void 0 && (this.node && this.node.offsetHeight) !== void 0) {
          return this.viewNode.offsetHeight > this.node.offsetHeight;
        } else {
          return false;
        }
      }
    }, {
      key: "track",
      value: function track() {
        var now2, elapsed, delta, v2;
        now2 = Date.now();
        elapsed = now2 - this.timeStamp;
        this.timeStamp = now2;
        delta = this.offset - this.frame;
        this.frame = this.offset;
        v2 = 1e3 * delta / (1 + elapsed);
        this.velocity = 0.8 * v2 + 0.2 * this.velocity;
      }
    }]);
    return InertialManager2;
  }();
  var _default2 = InertialManager$1;
  InertialManager.default = _default2;
  return InertialManager;
}
var hasRequiredSrc$f;
function requireSrc$f() {
  if (hasRequiredSrc$f)
    return src$c;
  hasRequiredSrc$f = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "InertialManager", {
      enumerable: true,
      get: function get2() {
        return _InertialManager.default;
      }
    });
    exports.default = void 0;
    var _InertialScroller = _interopRequireDefault2(requireInertialScroller$1());
    var _InertialManager = _interopRequireDefault2(requireInertialManager());
    var _default2 = _InertialScroller.default;
    exports.default = _default2;
  })(src$c);
  return src$c;
}
var hasRequiredInertialScroller;
function requireInertialScroller() {
  if (hasRequiredInertialScroller)
    return InertialScroller$1;
  hasRequiredInertialScroller = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "InertialManager", {
      enumerable: true,
      get: function get2() {
        return _InertialManager.default;
      }
    });
    exports.default = void 0;
    var _src = _interopRequireDefault2(requireSrc$f());
    var _InertialManager = _interopRequireDefault2(requireInertialManager());
    var _default2 = _src.default;
    exports.default = _default2;
  })(InertialScroller$1);
  return InertialScroller$1;
}
var ua = {};
var hasRequiredUa;
function requireUa() {
  if (hasRequiredUa)
    return ua;
  hasRequiredUa = 1;
  Object.defineProperty(ua, "__esModule", {
    value: true
  });
  ua.IS_MS_BROWSER = ua.IS_IE = ua.IS_FF = ua.IS_EDGE = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var ua$12 = globalObject.navigator ? globalObject.navigator.userAgent || "" : "";
  var IS_EDGE = ua$12.indexOf("Edge/") !== -1;
  ua.IS_EDGE = IS_EDGE;
  var IS_MS_BROWSER = IS_EDGE || ua$12.indexOf("Trident") !== -1;
  ua.IS_MS_BROWSER = IS_MS_BROWSER;
  var IS_IE = IS_MS_BROWSER && !IS_EDGE;
  ua.IS_IE = IS_IE;
  var IS_FF = ua$12.toLowerCase().indexOf("firefox") > -1;
  ua.IS_FF = IS_FF;
  return ua;
}
var reactScrollContainerPro = {};
var src$b = {};
var reactCleanProps = {};
var hasRequiredReactCleanProps;
function requireReactCleanProps() {
  if (hasRequiredReactCleanProps)
    return reactCleanProps;
  hasRequiredReactCleanProps = 1;
  Object.defineProperty(reactCleanProps, "__esModule", {
    value: true
  });
  reactCleanProps.default = void 0;
  function cleanProps2(props2, propTypes2) {
    if (!props2 || !propTypes2) {
      return Object.assign({}, props2);
    }
    var newProps = Object.keys(props2).reduce(function(acc, propName) {
      if (!propTypes2[propName]) {
        acc[propName] = props2[propName];
      }
      return acc;
    }, {});
    return newProps;
  }
  var _default2 = cleanProps2;
  reactCleanProps.default = _default2;
  return reactCleanProps;
}
var smoothScrollTo = {};
var hasRequiredSmoothScrollTo;
function requireSmoothScrollTo() {
  if (hasRequiredSmoothScrollTo)
    return smoothScrollTo;
  hasRequiredSmoothScrollTo = 1;
  Object.defineProperty(smoothScrollTo, "__esModule", {
    value: true
  });
  smoothScrollTo.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var DEFAULTS = {
    duration: 100,
    orientation: "vertical"
  };
  var _default2 = function _default3(node2, newValue, config2, callback2) {
    if (typeof config2 === "function") {
      callback2 = config2;
      config2 = null;
    }
    if (!config2) {
      config2 = DEFAULTS;
    }
    var _config = config2, orientation = _config.orientation;
    var _config2 = config2, duration = _config2.duration;
    var horiz = orientation == "horizontal";
    var scrollPosName = horiz ? "scrollLeft" : "scrollTop";
    var currentValue = node2[scrollPosName];
    var diff = newValue - currentValue;
    var now2 = Date.now();
    duration = duration != null ? duration : 100;
    var millisecondStep = diff / duration;
    if (!duration) {
      node2[scrollPosName] = newValue;
      if (typeof callback2 === "function") {
        callback2(newValue);
      }
      return;
    }
    var scroll2 = function scroll3() {
      var elapsed = Date.now() - now2;
      node2[scrollPosName] = currentValue + elapsed * millisecondStep;
      if (elapsed < duration) {
        globalObject.requestAnimationFrame(scroll3);
      } else {
        node2[scrollPosName] = newValue;
        if (typeof callback2 === "function") {
          callback2(newValue);
        }
      }
    };
    globalObject.requestAnimationFrame(scroll2);
  };
  smoothScrollTo.default = _default2;
  return smoothScrollTo;
}
var scrollPage = {};
var hasRequiredScrollPage;
function requireScrollPage() {
  if (hasRequiredScrollPage)
    return scrollPage;
  hasRequiredScrollPage = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(scrollPage, "__esModule", {
    value: true
  });
  scrollPage.default = void 0;
  var _smoothScrollTo = _interopRequireDefault2(requireSmoothScrollTo());
  var _default2 = function _default3(node2, _ref2) {
    var orientation = _ref2.orientation, direction2 = _ref2.direction, pageSize = _ref2.pageSize, duration = _ref2.duration;
    if (!direction2) {
      throw new Error("Please provide a scroll direction: 1 or -1!");
    }
    var horiz = orientation == "horizontal";
    var scrollPosName = horiz ? "scrollLeft" : "scrollTop";
    pageSize = pageSize || (horiz ? node2.clientWidth - 20 : node2.clientHeight - 20);
    var currentValue = node2[scrollPosName];
    var newValue = currentValue + direction2 * pageSize;
    (0, _smoothScrollTo.default)(node2, newValue, {
      orientation,
      duration
    });
  };
  scrollPage.default = _default2;
  return scrollPage;
}
var Scrollbar = {};
var shouldComponentUpdate = {};
var hasRequiredShouldComponentUpdate;
function requireShouldComponentUpdate() {
  if (hasRequiredShouldComponentUpdate)
    return shouldComponentUpdate;
  hasRequiredShouldComponentUpdate = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get2() {
        return _shouldComponentUpdate.default;
      }
    });
    var _shouldComponentUpdate = _interopRequireDefault2(requireShouldComponentUpdate$5());
  })(shouldComponentUpdate);
  return shouldComponentUpdate;
}
var hasRequiredScrollbar;
function requireScrollbar() {
  if (hasRequiredScrollbar)
    return Scrollbar;
  hasRequiredScrollbar = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Scrollbar, "__esModule", {
    value: true
  });
  Scrollbar.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _autoBind = _interopRequireDefault2(requireAutoBind());
  var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate());
  var _join = _interopRequireDefault2(requireJoin());
  var _getGlobal = requireGetGlobal();
  var _SIZES, _OTHER_SIZES, _MARGINS, _TRACK_SIDES;
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var HORIZONTAL = "horizontal";
  var VERTICAL = "vertical";
  var SIZES = (_SIZES = {}, (0, _defineProperty2.default)(_SIZES, VERTICAL, "height"), (0, _defineProperty2.default)(_SIZES, HORIZONTAL, "width"), _SIZES);
  var OTHER_SIZES = (_OTHER_SIZES = {}, (0, _defineProperty2.default)(_OTHER_SIZES, VERTICAL, "width"), (0, _defineProperty2.default)(_OTHER_SIZES, HORIZONTAL, "height"), _OTHER_SIZES);
  var MARGINS = (_MARGINS = {}, (0, _defineProperty2.default)(_MARGINS, VERTICAL, "right"), (0, _defineProperty2.default)(_MARGINS, HORIZONTAL, "bottom"), _MARGINS);
  var TRACK_SIDES = (_TRACK_SIDES = {}, (0, _defineProperty2.default)(_TRACK_SIDES, VERTICAL, ["top", "bottom"]), (0, _defineProperty2.default)(_TRACK_SIDES, HORIZONTAL, ["left", "right"]), _TRACK_SIDES);
  var STYLES = {
    vertical: {
      position: "absolute",
      top: 0,
      bottom: 0,
      right: 0,
      contain: "layout paint style"
    },
    horizontal: {
      position: "absolute",
      left: 0,
      right: 0,
      bottom: 0,
      contain: "layout paint style"
    }
  };
  var InovuaScrollbar = function(_Component) {
    (0, _inherits2.default)(InovuaScrollbar2, _Component);
    var _super = _createSuper(InovuaScrollbar2);
    function InovuaScrollbar2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaScrollbar2);
      _this = _super.call(this, props2);
      (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
      _this.scrollPos = 0;
      _this.state = {
        scrollPos: 0
      };
      _this.refTrack = function(c2) {
        _this.trackNode = c2;
      };
      _this.refThumb = function(c2) {
        _this.thumbNode = c2;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaScrollbar2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
    }, {
      key: "setVisible",
      value: function setVisible(visible) {
        this.visible = visible;
        if (!visible && this.state.over) {
          return;
        }
        if (this.state.visible === visible) {
          return;
        }
        this.setState({
          visible
        });
      }
    }, {
      key: "setScrollPos",
      value: function setScrollPos(scrollPos) {
        this.scrollPos = scrollPos;
        var transform2 = this.getThumbTransform();
        if (this.currentTransform == transform2) {
          return;
        }
        this.thumbNode.style.transform = this.currentTransform = transform2;
      }
    }, {
      key: "getScrollPos",
      value: function getScrollPos() {
        return this.scrollPos;
      }
    }, {
      key: "render",
      value: function render() {
        var _Object$assign;
        var props2 = this.props;
        var autoHide = props2.autoHide;
        var className = props2.className, style = props2.style, orientation = props2.orientation, vertical = props2.vertical, horizontal = props2.horizontal, thumbVisible = props2.visible;
        if (orientation) {
          vertical = orientation == VERTICAL;
          horizontal = !vertical;
        }
        this.orientation = orientation = horizontal ? HORIZONTAL : VERTICAL;
        var sizeName = SIZES[orientation];
        var otherSizeName = OTHER_SIZES[orientation];
        if (autoHide === false) {
          thumbVisible = true;
        } else {
          if (this.state.visible !== void 0) {
            thumbVisible = this.state.visible;
          }
          if (this.state.active) {
            thumbVisible = true;
          }
        }
        var hiding = !thumbVisible && this.prevVisible;
        var showing = thumbVisible && !this.prevVisible;
        className = (0, _join.default)(className, "inovua-react-scroll-container__scrollbar", "inovua-react-scroll-container__scrollbar--orientation-".concat(orientation), "inovua-react-scroll-container__scrollbar--direction-".concat(this.props.rtl ? "rtl" : "ltr"), !thumbVisible && "inovua-react-scroll-container__scrollbar--hidden", hiding && "inovua-react-scroll-container__scrollbar--hiding", this.state.active && "inovua-react-scroll-container__scrollbar--active", showing && "inovua-react-scroll-container__scrollbar--showing");
        style = Object.assign({}, style, STYLES[orientation]);
        if (showing && this.props.showTransitionDuration) {
          style.transitionDuration = this.props.showTransitionDuration;
        }
        if (hiding && this.props.hideTransitionDuration) {
          style.transitionDuration = this.props.hideTransitionDuration;
        }
        this.prevVisible = thumbVisible;
        var divProps = (0, _reactCleanProps.default)(props2, InovuaScrollbar2.propTypes);
        var thumbSize = this.getThumbSize();
        var transform2 = this.getThumbTransform(orientation, thumbSize);
        var scrollThumbOverWidth = Math.max(this.props.scrollThumbOverWidth, this.props.scrollThumbWidth);
        var thumbRadius = this.props.scrollThumbRadius !== void 0 ? this.props.scrollThumbRadius : this.props.scrollThumbWidth;
        var thumbStyle = Object.assign({}, this.props.scrollThumbStyle, (_Object$assign = {}, (0, _defineProperty2.default)(_Object$assign, sizeName, thumbSize), (0, _defineProperty2.default)(_Object$assign, otherSizeName, this.state.over || this.state.active || this.props.alwaysShowTrack ? scrollThumbOverWidth : this.props.scrollThumbWidth), (0, _defineProperty2.default)(_Object$assign, "transform", transform2), (0, _defineProperty2.default)(_Object$assign, "borderRadius", thumbRadius), (0, _defineProperty2.default)(_Object$assign, "transitionDuration", this.props.scrollTrackOverTransitionDuration), _Object$assign));
        var trackSides = TRACK_SIDES[orientation];
        var scrollThumbMargin = this.props.scrollThumbMargin || 0;
        if (this.props.scrollThumbMargin) {
          style[MARGINS[orientation]] = scrollThumbMargin;
          if (this.props.scrollThumbStartEndRespectMargin) {
            style[trackSides[0]] = this.props.scrollThumbMargin;
          }
        }
        style[trackSides[1]] = scrollThumbMargin + (this.props.oppositeVisible ? this.props.scrollThumbWidth : 0);
        var thumbClassName = "inovua-react-scroll-container__thumb inovua-react-scroll-container__thumb--orientation-".concat(orientation, " inovua-react-scroll-container__thumb--direction-").concat(this.props.rtl ? "rtl" : "ltr");
        var trackClassName = "inovua-react-scroll-container__track inovua-react-scroll-container__track--orientation-".concat(orientation, " inovua-react-scroll-container__track--direction-").concat(this.props.rtl ? "rtl" : "ltr");
        var trackVisible = this.props.alwaysShowTrack || thumbVisible && this.state.over || this.props.showTrackOnDrag && this.state.active;
        if (trackVisible) {
          trackClassName += " inovua-react-scroll-container__track--visible";
        }
        var trackStyle = (0, _defineProperty2.default)({
          pointerEvents: "none"
        }, otherSizeName, scrollThumbOverWidth);
        if (this.props.dragToScroll) {
          if (thumbVisible) {
            trackStyle.pointerEvents = "all";
          }
          trackStyle.borderRadius = thumbRadius;
          trackClassName += " inovua-react-scroll-container__track--drag-to-scroll";
          if (this.state.active) {
            trackStyle.cursor = "auto";
          }
        }
        if (this.props.rtl) {
          var leftVal = style.left;
          style.left = style.right;
          style.right = leftVal;
        }
        var onThumbMouseDown = thumbVisible && this.props.dragToScroll ? this.onThumbMouseDown : null;
        var onTrackClick = thumbVisible && this.props.dragToScroll ? this.onTrackClick : null;
        var onTrackWheel = this.props.dragToScroll && this.state.over ? this.onTrackWheel : null;
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, divProps), {}, {
          style,
          className,
          "data-orientation": orientation
        }), _react.default.createElement("div", {
          ref: this.refTrack,
          style: trackStyle,
          className: trackClassName,
          onClick: onTrackClick,
          onWheel: onTrackWheel,
          onMouseEnter: this.props.dragToScroll ? this.onMouseEnter : null,
          onMouseLeave: this.props.dragToScroll ? this.onMouseLeave : null
        }, _react.default.createElement("div", {
          ref: this.refThumb,
          style: thumbStyle,
          className: thumbClassName,
          onMouseDown: onThumbMouseDown
        })));
      }
    }, {
      key: "setOver",
      value: function setOver(over) {
        var _this2 = this;
        var doSetOver = function doSetOver2(overValue) {
          _this2.setState({
            over: overValue
          }, function() {
            if (!overValue) {
              if (_this2.visible !== _this2.state.visible) {
                _this2.setVisible(_this2.visible);
              }
            }
          });
        };
        if (this.setOverFalseTimeoutId) {
          clearTimeout(this.setOverFalseTimeoutId);
        }
        if (!over) {
          this.setOverFalseTimeoutId = setTimeout(function() {
            doSetOver(false);
          }, 500);
        } else {
          this.setOverFalseTimeoutId = setTimeout(function() {
            doSetOver(true);
          }, 35);
        }
      }
    }, {
      key: "onMouseEnter",
      value: function onMouseEnter() {
        this.setOver(true);
      }
    }, {
      key: "onMouseLeave",
      value: function onMouseLeave() {
        this.setOver(false);
      }
    }, {
      key: "onTrackWheel",
      value: function onTrackWheel(event2) {
        var delta = this.orientation == VERTICAL ? event2.deltaY : event2.deltaX;
        event2.preventDefault();
        this.props.onWheelScroll(this.orientation, delta, event2);
      }
    }, {
      key: "onTrackClick",
      value: function onTrackClick(event2) {
        var target = event2.target;
        if (target != this.trackNode) {
          return;
        }
        var rect = target.getBoundingClientRect();
        var offsetX = event2.clientX - rect.left;
        var offsetY = event2.clientY - rect.top;
        var pos = this.orientation == VERTICAL ? offsetY : offsetX;
        var thumbPos = this.getThumbPosition();
        var direction2 = pos > thumbPos ? 1 : -1;
        if (this.props.onPageScroll) {
          this.props.onPageScroll(this.orientation, direction2);
        }
      }
    }, {
      key: "getCoord",
      value: function getCoord(event2) {
        return this.orientation == VERTICAL ? event2.pageY : event2.pageX;
      }
    }, {
      key: "getThumbPosition",
      value: function getThumbPosition() {
        return this.scrollPosToThumbPos(this.getScrollPos(), this.orientation, this.getThumbSize());
      }
    }, {
      key: "onThumbMouseDown",
      value: function onThumbMouseDown(event2) {
        event2.preventDefault();
        event2.stopPropagation();
        this.initialPos = this.getCoord(event2);
        this.thumbSize = this.getThumbSize();
        this.initialThumbPos = this.getThumbPosition();
        this.setState({
          active: true
        });
        globalObject.addEventListener("mousemove", this.onMouseMove);
        globalObject.addEventListener("mouseup", this.onMouseUp);
        this.props.onStartDrag(this.orientation);
      }
    }, {
      key: "onMouseMove",
      value: function onMouseMove(event2) {
        var pos = this.getCoord(event2);
        var diff = pos - this.initialPos;
        var scrollPos = this.thumbPosToScrollPos(this.initialThumbPos + diff, this.orientation, this.thumbSize);
        if (this.orientation == VERTICAL) {
          this.onScrollThumbScrollTop(scrollPos);
        } else {
          this.onScrollThumbScrollLeft(scrollPos);
        }
      }
    }, {
      key: "onScrollThumbScrollTop",
      value: function onScrollThumbScrollTop(scrollPos) {
        this.props.onScrollThumbScrollTop(scrollPos);
      }
    }, {
      key: "onScrollThumbScrollLeft",
      value: function onScrollThumbScrollLeft(scrollPos) {
        this.props.onScrollThumbScrollLeft(scrollPos);
      }
    }, {
      key: "onMouseUp",
      value: function onMouseUp() {
        globalObject.removeEventListener("mousemove", this.onMouseMove);
        globalObject.removeEventListener("mouseup", this.onMouseUp);
        this.setState({
          active: false
        });
        this.props.onStopDrag(this.orientation);
      }
    }, {
      key: "getThumbTransform",
      value: function getThumbTransform() {
        var orientation = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.orientation;
        var thumbSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getThumbSize();
        var scrollPos = this.scrollPosToThumbPos(this.getScrollPos(), orientation, thumbSize) || 0;
        if (orientation == VERTICAL) {
          return "translate3d(0px, ".concat(scrollPos, "px, 0px)");
        }
        if (this.props.rtl) {
          scrollPos = -scrollPos;
        }
        return "translate3d(".concat(scrollPos, "px, 0px, 0px)");
      }
    }, {
      key: "thumbPosToScrollPos",
      value: function thumbPosToScrollPos(thumbPos, orientation, thumbSize) {
        var _this$props = this.props, clientSize = _this$props.clientSize, scrollSize = _this$props.scrollSize, trackSize = _this$props.trackSize;
        var scrollPos = thumbPos * (scrollSize - clientSize) / (trackSize - thumbSize);
        return scrollPos;
      }
    }, {
      key: "scrollPosToThumbPos",
      value: function scrollPosToThumbPos(scrollPos, orientation, thumbSize) {
        var _this$props2 = this.props, clientSize = _this$props2.clientSize, scrollSize = _this$props2.scrollSize, trackSize = _this$props2.trackSize;
        var thumbPos = scrollPos / (scrollSize - clientSize) * (trackSize - thumbSize);
        return Math.floor(thumbPos);
      }
    }, {
      key: "getRatio",
      value: function getRatio() {
        return this.props.trackSize / this.props.clientSize;
      }
    }, {
      key: "getThumbSize",
      value: function getThumbSize() {
        var _this$props3 = this.props, scrollSize = _this$props3.scrollSize, clientSize = _this$props3.clientSize;
        var thumbSize = scrollSize ? clientSize * clientSize / scrollSize : 0;
        thumbSize *= this.getRatio();
        thumbSize = Math.max(thumbSize, this.props.scrollThumbMinSize);
        return thumbSize || 0;
      }
    }]);
    return InovuaScrollbar2;
  }(_react.Component);
  Scrollbar.default = InovuaScrollbar;
  InovuaScrollbar.defaultProps = {
    onScrollThumbScrollTop: function onScrollThumbScrollTop() {
    },
    onScrollThumbScrollLeft: function onScrollThumbScrollLeft() {
    },
    onStartDrag: function onStartDrag() {
    },
    onStopDrag: function onStopDrag() {
    },
    scrollThumbMargin: 2,
    scrollThumbMinSize: 10,
    showTrackOnDrag: false
  };
  InovuaScrollbar.propTypes = {
    alwaysShowTrack: _propTypes.default.bool,
    autoHide: _propTypes.default.bool,
    clientSize: _propTypes.default.number,
    dragToScroll: _propTypes.default.bool,
    emptyScrollOffset: _propTypes.default.number,
    hideTransitionDuration: _propTypes.default.string,
    horizontal: _propTypes.default.bool,
    showTrackOnDrag: _propTypes.default.bool,
    onStartDrag: _propTypes.default.func,
    onStopDrag: _propTypes.default.func,
    onPageScroll: _propTypes.default.func,
    onScrollThumbScrollLeft: _propTypes.default.func,
    onScrollThumbScrollTop: _propTypes.default.func,
    onWheelScroll: _propTypes.default.func,
    oppositeVisible: _propTypes.default.bool,
    orientation: _propTypes.default.oneOf([VERTICAL, HORIZONTAL]),
    nativeScrollbarWidth: _propTypes.default.number.isRequired,
    scrollSize: _propTypes.default.number,
    scrollThumbMargin: _propTypes.default.number.isRequired,
    scrollThumbMinSize: _propTypes.default.number,
    scrollThumbOverWidth: _propTypes.default.number,
    scrollThumbRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    scrollThumbStartEndRespectMargin: _propTypes.default.bool,
    scrollThumbStyle: _propTypes.default.shape({}),
    scrollThumbWidth: _propTypes.default.number,
    scrollTrackOverTransitionDuration: _propTypes.default.string,
    showTransitionDuration: _propTypes.default.string,
    size: _propTypes.default.number,
    trackSize: _propTypes.default.number,
    vertical: _propTypes.default.bool,
    visible: _propTypes.default.bool,
    rtl: _propTypes.default.bool
  };
  return Scrollbar;
}
var hasRequiredSrc$e;
function requireSrc$e() {
  if (hasRequiredSrc$e)
    return src$b;
  hasRequiredSrc$e = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "cleanProps", {
      enumerable: true,
      get: function get2() {
        return _reactCleanProps.default;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get2() {
        return _getScrollbarWidth.default;
      }
    });
    Object.defineProperty(exports, "isMobile", {
      enumerable: true,
      get: function get2() {
        return _isMobile.default;
      }
    });
    exports.propTypes = void 0;
    Object.defineProperty(exports, "scrollPage", {
      enumerable: true,
      get: function get2() {
        return _scrollPage2.default;
      }
    });
    Object.defineProperty(exports, "smoothScrollTo", {
      enumerable: true,
      get: function get2() {
        return _smoothScrollTo2.default;
      }
    });
    var _typeof2 = _interopRequireDefault2(require_typeof());
    var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
    var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
    var _createClass2 = _interopRequireDefault2(requireCreateClass());
    var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
    var _inherits2 = _interopRequireDefault2(requireInherits$1());
    var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
    var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
    var _react = _interopRequireWildcard(reactExports);
    var _propTypes = _interopRequireDefault2(requirePropTypes());
    var _debounce = _interopRequireDefault2(requireDebounce$1());
    var _autoBind = _interopRequireDefault2(requireAutoBind());
    var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
    var _src = _interopRequireDefault2(requireSrc$l());
    var _isMobile = _interopRequireDefault2(requireIsMobile$1());
    var _smoothScrollTo2 = _interopRequireDefault2(requireSmoothScrollTo());
    var _scrollPage2 = _interopRequireDefault2(requireScrollPage());
    var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
    var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$5());
    var _Scrollbar = _interopRequireDefault2(requireScrollbar());
    var _getGlobal = requireGetGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var callFn = function callFn2(fn) {
      return fn();
    };
    var raf2 = globalObject.requestAnimationFrame;
    var ua2 = globalObject.navigator ? globalObject.navigator.userAgent || "" : "";
    var IS_EDGE = ua2.indexOf("Edge/") !== -1;
    var IS_MS_BROWSER = IS_EDGE || ua2.indexOf("Trident") !== -1;
    var IS_IE = IS_MS_BROWSER && !IS_EDGE;
    var WRAPPER_STYLE = {
      overflow: "hidden",
      flex: "1 1 auto",
      position: "relative",
      display: "flex"
    };
    var VERTICAL = "vertical";
    var HORIZONTAL = "horizontal";
    var SIZES = {
      vertical: "height",
      horizontal: "width"
    };
    var OTHER_ORIENTATION = {
      vertical: "horizontal",
      horizontal: "vertical"
    };
    var InovuaScrollContainer = function(_Component) {
      (0, _inherits2.default)(InovuaScrollContainer2, _Component);
      var _super = _createSuper(InovuaScrollContainer2);
      function InovuaScrollContainer2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaScrollContainer2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollerScrollSize", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollerClientSize", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refScroller", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollerNode", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeScrollWithThreshold", function(scrollTop, scrollThreshold, scrollMaxDelta) {
          var scrollPercent = function scrollPercent2(threshold2) {
            threshold2 = threshold2 < 0.4 ? 0.4 : threshold2;
            threshold2 = threshold2 > 1 ? 1 : threshold2;
            var scrollMax2 = scrollMaxDelta ? _this.scrollTopMax - scrollMaxDelta : _this.scrollTopMax;
            var percent2 = scrollTop / scrollMax2;
            if (percent2 >= threshold2) {
              return true;
            }
            return false;
          };
          if (typeof scrollThreshold === "number") {
            return scrollPercent(scrollThreshold);
          }
          if (typeof scrollThreshold === "string") {
            if (scrollThreshold.match(/^(\d*(\.\d+)?)%$/)) {
              var threshold = parseFloat(scrollThreshold) / 100;
              return scrollPercent(threshold);
            }
            if (scrollThreshold.match(/^(\d*(\.\d+)?)px$/)) {
              var scrollMax = scrollMaxDelta ? _this.scrollTopMax - scrollMaxDelta : _this.scrollTopMax;
              var _threshold = parseFloat(scrollThreshold);
              if (scrollTop >= scrollMax - _threshold) {
                return true;
              }
            }
          }
          return false;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applyCSSContainOnScrollUpdate", function(bool) {
          var scrollerNode = _this.getScrollerNode();
          if (scrollerNode) {
            scrollerNode.style.contain = bool ? "strict" : "";
          }
        });
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this), {
          scrollTop: 1,
          scrollLeft: 1,
          scrollTopMax: 1,
          scrollLeftMax: 1
        });
        _this.state = {
          scrollbars: {
            horizontal: false,
            vertical: false
          }
        };
        _this.scrollerResizerRef = function(s) {
          _this._scrollerResizer = s;
        };
        if (props2.scrollDebounceDelay > 0) {
          _this.onScrollDebounce = (0, _debounce.default)(_this.onScrollDebounce, props2.scrollDebounceDelay, {
            leading: false
          });
        }
        _this.onStop = (0, _debounce.default)(_this.onStop, props2.scrollStopDelay, {
          leading: false
        });
        _this.nativeScrollbarWidth = (0, _getScrollbarWidth.default)(_this.props.hideNativeScrollbarIfPossible);
        _this.scroll = {
          scrollTop: 0,
          scrollLeft: 0
        };
        _this.trackSize = {};
        _this.clientSize = {};
        _this.scrollSize = {};
        _this.scrollbars = {};
        _this.scrollerClientSize = {};
        _this.scrollerScrollSize = {};
        _this.scrollbarRef = {
          vertical: function vertical(c2) {
            _this.scrollbars.vertical = c2;
          },
          horizontal: function horizontal(c2) {
            var wasDefined = !!_this.scrollbars.horizontal;
            _this.scrollbars.horizontal = c2;
            if (!wasDefined && c2 && _this.props.rtl) {
              c2.setScrollPos(_this.scrollLeftMax);
            }
          }
        };
        _this.refThis = function(c2) {
          _this.domNode = c2;
        };
        _this.refWrapper = function(c2) {
          if (c2) {
            _this.setupWrapperPassiveScrollListener(c2);
          } else {
            _this.removeWrapperPassiveScrollListener(_this.wrapperNode);
          }
          _this.wrapperNode = c2;
        };
        _this.refView = function(v2) {
          _this.viewNode = v2;
        };
        _this.refScroller = (0, _react.createRef)();
        return _this;
      }
      (0, _createClass2.default)(InovuaScrollContainer2, [{
        key: "onWrapperScroll",
        value: function onWrapperScroll(event2) {
          var _this2 = this;
          var eventTarget = event2.target;
          if (eventTarget != this.wrapperNode) {
            return;
          }
          var scrollLeft = eventTarget.scrollLeft, scrollTop = eventTarget.scrollTop;
          if (scrollLeft) {
            eventTarget.scrollLeft = 0;
            raf2(function() {
              _this2.scrollLeft += scrollLeft;
            });
          }
          if (scrollTop) {
            eventTarget.scrollTop = 0;
            raf2(function() {
              _this2.scrollTop += scrollTop;
            });
          }
        }
      }, {
        key: "setupWrapperPassiveScrollListener",
        value: function setupWrapperPassiveScrollListener(node2) {
          node2.addEventListener("scroll", this.onWrapperScroll, {
            passive: true
          });
        }
      }, {
        key: "removeWrapperPassiveScrollListener",
        value: function removeWrapperPassiveScrollListener() {
          var node2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.wrapperNode;
          if (node2) {
            node2.removeEventListener("scroll", this.onWrapperScroll, {
              passive: true
            });
          }
        }
      }, {
        key: "setupPassiveScrollListener",
        value: function setupPassiveScrollListener(node2) {
          node2.addEventListener("scroll", this.onScroll, {
            passive: true
          });
        }
      }, {
        key: "removePassiveScrollListener",
        value: function removePassiveScrollListener() {
          var node2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getScrollerNode();
          if (node2) {
            node2.removeEventListener("scroll", this.onScroll, {
              passive: true
            });
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.unmounted = true;
          if (this.props.usePassiveScroll) {
            this.removePassiveScrollListener();
          }
          if (typeof this.props.onWillUnmount === "function") {
            this.props.onWillUnmount(this);
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this.unmounted = false;
          this.scrollerNode = this.refScroller.current;
          var scrollerNode = this.getScrollerNode();
          if (this.props.usePassiveScroll) {
            if (scrollerNode) {
              this.setupPassiveScrollListener(scrollerNode);
            } else {
              this.removePassiveScrollListener(scrollerNode);
            }
          }
          if (typeof this.props.onDidMount === "function") {
            this.props.onDidMount(this, this.getDOMNode(), this._scrollerResizer);
          }
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate2(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "ensureNonStaticStyle",
        value: function ensureNonStaticStyle(style, domNode) {
          if (!this.props.forceNonStaticPosition) {
            return style;
          }
          style = style || {};
          var _style = style, position2 = _style.position;
          var nonStatic = position2 == "relative" || position2 == "absolute";
          if (nonStatic) {
            return style;
          }
          if (domNode) {
            position2 = globalObject.getComputedStyle(domNode).position;
            nonStatic = position2 == "relative" || position2 == "absolute";
            if (!nonStatic) {
              return _objectSpread2(_objectSpread2({}, style), {}, {
                position: "relative"
              });
            }
          }
          return _objectSpread2(_objectSpread2({}, style), {}, {
            position: "relative"
          });
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var renderScroller = props2.renderScroller, renderView = props2.renderView, Factory = props2.factory, inlineBlock = props2.inlineBlock, usePassiveScroll = props2.usePassiveScroll, theme2 = props2.theme, contain = props2.contain, nativeScroll = props2.nativeScroll;
          var style = props2.style, children = props2.children;
          var className = props2.className || "";
          style = _objectSpread2({
            overflow: "hidden",
            display: props2.display ? props2.display : inlineBlock ? "inline-flex" : "flex",
            flexFlow: "column"
          }, this.ensureNonStaticStyle(style, this.domNode));
          if (contain) {
            if (contain === true) {
              style.contain = "style layout paint";
            } else {
              style.contain = contain;
            }
          }
          var factoryProps = (0, _reactCleanProps.default)(props2, InovuaScrollContainer2.propTypes);
          className += inlineBlock ? " inovua-react-scroll-container--inline-block" : " inovua-react-scroll-container--block";
          className += " inovua-react-scroll-container";
          if (theme2) {
            className += " inovua-react-scroll-container--theme-".concat(theme2);
          }
          var nativeScrollbarWidth = this.nativeScrollbarWidth;
          var emptyScrollOffset = this.getEmptyScrollOffset();
          var scrollerStyle = {};
          if (this.props.inertialScroll) {
            scrollerStyle.WebkitOverflowScrolling = "touch";
          }
          if (this.props.scrollerStyle) {
            scrollerStyle = _objectSpread2(_objectSpread2({}, scrollerStyle), this.props.scrollerStyle);
          }
          scrollerStyle.overflow = nativeScroll ? "auto" : "scroll";
          scrollerStyle.direction = this.props.rtl ? "rtl" : "ltr";
          if (!nativeScroll) {
            scrollerStyle[this.props.rtl ? "marginLeft" : "marginRight"] = -emptyScrollOffset - nativeScrollbarWidth;
            scrollerStyle.marginBottom = -emptyScrollOffset - nativeScrollbarWidth;
          }
          var viewClassName = "".concat(this.props.viewClassName || "", " inovua-react-scroll-container__view ").concat(!nativeScrollbarWidth ? "inovua-react-scroll-container__view--zero-width-scrollbar" : "");
          var viewChildren = children;
          var viewStyle = {};
          if (this.props.viewStyle) {
            viewStyle = _objectSpread2(_objectSpread2({}, viewStyle), this.props.viewStyle);
          }
          if (!emptyScrollOffset || nativeScroll) {
            viewChildren = children;
          } else {
            viewStyle[this.props.rtl ? "paddingLeft" : "paddingRight"] = emptyScrollOffset;
            var viewChildrenStyle = {
              paddingBottom: emptyScrollOffset
            };
            if (IS_IE) {
              viewChildrenStyle.display = "inline-block";
            }
            viewChildren = _react.default.createElement("div", {
              key: "viewChildren",
              style: viewChildrenStyle
            }, children);
          }
          var resizer = !!this.props.resizer;
          var viewProps = {
            ref: this.refView,
            className: viewClassName,
            style: viewStyle,
            children: [viewChildren, resizer && _react.default.createElement(_src.default, {
              ResizeObserver: this.props.ResizeObserver,
              checkResizeDelay: this.props.checkResizeDelay,
              key: "viewResizer",
              useRaf: this.props.rafOnResize,
              onResize: this.onViewResize,
              notifyOnMount: true
            })]
          };
          var view = renderView ? renderView(viewProps) : _react.default.createElement("div", _objectSpread2({
            key: "view"
          }, viewProps));
          var scrollerProps = {
            className: "inovua-react-scroll-container__scroller inovua-react-scroll-container__scroller--direction-".concat(this.props.rtl ? "rtl" : "ltr"),
            style: scrollerStyle,
            ref: this.refScroller,
            children: [view, resizer ? _react.default.createElement(_src.default, _objectSpread2(_objectSpread2({
              ref: this.scrollerResizerRef
            }, props2.scrollerResizerProps), {}, {
              ResizeObserver: this.props.ResizeObserver,
              checkResizeDelay: this.props.checkResizeDelay,
              useRaf: this.props.rafOnResize,
              key: "scrollerResizer",
              onResize: this.onResize,
              notifyOnMount: true
            })) : null].filter(Boolean)
          };
          if (!usePassiveScroll) {
            scrollerProps.onScroll = this.onScroll;
          }
          if (this.props.avoidRepaintOnScroll) {
            scrollerProps.className += " inovua-react-scroll-container__scroller--avoid-repaint";
          }
          if (this.props.hideNativeScrollbarIfPossible) {
            scrollerProps.className += " inovua-react-scroll-container__scroller--hide-native-scrollbar-if-possible";
          }
          if (this.props.dragToScroll) {
            scrollerProps.tabIndex = -1;
          }
          var scroller = renderScroller ? renderScroller(scrollerProps) : _react.default.createElement("div", _objectSpread2({}, scrollerProps));
          children = [_react.default.createElement("div", {
            key: "wrapper",
            className: "inovua-react-scroll-container__wrapper",
            ref: this.refWrapper,
            style: this.props.wrapperStyle ? _objectSpread2(_objectSpread2({}, WRAPPER_STYLE), this.props.wrapperStyle) : WRAPPER_STYLE,
            children: scroller
          })].concat((0, _toConsumableArray2.default)(this.renderScrollbars()), [this.props.before ? _react.default.cloneElement(this.props.before, {
            key: "before"
          }) : null, this.props.after ? _react.default.cloneElement(this.props.after, {
            key: "after",
            style: _objectSpread2(_objectSpread2({}, this.props.after.props.style), {}, {
              bottom: this.state.scrollbars.horizontal && this.props.nativeScroll ? this.nativeScrollbarWidth : 0
            })
          }) : null]);
          if (this.props.showScrollbarsOnOver) {
            factoryProps.onMouseEnter = this.onMouseEnter;
            factoryProps.onMouseLeave = this.onMouseLeave;
          }
          return Factory ? _react.default.createElement(Factory, _objectSpread2(_objectSpread2({}, factoryProps), {}, {
            ref: this.refThis,
            style,
            className,
            children
          })) : (0, _react.createElement)(props2.tagName, _objectSpread2(_objectSpread2({}, factoryProps), {}, {
            ref: this.refThis,
            style,
            className,
            children
          }));
        }
      }, {
        key: "onMouseEnter",
        value: function onMouseEnter(event2) {
          this.mouseEntered = true;
          this.setScrollbarsVisible({
            horizontal: true,
            vertical: true
          });
          if (this.props.onMouseEnter) {
            this.props.onMouseEnter(event2);
          }
        }
      }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
          this.mouseEntered = false;
          this.setScrollbarsVisible({
            horizontal: false,
            vertical: false
          });
          if (this.props.onMouseLeave) {
            this.props.onMouseLeave(event);
          }
        }
      }, {
        key: "onViewResize",
        value: function onViewResize(size2) {
          var _this3 = this;
          this.rafSync(function() {
            if (_this3.props.onViewResize) {
              _this3.props.onViewResize(size2, _this3);
            }
          });
        }
      }, {
        key: "onResize",
        value: function onResize(size2) {
          var _this4 = this;
          if (this.props.rafOnResize) {
            this.rafSync(function() {
              if (_this4.props.onResize) {
                _this4.props.onResize(size2, _this4);
              }
            });
          } else {
            this.sync();
            if (this.props.onResize) {
              this.props.onResize(size2, this);
            }
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.domNode;
        }
      }, {
        key: "scrollTop",
        get: function get2() {
          return this.scroll.scrollTop;
        },
        set: function set2(value) {
          this.getScrollerNode().scrollTop = value;
        }
      }, {
        key: "scrollLeft",
        get: function get2() {
          return this.scroll.scrollLeft;
        },
        set: function set2(value) {
          this.getScrollerNode().scrollLeft = value;
        }
      }, {
        key: "getScrollPosition",
        value: function getScrollPosition() {
          return this.scroll;
        }
      }, {
        key: "scrollTopMax",
        get: function get2() {
          if (!this.scrollerScrollSize.height || !this.scrollerClientSize.height) {
            this.getScrollbars();
          }
          return this.scrollerScrollSize.height - this.scrollerClientSize.height;
        }
      }, {
        key: "scrollLeftMax",
        get: function get2() {
          if (!this.scrollerScrollSize.width || !this.scrollerClientSize.width) {
            this.getScrollbars();
          }
          return this.scrollerScrollSize.width - this.scrollerClientSize.width;
        }
      }, {
        key: "renderScrollbars",
        value: function renderScrollbars() {
          var scrollbars = this.state.scrollbars;
          return [scrollbars.vertical && this.renderScrollbar("vertical", scrollbars), scrollbars.horizontal && this.renderScrollbar("horizontal", scrollbars)];
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          return this.props.emptyScrollOffset == null ? _isMobile.default ? 17 : IS_IE ? 0 : (0, _getScrollbarWidth.default)() : this.props.emptyScrollOffset;
        }
      }, {
        key: "renderScrollbar",
        value: function renderScrollbar(orientation, scrollbars) {
          if (this.checkAllowedScrollbars()[orientation] === false) {
            return null;
          }
          var sizeName = SIZES[orientation];
          var nativeScrollbarWidth = this.nativeScrollbarWidth;
          var oppositeVisible = scrollbars[OTHER_ORIENTATION[orientation]];
          var _this$props = this.props, scrollThumbWidth = _this$props.scrollThumbWidth, scrollThumbStartEndRespectMargin = _this$props.scrollThumbStartEndRespectMargin, scrollThumbMargin = _this$props.scrollThumbMargin;
          var trackSize = this.trackSize[sizeName];
          trackSize -= scrollThumbMargin * (scrollThumbStartEndRespectMargin ? 2 : 1);
          if (oppositeVisible) {
            trackSize -= scrollThumbWidth;
          }
          var emptyScrollOffset = this.getEmptyScrollOffset();
          var scrollbarProps = {
            key: orientation,
            ref: this.scrollbarRef[orientation],
            emptyScrollOffset,
            nativeScrollbarWidth,
            orientation,
            visible: !this.props.autoHide,
            autoHide: this.props.autoHide,
            rtl: this.props.rtl,
            oppositeVisible,
            scrollThumbStyle: this.props.scrollThumbStyle,
            trackSize,
            scrollSize: this.scrollerScrollSize[sizeName],
            clientSize: this.clientSize[sizeName] + emptyScrollOffset,
            dragToScroll: this.props.dragToScroll,
            scrollThumbMinSize: this.props.scrollThumbMinSize,
            scrollThumbRadius: this.props.scrollThumbRadius,
            scrollThumbStartEndRespectMargin,
            scrollThumbOverWidth: this.props.scrollThumbOverWidth,
            scrollThumbWidth,
            scrollThumbMargin,
            scrollTrackOverTransitionDuration: this.props.scrollTrackOverTransitionDuration,
            showTrackOnDrag: this.props.showTrackOnDrag,
            alwaysShowTrack: this.props.alwaysShowTrack,
            hideTransitionDuration: this.props.hideTransitionDuration,
            showTransitionDuration: this.props.showTransitionDuration,
            onScrollThumbScrollTop: this.onScrollThumbScrollTop,
            onScrollThumbScrollLeft: this.onScrollThumbScrollLeft,
            onStartDrag: this.props.dragToScroll && this.onScrollbarStartDrag,
            onStopDrag: this.props.dragToScroll && this.onScrollbarStopDrag,
            onWheelScroll: this.onScrollbarWheelScroll,
            onPageScroll: this.onScrollbarPageScroll
          };
          return _react.default.createElement(_Scrollbar.default, _objectSpread2({}, scrollbarProps));
        }
      }, {
        key: "onScrollbarStartDrag",
        value: function onScrollbarStartDrag(orientation) {
          if (this.props.onScrollbarStartDrag) {
            this.props.onScrollbarStartDrag(orientation);
          }
          if (orientation == VERTICAL && this.props.onVerticalScrollbarStartDrag) {
            this.props.onVerticalScrollbarStartDrag();
          } else if (this.props.onHorizontalScrollbarStartDrag) {
            this.props.onHorizontalScrollbarStartDrag();
          }
        }
      }, {
        key: "onScrollbarStopDrag",
        value: function onScrollbarStopDrag(orientation) {
          this.focus();
          if (this.props.onScrollbarStopDrag) {
            this.props.onScrollbarStopDrag(orientation);
          }
          if (orientation == VERTICAL && this.props.onVerticalScrollbarStopDrag) {
            this.props.onVerticalScrollbarStopDrag();
          } else if (this.props.onHorizontalScrollbarStopDrag) {
            this.props.onHorizontalScrollbarStopDrag();
          }
        }
      }, {
        key: "focus",
        value: function focus() {
          this.getScrollerNode().focus();
        }
      }, {
        key: "onScrollbarWheelScroll",
        value: function onScrollbarWheelScroll(orientation, delta) {
          var node2 = this.getScrollerNode();
          var horiz = orientation == "horizontal";
          var scrollPosName = horiz ? "scrollLeft" : "scrollTop";
          var currentValue = node2[scrollPosName];
          var newValue = currentValue + delta;
          this.smoothScrollTo(newValue, {
            orientation,
            duration: 10
          });
        }
      }, {
        key: "onScrollbarPageScroll",
        value: function onScrollbarPageScroll(orientation, direction2) {
          this.focus();
          this.scrollPage(orientation, direction2);
        }
      }, {
        key: "scrollPage",
        value: function scrollPage2(orientation, direction2) {
          if (!direction2) {
            throw new Error("Please provide a scroll direction: 1 or -1!");
          }
          var node2 = this.getScrollerNode();
          var horiz = orientation == "horizontal";
          (0, _scrollPage2.default)(node2, {
            orientation,
            direction: direction2,
            pageSize: this.clientSize[horiz ? "width" : "height"] - 20
          });
        }
      }, {
        key: "scrollHorizontalPage",
        value: function scrollHorizontalPage(direction2) {
          this.scrollPage("horizontal", direction2);
        }
      }, {
        key: "scrollVerticalPage",
        value: function scrollVerticalPage(direction2) {
          this.scrollPage("vertical", direction2);
        }
      }, {
        key: "smoothScrollTo",
        value: function smoothScrollTo2(newValue, cfg, callback2) {
          return (0, _smoothScrollTo2.default)(this.getScrollerNode(), newValue, cfg, callback2);
        }
      }, {
        key: "onScrollThumbScrollTop",
        value: function onScrollThumbScrollTop(pos) {
          this.getScrollerNode().scrollTop = pos;
        }
      }, {
        key: "onScrollThumbScrollLeft",
        value: function onScrollThumbScrollLeft(pos) {
          this.getScrollerNode().scrollLeft = pos;
        }
      }, {
        key: "getScrollerNode",
        value: function getScrollerNode() {
          this.scrollerNode = this.scrollerNode || this.refScroller.current || this.getDOMNode().firstChild.firstChild;
          return this.scrollerNode;
        }
      }, {
        key: "getScrollerChild",
        value: function getScrollerChild() {
          this.scrollerChild = this.scrollerChild || this.getScrollerNode().firstChild;
          return this.scrollerChild;
        }
      }, {
        key: "getTrackSize",
        value: function getTrackSize() {
          var node2 = this.getDOMNode();
          if (this.props.getTrackSize) {
            return this.props.getTrackSize(node2);
          }
          return {
            width: node2.clientWidth,
            height: node2.clientHeight
          };
        }
      }, {
        key: "getScrollSize",
        value: function getScrollSize() {
          if (this.props.getScrollSize) {
            return this.props.getScrollSize(this.getScrollerNode());
          }
          var node2 = this.getScrollerChild();
          return {
            width: node2.scrollWidth,
            height: node2.scrollHeight
          };
        }
      }, {
        key: "getClientSize",
        value: function getClientSize() {
          var n2 = this.getDOMNode();
          if (this.props.getClientSize) {
            return this.props.getClientSize(n2);
          }
          var node2 = n2.firstChild;
          return {
            width: node2.clientWidth,
            height: node2.clientHeight
          };
        }
      }, {
        key: "getScrollbars",
        value: function getScrollbars() {
          this.trackSize = this.getTrackSize();
          var scrollSize = this.scrollSize = this.getScrollSize();
          this.clientSize = this.getClientSize();
          var scrollerNode = this.getScrollerNode();
          this.scrollerClientSize = this.props.getScrollerNodeClientSize ? this.props.getScrollerNodeClientSize(scrollerNode) : {
            height: scrollerNode.clientHeight,
            width: scrollerNode.clientWidth
          };
          var scrollerNodeClientSize = this.scrollerClientSize;
          this.scrollerScrollSize = {
            height: scrollerNode.scrollHeight,
            width: scrollerNode.scrollWidth
          };
          if (this.props.rtl)
            ;
          var scrollbars = {
            vertical: scrollSize.height > scrollerNodeClientSize.height,
            horizontal: scrollSize.width > scrollerNodeClientSize.width
          };
          return scrollbars;
        }
      }, {
        key: "rafSync",
        value: function rafSync(callback2) {
          var _this5 = this;
          raf2(function() {
            _this5.sync();
            if (callback2) {
              callback2();
            }
          });
        }
      }, {
        key: "sync",
        value: function sync() {
          var _this6 = this;
          if (this.unmounted) {
            return;
          }
          var oldScrollbars = this.state.scrollbars;
          var scrollbars = this.getScrollbars();
          this.setState({
            scrollbars
          }, function() {
            if (_this6.props.onScrollbarsChange && (scrollbars.vertical != oldScrollbars.vertical || scrollbars.horizontal != oldScrollbars.horizontal)) {
              _this6.props.onScrollbarsChange(scrollbars);
            }
          });
          if (this.props.rtl) {
            var scrollNode = this.getScrollerNode();
            if (!scrollNode) {
              return;
            }
            this.onScrollDebounce(scrollNode);
          }
        }
      }, {
        key: "hasScrollbar",
        value: function hasScrollbar(orientation) {
          return this.state.scrollbars[orientation];
        }
      }, {
        key: "hasVerticalScrollbar",
        value: function hasVerticalScrollbar() {
          return this.hasScrollbar(VERTICAL);
        }
      }, {
        key: "hasHorizontalScrollbar",
        value: function hasHorizontalScrollbar() {
          return this.hasScrollbar(HORIZONTAL);
        }
      }, {
        key: "onScroll",
        value: function onScroll(event2) {
          var eventTarget = event2.target;
          if (this.props.onScroll) {
            this.props.onScroll(event2);
          }
          var scrollerNode = this.getScrollerNode();
          if (eventTarget != scrollerNode) {
            return;
          }
          this.onScrollDebounce(eventTarget);
        }
      }, {
        key: "onScrollDebounce",
        value: function onScrollDebounce(eventTarget) {
          var _this7 = this;
          var props2 = this.props;
          var rafOnScroll = props2.rafOnScroll, cancelPrevScrollRaf = props2.cancelPrevScrollRaf, avoidScrollTopBrowserLayout = props2.avoidScrollTopBrowserLayout, scrollMaxDelta = props2.scrollMaxDelta, scrollThreshold = props2.scrollThreshold;
          var rafFn = rafOnScroll ? raf2 : callFn;
          if (this.scrollRafId && rafOnScroll && cancelPrevScrollRaf) {
            globalObject.cancelAnimationFrame(this.scrollRafId);
          }
          this.scrollRafId = rafFn(function() {
            if (_this7.unmounted) {
              return;
            }
            delete _this7.scrollRafId;
            var onScrollStart = props2.onScrollStart, onScrollStop = props2.onScrollStop, autoHide = props2.autoHide, applyCSSContainOnScroll = props2.applyCSSContainOnScroll;
            var startStop = !!(onScrollStart || onScrollStop || autoHide || avoidScrollTopBrowserLayout || applyCSSContainOnScroll);
            var scrollTop;
            var scrollLeft;
            if (!avoidScrollTopBrowserLayout) {
              scrollTop = eventTarget.scrollTop;
              scrollLeft = eventTarget.scrollLeft;
            } else {
              var targetRect = _this7.targetRect || eventTarget.getBoundingClientRect();
              _this7.targetRect = targetRect;
              var viewRect = eventTarget.firstChild.getBoundingClientRect();
              scrollTop = targetRect.top - viewRect.top;
              scrollLeft = targetRect.left - viewRect.left;
            }
            var scrollLeftMax = _this7.scrollerScrollSize.width - _this7.scrollerClientSize.width;
            var scrollPos = {
              scrollTop,
              scrollLeft,
              scrollLeftMax
            };
            var prevScrollPos = _this7.scroll;
            var prevScrollTop = prevScrollPos.scrollTop, prevScrollLeft = prevScrollPos.scrollLeft, prevScrollLeftMax = prevScrollPos.scrollLeftMax;
            if (startStop) {
              if (!_this7.scrollStarted) {
                if (applyCSSContainOnScroll) {
                  _this7.applyCSSContainOnScrollUpdate(true);
                }
                if (onScrollStart) {
                  onScrollStart(scrollPos, prevScrollPos, eventTarget);
                }
              }
            }
            var scrollVertical = false;
            var scrollHorizontal = false;
            if (props2.onContainerScroll) {
              props2.onContainerScroll(scrollPos, prevScrollPos, eventTarget, {
                scrollerScrollSize: _this7.scrollerScrollSize,
                scrollerClientSize: _this7.scrollerClientSize,
                scrollLeftMax
              });
            }
            var scrollTopChange = scrollTop != prevScrollTop;
            if (scrollTopChange) {
              scrollVertical = true;
              if (_this7.scrollbars.vertical) {
                _this7.scrollbars.vertical.setScrollPos(scrollTop);
              }
              if (props2.onContainerScrollVertical) {
                props2.onContainerScrollVertical(scrollTop, prevScrollTop, eventTarget);
              }
              if (props2.onContainerScrollVerticalMin && scrollTop == 0) {
                props2.onContainerScrollVerticalMin(0, eventTarget);
              }
              if (props2.onContainerScrollVerticalMax) {
                if (scrollThreshold) {
                  var reachScrollMax = _this7.computeScrollWithThreshold(scrollTop, scrollThreshold, scrollMaxDelta);
                  if (reachScrollMax) {
                    props2.onContainerScrollVerticalMax(scrollTop);
                  }
                } else if (scrollMaxDelta ? scrollTop >= _this7.scrollTopMax - scrollMaxDelta : scrollTop == _this7.scrollTopMax) {
                  props2.onContainerScrollVerticalMax(scrollTop);
                }
              }
            }
            var scrollLeftChange = scrollLeft != prevScrollLeft;
            if (_this7.props.rtl && !scrollLeftChange) {
              scrollLeftChange = scrollLeftMax != prevScrollLeftMax;
            }
            if (scrollLeftChange) {
              scrollHorizontal = true;
              if (_this7.scrollbars.horizontal) {
                _this7.scrollbars.horizontal.setScrollPos(scrollLeft);
              }
              if (props2.onContainerScrollHorizontal) {
                props2.onContainerScrollHorizontal(scrollLeft, prevScrollLeft, eventTarget, scrollLeftMax);
              }
              if (props2.onContainerScrollHorizontalMin && scrollLeft == 0) {
                props2.onContainerScrollHorizontalMin(0, eventTarget);
              }
              if (props2.onContainerScrollHorizontalMax && (scrollMaxDelta ? Math.abs(scrollLeft) >= scrollLeftMax - scrollMaxDelta : Math.abs(scrollLeft) == scrollLeftMax)) {
                props2.onContainerScrollHorizontalMax(scrollLeft, eventTarget);
              }
            }
            if (startStop && (scrollTopChange || scrollLeftChange)) {
              if (!_this7.scrollStarted || _this7.scrollStarted.vertical != scrollVertical || _this7.scrollStarted.horizontal != scrollHorizontal) {
                _this7.lazyShowScrollbars();
                _this7.scrollStarted = {
                  horizontal: scrollHorizontal,
                  vertical: scrollVertical
                };
              }
              _this7.onStop(scrollPos, prevScrollPos, eventTarget);
            }
            _this7.scroll = scrollPos;
          });
        }
      }, {
        key: "getContainerTargetNode",
        value: function getContainerTargetNode() {
          var view = this.viewNode;
          return !this.props.emptyScrollOffset ? view : view.firstChild;
        }
      }, {
        key: "lazyShowScrollbars",
        value: function lazyShowScrollbars() {
          if (this.props.autoHide) {
            setTimeout(this.showScrollbars, this.props.showDelay);
          }
        }
      }, {
        key: "onStop",
        value: function onStop(scrollPos, prevScrollPos, eventTarget) {
          this.scrollStarted = false;
          if (this.props.applyCSSContainOnScroll) {
            this.applyCSSContainOnScrollUpdate(false);
          }
          delete this.targetRect;
          if (this.props.onScrollStop) {
            this.props.onScrollStop(scrollPos, prevScrollPos, eventTarget);
          }
          setTimeout(this.hideScrollbars, this.props.hideDelay);
        }
      }, {
        key: "showScrollbars",
        value: function showScrollbars() {
          if (this.props.autoHide && this.scrollStarted) {
            var _this$scrollbars = this.scrollbars;
            _this$scrollbars.horizontal;
            _this$scrollbars.vertical;
            var _this$scrollStarted = this.scrollStarted, scrollHorizontal = _this$scrollStarted.horizontal, scrollVertical = _this$scrollStarted.vertical;
            var visibleScrollbars = {};
            if (scrollHorizontal) {
              visibleScrollbars.horizontal = true;
            }
            if (scrollVertical) {
              visibleScrollbars.vertical = true;
            }
            this.setScrollbarsVisible(visibleScrollbars);
          }
        }
      }, {
        key: "checkAllowedScrollbars",
        value: function checkAllowedScrollbars() {
          var result = {
            vertical: true,
            horizontal: true
          };
          var scrollbars = this.props.scrollbars;
          if (scrollbars === false) {
            result.vertical = false;
            result.horizontal = false;
          }
          if ((0, _typeof2.default)(scrollbars) == "object") {
            if (scrollbars.horizontal === false) {
              result.horizontal = false;
            }
            if (scrollbars.false === false) {
              result.false = false;
            }
          }
          var _this$props2 = this.props, shouldAllowScrollbars = _this$props2.shouldAllowScrollbars, showScrollbars = _this$props2.showScrollbars;
          if (typeof shouldAllowScrollbars == "function") {
            var shouldAllow = showScrollbars || shouldAllowScrollbars(this.props, (0, _getScrollbarWidth.default)());
            if (shouldAllow === false || shouldAllow && shouldAllow.horizontal === false) {
              result.horizontal = false;
            }
            if (shouldAllow === false || shouldAllow && shouldAllow.vertical === false) {
              result.vertical = false;
            }
          }
          return result;
        }
      }, {
        key: "setScrollbarsVisible",
        value: function setScrollbarsVisible(scrollbars) {
          var horizontalVisible = scrollbars.horizontal, verticalVisible = scrollbars.vertical;
          var _this$scrollbars2 = this.scrollbars, horizontal = _this$scrollbars2.horizontal, vertical = _this$scrollbars2.vertical;
          if (horizontalVisible !== void 0 && horizontal) {
            horizontal.setVisible(horizontalVisible);
          }
          if (verticalVisible !== void 0 && vertical) {
            vertical.setVisible(verticalVisible);
          }
        }
      }, {
        key: "hideScrollbars",
        value: function hideScrollbars() {
          if (this.props.showScrollbarsOnOver && this.mouseEntered) {
            return;
          }
          if (this.props.autoHide && !this.scrollStarted) {
            this.setScrollbarsVisible({
              horizontal: false,
              vertical: false
            });
          }
        }
      }]);
      return InovuaScrollContainer2;
    }(_react.Component);
    exports.default = InovuaScrollContainer;
    InovuaScrollContainer.defaultProps = {
      shouldAllowScrollbars: function shouldAllowScrollbars(props2, scrollbarWidth) {
        if (props2.nativeScroll) {
          return false;
        }
        if (!scrollbarWidth) {
          return false;
        }
      },
      avoidRepaintOnScroll: true,
      avoidScrollTopBrowserLayout: false,
      applyCSSContainOnScroll: true,
      alwaysShowTrack: false,
      autoHide: true,
      cancelPrevScrollRaf: true,
      contain: false,
      dragToScroll: true,
      forceNonStaticPosition: false,
      hideDelay: 400,
      hideTransitionDuration: "300ms",
      inertialScroll: true,
      inlineBlock: false,
      rafOnScroll: false,
      rafOnResize: false,
      scrollDebounceDelay: 0,
      resizer: true,
      rtl: false,
      scrollStopDelay: 180,
      scrollThumbMargin: 2,
      scrollThumbStartEndRespectMargin: true,
      scrollThumbWidth: 7,
      scrollThumbOverWidth: 10,
      scrollThumbRadius: 3,
      showDelay: 100,
      showScrollbarsOnOver: true,
      showTransitionDuration: "100ms",
      showTrackOnDrag: false,
      scrollTrackOverTransitionDuration: "100ms",
      usePassiveScroll: true,
      tagName: "div",
      theme: "default-light"
    };
    var propTypes2 = {
      alwaysShowTrack: _propTypes.default.bool,
      avoidScrollTopBrowserLayout: _propTypes.default.bool,
      applyCSSContainOnScroll: _propTypes.default.bool,
      avoidRepaintOnScroll: _propTypes.default.bool,
      autoHide: _propTypes.default.bool,
      cancelPrevScrollRaf: _propTypes.default.bool,
      dragToScroll: _propTypes.default.bool,
      display: _propTypes.default.string,
      checkResizeDelay: _propTypes.default.number,
      emptyScrollOffset: _propTypes.default.number,
      factory: _propTypes.default.func,
      nativeScroll: _propTypes.default.bool,
      forceNonStaticPosition: _propTypes.default.bool,
      hideDelay: _propTypes.default.number,
      getClientSize: _propTypes.default.func,
      getScrollSize: _propTypes.default.func,
      getTrackSize: _propTypes.default.func,
      getScrollerNodeClientSize: _propTypes.default.func,
      hideTransitionDuration: _propTypes.default.string,
      hideNativeScrollbarIfPossible: _propTypes.default.bool,
      inertialScroll: _propTypes.default.bool,
      rtl: _propTypes.default.bool,
      inlineBlock: _propTypes.default.bool,
      rafOnResize: _propTypes.default.bool,
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      onContainerScroll: _propTypes.default.func,
      onContainerScrollHorizontal: _propTypes.default.func,
      onContainerScrollHorizontalMax: _propTypes.default.func,
      onContainerScrollHorizontalMin: _propTypes.default.func,
      onContainerScrollVertical: _propTypes.default.func,
      onContainerScrollVerticalMax: _propTypes.default.func,
      onContainerScrollVerticalMin: _propTypes.default.func,
      onResize: _propTypes.default.func,
      onScroll: _propTypes.default.func,
      onScrollbarsChange: _propTypes.default.func,
      onScrollStart: _propTypes.default.func,
      onScrollStop: _propTypes.default.func,
      onViewResize: _propTypes.default.func,
      rafOnScroll: _propTypes.default.bool,
      scrollDebounceDelay: _propTypes.default.number,
      renderScroller: _propTypes.default.func,
      renderView: _propTypes.default.func,
      resizer: _propTypes.default.bool,
      scrollbars: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
        vertical: _propTypes.default.bool,
        horizontal: _propTypes.default.bool
      })]),
      usePassiveScroll: _propTypes.default.bool,
      showScrollbarsOnOver: _propTypes.default.bool,
      onScrollbarStartDrag: _propTypes.default.func,
      onScrollbarStopDrag: _propTypes.default.func,
      onHorizontalScrollbarStartDrag: _propTypes.default.func,
      onHorizontalScrollbarStopDrag: _propTypes.default.func,
      onVerticalScrollbarStartDrag: _propTypes.default.func,
      onVerticalScrollbarStopDrag: _propTypes.default.func,
      scrollerStyle: _propTypes.default.shape({}),
      scrollStopDelay: _propTypes.default.number,
      scrollThumbMargin: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      scrollMaxDelta: _propTypes.default.number,
      scrollThumbMinSize: _propTypes.default.number,
      scrollThumbOverWidth: _propTypes.default.number,
      scrollThumbRadius: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      scrollThumbStartEndRespectMargin: _propTypes.default.bool,
      scrollThumbWidth: _propTypes.default.number,
      scrollThumbStyle: _propTypes.default.shape(),
      scrollTrackOverTransitionDuration: _propTypes.default.string,
      showDelay: _propTypes.default.number,
      showTrackOnDrag: _propTypes.default.bool,
      shouldComponentUpdate: _propTypes.default.func,
      shouldAllowScrollbars: _propTypes.default.func,
      showTransitionDuration: _propTypes.default.string,
      tagName: _propTypes.default.string,
      theme: _propTypes.default.string,
      scrollerResizerProps: _propTypes.default.object,
      onDidMount: _propTypes.default.func,
      onWillUnmount: _propTypes.default.func,
      viewClassName: _propTypes.default.string,
      viewStyle: _propTypes.default.shape({}),
      wrapperStyle: _propTypes.default.shape({}),
      ResizeObserver: _propTypes.default.func,
      scrollThreshold: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      showScrollbars: _propTypes.default.bool
    };
    exports.propTypes = propTypes2;
    InovuaScrollContainer.propTypes = propTypes2;
  })(src$b);
  return src$b;
}
var hasRequiredReactScrollContainerPro;
function requireReactScrollContainerPro() {
  if (hasRequiredReactScrollContainerPro)
    return reactScrollContainerPro;
  hasRequiredReactScrollContainerPro = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _src = _interopRequireWildcard(requireSrc$e());
    Object.keys(_src).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _src[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get2() {
          return _src[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _src.default;
    exports.default = _default2;
  })(reactScrollContainerPro);
  return reactScrollContainerPro;
}
var Arrow = {};
var hasRequiredArrow;
function requireArrow() {
  if (hasRequiredArrow)
    return Arrow;
  hasRequiredArrow = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Arrow, "__esModule", {
    value: true
  });
  Arrow.default = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var _isMobile = _interopRequireDefault2(requireIsMobile());
  var ARROWS = {
    right: _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M4.738 5.262L.632 9.368c-.144.144-.379.144-.524 0C.04 9.298 0 9.204 0 9.106V.894C0 .69.166.524.37.524c.099 0 .193.039.262.108l4.106 4.106c.145.145.145.38 0 .524z"
    }),
    left: _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M.262 4.738L4.368.632c.144-.144.379-.144.524 0C4.96.702 5 .796 5 .894v8.212c0 .204-.166.37-.37.37-.099 0-.193-.039-.262-.108L.262 5.262c-.145-.145-.145-.38 0-.524z"
    }),
    down: _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M4.738 4.738L.632.632C.488.488.488.253.632.108.702.04.796 0 .894 0h8.212c.204 0 .37.166.37.37 0 .099-.039.193-.108.262L5.262 4.738c-.145.145-.38.145-.524 0z"
    }),
    up: _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M5.262.262l4.106 4.106c.144.144.144.379 0 .524-.07.069-.164.108-.262.108H.894c-.204 0-.37-.166-.37-.37 0-.099.039-.193.108-.262L4.738.262c.145-.145.38-.145.524 0z"
    })
  };
  var Arrow$12 = function Arrow2(_ref2) {
    var name = _ref2.name, className = _ref2.className, _ref$size = _ref2.size, size2 = _ref$size === void 0 ? _isMobile.default ? 25 : 20 : _ref$size;
    return _react.default.createElement("svg", {
      className: "".concat(className, " ").concat(className, "--").concat(name),
      height: size2.height || size2,
      width: size2.width || size2,
      viewBox: "0 0 10 20"
    }, _react.default.createElement("g", {
      transform: "translate(2.5, 5)"
    }, ARROWS[name]));
  };
  var _default2 = Arrow$12;
  Arrow.default = _default2;
  return Arrow;
}
var hasRequiredArrowScroller$1;
function requireArrowScroller$1() {
  if (hasRequiredArrowScroller$1)
    return ArrowScroller;
  hasRequiredArrowScroller$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(ArrowScroller, "__esModule", {
    value: true
  });
  ArrowScroller.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _isMobile = _interopRequireDefault2(requireIsMobile());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _debounce = _interopRequireDefault2(requireDebounce());
  var _join = _interopRequireDefault2(requireJoin());
  var _Flex = requireFlex();
  var _NotifyResize = requireNotifyResize();
  var _InertialScroller = requireInertialScroller();
  var _ua = requireUa();
  var _reactScrollContainerPro = _interopRequireDefault2(requireReactScrollContainerPro());
  var _Arrow = _interopRequireDefault2(requireArrow());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var VIEW_STYLE_VERTICAL = {
    maxHeight: "100%"
  };
  var VIEW_STYLE_HORIZONTAL = {
    maxWidth: "100%"
  };
  var observe = function observe2(targetNode, callback2, cfg) {
    var config2 = cfg || {
      attributes: false,
      childList: true,
      subtree: true
    };
    var observer = new MutationObserver(callback2);
    observer.observe(targetNode, config2);
    return function() {
      observer.disconnect();
    };
  };
  var measureScrollSize = function measureScrollSize2(node2) {
    return {
      width: node2.scrollWidth,
      height: node2.scrollHeight
    };
  };
  var scrollerResizerProps = {
    useNativeIfAvailable: false,
    measureSize: measureScrollSize
  };
  var callAll = function callAll2() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      fns.forEach(function(fn) {
        fn && fn.apply(void 0, args);
      });
    };
  };
  var pint = globalObject.parseInt;
  var raf2 = globalObject.requestAnimationFrame;
  var getCompStyle = globalObject.getComputedStyle;
  var NO_SCROLLBARS = function NO_SCROLLBARS2() {
    return false;
  };
  var InovuaArrowScroller = function(_Component) {
    (0, _inherits2.default)(InovuaArrowScroller2, _Component);
    var _super = _createSuper(InovuaArrowScroller2);
    function InovuaArrowScroller2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaArrowScroller2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollerNodeClientSize", function(node2) {
        var result = {
          width: node2.firstChild.offsetWidth,
          height: node2.firstChild.offsetHeight
        };
        return result;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollContainerDidMount", function(scrollContainer, domNode, notifyResizer) {
        _this._unobserve = observe(domNode, function() {
          if (notifyResizer && notifyResizer.checkResize) {
            notifyResizer.checkResize();
          }
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollContainerWillUnmount", function() {
        if (_this._unobserve) {
          _this._unobserve();
        }
      });
      _this.scrollInfo = {
        scrollPos: 0,
        hasStartScroll: false,
        hasEndScroll: false,
        scrollerSize: {
          start: 0,
          end: 0
        }
      };
      _this.state = {
        scrolling: false,
        activeScroll: 0
      };
      _this.handleResize = (0, _debounce.default)(_this.handleResize.bind((0, _assertThisInitialized2.default)(_this)), 50, {
        leading: false,
        trailing: true
      });
      _this.updateScrollInfo = _this.updateScrollInfo.bind((0, _assertThisInitialized2.default)(_this));
      _this.rafUpdateScrollInfo = _this.rafUpdateScrollInfo.bind((0, _assertThisInitialized2.default)(_this));
      _this.onContainerScroll = _this.onContainerScroll.bind((0, _assertThisInitialized2.default)(_this));
      _this.strip = (0, _react.createRef)();
      _this.refScrollContainer = function(scrollContainer) {
        _this.scrollerTarget = scrollContainer;
      };
      _this.setRootRef = function(ref) {
        _this.root = ref;
        if (!_this.props.nativeScroll) {
          _this.scrollerTarget = _this.root;
        }
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaArrowScroller2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        this.componentIsMounted = true;
        raf2(function() {
          var name = _this2.getOffsetSizeName();
          _this2.scrollInfo.scrollerSize = {
            start: _this2.props.scroller === true ? _this2.start[name] : null,
            end: _this2.props.scroller === true ? _this2.end[name] : null
          };
          _this2.syncScroll({
            force: true
          });
          _this2.inertialManager = new _InertialScroller.InertialManager({
            arrowSelector: ".".concat(_this2.props.rootClassName, "__arrow"),
            node: _this2.root,
            viewNode: _this2.strip.current,
            setScrollPosition: function setScrollPosition() {
              return raf2(function() {
                return _this2.setScrollPosition();
              });
            },
            enableMouseDrag: false
          });
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.componentIsMounted = false;
        if (this.inertialManager) {
          this.inertialManager.removeEventListeners();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var useTransformOnScroll = props2.useTransformOnScroll, nativeScroll = props2.nativeScroll, vertical = props2.vertical, rootClassName = props2.rootClassName, rtl = props2.rtl, theme2 = props2.theme;
        var scrollInfo = this.scrollInfo;
        var scrollValue = rtl ? scrollInfo.scrollPos : -scrollInfo.scrollPos;
        var innerWrapperClassName = (0, _join.default)("".concat(rootClassName, "__inner-wrapper"), "".concat(rootClassName, "__inner-wrapper--direction-").concat(vertical ? "column" : "row"));
        var className = (0, _join.default)(props2.className, rootClassName, !vertical && "".concat(rootClassName, "--direction-horizontal"), vertical && "".concat(rootClassName, "--direction-vertical"), rtl && "".concat(rootClassName, "--rtl"), nativeScroll && "".concat(rootClassName, "--native-scroll"), theme2 && "".concat(rootClassName, "--theme-").concat(theme2));
        var moveStyle = {};
        if (useTransformOnScroll) {
          moveStyle.transform = "translate3d(0px, 0px, 0px)";
        }
        if (vertical) {
          if (useTransformOnScroll) {
            moveStyle.transform = "translate3d(0px, ".concat(scrollValue, "px, 0px)");
          } else {
            moveStyle.top = scrollValue;
          }
        } else {
          if (useTransformOnScroll) {
            moveStyle.transform = "translate3d(".concat(scrollValue, "px, 0px, 0px)");
          } else {
            moveStyle.left = scrollValue;
          }
        }
        var resizer = _react.default.createElement(_NotifyResize.NotifyResize, {
          key: "resizer",
          notifyOnMount: true,
          onResize: this.handleResize,
          notifyResizeDelay: props2.notifyResizeDelay
        });
        var children = [].concat((0, _toConsumableArray2.default)(_react.default.Children.toArray(props2.children)), [resizer]);
        var content = _react.default.createElement(_Flex.Flex, _objectSpread2(_objectSpread2({
          key: "content",
          wrap: false
        }, props2.childProps), {}, {
          className: innerWrapperClassName,
          ref: this.strip,
          children,
          style: nativeScroll ? null : moveStyle
        }));
        var finalChildren = [resizer, content, this.renderScroller(-1), this.renderScroller(1)];
        if (nativeScroll) {
          var scrollContainerProps = this.props.scrollContainerProps;
          var viewStyle = vertical ? VIEW_STYLE_VERTICAL : VIEW_STYLE_HORIZONTAL;
          if (scrollContainerProps && scrollContainerProps.viewStyle) {
            viewStyle = _objectSpread2(_objectSpread2({}, scrollContainerProps.viewStyle), viewStyle);
          }
          var style = {
            maxHeight: "100%"
          };
          var scrollerStyle;
          if (this.props.rtl) {
            viewStyle.direction = "rtl";
            viewStyle.maxWidth = "";
            style.alignItems = "flex-end";
            style.maxWidth = "100%";
            scrollerStyle = {
              alignItems: "flex-end"
            };
          }
          var prevChildren = finalChildren;
          finalChildren = _react.default.createElement(_reactScrollContainerPro.default, {
            applyCSSContainOnScroll: false,
            style,
            scrollerStyle,
            emptyScrollOffset: 20,
            getScrollerNodeClientSize: this.props.rtl ? this.getScrollerNodeClientSize : null,
            className: "".concat(this.props.rootClassName, "__scroll-container"),
            shouldAllowScrollbars: NO_SCROLLBARS,
            dragToScroll: false,
            nativeScroll: scrollContainerProps ? scrollContainerProps.nativeScroll !== void 0 ? scrollContainerProps.nativeScroll : false : false,
            viewStyle,
            ref: this.refScrollContainer,
            scrollerResizerProps,
            onDidMount: this.onScrollContainerDidMount,
            onWillUnmount: this.onScrollContainerWillUnmount,
            onResize: scrollContainerProps && scrollContainerProps.onResize ? callAll(scrollContainerProps.onResize, this.rafUpdateScrollInfo) : this.rafUpdateScrollInfo,
            children: prevChildren,
            onContainerScroll: this.onContainerScroll,
            theme: props2.theme
          });
          if (this.props.rtl) {
            finalChildren = [finalChildren, resizer];
          }
        }
        return _react.default.createElement(_Flex.Flex, _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, InovuaArrowScroller2.propTypes)), {}, {
          ref: this.setRootRef,
          className,
          alignItems: "start",
          children: finalChildren
        }));
      }
    }, {
      key: "renderScroller",
      value: function renderScroller(direction2) {
        var _this3 = this;
        var _this$props = this.props, scroller = _this$props.scroller, vertical = _this$props.vertical, rootClassName = _this$props.rootClassName, nativeScroll = _this$props.nativeScroll;
        if (!scroller) {
          return null;
        }
        var arrowName = vertical ? direction2 == (this.props.rtl ? 1 : -1) ? "up" : "down" : direction2 == (this.props.rtl ? 1 : -1) ? "left" : "right";
        var scrollInfo = this.scrollInfo;
        var disabled = direction2 == -1 ? !scrollInfo.hasStartScroll : !scrollInfo.hasEndScroll;
        var arrowRootClassName = "".concat(rootClassName, "__arrow");
        var className = (0, _join.default)(arrowRootClassName, "".concat(arrowRootClassName, "--auto"), "".concat(arrowRootClassName, "--direction-").concat(arrowName), this.state.activeScroll == direction2 && "".concat(arrowRootClassName, "--active"), scroller === "auto" && disabled && "".concat(arrowRootClassName, "--hidden"), scroller === "auto" && !disabled && "".concat(arrowRootClassName, "--visible"), scroller === true && disabled && "".concat(arrowRootClassName, "--disabled"), nativeScroll && "".concat(arrowRootClassName, "--native-scroll"));
        var onClick = !disabled && this.props.scrollOnClick ? this.handleClick.bind(this, direction2) : null;
        var onMouseDown = !disabled && (!this.props.scrollOnClick || _isMobile.default) ? this.startScroll.bind(this, direction2) : null;
        var onMouseEnter = !disabled && this.props.scrollOnMouseEnter ? this.startMouseOverScroll.bind(this, direction2) : null;
        var onMouseLeave = !this.props.scrollOnClick || _isMobile.default || this.props.scrollOnMouseEnter ? this.stopMouseOverScroll.bind(this, direction2) : null;
        var onDoubleClick = !disabled ? this.handleScrollMax.bind(this, direction2) : null;
        var scrollerName = direction2 == -1 ? "start" : "end";
        var domProps = {
          ref: function ref(_ref2) {
            _this3[scrollerName] = _ref2;
          },
          key: "scroller-".concat(direction2),
          disabled,
          className,
          onClick,
          onDoubleClick,
          onMouseDown: !_isMobile.default ? onMouseDown : null,
          onTouchStart: _isMobile.default ? onMouseDown : null,
          onTouchEnd: _isMobile.default ? onMouseLeave : null,
          onMouseEnter: !_isMobile.default ? onMouseEnter : null,
          onMouseLeave: !_isMobile.default ? onMouseLeave : null,
          children: this.renderArrowIcon(arrowName)
        };
        var result;
        if (typeof this.props.renderScroller === "function") {
          result = this.props.renderScroller({
            domProps,
            direction: direction2
          });
        }
        if (result === void 0) {
          result = _react.default.createElement("div", _objectSpread2({}, domProps));
        }
        return result;
      }
    }, {
      key: "renderArrowIcon",
      value: function renderArrowIcon(name) {
        var props2 = this.props;
        return _react.default.createElement(_Arrow.default, {
          name,
          size: props2.arrowSize,
          height: props2.arrowHeight,
          width: props2.arrowWidth,
          className: "".concat(this.props.rootClassName, "__arrow-icon")
        });
      }
    }, {
      key: "getOffsetSizeName",
      value: function getOffsetSizeName() {
        return this.props.vertical ? "offsetHeight" : "offsetWidth";
      }
    }, {
      key: "getBorderAndPaddingSize",
      value: function getBorderAndPaddingSize() {
        var node2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.root;
        var side = arguments.length > 1 ? arguments[1] : void 0;
        var computedStyle = getCompStyle(node2);
        var start;
        var end;
        if (this.props.vertical) {
          start = pint(computedStyle.borderTopWidth) + pint(computedStyle.paddingTop);
          end = pint(computedStyle.borderBottomWidth) + pint(computedStyle.paddingBottom);
          return start + end;
        } else {
          start = pint(computedStyle.borderLeftWidth) + pint(computedStyle.paddingLeft);
          end = pint(computedStyle.borderRightWidth) + pint(computedStyle.paddingRight);
        }
        return side ? side == "start" ? start : end : start + end;
      }
    }, {
      key: "getSizeName",
      value: function getSizeName() {
        return this.props.vertical ? "height" : "width";
      }
    }, {
      key: "getAvailableSize",
      value: function getAvailableSize() {
        if (!this.root) {
          return null;
        }
        var size2 = this.availableSize || (this.props.nativeScroll ? this.props.vertical ? this.scrollerTarget.scrollTopMax : this.scrollerTarget.scrollLeftMax : this.root[this.getOffsetSizeName()] - this.getBorderAndPaddingSize());
        if (this.props.rtl && size2 < 0) {
          size2 = -size2;
        }
        this.availableSize = size2;
        return size2;
      }
    }, {
      key: "getCurrentListSize",
      value: function getCurrentListSize() {
        if (!this.strip.current) {
          return null;
        }
        return this.currentListSize = this.currentListSize || this.strip.current[this.getOffsetSizeName()];
      }
    }, {
      key: "handleResize",
      value: function handleResize() {
        if (!this.componentIsMounted) {
          return;
        }
        delete this.currentListSize;
        delete this.availableSize;
        this.syncScroll({
          force: true
        });
      }
    }, {
      key: "handleScrollMax",
      value: function handleScrollMax(direction2, event2) {
        var _this4 = this;
        event2.stopPropagation();
        event2.preventDefault();
        var maxPos = direction2 == -1 ? 0 : this.scrollInfo.maxScrollPos;
        raf2(function() {
          _this4.setScrollPosition(maxPos);
        });
      }
    }, {
      key: "handleClick",
      value: function handleClick(direction2) {
        var offset = this.getAvailableSize();
        this.scrollBy(offset, direction2);
      }
    }, {
      key: "stopScroll",
      value: function stopScroll() {
        globalObject.clearInterval(this.scrollInterval);
        this.setState({
          scrolling: false,
          activeScroll: 0
        });
      }
    }, {
      key: "rafUpdateScrollInfo",
      value: function rafUpdateScrollInfo() {
        raf2(this.updateScrollInfo);
      }
    }, {
      key: "updateScrollInfo",
      value: function updateScrollInfo(count) {
        var _this5 = this;
        if (this.componentIsMounted === false) {
          return;
        }
        var availableSize = this.getAvailableSize();
        if (!availableSize) {
          if (!count || count < 5) {
            raf2(function() {
              _this5.updateScrollInfo((count || 0) + 1);
            });
            return;
          }
        }
        var listSize = this.getCurrentListSize();
        var scrollInfo = Object.assign(this.scrollInfo, {
          availableSize,
          listSize
        });
        if (this.props.nativeScroll) {
          if (this.scrollerTarget) {
            scrollInfo.maxScrollPos = this.props.vertical ? this.scrollerTarget.scrollTopMax : this.scrollerTarget.scrollLeftMax;
          }
        } else {
          if (listSize > availableSize) {
            scrollInfo.maxScrollPos = listSize - availableSize;
          } else {
            scrollInfo.maxScrollPos = 0;
          }
        }
        if (this.props.rtl && scrollInfo.maxScrollPos < 0) {
          scrollInfo.maxScrollPos = -scrollInfo.maxScrollPos;
        }
        scrollInfo.hasStartScroll = scrollInfo.scrollPos != 0;
        scrollInfo.hasEndScroll = scrollInfo.scrollPos < scrollInfo.maxScrollPos;
        var hasScroll = listSize > availableSize;
        if (hasScroll !== this.state.hasScroll) {
          this.props.onHasScrollChange(hasScroll);
        }
        this.setState({
          hasScroll
        });
      }
    }, {
      key: "startScroll",
      value: function startScroll(direction2, event2) {
        var _this6 = this;
        var eventName = _isMobile.default ? "touchend" : "mouseup";
        event2.preventDefault();
        var mouseUpListener = function mouseUpListener2() {
          _this6.stopScroll();
          globalObject.removeEventListener(eventName, mouseUpListener2);
        };
        globalObject.addEventListener(eventName, mouseUpListener);
        this.scrollInterval = globalObject.setInterval(this.doScroll.bind(this, direction2), this.props.scrollSpeed);
        this.setState({
          scrolling: true,
          activeScroll: direction2
        });
      }
    }, {
      key: "onContainerScroll",
      value: function onContainerScroll(_ref2) {
        var scrollTop = _ref2.scrollTop, scrollLeft = _ref2.scrollLeft;
        this.setScrollPosition(this.props.vertical ? scrollTop : scrollLeft, {
          skip: true
        });
      }
    }, {
      key: "startMouseOverScroll",
      value: function startMouseOverScroll(direction2, event2) {
        event2.preventDefault();
        globalObject.clearInterval(this.mouseOverScrollInterval);
        this.mouseOverScrollInterval = globalObject.setInterval(this.doScroll.bind(this, direction2), this.props.mouseoverScrollSpeed);
        this.setState({
          scrolling: true,
          activeScroll: direction2
        });
      }
    }, {
      key: "stopMouseOverScroll",
      value: function stopMouseOverScroll() {
        this.stopScroll();
        globalObject.clearInterval(this.mouseOverScrollInterval);
      }
    }, {
      key: "setScrollPosition",
      value: function setScrollPosition(scrollPos) {
        var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, force = _ref3.force, skip2 = _ref3.skip;
        if (!this.componentIsMounted) {
          return;
        }
        var scrollInfo = this.scrollInfo;
        if (scrollPos > scrollInfo.maxScrollPos) {
          scrollPos = scrollInfo.maxScrollPos;
        }
        if (scrollPos < 0) {
          scrollPos = 0;
        }
        if (scrollPos === scrollInfo.scrollPos && force !== true) {
          return null;
        }
        Object.assign(scrollInfo, {
          hasStartScroll: scrollPos !== 0,
          hasEndScroll: scrollPos < scrollInfo.maxScrollPos,
          scrollPos
        });
        if (!skip2 && this.props.nativeScroll && this.scrollerTarget) {
          if (this.props.vertical) {
            this.scrollerTarget.scrollTop = scrollPos;
          } else {
            this.scrollerTarget.scrollLeft = scrollPos;
          }
        }
        this.setState({});
      }
    }, {
      key: "syncScroll",
      value: function syncScroll() {
        var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, force = _ref4.force;
        this.updateScrollInfo();
        this.doScroll(0, null, {
          force
        });
      }
    }, {
      key: "scrollIntoView",
      value: function scrollIntoView(domNode) {
        var rootNode = this.root;
        if (!domNode || !rootNode) {
          return;
        }
        var rect = domNode.getBoundingClientRect();
        var mainRect = rootNode.getBoundingClientRect();
        var vertical = this.props.vertical;
        var startSideName = vertical ? "top" : "left";
        var endSideName = vertical ? "bottom" : "right";
        var startDiff = rect[startSideName] - (mainRect[startSideName] + this.getBorderAndPaddingSize(void 0, "start"));
        var endDiff = rect[endSideName] - (mainRect[endSideName] - this.getBorderAndPaddingSize(void 0, "end"));
        var scrollIntoViewOffset = this.props.scrollIntoViewOffset;
        if (startDiff < 0) {
          this.doScroll(-startDiff + scrollIntoViewOffset, -1);
        } else if (endDiff > 0) {
          this.doScroll(endDiff + scrollIntoViewOffset, 1);
        }
      }
    }, {
      key: "doScroll",
      value: function doScroll(direction2, step) {
        var _this7 = this;
        var _ref5 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, force = _ref5.force;
        var scrollInfo = this.scrollInfo;
        var newScrollPos = scrollInfo.scrollPos + direction2 * (step || this.props.scrollStep);
        raf2(function() {
          _this7.setScrollPosition(newScrollPos, {
            force
          });
        });
      }
    }, {
      key: "scrollBy",
      value: function scrollBy(offset, direction2) {
        var _this8 = this;
        var _ref6 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, force = _ref6.force;
        var scrollInfo = this.scrollInfo;
        var newScrollPos = scrollInfo.scrollPos + direction2 * offset;
        raf2(function() {
          _this8.setScrollPosition(newScrollPos, {
            force
          });
        });
      }
    }]);
    return InovuaArrowScroller2;
  }(_react.Component);
  var emptyFn = function emptyFn2() {
  };
  InovuaArrowScroller.defaultProps = {
    rootClassName: "inovua-react-toolkit-arrow-scroller",
    scroller: "auto",
    scrollStep: 15,
    mouseoverScrollSpeed: 40,
    scrollSpeed: 10,
    scrollSpringConfig: {
      stiffness: 370,
      damping: 60
    },
    scrollIntoViewOffset: 1,
    vertical: false,
    scrollOnClick: false,
    nativeScroll: !_ua.IS_IE,
    scrollOnMouseEnter: true,
    rtl: false,
    useTransformOnScroll: false,
    onHasScrollChange: emptyFn,
    theme: "default-light"
  };
  InovuaArrowScroller.propTypes = {
    arrowSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      width: _propTypes.default.number,
      height: _propTypes.default.number
    })]),
    theme: _propTypes.default.string,
    scrollOnClick: _propTypes.default.bool,
    childProps: _propTypes.default.object,
    scrollOnMouseEnter: _propTypes.default.bool,
    vertical: _propTypes.default.bool,
    notifyResizeDelay: _propTypes.default.number,
    scrollStep: _propTypes.default.number,
    scrollSpeed: _propTypes.default.number,
    mouseoverScrollSpeed: _propTypes.default.number,
    scrollSpringConfig: _propTypes.default.shape({
      stiffness: _propTypes.default.number,
      damping: _propTypes.default.number
    }),
    nativeScroll: _propTypes.default.bool,
    scrollIntoViewOffset: _propTypes.default.number,
    scroller: _propTypes.default.oneOf(["auto", false, true]),
    rootClassName: _propTypes.default.string,
    rtl: _propTypes.default.bool,
    scrollContainerProps: _propTypes.default.object,
    useTransformOnScroll: _propTypes.default.bool,
    onHasScrollChange: _propTypes.default.func,
    renderScroller: _propTypes.default.func
  };
  var _default2 = InovuaArrowScroller;
  ArrowScroller.default = _default2;
  return ArrowScroller;
}
var hasRequiredSrc$d;
function requireSrc$d() {
  if (hasRequiredSrc$d)
    return src$e;
  hasRequiredSrc$d = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$e, "__esModule", {
    value: true
  });
  src$e.default = void 0;
  var _ArrowScroller = _interopRequireDefault2(requireArrowScroller$1());
  var _default2 = _ArrowScroller.default;
  src$e.default = _default2;
  return src$e;
}
var hasRequiredArrowScroller;
function requireArrowScroller() {
  if (hasRequiredArrowScroller)
    return ArrowScroller$1;
  hasRequiredArrowScroller = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(ArrowScroller$1, "__esModule", {
    value: true
  });
  ArrowScroller$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$d());
  var _default2 = _src.default;
  ArrowScroller$1.default = _default2;
  return ArrowScroller$1;
}
var DropdownOverflow = {};
var DropdownButton$1 = {};
var src$a = {};
var DropdownButton = {};
var Menu$1 = {};
var src$9 = {};
var Menu = {};
var reactClass = {};
var hasRequiredReactClass;
function requireReactClass() {
  if (hasRequiredReactClass)
    return reactClass;
  hasRequiredReactClass = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Component = void 0;
    Object.defineProperty(exports, "autoBind", {
      enumerable: true,
      get: function get2() {
        return _autoBind.default;
      }
    });
    exports.default = void 0;
    var _createClass2 = _interopRequireDefault2(requireCreateClass());
    var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
    var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
    var _inherits2 = _interopRequireDefault2(requireInherits$1());
    var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
    var _react = _interopRequireDefault2(reactExports);
    var _autoBind = _interopRequireDefault2(requireAutoBind());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var ReactClass = function(_React$Component) {
      (0, _inherits2.default)(ReactClass2, _React$Component);
      var _super = _createSuper(ReactClass2);
      function ReactClass2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, ReactClass2);
        _this = _super.call(this, props2);
        (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      return (0, _createClass2.default)(ReactClass2);
    }(_react.default.Component);
    exports.Component = ReactClass;
    var _default2 = ReactClass;
    exports.default = _default2;
  })(reactClass);
  return reactClass;
}
var MenuItem = {};
var MenuItemCell = {};
var hasRequiredMenuItemCell;
function requireMenuItemCell() {
  if (hasRequiredMenuItemCell)
    return MenuItemCell;
  hasRequiredMenuItemCell = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(MenuItemCell, "__esModule", {
    value: true
  });
  MenuItemCell.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactClass = _interopRequireDefault2(requireReactClass());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var MenuItemCell$1 = function(_Component) {
    (0, _inherits2.default)(MenuItemCell2, _Component);
    var _super = _createSuper(MenuItemCell2);
    function MenuItemCell2() {
      (0, _classCallCheck2.default)(this, MenuItemCell2);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(MenuItemCell2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var cellProps = props2.cellProps, rootClassName = props2.rootClassName, align2 = props2.align, rtl = props2.rtl;
        var children = props2.expander || props2.children;
        var className = (0, _join.default)(props2.className, cellProps.className, "".concat(rootClassName, "__cell"), rtl ? "".concat(rootClassName, "__cell--rtl") : "".concat(rootClassName, "__cell--ltr"), props2.isDescription && "".concat(rootClassName, "__cell--secondaryLabel"), props2.isIcon && "".concat(rootClassName, "__cell--icon"));
        var style = _objectSpread2(_objectSpread2({}, props2.style), cellProps.style);
        if (align2) {
          style.textAlign = align2;
        }
        return _react.default.createElement("td", _objectSpread2(_objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, MenuItemCell2.propTypes)), cellProps), {}, {
          style,
          className
        }), children);
      }
    }]);
    return MenuItemCell2;
  }(_reactClass.default);
  MenuItemCell.default = MenuItemCell$1;
  MenuItemCell$1.defaultProps = {
    cellProps: {}
  };
  MenuItemCell$1.propTypes = {
    isDescription: _propTypes.default.bool,
    isIcon: _propTypes.default.bool,
    rootClassName: _propTypes.default.string,
    column: _propTypes.default.object,
    cellProps: _propTypes.default.object,
    rtl: _propTypes.default.bool,
    expander: _propTypes.default.node,
    align: _propTypes.default.oneOf(["start", "end", "center", "left", "right"])
  };
  return MenuItemCell;
}
var Expander = {};
var hasRequiredExpander;
function requireExpander() {
  if (hasRequiredExpander)
    return Expander;
  hasRequiredExpander = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Expander, "__esModule", {
    value: true
  });
  Expander.default = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var _join = _interopRequireDefault2(requireJoin$3());
  var Expander$1 = function Expander2(_ref2) {
    var className = _ref2.className, rootClassName = _ref2.rootClassName, _ref$size = _ref2.size, size2 = _ref$size === void 0 ? 20 : _ref$size, onClick = _ref2.onClick, fill2 = _ref2.fill, rtl = _ref2.rtl;
    return _react.default.createElement("div", {
      className: "".concat(rootClassName, "__expander-wrapper")
    }, _react.default.createElement("div", {
      className: "".concat(rootClassName, "__expander-icon")
    }, _react.default.createElement("svg", {
      className: (0, _join.default)(className, "".concat(rootClassName, "__expander")),
      onClick,
      fill: fill2,
      height: size2,
      width: size2 / 2,
      viewBox: "0 0 5 10"
    }, rtl ? _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M.262 4.738L4.368.632c.144-.144.379-.144.524 0C4.96.702 5 .796 5 .894v8.212c0 .204-.166.37-.37.37-.099 0-.193-.039-.262-.108L.262 5.262c-.145-.145-.145-.38 0-.524z"
    }) : _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M4.738 5.262L.632 9.368c-.144.144-.379.144-.524 0C.04 9.298 0 9.204 0 9.106V.894C0 .69.166.524.37.524c.099 0 .193.039.262.108l4.106 4.106c.145.145.145.38 0 .524z"
    }))));
  };
  Expander$1.isExpander = true;
  var _default2 = Expander$1;
  Expander.default = _default2;
  return Expander;
}
var renderCell = {};
var hasRequiredRenderCell;
function requireRenderCell() {
  if (hasRequiredRenderCell)
    return renderCell;
  hasRequiredRenderCell = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderCell, "__esModule", {
    value: true
  });
  renderCell.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _react = _interopRequireDefault2(reactExports);
  var _assign = _interopRequireDefault2(requireAssign());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _MenuItemCell = _interopRequireDefault2(requireMenuItemCell());
  var _default2 = function _default3(props2, column2, index2, columns) {
    var hasSubmenu = props2.hasSubmenu, rootClassName = props2.rootClassName;
    var globalCellStyle = props2.globalCellStyle;
    var item = props2.items && props2.items[index2];
    if (typeof globalCellStyle == "function") {
      globalCellStyle = globalCellStyle({
        index: index2,
        columns,
        items: props2.items,
        item,
        hasSubmenu
      });
    }
    var style = (0, _assign.default)({}, globalCellStyle);
    var isLast = index2 === columns.length - 1;
    var cellProps = (0, _assign.default)({}, props2.cellProps);
    if (isLast && props2.siblingItemHasSubMenu && !props2.item.items)
      ;
    var children;
    if (column2 && typeof column2.render == "function") {
      children = column2.render(props2.item, {
        column: column2,
        columns,
        index: index2,
        items: props2.items,
        item,
        hasSubmenu
      });
    } else {
      var columnName = typeof column2 == "string" ? column2 : column2.name;
      children = props2.item[columnName];
    }
    if ((0, _typeof2.default)(column2) === "object") {
      if (column2.colSpan) {
        cellProps.colSpan = column2.colSpan;
      }
    }
    if (column2.style) {
      var columnStyle;
      if (typeof column2.style === "function") {
        columnStyle = column2.style({
          index: index2,
          columns,
          items: props2.items,
          item,
          hasSubmenu
        });
      } else {
        columnStyle = column2.style;
      }
      (0, _assign.default)(style, columnStyle);
    }
    var className = column2.className;
    if (item) {
      if (item.cellStyle) {
        (0, _assign.default)(style, item.cellStyle);
      }
      if (item.className) {
        className = (0, _join.default)(className, item.cellClassName);
      }
    }
    if (props2.style) {
      (0, _assign.default)(style, props2.style);
    }
    return _react.default.createElement(_MenuItemCell.default, {
      style,
      className,
      key: index2,
      rootClassName,
      cellProps,
      isDescription: column2.isDescription,
      isIcon: column2.isIcon,
      align: column2.align
    }, children);
  };
  renderCell.default = _default2;
  return renderCell;
}
var CheckBox$1 = {};
var src$8 = {};
var CheckBox = {};
var getClassNames = {};
var hasRequiredGetClassNames;
function requireGetClassNames() {
  if (hasRequiredGetClassNames)
    return getClassNames;
  hasRequiredGetClassNames = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getClassNames, "__esModule", {
    value: true
  });
  getClassNames.default = void 0;
  var _join = _interopRequireDefault2(requireJoin$3());
  var getClassNames$1 = function getClassNames2(props2) {
    var state2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, checked = _ref2.checked;
    var rtl = props2.rtl, inlineBlock = props2.inlineBlock, readOnly = props2.readOnly, readOnlyClassName = props2.readOnlyClassName, theme2 = props2.theme, disabled = props2.disabled, disabledClassName = props2.disabledClassName, focusedClassName = props2.focusedClassName, className = props2.className, childrenPosition = props2.childrenPosition;
    var focused = state2.focused;
    return (0, _join.default)(props2.rootClassName, className, childrenPosition && "".concat(props2.rootClassName, "--children-position-").concat(childrenPosition), rtl ? "".concat(props2.rootClassName, "--rtl") : "".concat(props2.rootClassName, "--ltr"), readOnly && (0, _join.default)("".concat(props2.rootClassName, "--read-only"), readOnlyClassName), focused && (0, _join.default)("".concat(props2.rootClassName, "--focused"), focusedClassName), disabled && (0, _join.default)("".concat(props2.rootClassName, "--disabled"), disabledClassName), inlineBlock && "".concat(props2.rootClassName, "--inline-block"), checked === true ? "".concat(props2.rootClassName, "--checked") : checked === false ? "".concat(props2.rootClassName, "--unchecked") : "".concat(props2.rootClassName, "--indeterminate"), theme2 && "".concat(props2.rootClassName, "--theme-").concat(theme2));
  };
  var _default2 = getClassNames$1;
  getClassNames.default = _default2;
  return getClassNames;
}
var icons = {};
var hasRequiredIcons;
function requireIcons() {
  if (hasRequiredIcons)
    return icons;
  hasRequiredIcons = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(icons, "__esModule", {
    value: true
  });
  icons.uncheckedIcon = icons.indeterminateIcon = icons.checkedIcon = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var checkedIcon = function checkedIcon2(_ref2) {
    var style = _ref2.style, _ref$size = _ref2.size, size2 = _ref$size === void 0 ? 16 : _ref$size, className = _ref2.className;
    return _react.default.createElement("svg", {
      width: size2,
      height: size2,
      style,
      className,
      viewBox: "0 0 16 16"
    }, _react.default.createElement("g", {
      fillRule: "evenodd"
    }, _react.default.createElement("rect", {
      width: size2,
      height: size2,
      stroke: "none",
      rx: "1"
    }), _react.default.createElement("path", {
      fill: "none",
      strokeLinecap: "round",
      strokeWidth: "2",
      d: "M3.357 9.018L7.229 12 12.613 5"
    })));
  };
  icons.checkedIcon = checkedIcon;
  var uncheckedIcon = function uncheckedIcon2(_ref2) {
    var style = _ref2.style, _ref2$size = _ref2.size, size2 = _ref2$size === void 0 ? 16 : _ref2$size, className = _ref2.className;
    return _react.default.createElement("svg", {
      width: size2,
      height: size2,
      className,
      style,
      viewBox: "0 0 16 16"
    }, _react.default.createElement("rect", {
      width: size2 - 2,
      height: size2 - 2,
      x: "1",
      y: "1",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: "2",
      rx: "1"
    }));
  };
  icons.uncheckedIcon = uncheckedIcon;
  var indeterminateIcon = function indeterminateIcon2(_ref3) {
    var style = _ref3.style, _ref3$size = _ref3.size, size2 = _ref3$size === void 0 ? 16 : _ref3$size, className = _ref3.className;
    return _react.default.createElement("svg", {
      width: size2,
      height: size2,
      style,
      className,
      viewBox: "0 0 16 16"
    }, _react.default.createElement("g", {
      fillRule: "evenodd"
    }, _react.default.createElement("g", null, _react.default.createElement("rect", {
      width: size2,
      height: size2,
      fill: "none",
      rx: "1"
    })), _react.default.createElement("g", null, _react.default.createElement("rect", {
      width: "10",
      height: "2",
      x: "3",
      y: "7",
      rx: "1"
    }))));
  };
  icons.indeterminateIcon = indeterminateIcon;
  return icons;
}
var hasRequiredCheckBox$1;
function requireCheckBox$1() {
  if (hasRequiredCheckBox$1)
    return CheckBox;
  hasRequiredCheckBox$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(CheckBox, "__esModule", {
    value: true
  });
  CheckBox.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactClass = requireReactClass();
  var _uglified = _interopRequireDefault2(requireUglified());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _assign = _interopRequireDefault2(requireAssign());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _getClassNames = _interopRequireDefault2(requireGetClassNames());
  var _icons = requireIcons();
  var _InovuaCheckBox$propT;
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  function ownKeys2(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var stopPropagation = function stopPropagation2(e2) {
    return e2.stopPropagation();
  };
  var isValidCheckValue = function isValidCheckValue2(value, props2) {
    return value === props2.checkedValue || value === props2.uncheckedValue || value === props2.indeterminateValue && props2.supportIndeterminate;
  };
  var nextValue = function nextValue2(oldValue, props2) {
    if (oldValue === props2.checkedValue) {
      return props2.uncheckedValue;
    }
    if (oldValue === props2.uncheckedValue) {
      return props2.supportIndeterminate ? props2.indeterminateValue : props2.checkedValue;
    }
    if (props2.supportIndeterminate && oldValue === props2.indeterminateValue) {
      return props2.checkedValue;
    }
    return props2.uncheckedValue;
  };
  var getComponentStyle = function getComponentStyle2(props2, state2) {
    var focused = state2.focused;
    var disabled = props2.disabled, focusedStyle = props2.focusedStyle, disabledStyle = props2.disabledStyle, readOnly = props2.readOnly, readOnlyStyle = props2.readOnlyStyle, style = props2.style;
    var styles2 = [style || {}];
    if (focused) {
      styles2.push(focusedStyle);
    }
    if (disabled) {
      styles2.push(disabledStyle);
    }
    if (readOnly) {
      styles2.push(readOnlyStyle);
    }
    return _assign.default.apply(void 0, [{}].concat(styles2));
  };
  var getComputedIconStyle = function getComputedIconStyle2(config2) {
    var focused = config2.focused, disabled = config2.disabled, focusedIconStyle = config2.focusedIconStyle, disabledIconStyle = config2.disabledIconStyle, iconStyle = config2.iconStyle;
    var styles2 = [iconStyle];
    styles2.push(getIconSizeStyle(config2));
    if (focused) {
      styles2.push(focusedIconStyle);
    }
    if (disabled) {
      styles2.push(disabledIconStyle);
    }
    return _assign.default.apply(void 0, [{}].concat(styles2));
  };
  var getIconClassName = function getIconClassName2(props2) {
    var iconClassName = "";
    if (props2.iconClassName) {
      iconClassName = props2.iconClassName;
    }
    if (props2.disabled && props2.disabledIconClassName) {
      iconClassName = (0, _join.default)(iconClassName, props2.disabledIconClassName);
    }
    if (props2.focused && props2.focusedIconClassName) {
      iconClassName = (0, _join.default)(iconClassName, props2.focusedIconClassName);
    }
    if (props2.readOnly && props2.readOnlyIconClassName) {
      iconClassName = (0, _join.default)(iconClassName, props2.readOnlyIconClassName);
    }
    return iconClassName;
  };
  var renderIconFunctionOrJSX = function renderIconFunctionOrJSX2(iconRender, props2, _ref2) {
    var style = _ref2.style, className = _ref2.className;
    if (typeof iconRender === "function") {
      return iconRender({
        style,
        className
      }, props2);
    }
    return _react.default.cloneElement(iconRender, {
      style: _objectSpread2(_objectSpread2({}, iconRender.props.style), style),
      className: (0, _join.default)(iconRender.props.className, className)
    });
  };
  var renderCheckedIcon = function renderCheckedIcon2(props2, iconProps) {
    var checkedIcon = props2.checkedIcon, checkedIconSrc = props2.checkedIconSrc;
    if (checkedIconSrc) {
      return _react.default.createElement("img", _objectSpread2(_objectSpread2({}, iconProps), {}, {
        src: checkedIconSrc
      }));
    }
    return renderIconFunctionOrJSX(checkedIcon, props2, iconProps);
  };
  var renderUncheckedIcon = function renderUncheckedIcon2(props2, iconProps) {
    var uncheckedIcon = props2.uncheckedIcon, uncheckedIconSrc = props2.uncheckedIconSrc;
    if (uncheckedIconSrc) {
      return _react.default.createElement("img", _objectSpread2(_objectSpread2({}, iconProps), {}, {
        src: uncheckedIconSrc
      }));
    }
    return renderIconFunctionOrJSX(uncheckedIcon, props2, iconProps);
  };
  var renderIndeterminateIcon = function renderIndeterminateIcon2(props2, iconProps) {
    var indeterminateIcon = props2.indeterminateIcon, indeterminateIconSrc = props2.indeterminateIconSrc;
    if (indeterminateIconSrc) {
      return _react.default.createElement("img", _objectSpread2(_objectSpread2({}, iconProps), {}, {
        src: indeterminateIconSrc
      }));
    }
    return renderIconFunctionOrJSX(indeterminateIcon, props2, iconProps);
  };
  var renderIcon = function renderIcon2(config2) {
    var checkedDescriptor = getCheckedDescriptor(config2.checked, config2);
    var checkBoxIconStyle = getComputedIconStyle(config2);
    var iconProps = {
      className: getIconClassName(config2),
      style: checkBoxIconStyle
    };
    switch (checkedDescriptor) {
      case CHECKED_STATE:
        return renderCheckedIcon(config2, iconProps);
      case UNCHECKED_STATE:
        return renderUncheckedIcon(config2, iconProps);
      case INDETERMINATE_STATE:
        return renderIndeterminateIcon(config2, iconProps);
    }
  };
  var getIconSizeStyle = function getIconSizeStyle2(props2) {
    var style = {};
    var iconSize = props2.iconSize;
    if (Array.isArray(iconSize)) {
      style.width = iconSize[0];
      style.height = iconSize[1];
    } else {
      style.width = style.height = iconSize;
    }
    return style;
  };
  var CHECKED_STATE = "checked";
  var UNCHECKED_STATE = "unchecked";
  var INDETERMINATE_STATE = "indeterminate";
  var getCheckedDescriptor = function getCheckedDescriptor2(checked, props2) {
    var checkedValue = props2.checkedValue, supportIndeterminate = props2.supportIndeterminate, indeterminateValue = props2.indeterminateValue;
    if (checked === checkedValue) {
      return CHECKED_STATE;
    }
    if (supportIndeterminate && checked === indeterminateValue) {
      return INDETERMINATE_STATE;
    }
    return UNCHECKED_STATE;
  };
  var renderHiddenInput = function renderHiddenInput2(props2) {
    var withHiddenInput = props2.withHiddenInput, name = props2.name;
    var checked = props2.checked;
    var checkedDescriptor = getCheckedDescriptor(checked, props2);
    switch (checkedDescriptor) {
      case CHECKED_STATE:
        checked = props2.checkedSubmitValue === void 0 ? props2.checkedValue : props2.checkedSubmitValue;
        break;
      case UNCHECKED_STATE:
        checked = props2.uncheckedSubmitValue === void 0 ? props2.uncheckedValue : props2.uncheckedSubmitValue;
        break;
      case INDETERMINATE_STATE:
        checked = props2.indeterminateSubmitValue === void 0 ? props2.indeterminateValue : props2.indeterminateSubmitValue;
    }
    if (checked === null) {
      checked = "";
    }
    if (withHiddenInput) {
      return _react.default.createElement("input", {
        type: "hidden",
        name,
        value: checked
      });
    }
    return null;
  };
  var getChecked = function getChecked2(props2, state2) {
    var checked = isControlledComponent(props2) ? props2.checked : state2.checked;
    return isValidCheckValue(checked, props2) ? checked : props2.uncheckedValue;
  };
  var isControlledComponent = function isControlledComponent2(props2) {
    return props2.checked !== void 0;
  };
  var InovuaCheckBox = function(_Component) {
    (0, _inherits2.default)(InovuaCheckBox2, _Component);
    var _super = _createSuper(InovuaCheckBox2);
    function InovuaCheckBox2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaCheckBox2);
      _this = _super.call(this, props2);
      (0, _reactClass.autoBind)((0, _assertThisInitialized2.default)(_this));
      var defaultChecked = props2.defaultChecked, uncheckedValue = props2.uncheckedValue;
      _this.state = {
        checked: isValidCheckValue(defaultChecked, props2) ? defaultChecked : uncheckedValue
      };
      _this.checkboxRef = (0, _react.createRef)();
      return _this;
    }
    (0, _createClass2.default)(InovuaCheckBox2, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this.checkUpdateIndeterminate(this.p);
        if (prevProps.supportIndeterminate && !this.props.supportIndeterminate) {
          this.setNativeIndeterminate(false);
        }
        if (!prevProps.autoFocus && this.props.autoFocus && !this.isFocused()) {
          this.focus();
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.checkUpdateIndeterminate();
        if (this.props.autoFocus) {
          this.focus();
        }
      }
    }, {
      key: "focus",
      value: function focus() {
        this.checkboxRef.current.focus();
      }
    }, {
      key: "checkUpdateIndeterminate",
      value: function checkUpdateIndeterminate() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.p;
        if (props2.browserNative && props2.supportIndeterminate) {
          this.setNativeIndeterminate(getCheckedDescriptor(props2.checked, props2) === INDETERMINATE_STATE);
        }
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this.state.focused;
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(event2) {
        var onFocus3 = this.p.onFocus;
        this.setState({
          focused: true
        });
        onFocus3 && onFocus3(event2);
      }
    }, {
      key: "handleBlur",
      value: function handleBlur(event2) {
        var onBlur3 = this.p.onBlur;
        this.setState({
          focused: false
        });
        onBlur3 && onBlur3(event2);
      }
    }, {
      key: "changeToNextValue",
      value: function changeToNextValue(event2) {
        var _this$p = this.p, readOnly = _this$p.readOnly, checked = _this$p.checked, nextValue2 = _this$p.nextValue;
        if (readOnly) {
          return;
        }
        var nextCheckedValue = nextValue2(checked, this.p);
        this.setChecked(nextCheckedValue, event2);
      }
    }, {
      key: "setChecked",
      value: function setChecked(value, event2) {
        var _this$p2 = this.p, disabled = _this$p2.disabled, onChange = _this$p2.onChange;
        if (disabled) {
          return;
        }
        if (!isValidCheckValue(value, this.p)) {
          return;
        }
        if (!isControlledComponent(this.props)) {
          this.setState({
            checked: value
          });
        }
        if (typeof onChange == "function") {
          onChange(value, event2);
        }
      }
    }, {
      key: "handleClick",
      value: function handleClick(event2) {
        var _this$p3 = this.p, onClick = _this$p3.onClick, disabled = _this$p3.disabled;
        if (disabled) {
          return;
        }
        this.changeToNextValue(event2);
        if (onClick) {
          onClick(event2);
        }
      }
    }, {
      key: "handleKeyDown",
      value: function handleKeyDown(event2) {
        var onKeyDown = this.p.onKeyDown;
        if (event2.key === " ") {
          event2.preventDefault();
          this.changeToNextValue(event2);
        }
        if (typeof onKeyDown == "function") {
          onKeyDown(event2);
        }
      }
    }, {
      key: "getProps",
      value: function getProps(props2, state2) {
        var checked = getChecked(props2, state2);
        var style = getComponentStyle(props2, state2);
        var className = (0, _getClassNames.default)(props2, state2, {
          checked
        });
        var shouldSubmitIsFunction = typeof props2.shouldSubmit === "function";
        var shouldSubmitValue = shouldSubmitIsFunction ? props2.shouldSubmit(checked, props2) : typeof props2.shouldSubmit === "undefined" || props2.shouldSubmit;
        if (props2.showWarnings && shouldSubmitIsFunction && shouldSubmitValue && !props2.name) {
          console.warn('shouldSubmit function returned true, but "name" prop is missing');
        }
        var withHiddenInput = !!(props2.name && shouldSubmitValue);
        var focused = state2.focused;
        return _objectSpread2(_objectSpread2({}, props2), {}, {
          checked,
          style,
          withHiddenInput,
          focused,
          className
        });
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props, state2 = this.state;
        var _this$p4 = this.p = this.getProps(props2, state2), children = _this$p4.children, className = _this$p4.className, style = _this$p4.style, tabIndex = _this$p4.tabIndex, iconCheckOnly = _this$p4.iconCheckOnly, browserNative = _this$p4.browserNative;
        _this$p4.focusable;
        var eventHandlers = {
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown
        };
        if (!iconCheckOnly) {
          eventHandlers.onClick = this.handleClick;
        }
        var domProps = _objectSpread2(_objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, InovuaCheckBox2.propTypes)), eventHandlers), {}, {
          className,
          style,
          ref: this.checkboxRef,
          tabIndex: props2.disabled === true ? null : tabIndex
        });
        if (!props2.focusable) {
          delete domProps.tabIndex;
        }
        return browserNative ? this.renderBrowserNative(domProps) : _react.default.createElement("div", _objectSpread2({}, domProps), this.renderCheckbox(this.p, iconCheckOnly && {
          onClick: this.handleClick
        }), children && _react.default.createElement("div", {
          className: "".concat(props2.rootClassName, "__inner-content-wrapper")
        }, children));
      }
    }, {
      key: "renderBrowserNative",
      value: function renderBrowserNative(domProps) {
        var _this$props = this.props, children = _this$props.children, iconCheckOnly = _this$props.iconCheckOnly;
        var Factory = iconCheckOnly ? "div" : "label";
        return _react.default.createElement(Factory, _objectSpread2(_objectSpread2({}, domProps), {}, {
          onClick: this.props.onClick,
          onChange: stopPropagation
        }), this.renderBrowserNativeInput(), children);
      }
    }, {
      key: "renderBrowserNativeInput",
      value: function renderBrowserNativeInput() {
        var _this2 = this;
        var _this$p5 = this.p, tabIndex = _this$p5.tabIndex, rootClassName = _this$p5.rootClassName, disabled = _this$p5.disabled, checked = _this$p5.checked, renderNativeBrowserInput2 = _this$p5.renderNativeBrowserInput, withHiddenInput = _this$p5.withHiddenInput, name = _this$p5.name;
        var className = (0, _join.default)(this.p.className, "".concat(rootClassName, "--browser-native"));
        var inputProps = {
          disabled,
          className,
          type: "checkbox",
          ref: function ref(_ref2) {
            return _this2.node = _ref2;
          },
          onClick: this.handleClick,
          checked: !!checked,
          tabIndex: disabled === true ? null : tabIndex
        };
        if (withHiddenInput) {
          inputProps.name = name;
        }
        var result;
        if (typeof renderNativeBrowserInput2 === "function") {
          result = renderNativeBrowserInput2({
            inputProps,
            props: this.p
          });
        }
        if (result === void 0) {
          result = _react.default.createElement("input", _objectSpread2({}, inputProps));
        }
        return result;
      }
    }, {
      key: "renderCheckbox",
      value: function renderCheckbox2(config2, eventHandlers) {
        var input = config2.disabled !== true && renderHiddenInput(config2);
        var icon = renderIcon(config2);
        var domProps = {};
        if (config2.disabled) {
          domProps.disabled = "disabled";
        }
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({
          className: "".concat(config2.rootClassName, "__icon-wrapper")
        }, domProps), eventHandlers), input, icon);
      }
    }, {
      key: "setNativeIndeterminate",
      value: function setNativeIndeterminate(indeterminate) {
        if (this.node) {
          this.node.indeterminate = indeterminate;
        }
      }
    }]);
    return InovuaCheckBox2;
  }(_react.Component);
  InovuaCheckBox.defaultProps = {
    rootClassName: "inovua-react-toolkit-checkbox",
    browserNative: false,
    iconStyle: {},
    disabledIconStyle: {},
    focusedIconStyle: {},
    disabledStyle: {},
    readOnlyStyle: {},
    focusedStyle: {},
    supportIndeterminate: false,
    focusable: true,
    disabled: false,
    readOnly: false,
    tabIndex: 0,
    checkedValue: true,
    uncheckedValue: false,
    indeterminateValue: null,
    checkedSubmitValue: void 0,
    uncheckedSubmitValue: void 0,
    indeterminateSubmitValue: void 0,
    checked: void 0,
    defaultChecked: void 0,
    iconSize: 16,
    checkedIcon: _icons.checkedIcon,
    uncheckedIcon: _icons.uncheckedIcon,
    indeterminateIcon: _icons.indeterminateIcon,
    iconCheckOnly: false,
    shouldSubmit: void 0,
    nextValue,
    childrenPosition: "end",
    inlineBlock: true,
    theme: "default-light",
    showWarnings: !_uglified.default
  };
  var func = _propTypes.default.func, number2 = _propTypes.default.number, object = _propTypes.default.object, string = _propTypes.default.string, bool = _propTypes.default.bool, any = _propTypes.default.any;
  var nonNullPropType = function nonNullPropType2(props2, propName, componentName) {
    if (props2[propName] === null) {
      return new Error("".concat(propName, " is null in ").concat(componentName, ". This is not valid for input; use undefined instead."));
    }
    return null;
  };
  InovuaCheckBox.propTypes = (_InovuaCheckBox$propT = {
    rootClassName: string,
    browserNative: bool,
    focusable: bool,
    renderNativeBrowserInput: func,
    shouldSubmit: function shouldSubmit(props2, propName, componentName) {
      if (props2.shouldSubmit && typeof props2.shouldSubmit !== "function" && !props2.name) {
        return new Error('"shouldSubmit" was true, but component '.concat(componentName, ' requires prop "name" to be submitted.'));
      }
    },
    value: function value(props2) {
      if (typeof props2.value !== "undefined") {
        return new Error('"value" prop is not supported. Use "checked" instead.');
      }
    },
    defaultValue: function defaultValue(props2) {
      if (typeof props2.defaultValue !== "undefined") {
        return new Error('"defaultValue" prop is not supported. Use "checked" instead.');
      }
    },
    nextValue: func,
    name: string,
    iconClassName: string,
    readOnlyClassName: string,
    disabledClassName: string,
    focusedClassName: string,
    checked: any,
    defaultChecked: any,
    disabled: bool,
    readOnly: bool,
    tabIndex: number2,
    supportIndeterminate: bool,
    checkedValue: any,
    uncheckedValue: any,
    indeterminateValue: any,
    checkedSubmitValue: nonNullPropType,
    uncheckedSubmitValue: nonNullPropType,
    indeterminateSubmitValue: nonNullPropType,
    iconSize: _propTypes.default.oneOfType([string, _propTypes.default.arrayOf([string]), number2, _propTypes.default.arrayOf(number2)]),
    checkedIconSrc: string,
    checkedIcon: any,
    iconCheckOnly: bool,
    uncheckedIconSrc: string,
    uncheckedIcon: any,
    indeterminateIconSrc: string,
    indeterminateIcon: any,
    childrenPosition: _propTypes.default.oneOf(["start", "end"]),
    inlineBlock: bool,
    rtl: bool,
    theme: string,
    iconStyle: object,
    disabledIconStyle: object,
    focusedIconStyle: object
  }, (0, _defineProperty2.default)(_InovuaCheckBox$propT, "iconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "disabledIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "focusedIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "readOnlyIconClassName", string), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "disabledStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "readOnlyStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "focusedStyle", object), (0, _defineProperty2.default)(_InovuaCheckBox$propT, "showWarnings", bool), _InovuaCheckBox$propT);
  var _default2 = InovuaCheckBox;
  CheckBox.default = _default2;
  return CheckBox;
}
var hasRequiredSrc$c;
function requireSrc$c() {
  if (hasRequiredSrc$c)
    return src$8;
  hasRequiredSrc$c = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$8, "__esModule", {
    value: true
  });
  src$8.default = void 0;
  var _CheckBox = _interopRequireDefault2(requireCheckBox$1());
  var _default2 = _CheckBox.default;
  src$8.default = _default2;
  return src$8;
}
var hasRequiredCheckBox;
function requireCheckBox() {
  if (hasRequiredCheckBox)
    return CheckBox$1;
  hasRequiredCheckBox = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(CheckBox$1, "__esModule", {
    value: true
  });
  CheckBox$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$c());
  var _default2 = _src.default;
  CheckBox$1.default = _default2;
  return CheckBox$1;
}
var RadioButton$1 = {};
var src$7 = {};
var RadioButton = {};
var hasRequiredRadioButton$1;
function requireRadioButton$1() {
  if (hasRequiredRadioButton$1)
    return RadioButton;
  hasRequiredRadioButton$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(RadioButton, "__esModule", {
    value: true
  });
  RadioButton.default = void 0;
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _CheckBox = _interopRequireDefault2(requireCheckBox());
  var _join = _interopRequireDefault2(requireJoin$3());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var defaultCheckedIcon = function defaultCheckedIcon2(_ref2) {
    var style = _ref2.style, _ref$size = _ref2.size, size2 = _ref$size === void 0 ? 16 : _ref$size;
    return _react.default.createElement("svg", {
      style,
      width: size2,
      height: size2,
      viewBox: "0 0 16 16"
    }, _react.default.createElement("circle", {
      cx: "8",
      cy: "8",
      r: "7",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: "2"
    }), _react.default.createElement("circle", {
      cx: "8",
      cy: "8",
      r: "3",
      fillRule: "evenodd",
      stroke: "none"
    }));
  };
  var defaultUncheckedIcon = function defaultUncheckedIcon2(_ref2) {
    var style = _ref2.style, _ref2$size = _ref2.size, size2 = _ref2$size === void 0 ? 16 : _ref2$size;
    return _react.default.createElement("svg", {
      style,
      width: size2,
      height: size2,
      viewBox: "0 0 16 16"
    }, _react.default.createElement("circle", {
      cx: "8",
      cy: "8",
      r: "7",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: "2"
    }));
  };
  var InovuaRadioButton = function(_Component) {
    (0, _inherits2.default)(InovuaRadioButton2, _Component);
    var _super = _createSuper(InovuaRadioButton2);
    function InovuaRadioButton2() {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaRadioButton2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderNativeBrowserInput", function(config2) {
        if (props.renderNativeBrowserInput) {
          return renderNativeBrowserInput(config2);
        }
        config2.inputProps.type = "radio";
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "render", function() {
        var props2 = _this.props;
        var checkedIcon = defaultCheckedIcon || props2.checkedIcon;
        var uncheckedIcon = defaultUncheckedIcon || props2.uncheckedIcon;
        var className = (0, _join.default)("".concat(props2.rootClassName), props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme));
        var checkboxProps = _objectSpread2(_objectSpread2({}, props2), {}, {
          className,
          checkedIcon,
          uncheckedIcon,
          renderNativeBrowserInput: _this.renderNativeBrowserInput
        });
        return _react.default.createElement(_CheckBox.default, _objectSpread2({}, checkboxProps));
      });
      return _this;
    }
    return (0, _createClass2.default)(InovuaRadioButton2);
  }(_react.Component);
  InovuaRadioButton.defaultProps = {
    theme: "default-light",
    rootClassName: "inovua-react-toolkit-radio-button"
  };
  InovuaRadioButton.propTypes = {
    theme: _propTypes.default.string,
    rootClassName: _propTypes.default.string
  };
  var _default2 = InovuaRadioButton;
  RadioButton.default = _default2;
  return RadioButton;
}
var hasRequiredSrc$b;
function requireSrc$b() {
  if (hasRequiredSrc$b)
    return src$7;
  hasRequiredSrc$b = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$7, "__esModule", {
    value: true
  });
  src$7.default = void 0;
  var _RadioButton = _interopRequireDefault2(requireRadioButton$1());
  var _default2 = _RadioButton.default;
  src$7.default = _default2;
  return src$7;
}
var hasRequiredRadioButton;
function requireRadioButton() {
  if (hasRequiredRadioButton)
    return RadioButton$1;
  hasRequiredRadioButton = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(RadioButton$1, "__esModule", {
    value: true
  });
  RadioButton$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$b());
  var _default2 = _src.default;
  RadioButton$1.default = _default2;
  return RadioButton$1;
}
var getRegionRelativeToParent = {};
var hasRequiredGetRegionRelativeToParent;
function requireGetRegionRelativeToParent() {
  if (hasRequiredGetRegionRelativeToParent)
    return getRegionRelativeToParent;
  hasRequiredGetRegionRelativeToParent = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getRegionRelativeToParent, "__esModule", {
    value: true
  });
  getRegionRelativeToParent.default = void 0;
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _selectParent = _interopRequireDefault2(requireSelectParent());
  function getRegionRelativeToParent$1(child, prentClassName) {
    var parent = (0, _selectParent.default)(".".concat(prentClassName), child);
    var menuRegion = _regionAlign.default.from(parent);
    var thisRegion = _regionAlign.default.from(child);
    return {
      left: thisRegion.left - menuRegion.left,
      top: thisRegion.top - menuRegion.top,
      width: thisRegion.width,
      height: thisRegion.height
    };
  }
  var _default2 = getRegionRelativeToParent$1;
  getRegionRelativeToParent.default = _default2;
  return getRegionRelativeToParent;
}
var hasRequiredMenuItem;
function requireMenuItem() {
  if (hasRequiredMenuItem)
    return MenuItem;
  hasRequiredMenuItem = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(MenuItem, "__esModule", {
    value: true
  });
  MenuItem.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactClass = _interopRequireDefault2(requireReactClass());
  var _MenuItemCell = _interopRequireDefault2(requireMenuItemCell());
  var _Expander = _interopRequireDefault2(requireExpander());
  var _renderCell = _interopRequireDefault2(requireRenderCell());
  var _CheckBox = _interopRequireDefault2(requireCheckBox());
  var _RadioButton = _interopRequireDefault2(requireRadioButton());
  var _assign = _interopRequireDefault2(requireAssign());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _getRegionRelativeToParent = _interopRequireDefault2(requireGetRegionRelativeToParent());
  var _getGlobal = requireGetGlobal();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var emptyFn = function emptyFn2() {
  };
  var MenuItem$1 = function(_Component) {
    (0, _inherits2.default)(MenuItem2, _Component);
    var _super = _createSuper(MenuItem2);
    function MenuItem2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, MenuItem2);
      _this = _super.call(this, props2);
      _this.state = {};
      return _this;
    }
    (0, _createClass2.default)(MenuItem2, [{
      key: "render",
      value: function render() {
        var _this2 = this;
        var props2 = this.preparedProps = this.prepareProps(this.props, this.state);
        var className = props2.className;
        return _react.default.createElement("tr", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, MenuItem2.propTypes)), {}, {
          style: props2.style,
          className,
          ref: function ref(node2) {
            return _this2.node = node2;
          }
        }), this.renderCells());
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.componentIsMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.componentIsMounted = false;
      }
    }, {
      key: "prepareProps",
      value: function prepareProps(props2, state2) {
        var preparedProps = _objectSpread2(_objectSpread2({}, props2), {}, {
          mouseOver: !!state2.mouseOver,
          active: !!state2.active,
          disabled: !!props2.disabled,
          className: this.getClassName(),
          style: this.getStyle(),
          onClick: this.handleClick,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          onMouseDown: this.handleMouseDown,
          onTouchStart: this.handleTouchStart
        });
        if (props2.item.isTitle) {
          delete preparedProps.mouseOver;
          delete preparedProps.active;
          delete preparedProps.onClick;
          delete preparedProps.onMouseEnter;
          delete preparedProps.onMouseLeave;
          delete preparedProps.onMouseDown;
          delete preparedProps.onTouchStart;
        }
        return preparedProps;
      }
    }, {
      key: "handleClick",
      value: function handleClick(event2) {
        var props2 = this.props;
        if (props2.disabled && event2.stopPropagation) {
          event2.stopPropagation();
          return;
        }
        if (this.props.onClick) {
          this.props.onClick(event2, props2, props2.index);
        }
        if (this.props.item.onClick) {
          this.props.item.onClick(event2, props2, props2.index);
        }
      }
    }, {
      key: "handleMouseDown",
      value: function handleMouseDown() {
        var _this3 = this;
        var mouseUpListener = function mouseUpListener2() {
          if (_this3.componentIsMounted) {
            _this3.setState({
              active: false
            });
          }
          globalObject.removeEventListener("mouseup", mouseUpListener2);
        };
        globalObject.addEventListener("mouseup", mouseUpListener);
        if (this.componentIsMounted) {
          this.setState({
            active: true
          });
        }
      }
    }, {
      key: "handleTouchStart",
      value: function handleTouchStart(event2) {
        var _this4 = this;
        this.props;
        var mouseUpListener = function mouseUpListener2() {
          if (_this4.componentIsMounted) {
            _this4.setState({
              active: false
            });
          }
          globalObject.removeEventListener("touchend", mouseUpListener2);
        };
        globalObject.addEventListener("touchend", mouseUpListener);
        if (this.componentIsMounted) {
          this.setState({
            active: true
          });
        }
        if (!this.props.item.items) {
          return;
        }
        if (this.state.mouseOver) {
          this.handleMouseLeave(event2);
        } else {
          this.handleMouseEnter(event2);
        }
      }
    }, {
      key: "showMenu",
      value: function showMenu(menu, props2) {
        props2.showMenu(menu, this.getOffset());
      }
    }, {
      key: "handleMouseEnter",
      value: function handleMouseEnter(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          return;
        }
        this.mouseInside = true;
        this.setState({
          mouseOver: true
        });
        if (props2.onMouseOver) {
          var menuOffset;
          if (props2.hasSubMenu) {
            menuOffset = this.getOffset();
          }
          props2.onMouseOver({
            event: event2,
            menuOffset,
            itemProps: props2,
            index: props2.index,
            hasSubMenu: props2.hasSubMenu
          });
        }
      }
    }, {
      key: "handleMouseLeave",
      value: function handleMouseLeave(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          return;
        }
        var offset = {
          x: event2.clientX,
          y: event2.clientY
        };
        if (this.componentIsMounted) {
          this.setState({
            active: false,
            mouseOver: false
          });
        }
        if (props2.onMouseOut) {
          props2.onMouseOut({
            itemPorps: props2,
            leaveOffset: offset,
            index: props2.index,
            hasSubMenu: props2.hasSubMenu
          });
        }
      }
    }, {
      key: "renderCells",
      value: function renderCells() {
        var props2 = this.props;
        var cells = props2.columns.map(function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _renderCell.default.apply(void 0, [props2].concat(args));
        });
        if (props2.enableSelection && props2.name) {
          var input = this.renderSelectInput();
          if (this.props.selectionInputPosition === "end") {
            cells.push(input);
          } else {
            cells.unshift(input);
          }
        }
        if (props2.hasSubMenu) {
          var expander = this.renderExpander();
          cells.push(expander);
        }
        return cells;
      }
    }, {
      key: "getCommonCellProps",
      value: function getCommonCellProps() {
        var props2 = this.props;
        return {
          rootClassName: props2.rootClassName,
          rtl: props2.rtl
        };
      }
    }, {
      key: "renderSelectInput",
      value: function renderSelectInput() {
        var _this5 = this;
        var props2 = this.props;
        var multiple = props2.multiple;
        var className = (0, _join.default)("".concat(props2.rootClassName, "__cell__input"), props2.browserNativeSelectInputs && "".concat(props2.rootClassName, "__cell__input--browser-native"), multiple && "".concat(props2.rootClassName, "__cell__input--multiple"));
        var onChange = function onChange2(checked) {
          if (checked === void 0) {
            checked = !props2.checked;
          }
          if (typeof checked !== "boolean" && _this5.props.showWarnings) {
            console.warn('"onChange" should be called with a boolean param!');
          }
          props2.onSelectChange({
            name: props2.name,
            value: props2.value,
            multiple,
            checked
          });
        };
        var inputProps = {
          className,
          onChange: props2.selectOnClick ? emptyFn : onChange,
          iconSize: multiple ? props2.checkIconSize : props2.radioIconSize,
          name: props2.name,
          disabled: props2.disabled,
          checked: props2.checked,
          focusable: false,
          supportIndeterminate: false,
          browserNative: props2.browserNativeSelectInputs,
          theme: props2.theme
        };
        var cellProps = _objectSpread2({
          key: "select"
        }, this.getCommonCellProps());
        cellProps.className = (0, _join.default)(cellProps.className, "".concat(props2.rootClassName, "__cell--has-input"), props2.multiple && "".concat(props2.rootClassName, "__cell--checkbox"), !props2.multiple && "".concat(props2.rootClassName, "__cell--radio"));
        var Input3 = multiple ? _CheckBox.default : _RadioButton.default;
        var renderFunction = multiple ? this.props.renderCheckInput : this.props.renderRadioInput;
        var result;
        if (typeof renderFunction === "function") {
          result = renderFunction({
            domProps: inputProps,
            onChange,
            disabled: props2.disabled,
            checked: props2.checked
          });
        }
        if (result === void 0) {
          result = _react.default.createElement(Input3, _objectSpread2({}, inputProps));
        }
        return _react.default.createElement(_MenuItemCell.default, _objectSpread2({}, cellProps), result);
      }
    }, {
      key: "renderExpander",
      value: function renderExpander() {
        var props2 = this.props;
        var expander = props2.expander;
        if (props2.item && props2.item.expander !== void 0) {
          expander = props2.item.expander;
        }
        var style = _objectSpread2(_objectSpread2({}, props2.expanderStyle), props2.item && props2.item.expanderStyle);
        var expanderProps = _objectSpread2({
          style,
          size: props2.expanderSize,
          onClick: props2.onExpanderClick
        }, this.getCommonCellProps());
        if (typeof expander === "function") {
          expander = expander(expanderProps, props2.item);
        }
        if (expander === void 0 || expander === true) {
          expander = _react.default.createElement(_Expander.default, _objectSpread2({}, expanderProps));
        }
        return _react.default.createElement(_MenuItemCell.default, _objectSpread2({
          key: "expander",
          className: "".concat(props2.rootClassName, "__cell--has-expander"),
          expander
        }, expanderProps));
      }
    }, {
      key: "getStyle",
      value: function getStyle2() {
        var props2 = this.props, state2 = this.state;
        var style = (0, _assign.default)({}, props2.style, props2.item.style);
        if (props2.item.isTitle && props2.titleStyle) {
          (0, _assign.default)(style, props2.titleStyle, props2.item.titleStyle);
        }
        if (state2.mouseOver) {
          (0, _assign.default)(style, props2.itemOverStyle, props2.overStyle, props2.item.overStyle);
        }
        if (state2.active) {
          (0, _assign.default)(style, props2.itemActiveStyle, props2.activeStyle, props2.item.activeStyle);
        }
        if (props2.expanded) {
          (0, _assign.default)(style, props2.expandedStyle, props2.item.expandedStyle);
        }
        if (props2.focused) {
          (0, _assign.default)(style, props2.focusedStyle, props2.item.focusedStyle);
        }
        if (props2.focused && state2.mouseOver) {
          (0, _assign.default)(style, props2.overFocusedStyle, props2.item.overFocusedStyle);
        }
        if (props2.height) {
          (0, _assign.default)(style, {
            height: props2.height
          });
        }
        if (props2.disabled) {
          (0, _assign.default)(style, props2.itemDisabledStyle, props2.disabledStyle, props2.item.disabledStyle);
        }
        return style;
      }
    }, {
      key: "getClassName",
      value: function getClassName2() {
        var props2 = this.props, state2 = this.state;
        var baseClassName = "".concat(props2.rootClassName, "__row");
        var className = (0, _join.default)(props2.className, props2.item.className, baseClassName, state2.mouseOver && "".concat(baseClassName, "--over"), state2.mouseOver && props2.item.overClassName, state2.mouseOver && props2.overClassName, state2.active && "".concat(baseClassName, "--active"), state2.active && props2.item.activeClassName, state2.active && props2.activeClassName, props2.expanded && "".concat(baseClassName, "--expanded"), props2.expanded && props2.item.expandedClassName, props2.expanded && props2.expandedClassName, props2.focused && "".concat(baseClassName, "--focused"), props2.focused && props2.item.focusedClassName, props2.focused && props2.focusedClassName, props2.item.isTitle && "".concat(baseClassName, "--title"), props2.checked && "".concat(baseClassName, "--checked"));
        if (props2.disabled) {
          className = (0, _join.default)(props2.className, baseClassName, props2.disabled && "".concat(baseClassName, "--disabled"), props2.disabled && props2.itemDisabledClassName, props2.disabled && props2.item.disabledClassName);
        }
        return className;
      }
    }, {
      key: "getOffset",
      value: function getOffset2() {
        return (0, _getRegionRelativeToParent.default)(this.node, this.props.rootClassName);
      }
    }, {
      key: "getPreparedProps",
      value: function getPreparedProps() {
        return this.preparedProps;
      }
    }, {
      key: "hasSubmenu",
      value: function hasSubmenu() {
        return !!this.props.hasSubMenu;
      }
    }, {
      key: "getDOMNode",
      value: function getDOMNode() {
        return this.node;
      }
    }, {
      key: "getValue",
      value: function getValue() {
        var props2 = this.props;
        return props2.item[props2.valueProperty];
      }
    }, {
      key: "getName",
      value: function getName() {
        var props2 = this.props;
        return props2.item[props2.valueProperty];
      }
    }]);
    return MenuItem2;
  }(_reactClass.default);
  MenuItem$1.defaultProps = {
    isMenuItem: true,
    item: {},
    columns: ["label"],
    enableSelection: false,
    allowUnselect: false
  };
  MenuItem$1.propTypes = {
    rootClassName: _propTypes.default.string,
    style: _propTypes.default.object,
    titleStyle: _propTypes.default.object,
    height: _propTypes.default.number,
    dismissOnClick: _propTypes.default.bool,
    siblingItemHasSubMenu: _propTypes.default.bool,
    overStyle: _propTypes.default.object,
    overClassName: _propTypes.default.string,
    activeStyle: _propTypes.default.object,
    activeClassName: _propTypes.default.string,
    disabledStyle: _propTypes.default.object,
    disabledClassName: _propTypes.default.string,
    expandedStyle: _propTypes.default.object,
    expandedClassName: _propTypes.default.string,
    focusedStyle: _propTypes.default.object,
    focusedClassName: _propTypes.default.string,
    cellStyle: _propTypes.default.object,
    expanderStyle: _propTypes.default.object,
    overFocusedStyle: _propTypes.default.object,
    columns: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object])),
    item: _propTypes.default.object,
    expanded: _propTypes.default.bool,
    globalCellStyle: _propTypes.default.object,
    itemDisabledStyle: _propTypes.default.object,
    itemDisabledClassName: _propTypes.default.string,
    itemOverStyle: _propTypes.default.object,
    itemActiveStyle: _propTypes.default.object,
    menuHasSubmenu: _propTypes.default.bool,
    hasSubMenu: _propTypes.default.bool,
    items: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])),
    isMenuItem: _propTypes.default.bool,
    focused: _propTypes.default.bool,
    index: _propTypes.default.number,
    rtl: _propTypes.default.bool,
    expander: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
    expanderSize: _propTypes.default.number,
    expandedIndex: _propTypes.default.number,
    onExpanderClick: _propTypes.default.func,
    closeSubMenu: _propTypes.default.func,
    closeSubmenuRecursively: _propTypes.default.func,
    submenuWillUnmount: _propTypes.default.func,
    onMouseOver: _propTypes.default.func,
    onMouseOut: _propTypes.default.func,
    mouseOver: _propTypes.default.bool,
    active: _propTypes.default.bool,
    menu: _propTypes.default.node,
    onSelectChange: _propTypes.default.func,
    enableSelection: _propTypes.default.bool,
    allowUnselect: _propTypes.default.bool,
    selectOnClick: _propTypes.default.bool,
    name: _propTypes.default.any,
    value: _propTypes.default.any,
    renderCheckInput: _propTypes.default.func,
    renderRadioInput: _propTypes.default.func,
    selectionInputPosition: _propTypes.default.oneOf(["start", "end"]),
    checkIconSize: _propTypes.default.number,
    radioIconSize: _propTypes.default.number,
    browserNativeSelectInputs: _propTypes.default.bool,
    showWarnings: _propTypes.default.bool
  };
  var _default2 = MenuItem$1;
  MenuItem.default = _default2;
  return MenuItem;
}
var MenuSeparator = {};
var hasRequiredMenuSeparator;
function requireMenuSeparator() {
  if (hasRequiredMenuSeparator)
    return MenuSeparator;
  hasRequiredMenuSeparator = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(MenuSeparator, "__esModule", {
    value: true
  });
  MenuSeparator.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _assign = _interopRequireDefault2(requireAssign());
  var _reactClass = _interopRequireDefault2(requireReactClass());
  var _join = _interopRequireDefault2(requireJoin$3());
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var MenuSeparator$1 = function(_Component) {
    (0, _inherits2.default)(MenuSeparator2, _Component);
    var _super = _createSuper(MenuSeparator2);
    function MenuSeparator2() {
      (0, _classCallCheck2.default)(this, MenuSeparator2);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(MenuSeparator2, [{
      key: "render",
      value: function render() {
        var props2 = this.prepareProps(this.props);
        return _react.default.createElement("tr", {
          className: props2.className
        }, _react.default.createElement("td", {
          colSpan: 100
        }, _react.default.createElement("div", {
          className: "".concat(props2.rootClassName, "__menu-separator__tool"),
          style: props2.style
        })));
      }
    }, {
      key: "prepareProps",
      value: function prepareProps(thisProps) {
        var props2 = {};
        (0, _assign.default)(props2, thisProps);
        props2.style = this.prepareStyle(props2);
        props2.className = this.prepareClassName(props2);
        return props2;
      }
    }, {
      key: "prepareClassName",
      value: function prepareClassName2(props2) {
        var className = (0, _join.default)("".concat(props2.rootClassName, "__menu-separator"), props2.className);
        return className;
      }
    }, {
      key: "prepareStyle",
      value: function prepareStyle2(props2) {
        return (0, _assign.default)({}, props2.style, props2.menuSeparatorStyle);
      }
    }]);
    return MenuSeparator2;
  }(_reactClass.default);
  MenuSeparator$1.defaultProps = {
    isSeparator: true
  };
  var _default2 = MenuSeparator$1;
  MenuSeparator.default = _default2;
  return MenuSeparator;
}
var getConstrainRegion = {};
var hasRequiredGetConstrainRegion;
function requireGetConstrainRegion() {
  if (hasRequiredGetConstrainRegion)
    return getConstrainRegion;
  hasRequiredGetConstrainRegion = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getConstrainRegion, "__esModule", {
    value: true
  });
  getConstrainRegion.default = void 0;
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _selectParent = _interopRequireDefault2(requireSelectParent());
  var _getViewportRegion = _interopRequireDefault2(requireGetViewportRegion());
  var _default2 = function _default3(constrainTo, domNode) {
    var constrainRegion;
    if (constrainTo === true) {
      constrainRegion = (0, _getViewportRegion.default)();
    }
    if (!constrainRegion && typeof constrainTo === "function") {
      constrainTo = constrainTo(domNode);
    }
    if (!constrainRegion && typeof constrainTo === "string") {
      constrainTo = (0, _selectParent.default)(constrainTo, domNode);
    }
    if (!constrainRegion && constrainTo) {
      constrainRegion = _regionAlign.default.from(constrainTo);
    }
    return constrainRegion;
  };
  getConstrainRegion.default = _default2;
  return getConstrainRegion;
}
var prepareStyle = {};
var getMinMaxSize = {};
var hasRequiredGetMinMaxSize;
function requireGetMinMaxSize() {
  if (hasRequiredGetMinMaxSize)
    return getMinMaxSize;
  hasRequiredGetMinMaxSize = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getMinMaxSize, "__esModule", {
    value: true
  });
  getMinMaxSize.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  function getMinMaxSize$12(props2) {
    var sizeType;
    var single;
    var style = props2.style || {};
    var result = {};
    if (props2.minSize) {
      sizeType = (0, _typeof2.default)(props2.minSize);
      single = sizeType == "number" || sizeType == "string";
      if (single) {
        result.minWidth = props2.minSize;
        result.minHeight = props2.minSize;
      } else {
        if (props2.minSize.width) {
          result.minWidth = props2.minSize.width;
        }
        if (props2.minSize.height) {
          result.minHeight = props2.minSize.height;
        }
      }
    }
    if (props2.maxSize) {
      sizeType = (0, _typeof2.default)(props2.maxSize);
      single = sizeType == "number" || sizeType == "string";
      if (single) {
        result.maxWidth = props2.maxSize;
        result.maxHeight = props2.maxSize;
      } else {
        if (props2.maxSize.width) {
          result.maxWidth = props2.maxSize.width;
        }
        if (props2.maxSize.height) {
          result.maxHeight = props2.maxSize.height;
        }
      }
    }
    if (result.minWidth == void 0 && style.minWidth != void 0) {
      result.minWidth = style.minWidth;
    }
    if (result.maxWidth == void 0 && style.maxWidth != void 0) {
      result.maxWidth = style.maxWidth;
    }
    if (result.minHeight == void 0 && style.minHeight != void 0) {
      result.minHeight = style.minHeight;
    }
    if (result.maxHeight == void 0 && style.maxHeight != void 0) {
      result.maxHeight = style.maxHeight;
    }
    return result;
  }
  var _default2 = getMinMaxSize$12;
  getMinMaxSize.default = _default2;
  return getMinMaxSize;
}
var hasRequiredPrepareStyle;
function requirePrepareStyle() {
  if (hasRequiredPrepareStyle)
    return prepareStyle;
  hasRequiredPrepareStyle = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(prepareStyle, "__esModule", {
    value: true
  });
  prepareStyle.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _assign = _interopRequireDefault2(requireAssign());
  var _getMinMaxSize = _interopRequireDefault2(requireGetMinMaxSize());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function prepareStyle$1(props2, state2) {
    var style = {};
    if (props2.subMenu) {
      (0, _assign.default)(style, props2.submenuStyle);
    } else {
      (0, _assign.default)(style, props2.style);
    }
    if (props2.at) {
      var isArray2 = Array.isArray(props2.at);
      var coords = {
        left: isArray2 ? props2.at[0] : props2.at.left === void 0 ? props2.at.x || props2.at.pageX : props2.at.left,
        top: isArray2 ? props2.at[1] : props2.at.top === void 0 ? props2.at.y || props2.at.pageY : props2.at.top
      };
      (0, _assign.default)(style, coords);
    }
    if (state2.positionStyle && props2.visible !== false) {
      style = _objectSpread2(_objectSpread2({}, style), state2.positionStyle);
    }
    var minMaxSize = (0, _getMinMaxSize.default)(props2);
    (0, _assign.default)(style, minMaxSize);
    if (props2.padding) {
      (0, _assign.default)(style, {
        padding: props2.padding
      });
    }
    if (props2.border) {
      (0, _assign.default)(style, {
        border: props2.border
      });
    }
    if (typeof props2.shadow === "string") {
      (0, _assign.default)(style, {
        boxShadow: props2.shadow
      });
    }
    if (props2.borderRadius) {
      (0, _assign.default)(style, {
        borderRadius: props2.borderRadius
      });
    }
    if (props2.width) {
      (0, _assign.default)(style, {
        width: props2.width
      });
    }
    if (props2.enableAnimation && (state2.transitionEnded || state2.transitionStart)) {
      (0, _assign.default)(style, {
        transitionDuration: "".concat(props2.fadeDuration, "ms"),
        transitionTimingFunction: props2.transitionTimingFunction
      });
    }
    return style;
  }
  var _default2 = prepareStyle$1;
  prepareStyle.default = _default2;
  return prepareStyle;
}
var getFirstNonDisabledItem = {};
var hasRequiredGetFirstNonDisabledItem;
function requireGetFirstNonDisabledItem() {
  if (hasRequiredGetFirstNonDisabledItem)
    return getFirstNonDisabledItem;
  hasRequiredGetFirstNonDisabledItem = 1;
  Object.defineProperty(getFirstNonDisabledItem, "__esModule", {
    value: true
  });
  getFirstNonDisabledItem.default = void 0;
  function getFirstNonDisabledItem$1(items) {
    var fistNonDisabledItemIndex = null;
    if (!items || items && !items.length) {
      return null;
    }
    for (var i = 0, len = items.length; i < len; i++) {
      var item = items[i];
      if (item && !item.disabled && !item.isTitle) {
        fistNonDisabledItemIndex = i;
        break;
      }
    }
    return fistNonDisabledItemIndex;
  }
  var _default2 = getFirstNonDisabledItem$1;
  getFirstNonDisabledItem.default = _default2;
  return getFirstNonDisabledItem;
}
var getNextNavigableItem = {};
var hasRequiredGetNextNavigableItem;
function requireGetNextNavigableItem() {
  if (hasRequiredGetNextNavigableItem)
    return getNextNavigableItem;
  hasRequiredGetNextNavigableItem = 1;
  Object.defineProperty(getNextNavigableItem, "__esModule", {
    value: true
  });
  getNextNavigableItem.default = void 0;
  function getNextNavigableItem$1(items) {
    var startFrom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var direction2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    var nextNavigableItem = null;
    if (!items || items && !items.length) {
      return null;
    }
    if (startFrom === null) {
      return null;
    }
    if (direction2 === 1) {
      for (var i = startFrom + 1, len = items.length; i < len; i++) {
        var item = items[i];
        var isDisabled2 = item && item.disabled;
        var isSeparator = item === "-";
        var isTitle = item.isTitle;
        if (!isSeparator && !isDisabled2 && !isTitle) {
          nextNavigableItem = i;
          break;
        }
      }
    } else {
      for (var _i = startFrom - 1; _i >= 0; _i--) {
        var _item = items[_i];
        var _isDisabled = _item && _item.disabled;
        var _isSeparator = _item === "-";
        var _isTitle = _item.isTitle;
        if (!_isSeparator && !_isDisabled && !_isTitle) {
          nextNavigableItem = _i;
          break;
        }
      }
    }
    return nextNavigableItem;
  }
  var _default2 = getNextNavigableItem$1;
  getNextNavigableItem.default = _default2;
  return getNextNavigableItem;
}
var getSeparatorIndexes = {};
var hasRequiredGetSeparatorIndexes;
function requireGetSeparatorIndexes() {
  if (hasRequiredGetSeparatorIndexes)
    return getSeparatorIndexes;
  hasRequiredGetSeparatorIndexes = 1;
  Object.defineProperty(getSeparatorIndexes, "__esModule", {
    value: true
  });
  getSeparatorIndexes.default = void 0;
  function getSeparatorIndexes$1(children) {
    return children.reduce(function(acc, child, index2) {
      if (child === "-" || child.props && child.props.isSeparator) {
        acc.push(index2);
      }
      return acc;
    }, []);
  }
  var _default2 = getSeparatorIndexes$1;
  getSeparatorIndexes.default = _default2;
  return getSeparatorIndexes;
}
var prepareAlignOffset = {};
var range = {};
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange)
    return range;
  hasRequiredRange = 1;
  Object.defineProperty(range, "__esModule", {
    value: true
  });
  range.default = void 0;
  function range$1() {
    var start = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var end = arguments.length > 1 ? arguments[1] : void 0;
    var step = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    var collection = [];
    for (var i = start; i < end; i += step) {
      collection.push(i);
    }
    return collection;
  }
  var _default2 = range$1;
  range.default = _default2;
  return range;
}
var hasRequiredPrepareAlignOffset;
function requirePrepareAlignOffset() {
  if (hasRequiredPrepareAlignOffset)
    return prepareAlignOffset;
  hasRequiredPrepareAlignOffset = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(prepareAlignOffset, "__esModule", {
    value: true
  });
  prepareAlignOffset.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _range = _interopRequireDefault2(requireRange());
  function prepareAlignOffset$1(alignOffset, positionsLength) {
    var offset;
    if (Array.isArray(alignOffset)) {
      offset = alignOffset.map(function(alignOffsetItem) {
        if (typeof alignOffsetItem === "number") {
          return {
            x: alignOffsetItem,
            y: alignOffsetItem
          };
        } else {
          return alignOffsetItem;
        }
      });
    }
    if (typeof alignOffset === "number") {
      offset = {
        x: alignOffset,
        y: alignOffset
      };
    }
    if ((0, _typeof2.default)(alignOffset) === "object") {
      offset = alignOffset;
    }
    if (!Array.isArray(offset) && positionsLength) {
      offset = (0, _range.default)(0, positionsLength).map(function() {
        return offset;
      });
    }
    return offset;
  }
  var _default2 = prepareAlignOffset$1;
  prepareAlignOffset.default = _default2;
  return prepareAlignOffset;
}
var getSingleSelectNames = {};
var hasRequiredGetSingleSelectNames;
function requireGetSingleSelectNames() {
  if (hasRequiredGetSingleSelectNames)
    return getSingleSelectNames;
  hasRequiredGetSingleSelectNames = 1;
  Object.defineProperty(getSingleSelectNames, "__esModule", {
    value: true
  });
  getSingleSelectNames.default = void 0;
  function getSingleSelectNames$1(_ref2) {
    var items = _ref2.items, nameProperty = _ref2.nameProperty;
    if (!items || items.length <= 1) {
      return null;
    }
    var names2 = items.reduce(function(acc, item) {
      var name = item[nameProperty];
      if (acc[name] !== void 0) {
        acc[name] = true;
      } else {
        acc[name] = false;
      }
      return acc;
    }, {});
    return names2;
  }
  var _default2 = getSingleSelectNames$1;
  getSingleSelectNames.default = _default2;
  return getSingleSelectNames;
}
var increaseColSpan = {};
var hasRequiredIncreaseColSpan;
function requireIncreaseColSpan() {
  if (hasRequiredIncreaseColSpan)
    return increaseColSpan;
  hasRequiredIncreaseColSpan = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(increaseColSpan, "__esModule", {
    value: true
  });
  increaseColSpan.default = void 0;
  increaseColSpan.increaseFirstColumnColSpan = increaseFirstColumnColSpan;
  increaseColSpan.increaseLastColumnColSpan = increaseLastColumnColSpan;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function increaseColSpan$1(column2) {
    var newColumn = column2;
    if (typeof newColumn === "string") {
      newColumn = {
        name: newColumn,
        colSpan: 2
      };
    } else {
      newColumn = _objectSpread2(_objectSpread2({}, column2), {}, {
        colSpan: newColumn.colSpan ? newColumn.colSpan + 1 : 2
      });
    }
    return newColumn;
  }
  function increaseLastColumnColSpan(columns) {
    return [].concat((0, _toConsumableArray2.default)(columns.slice(0, -1)), [increaseColSpan$1(columns[columns.length - 1])]);
  }
  function increaseFirstColumnColSpan(columns) {
    return [increaseColSpan$1(columns[0])].concat((0, _toConsumableArray2.default)(columns.slice(1)));
  }
  var _default2 = increaseColSpan$1;
  increaseColSpan.default = _default2;
  return increaseColSpan;
}
var getSubMenuStyle = {};
var align = {};
var hasRequiredAlign;
function requireAlign() {
  if (hasRequiredAlign)
    return align;
  hasRequiredAlign = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(align, "__esModule", {
    value: true
  });
  align.default = void 0;
  var _getConstrainRegion = _interopRequireDefault2(requireGetConstrainRegion());
  var _prepareAlignOffset = _interopRequireDefault2(requirePrepareAlignOffset());
  var _this = void 0;
  var _default2 = function _default3(props2, subMenuRegion, targetAlignRegion, constrainTo, domNode) {
    var constrainRegion = _getConstrainRegion.default.call(_this, constrainTo, domNode);
    if (typeof props2.alignSubMenu === "function") {
      props2.alignSubMenu(subMenuRegion, targetAlignRegion, constrainRegion);
    } else {
      var alignPositions = props2.alignPositions;
      var offset = props2.rtl ? props2.rtlSubmenuAlignOffset : props2.submenuAlignOffset;
      offset = (0, _prepareAlignOffset.default)(offset, alignPositions.length);
      var pos = subMenuRegion.alignTo(targetAlignRegion, alignPositions, {
        offset,
        constrain: constrainRegion
      });
      return pos == "tl-tr" || pos == "tr-tl" ? 1 : -1;
    }
  };
  align.default = _default2;
  return align;
}
var hasRequiredGetSubMenuStyle;
function requireGetSubMenuStyle() {
  if (hasRequiredGetSubMenuStyle)
    return getSubMenuStyle;
  hasRequiredGetSubMenuStyle = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getSubMenuStyle, "__esModule", {
    value: true
  });
  getSubMenuStyle.default = _default2;
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _assign = _interopRequireDefault2(requireAssign());
  var _align = _interopRequireDefault2(requireAlign());
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  function transformPxStringToInt(pxValue) {
    var value = parseFloat(pxValue.split("px")[0]);
    return typeof value === "number" && !isNaN(value) ? value : 0;
  }
  function _default2(props2, state2, domNode) {
    var _this = this;
    if (state2.activeSubMenuIndex == null || !this.componentIsMounted) {
      this.prevMenuIndex = -1;
      return;
    }
    var overItem = this.getItemByIndex(state2.activeSubMenuIndex);
    var offset = overItem && overItem.getOffset();
    var left = offset.left + offset.width;
    var top = offset.top;
    var menuIndex = state2.activeSubMenuIndex;
    var sameMenu = this.prevMenuIndex == menuIndex;
    if (this.aligning && !sameMenu) {
      this.aligning = false;
    }
    this.prevMenuIndex = menuIndex;
    var style = {
      left,
      top,
      pointerEvents: "none",
      position: "absolute"
    };
    if (!this.aligning && !sameMenu) {
      setTimeout(function() {
        if (!_this.componentIsMounted) {
          return;
        }
        var thisRegion = _regionAlign.default.from(domNode);
        var menuComputedStyle = globalObject.getComputedStyle(domNode);
        var paddingLeft = transformPxStringToInt(menuComputedStyle.paddingLeft);
        var menuItemRegion = _regionAlign.default.from({
          left: thisRegion.left + paddingLeft,
          top: thisRegion.top + offset.top,
          width: offset.width,
          height: offset.height
        });
        var subMenuMounted = _this.subMenu && _this.subMenu.componentIsMounted;
        if (!subMenuMounted) {
          return;
        }
        var submenuNode = _this.subMenu.node;
        var subMenuRegion = _regionAlign.default.from(submenuNode);
        var initialHeight = subMenuRegion.height;
        var alignPosition = (0, _align.default)(props2, subMenuRegion, menuItemRegion, props2.constrainTo, domNode);
        var newHeight = subMenuRegion.height;
        var maxHeight;
        if (newHeight < initialHeight && props2.subMenuConstrainMargin != null) {
          maxHeight = newHeight - props2.subMenuConstrainMargin;
        } else if (newHeight < initialHeight) {
          maxHeight = newHeight;
        }
        if (maxHeight && alignPosition == -1) {
          subMenuRegion.top = subMenuRegion.bottom - maxHeight;
        }
        var newLeft = subMenuRegion.left - thisRegion.left;
        var newTop = subMenuRegion.top - thisRegion.top;
        if (Math.abs(newLeft - left) < 5) {
          newLeft = left;
        }
        if (Math.abs(newTop - top) < 5) {
          newTop = top;
        }
        _this.subMenuPosition = newLeft < 0 ? "left" : "right";
        if (newHeight === 0) {
          return;
        }
        _this.alignOffset = {
          left: newLeft,
          top: newTop
        };
        _this.aligning = true;
        _this.setState({
          submenuAlignPosition: alignPosition,
          submenuMaxHeight: props2.submenuMaxHeight || maxHeight
        });
      }, 0);
    }
    if (sameMenu || this.aligning && this.alignOffset) {
      (0, _assign.default)(style, this.alignOffset);
      style.visibility = "visible";
      delete style.pointerEvents;
      delete style.overflow;
    }
    this.aligning = false;
    return style;
  }
  return getSubMenuStyle;
}
var getItemStyleProps = {};
var hasRequiredGetItemStyleProps;
function requireGetItemStyleProps() {
  if (hasRequiredGetItemStyleProps)
    return getItemStyleProps;
  hasRequiredGetItemStyleProps = 1;
  Object.defineProperty(getItemStyleProps, "__esModule", {
    value: true
  });
  getItemStyleProps.default = void 0;
  var _default2 = function _default3(props2) {
    var itemStyle = props2.itemStyle, itemOverStyle = props2.itemOverStyle, itemOverClassName = props2.itemOverClassName, itemActiveStyle = props2.itemActiveStyle, itemActiveClassName = props2.itemActiveClassName, itemDisabledStyle = props2.itemDisabledStyle, itemDisabledClassName = props2.itemDisabledClassName, itemExpandedStyle = props2.itemExpandedStyle, itemExpandedClassName = props2.itemExpandedClassName, cellStyle = props2.cellStyle, itemFocusedStyle = props2.itemFocusedStyle, itemFocusedClassName = props2.itemFocusedClassName, itemOverFocusedStyle = props2.itemOverFocusedStyle;
    return {
      style: itemStyle,
      overStyle: itemOverStyle,
      overClassName: itemOverClassName,
      activeStyle: itemActiveStyle,
      activeClassName: itemActiveClassName,
      disabledStyle: itemDisabledStyle,
      disabledClassName: itemDisabledClassName,
      expandedStyle: itemExpandedStyle,
      expandedClassName: itemExpandedClassName,
      focusedStyle: itemFocusedStyle,
      focusedClassName: itemFocusedClassName,
      overFocusedStyle: itemOverFocusedStyle,
      cellStyle
    };
  };
  getItemStyleProps.default = _default2;
  return getItemStyleProps;
}
var submenuAlignPositions = {};
var hasRequiredSubmenuAlignPositions;
function requireSubmenuAlignPositions() {
  if (hasRequiredSubmenuAlignPositions)
    return submenuAlignPositions;
  hasRequiredSubmenuAlignPositions = 1;
  Object.defineProperty(submenuAlignPositions, "__esModule", {
    value: true
  });
  submenuAlignPositions.alignPositionRTL = submenuAlignPositions.alignPositionLTR = submenuAlignPositions.alignOffsetRTL = submenuAlignPositions.alignOffsetLTR = void 0;
  var alignPositionLTR = ["tl-tr", "bl-br", "tr-tl", "br-bl"];
  submenuAlignPositions.alignPositionLTR = alignPositionLTR;
  var alignPositionRTL = ["tr-tl", "br-bl", "tl-tr", "bl-br"];
  submenuAlignPositions.alignPositionRTL = alignPositionRTL;
  var alignOffsetLTR = [{
    x: -7,
    y: 5
  }, {
    x: -7,
    y: -5
  }, {
    x: 7,
    y: 5
  }, {
    x: 7,
    y: -5
  }];
  submenuAlignPositions.alignOffsetLTR = alignOffsetLTR;
  var alignOffsetRTL = [{
    x: 7,
    y: 5
  }, {
    x: 7,
    y: -5
  }, {
    x: -7,
    y: 5
  }, {
    x: -7,
    y: -5
  }];
  submenuAlignPositions.alignOffsetRTL = alignOffsetRTL;
  return submenuAlignPositions;
}
var hasRequiredMenu$1;
function requireMenu$1() {
  if (hasRequiredMenu$1)
    return Menu;
  hasRequiredMenu$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Menu, "__esModule", {
    value: true
  });
  Menu.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactClass = _interopRequireDefault2(requireReactClass());
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _uglified = _interopRequireDefault2(requireUglified());
  var _shallowequal = _interopRequireDefault2(requireShallowequal());
  var _ArrowScroller = _interopRequireDefault2(requireArrowScroller());
  var _MenuItem = _interopRequireDefault2(requireMenuItem());
  var _MenuSeparator = _interopRequireDefault2(requireMenuSeparator());
  var _containsNode = _interopRequireDefault2(requireContainsNode());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _assign = _interopRequireDefault2(requireAssign());
  var _getConstrainRegion = _interopRequireDefault2(requireGetConstrainRegion());
  var _isMobile = _interopRequireDefault2(requireIsMobile());
  var _prepareStyle = _interopRequireDefault2(requirePrepareStyle());
  var _getFirstNonDisabledItem = _interopRequireDefault2(requireGetFirstNonDisabledItem());
  var _getNextNavigableItem = _interopRequireDefault2(requireGetNextNavigableItem());
  var _getSeparatorIndexes = _interopRequireDefault2(requireGetSeparatorIndexes());
  var _prepareAlignOffset = _interopRequireDefault2(requirePrepareAlignOffset());
  var _getSingleSelectNames = _interopRequireDefault2(requireGetSingleSelectNames());
  var _increaseColSpan = requireIncreaseColSpan();
  var _getRegionRelativeToParent = _interopRequireDefault2(requireGetRegionRelativeToParent());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$4());
  var _getSubMenuStyle = _interopRequireDefault2(requireGetSubMenuStyle());
  var _getItemStyleProps = _interopRequireDefault2(requireGetItemStyleProps());
  var _submenuAlignPositions = requireSubmenuAlignPositions();
  var _ua = requireUa();
  var _getGlobal = requireGetGlobal();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  function emptyFn() {
  }
  var raf2 = globalObject.requestAnimationFrame;
  var getAlignToRegion = function getAlignToRegion2(alignTo, node2) {
    if (typeof alignTo === "function") {
      alignTo = alignTo(node2);
    }
    if (typeof alignTo == "string") {
      alignTo = globalObject.document ? globalObject.document.querySelector(alignTo) : alignTo;
    }
    return _regionAlign.default.from(alignTo);
  };
  var InovuaMenu = function(_Component) {
    (0, _inherits2.default)(InovuaMenu2, _Component);
    var _super = _createSuper(InovuaMenu2);
    function InovuaMenu2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaMenu2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updatePosition", function() {
        _this.checkAlignment(void 0, true);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateAlignment", function(alignTo) {
        _this.checkAlignment(void 0, true, alignTo);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDocumentScroll", function() {
        if (_this.props.updatePositionOnScroll) {
          _this.updatePosition();
        }
      });
      _this.state = {
        mouseOver: false,
        hidden: true,
        enableAnimation: false,
        transitionEnded: false,
        hasScroll: false,
        activeSubMenuIndex: null,
        nextActiveSubMenuIndex: null,
        showUpArrow: false,
        showDownArrow: true,
        focusedItem: props2.enableKeyboardNavigation ? props2.defaultFocusedItem : null,
        selected: props2.defaultSelected
      };
      _this.setupShowHideDelay();
      _this.setRootRef = function(ref) {
        _this.node = ref;
      };
      _this.setItemRef = function(index2) {
        return function(ref) {
          if (!_this.childrenRefs) {
            _this.childrenRefs = [];
          }
          _this.childrenRefs[index2] = ref;
        };
      };
      _this.setSubMenuRef = function(ref) {
        _this.subMenu = ref;
      };
      _this.setSubMenuWrapRef = function(ref) {
        _this.subMenuWrap = ref;
      };
      _this.setScrollerRef = function(ref) {
        _this.scroller = ref;
      };
      _this.setTableRef = function(ref) {
        _this.table = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaMenu2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextProps);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.componentIsMounted = false;
        this.chidrenRefs = null;
        this.props.componentWillUnmount(this, {
          hasFocus: this.hasFocus(),
          depth: this.props.depth
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (this.props.autoFocus && prevState.hidden && !this.state.hidden) {
          this.focus();
        }
        if (prevProps.visible && !this.props.visible) {
          this.setState({
            positionStyle: null
          });
        }
        if (!prevProps.visible && this.props.visible || !(0, _shallowequal.default)(prevProps.alignTo, this.props.alignTo) || this.props.constrainTo != prevProps.constrainTo) {
          this.checkAlignment(this.props, true);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        this.componentIsMounted = true;
        if (this.props.visible === false) {
          return;
        }
        if (this.props.componentDidMount) {
          this.props.componentDidMount(this);
        }
        this.checkAlignment();
        this.setupEnterAnimation();
        if (this.props.autoFocus) {
          requestAnimationFrame(function() {
            _this2.focus();
          });
        }
        if (this.props.updatePositionOnScroll) {
          window.addEventListener("scroll", this.handleDocumentScroll, {
            passive: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var state2 = this.state, props2 = this.props;
        var style = (0, _prepareStyle.default)(props2, state2);
        var className = this.prepareClassName(props2, state2);
        var table = this.renderTable();
        var scrollerArrow = props2.showScrollArrows === void 0 ? "auto" : !!props2.showScrollArrows;
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({
          tabIndex: 0
        }, (0, _cleanProps.default)(props2, InovuaMenu2.propTypes)), {}, {
          ref: this.setRootRef,
          onMouseLeave: this.handleMouseLeave,
          onMouseEnter: this.handleMouseEnter,
          onKeyDown: this.handleKeyDown,
          onBlur: this.handleOnBlur,
          className,
          style
        }), this.state.activeSubMenuIndex !== null && this.renderSubMenu(props2, state2), props2.disableScroller ? table : _react.default.createElement(_ArrowScroller.default, _objectSpread2({
          scroller: scrollerArrow
        }, this.getScrollerProps()), table));
      }
    }, {
      key: "renderTable",
      value: function renderTable() {
        var props2 = this.props;
        this.state;
        var className = (0, _join.default)("".concat(props2.rootClassName, "__table"), props2.tableClassName);
        return _react.default.createElement("table", {
          cellSpacing: 0,
          cellPadding: 0,
          className,
          ref: this.setTableRef
        }, _react.default.createElement("tbody", null, this.renderItems()));
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        var _this3 = this;
        var props2 = this.props, state2 = this.state;
        if (!props2.items) {
          return null;
        }
        var commonProps = this.getCommonItemProps();
        var siblingItemHasSubMenu = this.doesAnyItemHasSubMenu();
        var siblingItemHasSelectInput = this.dosAnyItemHaveSelectInput();
        var hasDescription = props2.items.filter(function(item) {
          return !!item.secondaryLabel;
        }).length;
        var hasIcon = props2.items.filter(function(item) {
          return !!item.icon;
        }).length;
        return props2.items.map(function(item, index2, items) {
          if (item === "-") {
            return _react.default.createElement(_MenuSeparator.default, {
              style: props2.menuSeparatorStyle,
              key: index2,
              rootClassName: props2.rootClassName
            });
          }
          var columns = props2.columns;
          if (hasDescription) {
            columns = [].concat((0, _toConsumableArray2.default)(columns), [{
              name: "secondaryLabel",
              isDescription: true,
              style: _objectSpread2(_objectSpread2({}, props2.secondaryLabelStyle), item.secondaryLabelStyle)
            }]);
          }
          if (hasIcon) {
            columns = [{
              name: "icon",
              isIcon: true
            }].concat((0, _toConsumableArray2.default)(columns));
          }
          if (props2.labelStyle || item.labelStyle) {
            columns = columns.map(function(column2) {
              if (!column2) {
                return column2;
              }
              if (typeof column2 === "string" && column2 === "label") {
                return {
                  name: "label",
                  style: _objectSpread2(_objectSpread2({}, props2.labelStyle), item.labelStyle)
                };
              }
              if (column2 && column2.name && column2.name === "label") {
                return _objectSpread2(_objectSpread2({}, column2), {}, {
                  style: _objectSpread2(_objectSpread2({}, columns.style), props2.labelStyle)
                });
              }
              return column2;
            });
          }
          var hasSubMenu = item.items && !!item.items.length || item.children && !!item.children.length;
          var focused = state2.focusedItem === index2;
          var expanded = commonProps.expandedIndex === index2;
          var className = props2.itemClassName;
          var selectionProps = _this3.getSelectionProps(item);
          if (props2.enableSelection && siblingItemHasSelectInput && !selectionProps) {
            if (props2.selectionInputPosition === "start") {
              columns = (0, _increaseColSpan.increaseFirstColumnColSpan)(columns);
            } else {
              columns = (0, _increaseColSpan.increaseLastColumnColSpan)(columns);
            }
          }
          if (!hasSubMenu && siblingItemHasSubMenu) {
            columns = (0, _increaseColSpan.increaseLastColumnColSpan)(columns);
          }
          var itemProps = _objectSpread2(_objectSpread2(_objectSpread2({
            index: index2,
            item,
            hasSubMenu,
            items,
            focused,
            expanded,
            className,
            columns,
            key: index2,
            disabled: item.disabled,
            theme: props2.theme,
            ref: _this3.setItemRef(index2)
          }, commonProps), selectionProps), item.props);
          var Component = props2.itemFactory || _MenuItem.default;
          return _react.default.createElement(Component, _objectSpread2({}, itemProps));
        });
      }
    }, {
      key: "getSelectionProps",
      value: function getSelectionProps(item) {
        var props2 = this.props;
        if (!props2.items || props2.items && !props2.items.length) {
          return null;
        }
        var selected = this.getSelected();
        var singleSelectNames = (0, _getSingleSelectNames.default)({
          items: props2.items,
          nameProperty: props2.nameProperty
        });
        var selectionProps;
        if (props2.enableSelection) {
          var value = item[props2.valueProperty];
          var name = item[props2.nameProperty];
          var multiple = singleSelectNames && !singleSelectNames[name];
          var checked = multiple ? value !== void 0 ? selected[name] === value : selected[name] === name : selected[name] === value;
          if (name) {
            selectionProps = {
              name,
              value,
              checked,
              multiple,
              allowUnselect: props2.allowUnselect,
              enableSelection: true,
              browserNativeSelectInputs: props2.browserNativeSelectInputs,
              renderCheckInput: item.renderCheckInput !== void 0 ? item.renderCheckInput : props2.renderCheckInput,
              renderRadioInput: item.renderRadioInput !== void 0 ? item.renderRadioInput : props2.renderRadioInput,
              selectionInputPosition: item.selectionInputPosition !== void 0 ? item.selectionInputPosition : props2.selectionInputPosition
            };
          }
        }
        return selectionProps;
      }
    }, {
      key: "getCommonItemProps",
      value: function getCommonItemProps() {
        var _objectSpread22;
        var props2 = this.props;
        var menuHasSubmenu = !!props2.items.filter(function(item) {
          return item.items && item.items.length;
        }).length;
        var itemStyleProps = (0, _getItemStyleProps.default)(props2);
        return _objectSpread2((_objectSpread22 = {
          menuHasSubmenu,
          expanderStyle: props2.expanderStyle,
          expanderSize: props2.expanderSize,
          globalCellStyle: props2.cellStyle,
          itemDisabledStyle: props2.itemDisabledStyle,
          itemDisabledClassName: props2.itemDisabledClassName,
          itemOverStyle: props2.itemOverStyle,
          itemActiveStyle: props2.itemActiveStyle
        }, (0, _defineProperty2.default)(_objectSpread22, "menuHasSubmenu", props2.menuHasSubmenu), (0, _defineProperty2.default)(_objectSpread22, "rootClassName", props2.rootClassName), (0, _defineProperty2.default)(_objectSpread22, "showWarnings", props2.showWarnings), (0, _defineProperty2.default)(_objectSpread22, "titleStyle", props2.titleStyle), (0, _defineProperty2.default)(_objectSpread22, "onClick", this.onMenuItemClick), (0, _defineProperty2.default)(_objectSpread22, "onMouseOver", this.onMenuItemMouseEnter), (0, _defineProperty2.default)(_objectSpread22, "onMouseOut", this.onMenuItemMouseLeave), (0, _defineProperty2.default)(_objectSpread22, "submenuWillUnmount", this.onSubmenuWillUnmount), (0, _defineProperty2.default)(_objectSpread22, "onExpanderClick", this.onMenuItemExpanderClick), (0, _defineProperty2.default)(_objectSpread22, "onSelectChange", this.handleSelectionChange), (0, _defineProperty2.default)(_objectSpread22, "selectOnClick", props2.selectOnClick), (0, _defineProperty2.default)(_objectSpread22, "expander", props2.expander), (0, _defineProperty2.default)(_objectSpread22, "rtl", props2.rtl), (0, _defineProperty2.default)(_objectSpread22, "height", props2.itemHeight), (0, _defineProperty2.default)(_objectSpread22, "checkIconSize", props2.checkIconSize), (0, _defineProperty2.default)(_objectSpread22, "radioIconSize", props2.radioIconSize), (0, _defineProperty2.default)(_objectSpread22, "closeSubmenuRecursively", this.closeSubmenuRecursively), (0, _defineProperty2.default)(_objectSpread22, "closeSubMenu", this.closeSubMenu), (0, _defineProperty2.default)(_objectSpread22, "expandedIndex", this.getExpandedIndex()), _objectSpread22), itemStyleProps);
      }
    }, {
      key: "renderSubMenu",
      value: function renderSubMenu(props2, state2) {
        var domNode = this.node;
        var menuProps = this.getSubMenuProps();
        var wrapperStyle = _getSubMenuStyle.default.bind(this)(_objectSpread2(_objectSpread2({}, props2), {}, {
          alignPositions: this.getDefaultAlignPositions()
        }), state2, domNode);
        var wrapperClassName = "".concat(this.props.rootClassName, "__submenu-wrapper");
        return _react.default.createElement("div", {
          className: wrapperClassName,
          ref: this.setSubMenuWrapRef,
          style: wrapperStyle,
          onMouseEnter: this.handleSubMenuMouseEnter,
          onMouseLeave: this.handleSubMenuMouseLeave
        }, _react.default.createElement(InovuaMenu2, _objectSpread2({
          key: state2.activeSubMenuIndex
        }, menuProps)));
      }
    }, {
      key: "hasItemSubMenu",
      value: function hasItemSubMenu(index2) {
        var items = this.getItemsByIndex(index2);
        return items && items.length;
      }
    }, {
      key: "getItemsByIndex",
      value: function getItemsByIndex(index2) {
        var item = this.props.items && this.props.items[index2];
        if (!item) {
          return null;
        }
        var items = item && item.items;
        return items;
      }
    }, {
      key: "getSubMenuProps",
      value: function getSubMenuProps() {
        var props2 = this.props, state2 = this.state;
        var index2 = this.state.activeSubMenuIndex;
        var items = this.getItemsByIndex(index2);
        var item = this.props.items[index2];
        var overridingProps = _objectSpread2(_objectSpread2({}, this.props.submenuProps), item.menuProps);
        if (overridingProps.selected === void 0 && overridingProps.defaultSelected === void 0) {
          overridingProps.selected = this.getSelected();
        }
        var menuProps = _objectSpread2(_objectSpread2(_objectSpread2({}, this.props), {}, {
          onDismiss: emptyFn
        }, overridingProps), {}, {
          items,
          depth: props2.depth + 1,
          ref: this.setSubMenuRef,
          subMenu: true,
          parentMenu: this,
          closeSubMenu: this.closeSubMenu,
          closeSubmenuRecursively: this.closeSubmenuRecursively,
          componentWillUnmount: this.submenuWillUnmount,
          parentIndex: index2,
          maxHeight: state2.submenuMaxHeight || props2.submenuMaxHeight || state2.maxHeight || props2.maxHeight,
          onActivate: this.onSubMenuActivate,
          onInactivate: this.onSubMenuInactivate,
          scrollerProps: props2.scrollerProps,
          constrainTo: props2.constrainTo,
          expander: props2.expander,
          onSelectionChange: this.handleSubmenuSelectionChange,
          alignPosition: state2.submenuAlignPosition
        });
        delete menuProps.autoFocus;
        delete menuProps.className;
        delete menuProps.onClick;
        delete menuProps.defaultFocusedItem;
        delete menuProps.onChildClick;
        delete menuProps.visible;
        return menuProps;
      }
    }, {
      key: "getAlignPositions",
      value: function getAlignPositions(props2) {
        if (props2.alignPositions == null) {
          return this.getDefaultAlignPositions();
        }
        return props2.alignPositions;
      }
    }, {
      key: "getDefaultAlignPositions",
      value: function getDefaultAlignPositions() {
        var props2 = this.props;
        return props2.rtl ? _submenuAlignPositions.alignPositionRTL : _submenuAlignPositions.alignPositionLTR;
      }
    }, {
      key: "getScrollerProps",
      value: function getScrollerProps() {
        var _this4 = this, _objectSpread3;
        var props2 = this.props, state2 = this.state;
        var className = (0, _join.default)(props2.scrollerProps.className, "".concat(props2.rootClassName, "__scroll-container"));
        var style = (0, _assign.default)({}, props2.scrollerProps.style);
        var maxHeight = state2.maxHeight != void 0 && props2.submenu ? state2.maxHeight : props2.maxHeight;
        if (maxHeight != null) {
          (0, _assign.default)(style, {
            maxHeight
          });
        }
        var scrollProps = _objectSpread2(_objectSpread2({}, props2.scrollerProps), {}, (_objectSpread3 = {
          renderScroller: props2.renderScroller,
          nativeScroll: props2.nativeScroll,
          scrollContainerProps: props2.scrollContainerProps,
          className,
          notifyResizeDelay: props2.notifyResizeDelay,
          ref: this.setScrollerRef,
          style,
          theme: props2.theme,
          vertical: true
        }, (0, _defineProperty2.default)(_objectSpread3, "theme", props2.theme), (0, _defineProperty2.default)(_objectSpread3, "scrollOnMouseEnter", props2.scrollOnMouseEnter), (0, _defineProperty2.default)(_objectSpread3, "onHasScrollChange", function onHasScrollChange(hasScroll) {
          return _this4.setState({
            hasScroll
          });
        }), _objectSpread3));
        return scrollProps;
      }
    }, {
      key: "prepareClassName",
      value: function prepareClassName2(props2, state2) {
        var hidden = props2.visible != void 0 ? !props2.visible : state2.hidden;
        var className = (0, _join.default)(props2.rootClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), props2.className, !props2.visible || props2.items && !props2.items.length && "".concat(props2.rootClassName, "--no-display"), props2.absolute && "".concat(props2.rootClassName, "--absolute"), !props2.rtl ? "".concat(props2.rootClassName, "--ltr") : "".concat(props2.rootClassName, "--rtl"), hidden && "".concat(props2.rootClassName, "--hidden"), _isMobile.default && "".concat(props2.rootClassName, "--mobile"), props2.subMenu && "".concat(props2.rootClassName, "__submenu"), "".concat(props2.rootClassName, "--depth-").concat(props2.depth), state2.hasScroll && "".concat(props2.rootClassName, "--has-overflow"), props2.shadow && "".concat(props2.rootClassName, "--shadow"), state2.hasScroll && "".concat(props2.rootClassName, "--has-scroll"));
        if (props2.alignPosition !== void 0) {
          var position2 = props2.alignPosition === 1 ? "up" : "down";
          className = (0, _join.default)(className, "".concat(props2.rootClassName, "--position-").concat(position2));
        }
        if (state2.enableAnimation) {
          className = (0, _join.default)(className, "".concat(props2.rootClassName, "--animation-enabled"), state2.transitionEnded && "".concat(props2.rootClassName, "--transition-end"), state2.transitionStart && "".concat(props2.rootClassName, "--transition-start"));
        }
        return className;
      }
    }, {
      key: "handleMouseEnter",
      value: function handleMouseEnter(event2) {
        if (typeof this.props.onMouseEnter === "function") {
          this.props.onMouseEnter(event2);
        }
        this.setState({
          mouseInside: true
        });
        this.onActivate();
      }
    }, {
      key: "handleMouseLeave",
      value: function handleMouseLeave(event2) {
        if (typeof this.props.onMouseLeave === "function") {
          this.props.onMouseLeave(event2);
        }
        this.setNextSubmenu();
        this.setState({
          mouseInside: false
        });
        if (!this.state.activeSubMenuIndex && !this.state.nextActiveSubMenuIndex) {
          this.onInactivate({
            hasFocus: this.hasFocus(),
            parentIndex: this.props.parentIndex
          });
        }
      }
    }, {
      key: "handleKeyDown",
      value: function handleKeyDown(event2) {
        if (typeof this.props.onKeyDown === "function") {
          this.props.onKeyDown(event2);
        }
        if (!this.props.enableKeyboardNavigation) {
          return;
        }
        var stop = function stop2(event3) {
          event3.stopPropagation();
        };
        stop(event2);
        switch (event2.key) {
          case "ArrowUp":
            this.handleArrowUp(event2);
            break;
          case "ArrowDown":
            this.handleArrowDown(event2);
            break;
          case "ArrowLeft":
            this.handleArrowLeft(event2);
            break;
          case "ArrowRight":
            this.handleArrowRight(event2);
            break;
          case "Enter":
            this.handleEnterOnFocusedItem(event2);
            break;
          case "Escape":
            this.handleEscape(event2);
          case " ":
            this.handleSpaceOnFocusedItem(event2);
            break;
        }
      }
    }, {
      key: "handleEscape",
      value: function handleEscape(event2) {
        if (this.props.dismissWithEscape) {
          this.dismiss(event2);
        }
      }
    }, {
      key: "handleArrowUp",
      value: function handleArrowUp(event2) {
        var lastItemIndex = this.props.items && this.props.items.length ? this.props.items.length : null;
        var props2 = this.props;
        var focusedItemIndex = this.state.focusedItem != null ? this.state.focusedItem : lastItemIndex;
        var newFocusedItemIndex = (0, _getNextNavigableItem.default)(props2.items, focusedItemIndex, -1);
        if (newFocusedItemIndex == null) {
          return;
        }
        this.setFocusedIndex(newFocusedItemIndex);
      }
    }, {
      key: "handleArrowDown",
      value: function handleArrowDown(event2) {
        var props2 = this.props;
        var focusedItemIndex = this.state.focusedItem != null ? this.state.focusedItem : -1;
        var newFocusedItemIndex = (0, _getNextNavigableItem.default)(props2.items, focusedItemIndex, 1);
        if (newFocusedItemIndex == null) {
          return;
        }
        this.setFocusedIndex(newFocusedItemIndex);
      }
    }, {
      key: "handleArrowLeft",
      value: function handleArrowLeft(event2) {
        if (this.props.rtl) {
          this.openSubMenuAction(this.state.focusedItem);
        } else {
          this.closeSubMenuAction();
        }
      }
    }, {
      key: "handleArrowRight",
      value: function handleArrowRight(event2) {
        if (this.props.rtl) {
          this.closeSubMenuAction();
        } else {
          this.openSubMenuAction(this.state.focusedItem);
        }
      }
    }, {
      key: "handleEnterOnFocusedItem",
      value: function handleEnterOnFocusedItem(event2) {
        var focusedItem = this.getFocusedItem();
        if (this.props.simulateClickOnEnterKeyPress && focusedItem != null && typeof focusedItem.handleClick === "function") {
          focusedItem.handleClick({
            stopPropagation: function stopPropagation() {
            }
          });
        }
      }
    }, {
      key: "handleSpaceOnFocusedItem",
      value: function handleSpaceOnFocusedItem() {
        var activeItemProps = this.getFocusedItemProps();
        if (!activeItemProps) {
          return;
        }
        this.handleSelectionChange({
          name: activeItemProps.name,
          value: activeItemProps.value,
          checked: !activeItemProps.checked,
          multiple: activeItemProps.multiple
        });
      }
    }, {
      key: "handleOnBlur",
      value: function handleOnBlur(event2) {
        var _this5 = this;
        if (typeof this.props.onBlur === "function") {
          this.props.onBlur(event2);
        }
        if (this.props.stopBlurPropagation) {
          event2.stopPropagation();
        }
        if (this.preventOnBlurRecursiveClose) {
          return;
        }
        this.dismissTriggeredByBlur = true;
        setTimeout(function() {
          if (!_this5.hasGeneralFocus()) {
            _this5.dismiss(event2);
          }
        }, _ua.IS_IE ? this.props.hideSubMenuDelay : 20);
      }
    }, {
      key: "dismiss",
      value: function dismiss(event2) {
        this.closeSubmenuRecursively();
        this.props.onDismiss(event2);
      }
    }, {
      key: "scrollItemIntoView",
      value: function scrollItemIntoView(index2) {
        var itemNode = this.getItemDOMNodeByIndex(index2);
        if (!this.scroller || !itemNode) {
          return;
        }
        this.scroller.scrollIntoView(itemNode);
      }
    }, {
      key: "closeSubmenuRecursively",
      value: function closeSubmenuRecursively() {
        this.closeSubMenu();
        this.props.closeSubmenuRecursively();
      }
    }, {
      key: "closeSubMenuAction",
      value: function closeSubMenuAction() {
        if (this.hasSubMenuOpened()) {
          this.closeSubMenu();
        } else if (this.isSubMenu()) {
          this.preventOnBlurRecursiveClose = true;
          this.props.closeSubMenu({
            autoFocus: true
          });
        }
      }
    }, {
      key: "openSubMenuAction",
      value: function openSubMenuAction(focusedItemIndex) {
        var focusedItem = this.getItemByIndex(focusedItemIndex);
        if (!focusedItem) {
          return;
        }
        if (focusedItem && !focusedItem.hasSubmenu()) {
          return;
        }
        if (focusedItemIndex === this.state.activeSubMenuIndex) {
          this.subMenu && this.subMenu.focusFirstItem();
          return;
        }
        var menuOffset = focusedItem && focusedItem.getOffset();
        this.setSubMenu({
          menuOffset,
          index: focusedItemIndex
        });
      }
    }, {
      key: "onActivate",
      value: function onActivate() {
        if (!this.state.activated) {
          this.setState({
            activated: true
          });
          if (this.props.onActivate) {
            this.props.onActivate();
          }
        }
      }
    }, {
      key: "onInactivate",
      value: function onInactivate(options) {
        if (this.state.activated) {
          this.setState({
            activated: false
          });
          if (this.props.onInactivate) {
            this.props.onInactivate(options);
          }
        }
      }
    }, {
      key: "handleSubMenuMouseEnter",
      value: function handleSubMenuMouseEnter() {
        this.setState({
          mouseOverSubMenu: true
        });
      }
    }, {
      key: "handleSubMenuMouseLeave",
      value: function handleSubMenuMouseLeave() {
        this.setState({
          mouseOverSubMenu: false
        });
      }
    }, {
      key: "isSubMenuActive",
      value: function isSubMenuActive() {
        return this.state.subMenuActive;
      }
    }, {
      key: "onSubMenuActivate",
      value: function onSubMenuActivate() {
        this.setState({
          subMenuActive: true
        });
        if (this.closeSubmenuTimeout) {
          clearTimeout(this.closeSubmenuTimeout);
        }
      }
    }, {
      key: "onSubMenuInactivate",
      value: function onSubMenuInactivate(submenuConfig) {
        var _this6 = this;
        var ts = +/* @__PURE__ */ new Date();
        var nextItem = this.state.nextItem;
        var nextTimestamp = this.state.nextTimestamp || 0;
        this.setState({
          subMenuActive: false,
          timestamp: ts
        }, function() {
          setTimeout(function() {
            if (ts != _this6.state.timestamp || nextItem && ts - nextTimestamp < 100) {
              _this6.setSubMenu({
                menuOffset: _this6.state.nextOffset,
                index: _this6.state.nextActiveSubMenuIndex
              }, function() {
                _this6.focus();
              });
              return;
            } else {
              _this6.focus();
            }
            var mouseHasEnteredSubmenuParentItem = submenuConfig && submenuConfig.parentIndex === _this6.itemOverIndex;
            if (!_this6.isSubMenuActive() && !mouseHasEnteredSubmenuParentItem) {
              _this6.closeSubMenu({
                autoFocus: submenuConfig && submenuConfig.hasFocus
              });
            }
          }, 10);
        });
      }
    }, {
      key: "onMenuItemMouseEnter",
      value: function onMenuItemMouseEnter(_ref2) {
        var menuOffset = _ref2.menuOffset, index2 = _ref2.index, hasSubMenu = _ref2.hasSubMenu;
        if (!this.componentIsMounted) {
          return;
        }
        this.itemOverIndex = index2;
        if (!hasSubMenu) {
          if (this.state.activeSubMenuIndex != null) {
            this.setNextSubmenu({
              menuOffset: null,
              index: null
            });
          }
          return;
        }
        if (this.state.activeSubMenuIndex == null) {
          this.setSubMenu({
            menuOffset,
            index: index2
          });
        } else {
          this.setNextSubmenu({
            menuOffset,
            index: index2
          });
        }
      }
    }, {
      key: "onMenuItemMouseLeave",
      value: function onMenuItemMouseLeave(_ref2) {
        var leaveOffset = _ref2.leaveOffset, index2 = _ref2.index;
        _ref2.event;
        if (this.itemOverIndex === index2) {
          this.itemOverIndex = null;
        }
        if (!leaveOffset) {
          return;
        }
        var elementAtMousePosition = globalObject.document.elementFromPoint(leaveOffset.x, leaveOffset.y);
        if (elementAtMousePosition === this.subMenuWrap || (0, _containsNode.default)(this.subMenuWrap, elementAtMousePosition)) {
          return;
        }
        if (this.state.activeSubMenuIndex !== null) {
          this.delayCloseSubmenu(leaveOffset);
        }
        if (this.showTimeout) {
          clearTimeout(this.showTimeout);
        }
      }
    }, {
      key: "delayCloseSubmenu",
      value: function delayCloseSubmenu() {
        var _this7 = this;
        if (!this.componentIsMounted) {
          return;
        }
        if (this.closeSubmenuTimeoutId) {
          return;
        }
        this.closeSubmenuTimeout = setTimeout(function() {
          _this7.closeSubmenuTimeout = null;
          _this7.setSubMenu({
            menuOffset: _this7.state.nextOffset,
            index: _this7.state.nextActiveSubMenuIndex
          });
        }, 100);
      }
    }, {
      key: "removeMouseMoveListener",
      value: function removeMouseMoveListener() {
        if (this.onWindowMouseMove) {
          globalObject.removeEventListener("mousemove", this.onWindowMouseMove);
          this.onWindowMouseMove = null;
        }
      }
    }, {
      key: "setSubMenu",
      value: function setSubMenu() {
        var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, menuOffset = _ref3.menuOffset, _ref3$index = _ref3.index, index2 = _ref3$index === void 0 ? null : _ref3$index;
        var callback2 = arguments.length > 1 ? arguments[1] : void 0;
        this.removeMouseMoveListener();
        if (!this.componentIsMounted) {
          return;
        }
        if (this.state.activeSubMenuIndex === index2) {
          if (callback2) {
            callback2();
          }
          return;
        }
        if (this.hasItemSubMenu(index2) && !this.state.mouseInside) {
          this.onInactivate();
        }
        this.setState({
          menuOffset,
          activeSubMenuIndex: index2,
          nextOffset: null,
          nextTimestamp: null,
          timestamp: +/* @__PURE__ */ new Date()
        }, callback2);
      }
    }, {
      key: "setNextSubmenu",
      value: function setNextSubmenu() {
        var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$menuOffset = _ref4.menuOffset, menuOffset = _ref4$menuOffset === void 0 ? null : _ref4$menuOffset, _ref4$index = _ref4.index, index2 = _ref4$index === void 0 ? null : _ref4$index;
        var ts = +/* @__PURE__ */ new Date();
        this.setState({
          timestamp: ts,
          nextOffset: menuOffset,
          nextActiveSubMenuIndex: index2,
          nextTimestamp: +/* @__PURE__ */ new Date()
        });
      }
    }, {
      key: "closeSubMenu",
      value: function closeSubMenu(options) {
        return;
      }
    }, {
      key: "onMenuItemExpanderClick",
      value: function onMenuItemExpanderClick(event2) {
        event2.nativeEvent.expanderClick = true;
      }
    }, {
      key: "onMenuItemClick",
      value: function onMenuItemClick() {
        var event2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var itemProps = arguments.length > 1 ? arguments[1] : void 0;
        var index2 = arguments.length > 2 ? arguments[2] : void 0;
        var props2 = this.props;
        var stopped = event2 && event2.isPropagationStopped ? event2.isPropagationStopped() : false;
        if (props2.stopClickPropagation && event2.stopPropagation) {
          event2.stopPropagation();
        }
        if (_isMobile.default && itemProps && event2 && event2.nativeEvent && event2.nativeEvent.expanderClick) {
          ({
            x: event2.pageX,
            y: event2.pageY
          });
          var menuOffset = (0, _getRegionRelativeToParent.default)(event2.currentTarget, props2.rootClassName);
          this.onMenuItemMouseEnter({
            hasSubMenu: itemProps.hasSubMenu,
            menuOffset,
            index: itemProps.index
          });
          return;
        }
        if (!stopped) {
          props2.onClick(event2, itemProps, index2);
          if (_isMobile.default && props2.onTouchStart) {
            props2.onTouchStart(event2, itemProps, index2);
          }
          var dismissOnClick = itemProps && itemProps.item && itemProps.item.dismissOnClick !== void 0 ? itemProps.item.dismissOnClick : props2.dismissOnClick;
          if (props2.autoDismiss) {
            if (!itemProps.hasSubMenu) {
              this.dismiss();
            } else if (dismissOnClick) {
              props2.closeSubmenuRecursively();
            }
          } else if (dismissOnClick) {
            props2.closeSubmenuRecursively();
          }
          if (props2.selectOnClick && itemProps.name !== void 0) {
            this.handleSelectionChange({
              name: itemProps.name,
              value: itemProps.value,
              checked: !itemProps.checked,
              multiple: itemProps.multiple
            });
          }
          this.onChildClick(event2, itemProps);
        }
        if (!this.isSeparator(index2)) {
          this.setFocusedIndex(index2);
        }
      }
    }, {
      key: "onChildClick",
      value: function onChildClick(event2, props2) {
        if (this.props.onChildClick) {
          this.props.onChildClick(event2, props2);
        }
        if (this.props.parentMenu) {
          this.props.parentMenu.onChildClick(event2, props2);
        }
      }
    }, {
      key: "setupShowHideDelay",
      value: function setupShowHideDelay() {
        var _this8 = this;
        var setSubMenu = this.setSubMenu;
        this.setSubMenu = function() {
          var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, menuOffset = _ref5.menuOffset, index2 = _ref5.index;
          var callback2 = arguments.length > 1 ? arguments[1] : void 0;
          if (_this8.showTimeout) {
            clearTimeout(_this8.showTimeout);
          }
          if (_this8.hideTimeout) {
            clearTimeout(_this8.hideTimeout);
          }
          if (index2 != null) {
            if (_this8.props.showSubMenuDelay) {
              _this8.showTimeout = setTimeout(function() {
                return setSubMenu({
                  menuOffset,
                  index: index2
                }, callback2);
              }, _this8.props.showSubMenuDelay);
            } else {
              setSubMenu({
                menuOffset,
                index: index2
              }, callback2);
            }
          } else {
            if (_this8.props.hideSubMenuDelay) {
              _this8.hideTimeout = setTimeout(function() {
                return setSubMenu({
                  menuOffset,
                  index: index2
                }, callback2);
              }, _this8.props.hideSubMenuDelay);
            } else {
              setSubMenu({
                menuOffset,
                index: index2
              }, callback2);
            }
          }
        };
      }
    }, {
      key: "setupEnterAnimation",
      value: function setupEnterAnimation() {
        var _this9 = this;
        setTimeout(function() {
          var enableAnimation = _this9.props.enableAnimation && _this9.props.subMenu || _this9.props.enableRootAnimation && !_this9.props.subMenu;
          if (_this9.componentIsMounted) {
            _this9.setState({
              hidden: false,
              enableAnimation
            });
          }
          if (enableAnimation) {
            setTimeout(function() {
              if (_this9.componentIsMounted) {
                _this9.setState({
                  transitionStart: true
                });
              }
              setTimeout(function() {
                if (_this9.componentIsMounted) {
                  _this9.setState({
                    transitionEnded: true
                  });
                }
              }, 16);
            }, 16);
          }
        }, 0);
      }
    }, {
      key: "checkAlignment",
      value: function checkAlignment(props2, skipReset, alignTo) {
        var _this10 = this;
        props2 = props2 || this.props;
        alignTo = alignTo || props2.alignTo;
        if (alignTo && alignTo instanceof HTMLElement && !(0, _containsNode.default)(document.body, alignTo)) {
          return;
        }
        if (props2.visible === false) {
          return;
        }
        if ((props2.constrainTo || alignTo) && !props2.subMenu) {
          var doAlign = function doAlign2() {
            var props3 = _this10.props;
            var alignPositions = _this10.getAlignPositions(props3);
            var domNode = _this10.node;
            if (!domNode) {
              return;
            }
            domNode.style.visibility = "";
            var alignOffset = (0, _prepareAlignOffset.default)(props3.alignOffset);
            var domRegion = _regionAlign.default.from(domNode);
            var actualRegion = domRegion.clone();
            var constrainRegion = props3.constrainTo ? (0, _getConstrainRegion.default)(props3.constrainTo, domNode) : null;
            var positionStyle;
            if (alignTo) {
              var alignRegion = getAlignToRegion(alignTo, domNode);
              actualRegion.alignTo(alignRegion, alignPositions, {
                offset: alignOffset,
                constrain: constrainRegion
              });
              var offsetParent = domNode.offsetParent;
              if (_ua.IS_FF && offsetParent === document.body && getComputedStyle(domNode).position === "fixed") {
                offsetParent = null;
              }
              var offsetParentRect = offsetParent ? null : domNode.getBoundingClientRect();
              var offsetParentRegion = _regionAlign.default.from(offsetParent || {
                top: offsetParentRect.top,
                left: offsetParentRect.left
              });
              var newTop = actualRegion.top - offsetParentRegion.top;
              var newLeft = actualRegion.left - offsetParentRegion.left;
              var transform2 = "translate3d(".concat(Math.floor(newLeft), "px, ").concat(Math.floor(newTop), "px, 0px)");
              positionStyle = {
                transform: transform2,
                top: 0,
                left: 0
              };
            }
            if (constrainRegion) {
              positionStyle = positionStyle || {};
              if (actualRegion.bottom >= constrainRegion.bottom) {
                positionStyle.maxHeight = constrainRegion.bottom - actualRegion.top;
              }
            }
            if (positionStyle) {
              _this10.setState({
                positionStyle
              });
            }
          };
          if (!skipReset) {
            this.node.style.transform = "translate3d(0px, 0px, 0px)";
            this.node.style.visibility = "hidden";
            this.node.style.top = "0px";
            this.node.style.left = "0px";
          }
          raf2(doAlign);
        }
      }
    }, {
      key: "setFocusedIndex",
      value: function setFocusedIndex(newFocusedItem) {
        if (this.props.enableKeyboardNavigation) {
          var focusedItem = this.state.focusedItem;
          if (focusedItem === newFocusedItem) {
            newFocusedItem = null;
          }
          this.scrollItemIntoView(newFocusedItem);
          this.setState({
            focusedItem: newFocusedItem
          });
        }
      }
    }, {
      key: "getItemDOMNodeByIndex",
      value: function getItemDOMNodeByIndex(index2) {
        var item = this.getItemByIndex(index2);
        var itemNode = item && item.getDOMNode();
        return itemNode;
      }
    }, {
      key: "getItemByIndex",
      value: function getItemByIndex(index2) {
        return this.childrenRefs[index2];
      }
    }, {
      key: "getItemPropsByIndex",
      value: function getItemPropsByIndex(index2) {
        var item = this.getItemByIndex(index2);
        return item && item.props;
      }
    }, {
      key: "getFocusedItemProps",
      value: function getFocusedItemProps() {
        var focusedItemIndex = this.state.focusedItem;
        var focusedItemProps = this.getItemPropsByIndex(focusedItemIndex);
        return focusedItemProps;
      }
    }, {
      key: "getFocusedItem",
      value: function getFocusedItem() {
        return this.state.focusedItem != null && this.getItemByIndex(this.state.focusedItem);
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this.node) {
          return;
        }
        if (this.node.focus) {
          this.node.focus();
        }
      }
    }, {
      key: "hasSubMenuOpened",
      value: function hasSubMenuOpened() {
        return this.state.activeSubMenuIndex != null;
      }
    }, {
      key: "isSubMenu",
      value: function isSubMenu() {
        return !!this.props.subMenu;
      }
    }, {
      key: "doesAnyItemHasSubMenu",
      value: function doesAnyItemHasSubMenu() {
        var props2 = this.props;
        return props2.items && !!props2.items.filter(function(item) {
          return item.items && item.items.length;
        }).length;
      }
    }, {
      key: "dosAnyItemHaveSelectInput",
      value: function dosAnyItemHaveSelectInput() {
        var _this11 = this;
        var props2 = this.props;
        return props2.items && !!props2.items.filter(function(item) {
          return item[_this11.props.nameProperty];
        }).length;
      }
    }, {
      key: "hasGeneralFocus",
      value: function hasGeneralFocus() {
        var hasFocus = this.hasFocus();
        if (hasFocus) {
          return hasFocus;
        }
        if (this.hasSubMenuOpened()) {
          return this.hasSubMenuFocus();
        }
        return this.hasChildFocus();
      }
    }, {
      key: "hasSubMenuFocus",
      value: function hasSubMenuFocus() {
        if (this.subMenu) {
          return this.subMenu.hasFocus();
        }
        return null;
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return globalObject.document ? this.node === globalObject.document.activeElement : false;
      }
    }, {
      key: "hasChildFocus",
      value: function hasChildFocus() {
        if (!globalObject.document) {
          return false;
        }
        return (0, _containsNode.default)(this.node, globalObject.document.activeElement);
      }
    }, {
      key: "onSubmenuWillUnmount",
      value: function onSubmenuWillUnmount(instance, config2) {
        var _this12 = this;
        if (config2 && config2.hasFocus) {
          setTimeout(function() {
            _this12.focus();
          }, 0);
        }
      }
    }, {
      key: "focusFirstItem",
      value: function focusFirstItem() {
        var fistNonDisabledItem = (0, _getFirstNonDisabledItem.default)(this.props.items);
        this.focusItem(fistNonDisabledItem);
      }
    }, {
      key: "focusItem",
      value: function focusItem(index2) {
        this.focus();
        this.setFocusedIndex(index2);
      }
    }, {
      key: "getSubmenuNode",
      value: function getSubmenuNode() {
        return this.subMenu && this.subMenu.getNode();
      }
    }, {
      key: "getNode",
      value: function getNode() {
        return this.node;
      }
    }, {
      key: "getSelected",
      value: function getSelected() {
        return this.isSelectedControlled() ? this.props.selected : this.state.selected;
      }
    }, {
      key: "isSelectedControlled",
      value: function isSelectedControlled() {
        return this.props.selected !== void 0;
      }
    }, {
      key: "handleSelectionChange",
      value: function handleSelectionChange(_ref6) {
        var name = _ref6.name, value = _ref6.value, checked = _ref6.checked, multiple = _ref6.multiple;
        var newSelected = _objectSpread2({}, this.getSelected());
        var options = {
          name,
          value,
          checked,
          multiple
        };
        if (!multiple) {
          newSelected[name] = value;
        } else if (checked) {
          newSelected[name] = value === void 0 ? name : value;
        }
        if (!checked) {
          if (multiple || this.props.allowUnselect) {
            delete newSelected[name];
          }
        }
        this.setSelected(newSelected, options);
      }
    }, {
      key: "setSelected",
      value: function setSelected(newSelected, options) {
        if (!this.isSelectedControlled()) {
          this.setState({
            selected: newSelected
          });
        }
        this.props.onSelectionChange(newSelected, options);
      }
    }, {
      key: "handleSubmenuSelectionChange",
      value: function handleSubmenuSelectionChange(selected, options) {
        this.setSelected(selected, options);
      }
    }, {
      key: "getExpandedIndex",
      value: function getExpandedIndex() {
        return this.state.activeSubMenuIndex;
      }
    }, {
      key: "isSeparator",
      value: function isSeparator(index2) {
        var props2 = this.props;
        var separatorIndexes = (0, _getSeparatorIndexes.default)(props2.items);
        return separatorIndexes.indexOf(index2) !== -1;
      }
    }]);
    return InovuaMenu2;
  }(_reactClass.default);
  InovuaMenu.defaultProps = {
    rootClassName: "inovua-react-toolkit-menu",
    depth: 0,
    rtl: false,
    isMenu: true,
    enableScroll: true,
    submenuStyle: null,
    scrollerProps: {},
    theme: "default-light",
    dismissOnClick: true,
    disableScroller: false,
    shadow: true,
    submenuAlignOffset: _submenuAlignPositions.alignOffsetLTR,
    rtlSubmenuAlignOffset: _submenuAlignPositions.alignOffsetRTL,
    showSubMenuDelay: 150,
    hideSubMenuDelay: 150,
    expanderSize: 10,
    scrollOnMouseEnter: true,
    onClick: function onClick() {
    },
    onSelectionChange: function onSelectionChange() {
    },
    columns: ["label"],
    items: null,
    maxHeight: "auto",
    scrollArrowIncrementType: "step",
    enableAnimation: true,
    fadeDuration: 100,
    fadeTransitionFunction: "ease",
    enableRootAnimation: false,
    itemStyle: {},
    itemOverStyle: {},
    itemDisabledStyle: {},
    itemExpandedStyle: {},
    cellStyle: {},
    stopClickPropagation: true,
    stopBlurPropagation: true,
    scrollProps: {},
    inTriangleWaitDelay: 300,
    alignOffset: {
      x: 0,
      y: 0
    },
    simulateClickOnEnterKeyPress: true,
    enableKeyboardNavigation: true,
    defaultFocusedItem: null,
    autoFocus: false,
    closeSubMenu: function closeSubMenu() {
    },
    closeSubmenuRecursively: function closeSubmenuRecursively() {
    },
    onDismiss: function onDismiss() {
    },
    componentWillUnmount: function componentWillUnmount() {
    },
    componentDidMount: function componentDidMount() {
    },
    useMouseInTriangleCheck: false,
    allowUnselect: false,
    enableSelection: false,
    nameProperty: "name",
    valueProperty: "value",
    selectionInputPosition: "start",
    defaultSelected: {},
    selectOnClick: true,
    checkIconSize: 16,
    radioIconSize: 16,
    notifyResizeDelay: 16,
    browserNativeSelectInputs: false,
    showWarnings: !_uglified.default
  };
  InovuaMenu.propTypes = {
    rootClassName: _propTypes.default.string,
    items: _propTypes.default.array,
    columns: _propTypes.default.array,
    dismissOnClick: _propTypes.default.bool,
    autoDismiss: _propTypes.default.bool,
    disableScroller: _propTypes.default.bool,
    showSubMenuDelay: _propTypes.default.number,
    hideSubMenuDelay: _propTypes.default.number,
    notifyResizeDelay: _propTypes.default.number,
    scrollOnMouseEnter: _propTypes.default.bool,
    padding: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    border: _propTypes.default.string,
    borderRadius: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    rowActiveStyle: _propTypes.default.object,
    rowOverStyle: _propTypes.default.object,
    rowStyle: _propTypes.default.object,
    maxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    submenuMaxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    minSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    maxSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
      height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
    })]),
    onClick: _propTypes.default.func,
    showScrollArrows: _propTypes.default.bool,
    scrollProps: _propTypes.default.object,
    scrollArrowIncrementType: _propTypes.default.oneOf(["step", "page"]),
    renderScroller: _propTypes.default.func,
    enableAnimation: _propTypes.default.bool,
    fadeDuration: _propTypes.default.number,
    fadeTransitionFunction: _propTypes.default.string,
    enableRootAnimation: _propTypes.default.bool,
    itemStyle: _propTypes.default.object,
    itemClassName: _propTypes.default.string,
    itemActiveStyle: _propTypes.default.object,
    itemActiveClassName: _propTypes.default.string,
    itemOverStyle: _propTypes.default.object,
    itemOverClassName: _propTypes.default.string,
    itemDisabledStyle: _propTypes.default.object,
    itemDisabledClassName: _propTypes.default.string,
    itemExpandedStyle: _propTypes.default.object,
    itemExpandedClassName: _propTypes.default.string,
    itemFocusedStyle: _propTypes.default.object,
    itemFocusedClassName: _propTypes.default.string,
    itemOverFocusedStyle: _propTypes.default.object,
    visible: _propTypes.default.bool,
    itemHeight: _propTypes.default.number,
    cellStyle: _propTypes.default.object,
    secondaryLabelStyle: _propTypes.default.object,
    labelStyle: _propTypes.default.object,
    titleStyle: _propTypes.default.object,
    alignTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func, _propTypes.default.string]),
    inTriangleWaitDelay: _propTypes.default.number,
    alignPositions: _propTypes.default.arrayOf(_propTypes.default.string),
    alignOffset: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object, _propTypes.default.number]),
    submenuAlignOffset: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    }), _propTypes.default.number]),
    rtlSubmenuAlignOffset: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.shape({
      x: _propTypes.default.number,
      y: _propTypes.default.number
    }), _propTypes.default.number]),
    alignPosition: _propTypes.default.oneOf([1, -1]),
    rtl: _propTypes.default.bool,
    enableKeyboardNavigation: _propTypes.default.bool,
    defaultFocusedItem: _propTypes.default.number,
    autoFocus: _propTypes.default.bool,
    closeSubMenu: _propTypes.default.func,
    closeSubmenuRecursively: _propTypes.default.func,
    simulateClickOnEnterKeyPress: _propTypes.default.bool,
    onChildClick: _propTypes.default.func,
    onDismiss: _propTypes.default.func,
    expanderStyle: _propTypes.default.object,
    depth: _propTypes.default.number,
    isMenu: _propTypes.default.bool,
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
    enableScroll: _propTypes.default.bool,
    submenuStyle: _propTypes.default.object,
    scrollerProps: _propTypes.default.object,
    theme: _propTypes.default.string,
    stopClickPropagation: _propTypes.default.bool,
    componentWillUnmount: _propTypes.default.func,
    componentDidMount: _propTypes.default.func,
    itemStyleProps: _propTypes.default.object,
    childrenLength: _propTypes.default.number,
    separatorIndexes: _propTypes.default.string,
    tableClassName: _propTypes.default.string,
    shadow: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    stopBlurPropagation: _propTypes.default.bool,
    submenuProps: _propTypes.default.object,
    menuHasSubmenu: _propTypes.default.bool,
    depthSet: _propTypes.default.bool,
    subMenu: _propTypes.default.bool,
    parentIndex: _propTypes.default.number,
    parentMenu: _propTypes.default.object,
    onActivate: _propTypes.default.func,
    onInactivate: _propTypes.default.func,
    expander: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
    expanderSize: _propTypes.default.number,
    overStyle: _propTypes.default.object,
    activeStyle: _propTypes.default.object,
    disabledStyle: _propTypes.default.object,
    expandedStyle: _propTypes.default.object,
    menuSeparatorStyle: _propTypes.default.object,
    useMouseInTriangleCheck: _propTypes.default.bool,
    selected: _propTypes.default.object,
    defaultSelected: _propTypes.default.object,
    allowUnselect: _propTypes.default.bool,
    enableSelection: _propTypes.default.bool,
    nativeScroll: _propTypes.default.bool,
    scrollContainerProps: _propTypes.default.object,
    nameProperty: _propTypes.default.string,
    valueProperty: _propTypes.default.string,
    renderCheckInput: _propTypes.default.func,
    renderRadioInput: _propTypes.default.func,
    onSelectionChange: _propTypes.default.func,
    selectionInputPosition: _propTypes.default.oneOf(["start", "end"]),
    selectOnClick: _propTypes.default.bool,
    checkIconSize: _propTypes.default.number,
    radioIconSize: _propTypes.default.number,
    showWarnings: _propTypes.default.bool,
    updatePositionOnScroll: _propTypes.default.bool,
    browserNativeSelectInputs: _propTypes.default.bool,
    dismissWithEscape: _propTypes.default.bool
  };
  var _default2 = InovuaMenu;
  Menu.default = _default2;
  return Menu;
}
var hasRequiredSrc$a;
function requireSrc$a() {
  if (hasRequiredSrc$a)
    return src$9;
  hasRequiredSrc$a = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Cell", {
      enumerable: true,
      get: function get2() {
        return _MenuItemCell.default;
      }
    });
    Object.defineProperty(exports, "Item", {
      enumerable: true,
      get: function get2() {
        return _MenuItem.default;
      }
    });
    Object.defineProperty(exports, "ItemCell", {
      enumerable: true,
      get: function get2() {
        return _MenuItemCell.default;
      }
    });
    Object.defineProperty(exports, "Separator", {
      enumerable: true,
      get: function get2() {
        return _MenuSeparator.default;
      }
    });
    exports.default = void 0;
    var _Menu = _interopRequireDefault2(requireMenu$1());
    var _MenuItem = _interopRequireDefault2(requireMenuItem());
    var _MenuItemCell = _interopRequireDefault2(requireMenuItemCell());
    var _MenuSeparator = _interopRequireDefault2(requireMenuSeparator());
    var _default2 = _Menu.default;
    exports.default = _default2;
    _Menu.default.Item = _MenuItem.default;
    _Menu.default.Item.Cell = _MenuItemCell.default;
    _MenuItem.default.Cell = _MenuItemCell.default;
  })(src$9);
  return src$9;
}
var hasRequiredMenu;
function requireMenu() {
  if (hasRequiredMenu)
    return Menu$1;
  hasRequiredMenu = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Menu$1, "__esModule", {
    value: true
  });
  Menu$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$a());
  var _default2 = _src.default;
  Menu$1.default = _default2;
  return Menu$1;
}
var Button$1 = {};
var src$6 = {};
var Button = {};
var prepareClassName$1 = {};
var hasRequiredPrepareClassName$1;
function requirePrepareClassName$1() {
  if (hasRequiredPrepareClassName$1)
    return prepareClassName$1;
  hasRequiredPrepareClassName$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(prepareClassName$1, "__esModule", {
    value: true
  });
  prepareClassName$1.default = void 0;
  var _join = _interopRequireDefault2(requireJoin$3());
  function prepareClassName2() {
    var states = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var classNames2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var disabled = states.disabled, icon = states.icon, active = states.active, pressed = states.pressed, over = states.over, children = states.children, focused = states.focused, iconFirst = states.iconFirst, rtl = states.rtl, ellipsis = states.ellipsis, align2 = states.align, verticalAlign = states.verticalAlign, wrap2 = states.wrap, overflow = states.overflow, iconPosition = states.iconPosition;
    var className = classNames2.className, rootClassName = classNames2.rootClassName, disabledClassName = classNames2.disabledClassName, activeClassName = classNames2.activeClassName, pressedClassName = classNames2.pressedClassName, overClassName = classNames2.overClassName, focusedClassName = classNames2.focusedClassName, theme2 = classNames2.theme;
    var preparedClassname = (0, _join.default)(className, rootClassName, theme2 && "".concat(rootClassName, "--theme-").concat(theme2), disabled && disabledClassName, disabled && "".concat(rootClassName, "--disabled"), active && activeClassName, active && "".concat(rootClassName, "--active"), pressed && pressedClassName, pressed && "".concat(rootClassName, "--pressed"), over && overClassName, over && "".concat(rootClassName, "--over"), focused && focusedClassName, focused && "".concat(rootClassName, "--focused"), rtl ? "".concat(rootClassName, "--rtl") : "".concat(rootClassName, "--ltr"), ellipsis && "".concat(rootClassName, "--ellipsis"), align2 && "".concat(rootClassName, "--align-").concat(align2), !children && "".concat(rootClassName, "--no-children"), verticalAlign && "".concat(rootClassName, "--vertical-align-").concat(verticalAlign), overflow === true && "".concat(rootClassName, "--overflow-visible"), overflow === false && "".concat(rootClassName, "--overflow-hidden"), wrap2 === true && "".concat(rootClassName, "--wrap"), wrap2 === false && "".concat(rootClassName, "--nowrap"), icon && "".concat(rootClassName, "--has-icon"), iconPosition && "".concat(rootClassName, "--icon-position-").concat(iconPosition), iconFirst ? "".concat(rootClassName, "--icon-first") : "".concat(rootClassName, "--icon-last"));
    return preparedClassname;
  }
  var _default2 = prepareClassName2;
  prepareClassName$1.default = _default2;
  return prepareClassName$1;
}
var hasRequiredButton$1;
function requireButton$1() {
  if (hasRequiredButton$1)
    return Button;
  hasRequiredButton$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Button, "__esModule", {
    value: true
  });
  Button.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _assign = _interopRequireDefault2(requireAssign());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _prepareClassName = _interopRequireDefault2(requirePrepareClassName$1());
  var _uglified = _interopRequireDefault2(requireUglified());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var InovuaButton = function(_Component) {
    (0, _inherits2.default)(InovuaButton2, _Component);
    var _super = _createSuper(InovuaButton2);
    function InovuaButton2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaButton2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps, prevState) {
        if (!prevProps.disabled && _this.props.disabled && prevState.focused) {
          _this.handleBlur();
          _this.setState({
            mouseOver: false
          });
        }
        if (prevProps.disabled && !_this.props.disabled && _this.state.focused) {
          _this.handleBlur();
        }
      });
      _this.state = {
        mouseOver: false,
        active: false,
        pressed: _this.props.defaultPressed
      };
      _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseEnter = _this.handleMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseLeave = _this.handleMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseDown = _this.handleMouseDown.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleMouseUp = _this.handleMouseUp.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
      _this.getRootRef = function(ref) {
        _this.rootNode = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaButton2, [{
      key: "handleKeyDown",
      value: function handleKeyDown(event2) {
        var key = event2.key;
        if (this.tagName != "button" && key == "Enter") {
          this.props.onClick(event2);
          event2.preventDefault();
        }
        if (this.props.onKeyDown) {
          this.props.onKeyDown(event2);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var buttonStates = this.getButtonStates();
        var style = this.prepareStyle(this.props, buttonStates);
        var className = (0, _prepareClassName.default)(buttonStates, props2);
        var domProps = _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(this.props, InovuaButton2.propTypes)), {}, {
          style,
          className,
          onClick: this.handleClick,
          onKeyDown: this.handleKeyDown,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          onMouseDown: this.handleMouseDown,
          onMouseUp: this.handleMouseUp,
          href: props2.href
        });
        var topBottomVerticalAlign = this.props.verticalAlign == "top" || this.props.verticalAlign == "bottom";
        var avoidButtonTag = !!this.props.icon || topBottomVerticalAlign;
        var TagName = this.props.tagName;
        if (!TagName && !avoidButtonTag) {
          TagName = "button";
        }
        if (TagName == "button" && avoidButtonTag) {
          if (this.props.showWarnings && console && console.warn) {
            console.warn(`Button html tags are not fully compatible with flexbox, so we're rendering a "div" instead. See http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers for details.`);
          }
        }
        if (props2.href) {
          TagName = "a";
        }
        TagName = TagName || "div";
        this.tagName = TagName;
        if (TagName === "div" && domProps.tabIndex === void 0 && !this.props.disabled) {
          domProps.tabIndex = 0;
        }
        return _react.default.createElement(TagName, _objectSpread2(_objectSpread2({}, domProps), {}, {
          ref: this.getRootRef,
          children: this.prepareChildren(props2, buttonStates)
        }));
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(event2) {
        if (this.props.disabled) {
          return;
        }
        this.setState({
          focused: true
        });
        this.props.onFocus(event2);
      }
    }, {
      key: "handleBlur",
      value: function handleBlur(event2) {
        this.setState({
          focused: false
        });
        this.props.onBlur(event2);
      }
    }, {
      key: "handleClick",
      value: function handleClick(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          event2.preventDefault();
          event2.stopPropagation();
          return;
        }
        if (this.isToggleButon()) {
          this.toggle();
        }
        this.props.onClick(event2);
      }
    }, {
      key: "isToggleButon",
      value: function isToggleButon() {
        return this.isPressed() !== void 0;
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var isPressed = this.isPressed();
        var newPressed = !isPressed;
        if (!this.isPressedControlled()) {
          this.setState({
            pressed: newPressed
          });
        }
        this.props.onToggle(newPressed);
      }
    }, {
      key: "isToggleButton",
      value: function isToggleButton() {
        return this.props.defaultPressed !== null || this.props.pressed !== null;
      }
    }, {
      key: "handleMouseEnter",
      value: function handleMouseEnter(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          return;
        }
        this.setState({
          mouseOver: true
        });
        this.props.onMouseEnter(event2);
      }
    }, {
      key: "handleMouseLeave",
      value: function handleMouseLeave(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          return;
        }
        this.setState({
          mouseOver: false
        });
        this.props.onMouseLeave(event2);
      }
    }, {
      key: "handleMouseUp",
      value: function handleMouseUp(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          return;
        }
        this.setState({
          active: false
        });
        globalObject.removeEventListener("mouseup", this.handleMouseUp);
        props2.onMouseUp(event2);
        props2.onDeactivate(event2);
      }
    }, {
      key: "handleMouseDown",
      value: function handleMouseDown(event2) {
        var props2 = this.props;
        if (props2.disabled) {
          return;
        }
        this.setState({
          active: true
        });
        globalObject.addEventListener("mouseup", this.handleMouseUp);
        props2.onMouseDown(event2);
        props2.onActivate(event2);
      }
    }, {
      key: "isIconFirst",
      value: function isIconFirst() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var iconPosition = props2.iconPosition, rtl = props2.rtl;
        var iconFirst = iconPosition == "left" && !rtl || iconPosition == "top" || rtl && iconPosition == "start" || rtl && iconPosition == "right" || !rtl && iconPosition == "start";
        return iconFirst;
      }
    }, {
      key: "prepareChildren",
      value: function prepareChildren(props2, buttonStates) {
        var _this2 = this;
        var children = props2.children;
        children = _react.default.createElement("div", {
          key: "text",
          className: "".concat(this.props.rootClassName, "__text"),
          children
        });
        var icon = this.props.icon;
        this.props.rtl;
        if (icon) {
          this.props.iconPosition;
          var iconFirst = this.isIconFirst(this.props);
          if (typeof icon == "function") {
            icon = icon(buttonStates);
          }
          var wrapIcon = function wrapIcon2(icon2) {
            return _react.default.createElement("div", {
              key: "iconWrapper",
              className: "".concat(_this2.props.rootClassName, "__icon-wrap") + (_this2.props.disabled ? " ".concat(_this2.props.rootClassName, "__icon-wrap--disabled") : ""),
              children: icon2
            });
          };
          if (iconFirst) {
            children = [wrapIcon(icon), children];
          } else {
            children = [children, wrapIcon(icon)];
          }
        }
        if (this.props.renderChildren) {
          children = this.props.renderChildren(children);
        }
        return children;
      }
    }, {
      key: "getButtonStates",
      value: function getButtonStates(props2) {
        props2 = props2 || this.props;
        return {
          disabled: props2.disabled,
          children: props2.children,
          active: this.isActive(),
          pressed: this.isPressed(),
          over: this.isOver(),
          focused: this.isFocused(),
          iconFirst: this.isIconFirst(),
          rtl: this.props.rtl,
          icon: this.props.icon,
          ellipsis: props2.ellipsis,
          align: props2.align,
          verticalAlign: props2.verticalAlign,
          wrap: props2.wrap,
          overflow: props2.overflow,
          iconPosition: this.props.icon ? this.props.iconPosition : void 0
        };
      }
    }, {
      key: "prepareStyle",
      value: function prepareStyle2() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var buttonStates = arguments.length > 1 ? arguments[1] : void 0;
        var style = typeof props2.style !== "function" ? (0, _assign.default)({}, props2.style) : props2.style(props2, buttonStates);
        if (props2.disabled) {
          (0, _assign.default)(style, props2.disabledStyle);
        } else {
          if (this.isPressed()) {
            (0, _assign.default)(style, props2.pressedStyle);
          }
          if (this.isFocused()) {
            (0, _assign.default)(style, props2.focusedStyle);
          }
          if (this.isOver()) {
            (0, _assign.default)(style, props2.overStyle);
          }
          if (this.isActive()) {
            (0, _assign.default)(style, this.props.activeStyle);
          }
        }
        return style;
      }
    }, {
      key: "isActive",
      value: function isActive() {
        return this.props.activeState == null ? !!this.state.active : this.props.activeState;
      }
    }, {
      key: "isOver",
      value: function isOver() {
        return this.props.overState == null ? !!this.state.mouseOver : this.props.overState;
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this.props.focusedState == null ? !!this.state.focused : this.props.focusedState;
      }
    }, {
      key: "isPressedControlled",
      value: function isPressedControlled() {
        return this.props.pressed != null;
      }
    }, {
      key: "isPressed",
      value: function isPressed() {
        return this.isPressedControlled() ? this.props.pressed : this.state.pressed;
      }
    }, {
      key: "getRootNode",
      value: function getRootNode() {
        return this.rootNode;
      }
    }]);
    return InovuaButton2;
  }(_react.Component);
  function emptyFn() {
  }
  InovuaButton.defaultProps = {
    isInovuaButton: true,
    theme: "default-light",
    rootClassName: "inovua-react-toolkit-button",
    align: "center",
    verticalAlign: "middle",
    ellipsis: true,
    href: null,
    iconPosition: "start",
    onFocus: emptyFn,
    onBlur: emptyFn,
    onToggle: emptyFn,
    onClick: emptyFn,
    onMouseEnter: emptyFn,
    onMouseUp: emptyFn,
    onMouseDown: emptyFn,
    onDeactivate: emptyFn,
    onMouseLeave: emptyFn,
    onActivate: emptyFn,
    showWarnings: !_uglified.default
  };
  InovuaButton.propTypes = {
    isInovuaButton: _propTypes.default.bool,
    tagName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
    primary: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    pressed: _propTypes.default.bool,
    defaultPressed: _propTypes.default.bool,
    href: _propTypes.default.string,
    align: _propTypes.default.oneOf(["start", "end", "center", "left", "right"]),
    verticalAlign: _propTypes.default.oneOf(["top", "middle", "center", "bottom"]),
    rtl: _propTypes.default.bool,
    wrap: _propTypes.default.bool,
    overflow: _propTypes.default.bool,
    icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
    iconPosition: _propTypes.default.oneOf(["top", "bottom", "left", "right", "start", "end"]),
    style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    disabledStyle: _propTypes.default.object,
    focusedStyle: _propTypes.default.object,
    pressedStyle: _propTypes.default.object,
    overStyle: _propTypes.default.object,
    activeStyle: _propTypes.default.object,
    className: _propTypes.default.string,
    activeClassName: _propTypes.default.string,
    overClassName: _propTypes.default.string,
    focusedClassName: _propTypes.default.string,
    disabledClassName: _propTypes.default.string,
    pressedClassName: _propTypes.default.string,
    theme: _propTypes.default.string,
    rootClassName: _propTypes.default.string,
    ellipsis: _propTypes.default.bool,
    onClick: _propTypes.default.func,
    onFocus: _propTypes.default.func,
    onBlur: _propTypes.default.func,
    onToggle: _propTypes.default.func,
    onMouseEnter: _propTypes.default.func,
    onMouseUp: _propTypes.default.func,
    onMouseDown: _propTypes.default.func,
    onDeactivate: _propTypes.default.func,
    onMouseLeave: _propTypes.default.func,
    onActivate: _propTypes.default.func,
    showWarnings: _propTypes.default.bool
  };
  var _default2 = InovuaButton;
  Button.default = _default2;
  return Button;
}
var hasRequiredSrc$9;
function requireSrc$9() {
  if (hasRequiredSrc$9)
    return src$6;
  hasRequiredSrc$9 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$6, "__esModule", {
    value: true
  });
  src$6.default = void 0;
  var _Button = _interopRequireDefault2(requireButton$1());
  var _default2 = _Button.default;
  src$6.default = _default2;
  return src$6;
}
var hasRequiredButton;
function requireButton() {
  if (hasRequiredButton)
    return Button$1;
  hasRequiredButton = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Button$1, "__esModule", {
    value: true
  });
  Button$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$9());
  var _default2 = _src.default;
  Button$1.default = _default2;
  return Button$1;
}
var ToggleIcon = {};
var hasRequiredToggleIcon;
function requireToggleIcon() {
  if (hasRequiredToggleIcon)
    return ToggleIcon;
  hasRequiredToggleIcon = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(ToggleIcon, "__esModule", {
    value: true
  });
  ToggleIcon.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _objectWithoutProperties2 = _interopRequireDefault2(requireObjectWithoutProperties());
  var _react = _interopRequireDefault2(reactExports);
  var _excluded2 = ["onClick", "className", "expanded", "size"];
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function ToggleIcon$1(_ref2) {
    var onClick = _ref2.onClick, className = _ref2.className, expanded = _ref2.expanded, _ref$size = _ref2.size, size2 = _ref$size === void 0 ? 17 : _ref$size, rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, rest), {}, {
      className,
      onClick
    }), _react.default.createElement("svg", {
      height: size2,
      width: size2,
      viewBox: "0 0 24 24"
    }, expanded ? _react.default.createElement("path", {
      d: "M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z"
    }) : _react.default.createElement("path", {
      d: "M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
    })));
  }
  var _default2 = ToggleIcon$1;
  ToggleIcon.default = _default2;
  return ToggleIcon;
}
var hasRequiredDropdownButton$1;
function requireDropdownButton$1() {
  if (hasRequiredDropdownButton$1)
    return DropdownButton;
  hasRequiredDropdownButton$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(DropdownButton, "__esModule", {
    value: true
  });
  DropdownButton.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _Menu = _interopRequireDefault2(requireMenu());
  var _Button = _interopRequireDefault2(requireButton());
  var _ToggleIcon = _interopRequireDefault2(requireToggleIcon());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _containsNode = _interopRequireDefault2(requireContainsNode());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var ALIGN_OFFSET = {
    top: 5
  };
  var returnFalse = function returnFalse2() {
    return false;
  };
  var InovuaDropDownButton = function(_Component) {
    (0, _inherits2.default)(InovuaDropDownButton2, _Component);
    var _super = _createSuper(InovuaDropDownButton2);
    function InovuaDropDownButton2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaDropDownButton2);
      _this = _super.call(this, props2);
      _this.state = {
        expanded: props2.defaultExpanded,
        focused: false
      };
      _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleClickOutside = _this.handleClickOutside.bind((0, _assertThisInitialized2.default)(_this));
      _this.handleWindowScroll = _this.handleWindowScroll.bind((0, _assertThisInitialized2.default)(_this));
      _this.onMenuDismiss = _this.onMenuDismiss.bind((0, _assertThisInitialized2.default)(_this));
      _this.rootRef = function(ref) {
        _this.rootNode = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaDropDownButton2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        if (nextProps.shouldComponentUpdate) {
          return nextProps.shouldComponentUpdate(nextProps, nextState, this);
        }
        return true;
      }
    }, {
      key: "onMenuDismiss",
      value: function onMenuDismiss() {
        this.props.onDismiss();
      }
    }, {
      key: "handleKeyDown",
      value: function handleKeyDown(event2) {
        event2.key;
        if (this.props.hideMenuOnEscape && this.getExpanded()) {
          this.collapse();
          event2.preventDefault();
        }
        if (this.props.onKeyDown) {
          this.props.onKeyDown(event2);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateComponentReferenceRegion();
        if (this.props.dismissOnScroll) {
          window.addEventListener("scroll", this.handleWindowScroll, {
            capture: true
          });
          window.addEventListener("scroll", this.handleWindowScroll, {
            capture: false
          });
        }
        globalObject.addEventListener("click", this.handleClickOutside);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        globalObject.removeEventListener("click", this.handleClickOutside);
        globalObject.removeEventListener("scroll", this.handleWindowScroll, {
          capture: true
        });
        globalObject.removeEventListener("scroll", this.handleWindowScroll, {
          capture: false
        });
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var className = (0, _join.default)(props2.rootClassName, props2.className, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), this.state.focused && "".concat(props2.rootClassName, "--focused"), props2.disabled && "".concat(props2.rootClassName, "--disabled"), this.getExpanded() && "".concat(props2.rootClassName, "--expanded"), props2.rtl ? "".concat(props2.rootClassName, "--rtl") : "".concat(props2.rootClassName, "--ltr"));
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, (0, _cleanProps.default)(props2, InovuaDropDownButton2.propTypes)), {}, {
          ref: this.rootRef,
          className
        }), this.renderButton(), this.renderMenu());
      }
    }, {
      key: "renderButton",
      value: function renderButton() {
        var _objectSpread22;
        var props2 = this.props;
        var className = "".concat(props2.rootClassName, "__button");
        var buttonProps = _objectSpread2(_objectSpread2(_objectSpread2({}, this.getCommonProps()), {}, {
          key: "button",
          iconPosition: this.props.iconPosition || this.props.arrowPosition,
          style: _objectSpread2({}, props2.buttonProps)
        }, props2.buttonProps), {}, (_objectSpread22 = {
          className,
          icon: props2.icon,
          disabled: props2.disabled,
          onClick: this.handleClick,
          rtl: props2.rtl,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: this.handleKeyDown
        }, (0, _defineProperty2.default)(_objectSpread22, "icon", [props2.icon && props2.icon.type ? (0, _react.cloneElement)(props2.icon, {
          key: "inovua-ddbuttonicon"
        }) : props2.icon, this.renderArrow()]), (0, _defineProperty2.default)(_objectSpread22, "children", props2.children), (0, _defineProperty2.default)(_objectSpread22, "tagName", "div"), _objectSpread22));
        var result;
        if (typeof props2.renderButton === "function") {
          result = props2.renderButton(buttonProps);
        }
        if (result === void 0) {
          result = _react.default.createElement(_Button.default, _objectSpread2({}, buttonProps));
        }
        return result;
      }
    }, {
      key: "handleClick",
      value: function handleClick(event2) {
        if (this.props.hideMenuOnClick) {
          this.toggle();
        } else {
          this.expand();
        }
        this.props.onClick(event2);
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(event2) {
        if (this.props.disabled) {
          return;
        }
        this.setState({
          focused: true
        });
        this.props.onFocus(event2);
      }
    }, {
      key: "handleBlur",
      value: function handleBlur(event2) {
        if (this.props.disabled) {
          return;
        }
        this.setState({
          focused: false
        });
        this.props.onBlur(event2);
      }
    }, {
      key: "expand",
      value: function expand() {
        this.setExpanded(true);
      }
    }, {
      key: "collapse",
      value: function collapse() {
        this.setExpanded(false);
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var expanded = this.getExpanded();
        this.setExpanded(!expanded);
      }
    }, {
      key: "isExpandedControlled",
      value: function isExpandedControlled() {
        return this.props.expanded != void 0;
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded) {
        if (expanded === this.getExpanded()) {
          return null;
        }
        if (!this.isExpandedControlled()) {
          this.setState({
            expanded
          });
          this.updateComponentReferenceRegion();
        }
        if (!expanded) {
          this.props.onDismiss();
        }
        this.props.onExpandedChange(expanded);
      }
    }, {
      key: "getExpanded",
      value: function getExpanded() {
        return this.isExpandedControlled() ? this.props.expanded : this.state.expanded;
      }
    }, {
      key: "updateComponentReferenceRegion",
      value: function updateComponentReferenceRegion() {
        var node2 = this.props.getAlignNode ? this.props.getAlignNode() : this.rootNode;
        if (!node2) {
          return null;
        }
        var referenceRegion = _regionAlign.default.from(node2);
        this.setState({
          referenceRegion
        });
      }
    }, {
      key: "renderMenu",
      value: function renderMenu() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        var expanded = this.getExpanded();
        if (!expanded && !this.props.renderMenuWhenCollapsed) {
          return;
        }
        if (!props2.items || !props2.items.length) {
          return null;
        }
        var style = _objectSpread2({}, props2.menuProps.style);
        if (!expanded) {
          style.display = "none";
        }
        var menuProps = _objectSpread2(_objectSpread2(_objectSpread2({}, this.getCommonProps()), {}, {
          key: "menu",
          items: props2.items,
          alignOffset: ALIGN_OFFSET,
          constrainTo: props2.constrainTo
        }, props2.menuProps), {}, {
          alignTo: this.state.referenceRegion,
          alignPositions: props2.alignPositions,
          onChildClick: props2.onMenuClick,
          rtl: props2.rtl,
          style,
          visible: expanded,
          theme: "default-light",
          className: "".concat(props2.rootClassName, "__menu"),
          onDismiss: this.onMenuDismiss
        });
        if (!expanded && !this.prevExpanded && this.props.optimizeMenuSCUWhenCollapsed) {
          menuProps.shouldComponentUpdate = returnFalse;
        }
        this.prevExpanded = expanded;
        var MenuComp = this.props.menu ? this.props.menu : _Menu.default;
        if (!MenuComp) {
          return null;
        }
        var result;
        if (typeof props2.renderMenu === "function") {
          result = props2.renderMenu(menuProps);
        }
        if (result === void 0) {
          result = _react.default.createElement(MenuComp, _objectSpread2({}, menuProps));
        }
        return result;
      }
    }, {
      key: "renderArrow",
      value: function renderArrow() {
        var props2 = this.props;
        var result = null;
        if (props2.arrow !== true) {
          if (typeof props2.arrow === "function") {
            result = props2.arrow(this.getExpanded());
          } else {
            result = props2.arrow;
          }
        }
        if (result === null) {
          result = _react.default.createElement(_ToggleIcon.default, {
            key: "icon",
            className: "".concat(props2.rootClassName, "__arrow"),
            expanded: this.getExpanded()
          });
        }
        return result;
      }
    }, {
      key: "getCommonProps",
      value: function getCommonProps() {
        var props2 = this.props;
        return {
          theme: props2.theme
        };
      }
    }, {
      key: "handleClickOutside",
      value: function handleClickOutside(event2) {
        var node2 = this.rootNode;
        var target = event2.target;
        if (!node2 || !target) {
          return null;
        }
        if (node2 !== target && !node2.contains(target)) {
          if (this.props.hideMenuOnClickOutside) {
            this.collapse();
          }
        }
      }
    }, {
      key: "handleWindowScroll",
      value: function handleWindowScroll(event2) {
        if (this.getExpanded() && !(0, _containsNode.default)(this.rootNode, event2.target)) {
          this.setExpanded(false);
        }
      }
    }]);
    return InovuaDropDownButton2;
  }(_react.Component);
  function emptyFn() {
  }
  InovuaDropDownButton.defaultProps = {
    rootClassName: "inovua-react-toolkit-dropdown-button",
    theme: "default-light",
    menuProps: {},
    rtl: false,
    menu: null,
    alignPositions: ["tl-bl", "tr-br", "bl-tl", "br-tr", "tl-tr", "bl-br", "tr-tl", "tr-br"],
    arrow: true,
    arrowPosition: "end",
    constrainTo: true,
    disabled: false,
    hideMenuOnClick: true,
    hideMenuOnClickOutside: true,
    hideMenuOnEscape: true,
    onExpandedChange: emptyFn,
    onMenuClick: emptyFn,
    optimizeMenuSCUWhenCollapsed: false,
    onClick: emptyFn,
    onFocus: emptyFn,
    onBlur: emptyFn,
    onDismiss: emptyFn,
    defaultExpanded: false,
    dismissOnScroll: false,
    isInovuaButton: true
  };
  InovuaDropDownButton.propTypes = {
    theme: _propTypes.default.string,
    rtl: _propTypes.default.bool,
    dismissOnScroll: _propTypes.default.bool,
    icon: _propTypes.default.node,
    iconPosition: _propTypes.default.oneOf(["left", "right", "start", "end"]),
    rootClassName: _propTypes.default.string,
    menuProps: _propTypes.default.object,
    buttonProps: _propTypes.default.object,
    disabled: _propTypes.default.bool,
    menu: _propTypes.default.func,
    arrow: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.bool, _propTypes.default.func]),
    alignPositions: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
    onDismiss: _propTypes.default.func,
    arrowPosition: _propTypes.default.oneOf(["left", "right", "start", "end"]),
    hideMenuOnClick: _propTypes.default.bool,
    hideMenuOnEscape: _propTypes.default.bool,
    hideMenuOnClickOutside: _propTypes.default.bool,
    renderMenuWhenCollapsed: _propTypes.default.bool,
    optimizeMenuSCUWhenCollapsed: _propTypes.default.bool,
    onExpandedChange: _propTypes.default.func,
    onMenuClick: _propTypes.default.func,
    onClick: _propTypes.default.func,
    getAlignNode: _propTypes.default.func,
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
    items: _propTypes.default.array,
    expanded: _propTypes.default.bool,
    defaultExpanded: _propTypes.default.bool,
    pressed: _propTypes.default.bool,
    renderMenu: _propTypes.default.func,
    renderButton: _propTypes.default.func,
    isInovuaButton: _propTypes.default.bool
  };
  var _default2 = InovuaDropDownButton;
  DropdownButton.default = _default2;
  return DropdownButton;
}
var hasRequiredSrc$8;
function requireSrc$8() {
  if (hasRequiredSrc$8)
    return src$a;
  hasRequiredSrc$8 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src$a, "__esModule", {
    value: true
  });
  src$a.default = void 0;
  var _DropdownButton = _interopRequireDefault2(requireDropdownButton$1());
  var _default2 = _DropdownButton.default;
  src$a.default = _default2;
  return src$a;
}
var hasRequiredDropdownButton;
function requireDropdownButton() {
  if (hasRequiredDropdownButton)
    return DropdownButton$1;
  hasRequiredDropdownButton = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(DropdownButton$1, "__esModule", {
    value: true
  });
  DropdownButton$1.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$8());
  var _default2 = _src.default;
  DropdownButton$1.default = _default2;
  return DropdownButton$1;
}
var getGroupedItems = {};
var hasRequiredGetGroupedItems;
function requireGetGroupedItems() {
  if (hasRequiredGetGroupedItems)
    return getGroupedItems;
  hasRequiredGetGroupedItems = 1;
  Object.defineProperty(getGroupedItems, "__esModule", {
    value: true
  });
  getGroupedItems.default = void 0;
  function sum(a, b2) {
    return a + b2;
  }
  function getGroupedItems$1(_ref2) {
    var boxes = _ref2.boxes, maxSize = _ref2.maxSize, _ref$overflowControlS = _ref2.overflowControlSize, overflowControlSize = _ref$overflowControlS === void 0 ? 0 : _ref$overflowControlS;
    var boxesSize = boxes.reduce(sum);
    if (boxesSize <= maxSize) {
      return false;
    }
    var availableSize = maxSize - overflowControlSize;
    var groups = boxes.reduce(function(acc, box, index2) {
      if (availableSize - box >= 0) {
        acc.visibleIndexes.push(index2);
        availableSize -= box;
      } else {
        availableSize = 0;
        acc.overflowIndexes.push(index2);
      }
      return acc;
    }, {
      visibleIndexes: [],
      overflowIndexes: []
    });
    return groups;
  }
  var _default2 = getGroupedItems$1;
  getGroupedItems.default = _default2;
  return getGroupedItems;
}
var hasRequiredDropdownOverflow;
function requireDropdownOverflow() {
  if (hasRequiredDropdownOverflow)
    return DropdownOverflow;
  hasRequiredDropdownOverflow = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(DropdownOverflow, "__esModule", {
    value: true
  });
  DropdownOverflow.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _NotifyResize = requireNotifyResize();
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _assign = _interopRequireDefault2(requireAssign());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _DropdownButton = _interopRequireDefault2(requireDropdownButton());
  var _getGroupedItems = _interopRequireDefault2(requireGetGroupedItems());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var firstRenderStyle = {
    visibility: "hidden",
    overflow: "hidden"
  };
  var ghostStyle = {
    visibility: "hidden",
    overflow: "hidden",
    position: "absolute"
  };
  var DropDownOverflow = function(_Component) {
    (0, _inherits2.default)(DropDownOverflow2, _Component);
    var _super = _createSuper(DropDownOverflow2);
    function DropDownOverflow2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, DropDownOverflow2);
      _this = _super.call(this, props2);
      _this.setRootRef = function(ref) {
        _this.rootNode = ref;
      };
      _this.setGhostRef = function(ref) {
        _this.ghostNode = ref;
      };
      _this.state = {};
      _this.handleResize = _this.handleResize.bind((0, _assertThisInitialized2.default)(_this));
      _this.isFirstRender = true;
      return _this;
    }
    (0, _createClass2.default)(DropDownOverflow2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateOverflowItems();
        this.isFirstRender = false;
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var style = _objectSpread2(_objectSpread2({}, props2.style), this.isFirstRender && firstRenderStyle);
        var className = (0, _join.default)(props2.rootClassName, props2.className, props2.rtl && "".concat(props2.rootClassName, "--rtl"));
        var dropdownProps = (0, _assign.default)({}, props2);
        delete dropdownProps.scrollOnClick;
        delete dropdownProps.mouseoverScrollSpeed;
        delete dropdownProps.scrollSpeed;
        delete dropdownProps.scrollStep;
        delete dropdownProps.useTransformOnScroll;
        var domProps = (0, _cleanProps.default)(dropdownProps, DropDownOverflow2.propTypes);
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, domProps), {}, {
          ref: this.setRootRef,
          style,
          className
        }), _react.default.createElement(_NotifyResize.NotifyResize, {
          key: "notify",
          rafOnResize: true,
          notifyOnMount: false,
          onResize: this.handleResize
        }), this.renderVisibleItems(), (this.isFirstRender || this.state.overflowIndexes) && this.renderDropdownButton(), this.renderGhost());
      }
    }, {
      key: "renderVisibleItems",
      value: function renderVisibleItems() {
        var visibleItems = this.props.children;
        if (this.state.visibleIndexes) {
          var children = this.getChildrenArray();
          visibleItems = this.state.visibleIndexes.map(function(index2) {
            return children[index2];
          });
        }
        return visibleItems;
      }
    }, {
      key: "renderDropdownButton",
      value: function renderDropdownButton() {
        var items = [];
        if (this.state.overflowIndexes) {
          var children = this.getChildrenArray();
          items = this.state.overflowIndexes.map(function(index2) {
            return {
              id: index2,
              label: children[index2]
            };
          });
        }
        var domProps = _objectSpread2({
          items,
          constrainTo: this.props.constrainTo,
          menuProps: _objectSpread2(_objectSpread2({
            constrainTo: this.props.constrainTo
          }, this.props.dropdownButtonProps && this.props.dropdownButtonProps.menuProps), {}, {
            theme: null,
            disableScroller: true
          })
        }, this.props.dropdownButtonProps);
        var result;
        if (typeof this.props.renderDropdownButton === "function") {
          result = this.props.renderDropdownButton({
            items,
            domProps,
            overflowIndexes: this.state.overflowIndexes
          });
        }
        if (result === void 0) {
          result = _react.default.createElement(_DropdownButton.default, _objectSpread2({}, domProps));
        }
        return result;
      }
    }, {
      key: "renderGhost",
      value: function renderGhost() {
        if (!this.state.ghostVisible) {
          return null;
        }
        return _react.default.createElement("div", {
          ref: this.setGhostRef,
          style: _objectSpread2(_objectSpread2({}, ghostStyle), {}, {
            width: this.state.width,
            height: this.state.height
          })
        }, this.props.children, this.renderDropdownButton());
      }
    }, {
      key: "getRootSize",
      value: function getRootSize() {
        var maxSize = this.rootNode[this.getSizeName()];
        return maxSize;
      }
    }, {
      key: "updateOverflowItems",
      value: function updateOverflowItems() {
        var _this2 = this;
        if (!this.rootNode) {
          return;
        }
        var parentNode = this.state.ghostVisible ? this.ghostNode : this.rootNode;
        var children = parentNode.children;
        var maxSize = this.getRootSize();
        var boxes = [].slice.call(children).map(function(child) {
          return child[_this2.getSizeName()];
        });
        var overflowControlSize = boxes[boxes.length - 1];
        if (this.isFirstRender) {
          boxes = boxes.slice(1);
        }
        boxes = boxes.slice(0, -1);
        var groupedItems = (0, _getGroupedItems.default)({
          boxes,
          maxSize,
          overflowControlSize
        });
        if (groupedItems) {
          this.setState({
            visibleIndexes: groupedItems.visibleIndexes,
            overflowIndexes: groupedItems.overflowIndexes
          });
        } else {
          this.setState({
            visibleIndexes: null,
            overflowIndexes: null
          });
        }
      }
    }, {
      key: "handleResize",
      value: function handleResize(_ref2) {
        var _this3 = this;
        var width = _ref2.width, height = _ref2.height;
        this.setState({
          width,
          height,
          ghostVisible: true
        }, function() {
          _this3.updateOverflowItems();
          _this3.setState({
            ghostVisible: false
          });
        });
      }
    }, {
      key: "getSizeName",
      value: function getSizeName() {
        return "offsetWidth";
      }
    }, {
      key: "getChildrenArray",
      value: function getChildrenArray() {
        return _react.default.Children.toArray(this.props.children);
      }
    }]);
    return DropDownOverflow2;
  }(_react.Component);
  DropDownOverflow.defaultProps = {
    rootClassName: "react-toolkit-dropdown-overflow",
    rtl: false
  };
  DropDownOverflow.propTypes = {
    rootClassName: _propTypes.default.string,
    dropdownButtonProps: _propTypes.default.object,
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
    renderDropdownButton: _propTypes.default.func,
    rtl: _propTypes.default.bool
  };
  var _default2 = DropDownOverflow;
  DropdownOverflow.default = _default2;
  return DropdownOverflow;
}
var hasRequiredToolBar$1;
function requireToolBar$1() {
  if (hasRequiredToolBar$1)
    return ToolBar;
  hasRequiredToolBar$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(ToolBar, "__esModule", {
    value: true
  });
  ToolBar.default = ToolBar.Separator = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _ArrowScroller = _interopRequireDefault2(requireArrowScroller());
  var _DropdownOverflow = _interopRequireDefault2(requireDropdownOverflow());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var InovuaToolbar = function(_Component) {
    (0, _inherits2.default)(InovuaToolbar2, _Component);
    var _super = _createSuper(InovuaToolbar2);
    function InovuaToolbar2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaToolbar2);
      _this = _super.call(this, props2);
      _this.setRootRef = function(ref) {
        _this.node = ref;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaToolbar2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var className = props2.className;
        var rootProps = _objectSpread2(_objectSpread2({
          useTransformOnScroll: props2.useTransformOnScroll,
          ref: this.setRootRef
        }, (0, _cleanProps.default)(props2, InovuaToolbar2.propTypes)), {}, {
          className,
          rtl: props2.rtl,
          rootClassName: props2.rootClassName,
          theme: props2.theme
        });
        return props2.overflowStrategy === "scroll" ? _react.default.createElement(_ArrowScroller.default, _objectSpread2(_objectSpread2({}, rootProps), this.getScrollerProps())) : _react.default.createElement(_DropdownOverflow.default, _objectSpread2(_objectSpread2({}, rootProps), this.getDropdownOverflowProps()));
      }
    }, {
      key: "scrollIntoView",
      value: function scrollIntoView(node2) {
        return this.node && this.node.scrollIntoView(node2);
      }
    }, {
      key: "getInstance",
      value: function getInstance() {
        return this.node;
      }
    }, {
      key: "getClassName",
      value: function getClassName2() {
        var props2 = this.props;
        return (0, _join.default)(this.props.className, props2.rootClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), props2.changeButtonStyles && "".concat(props2.rootClassName, "--change-button-styles"));
      }
    }, {
      key: "getScrollerProps",
      value: function getScrollerProps() {
        var props2 = this.props;
        var result = {
          vertical: props2.vertical,
          scrollOnMouseEnter: props2.scrollOnMouseEnter,
          arrowSize: props2.arrowSize,
          className: (0, _join.default)(this.getClassName(), "".concat(props2.rootClassName, "--arrowScroller"))
        };
        if (this.props.rtl) {
          result.nativeScroll = false;
        }
        return result;
      }
    }, {
      key: "getDropdownOverflowProps",
      value: function getDropdownOverflowProps() {
        var props2 = this.props;
        return {
          className: (0, _join.default)(this.getClassName(), "".concat(props2.rootClassName, "--dropdown")),
          constrainTo: props2.constrainTo,
          dropdownButtonProps: props2.dropdownButtonProps,
          renderDropdownButton: props2.renderDropdownButton
        };
      }
    }]);
    return InovuaToolbar2;
  }(_react.Component);
  InovuaToolbar.defaultProps = {
    rootClassName: "inovua-react-toolkit-toolbar",
    vertical: false,
    useTransformOnScroll: false,
    changeButtonStyles: true,
    rtl: false,
    theme: "default-light",
    overflowStrategy: "scroll"
  };
  InovuaToolbar.propTypes = {
    rtl: _propTypes.default.bool,
    rootClassName: _propTypes.default.string,
    changeButtonStyles: _propTypes.default.bool,
    scrollOnMouseEnter: _propTypes.default.bool,
    theme: _propTypes.default.string,
    constrainTo: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.func]),
    arrowSize: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      width: _propTypes.default.number,
      height: _propTypes.default.number
    })]),
    overflowStrategy: _propTypes.default.oneOf(["scroll", "dropdown"]),
    vertical: _propTypes.default.bool,
    dropdownButtonProps: _propTypes.default.object,
    renderDropdownButton: _propTypes.default.func,
    useTransformOnScroll: _propTypes.default.bool
  };
  var Separator2 = function Separator3(props2) {
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, props2), {}, {
      className: (0, _join.default)(props2.className, "inovua-react-toolkit-toolbar__separator")
    }));
  };
  ToolBar.Separator = Separator2;
  InovuaToolbar.Separator = Separator2;
  var _default2 = InovuaToolbar;
  ToolBar.default = _default2;
  return ToolBar;
}
var hasRequiredSrc$7;
function requireSrc$7() {
  if (hasRequiredSrc$7)
    return src$f;
  hasRequiredSrc$7 = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "DropdownOverflow", {
      enumerable: true,
      get: function get2() {
        return _DropdownOverflow.default;
      }
    });
    Object.defineProperty(exports, "Separator", {
      enumerable: true,
      get: function get2() {
        return _ToolBar.Separator;
      }
    });
    exports.default = void 0;
    var _ToolBar = _interopRequireWildcard(requireToolBar$1());
    var _DropdownOverflow = _interopRequireDefault2(requireDropdownOverflow());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _ToolBar.default;
    exports.default = _default2;
  })(src$f);
  return src$f;
}
var hasRequiredToolBar;
function requireToolBar() {
  if (hasRequiredToolBar)
    return ToolBar$1;
  hasRequiredToolBar = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Separator", {
      enumerable: true,
      get: function get2() {
        return _src.Separator;
      }
    });
    exports.default = void 0;
    var _src = _interopRequireWildcard(requireSrc$7());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _src.default;
    exports.default = _default2;
  })(ToolBar$1);
  return ToolBar$1;
}
var Separator = {};
var hasRequiredSeparator;
function requireSeparator() {
  if (hasRequiredSeparator)
    return Separator;
  hasRequiredSeparator = 1;
  Object.defineProperty(Separator, "__esModule", {
    value: true
  });
  Separator.default = void 0;
  var _src = requireSrc$7();
  var _default2 = _src.Separator;
  Separator.default = _default2;
  return Separator;
}
var PaginationIcon = {};
var hasRequiredPaginationIcon;
function requirePaginationIcon() {
  if (hasRequiredPaginationIcon)
    return PaginationIcon;
  hasRequiredPaginationIcon = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(PaginationIcon, "__esModule", {
    value: true
  });
  PaginationIcon.default = void 0;
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _Button = _interopRequireDefault2(requireButton());
  var _join = _interopRequireDefault2(requireJoin$3());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var ICON_CLASS_NAME = "inovua-react-pagination-toolbar__icon";
  var PaginationIcon$1 = function PaginationIcon2(props2) {
    var icon = props2.icon, size2 = props2.size, disabled = props2.disabled, action = props2.action, name = props2.name, theme2 = props2.theme;
    var className = (0, _join.default)(ICON_CLASS_NAME, "".concat(ICON_CLASS_NAME, "--named--").concat(name));
    return _react.default.createElement(_Button.default, {
      disabled,
      className,
      icon: (0, _react.cloneElement)(icon, {
        width: size2,
        height: size2
      }),
      onClick: action,
      theme: theme2
    });
  };
  PaginationIcon$1.propTypes = {
    name: _propTypes.default.string,
    action: _propTypes.default.func,
    disabled: _propTypes.default.bool,
    icon: _propTypes.default.node,
    size: _propTypes.default.number
  };
  var _default2 = PaginationIcon$1;
  PaginationIcon.default = _default2;
  return PaginationIcon;
}
var getIcons = {};
var hasRequiredGetIcons;
function requireGetIcons() {
  if (hasRequiredGetIcons)
    return getIcons;
  hasRequiredGetIcons = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getIcons, "__esModule", {
    value: true
  });
  getIcons.default = getIcons.REFRESH = getIcons.PREV_PAGE = getIcons.NEXT_PAGE = getIcons.LAST_PAGE = getIcons.FIRST_PAGE = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _objectWithoutProperties2 = _interopRequireDefault2(requireObjectWithoutProperties());
  var _react = _interopRequireDefault2(reactExports);
  var _excluded2 = ["size"];
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var emptyObject = {};
  var SIZE = 20;
  var getIcons$1 = function getIcons2() {
    var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyObject, size2 = _ref2.size, props2 = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    size2 = size2 || SIZE;
    var FIRST_PAGE2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, props2), {}, {
      height: size2,
      viewBox: "0 0 24 24",
      width: size2
    }), _react.default.createElement("path", {
      d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
    }));
    var LAST_PAGE2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, props2), {}, {
      height: size2,
      viewBox: "0 0 24 24",
      width: size2
    }), _react.default.createElement("path", {
      d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
    }));
    var PREV_PAGE2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, props2), {}, {
      height: size2,
      viewBox: "0 0 24 24",
      width: size2
    }), _react.default.createElement("path", {
      d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
    }));
    var NEXT_PAGE2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, props2), {}, {
      height: size2,
      viewBox: "0 0 24 24",
      width: size2
    }), _react.default.createElement("path", {
      d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
    }));
    var REFRESH2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, props2), {}, {
      height: size2,
      viewBox: "0 0 24 24",
      width: size2
    }), _react.default.createElement("path", {
      d: "M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
    }));
    return {
      FIRST_PAGE: FIRST_PAGE2,
      LAST_PAGE: LAST_PAGE2,
      PREV_PAGE: PREV_PAGE2,
      NEXT_PAGE: NEXT_PAGE2,
      REFRESH: REFRESH2
    };
  };
  var _getIcons = getIcons$1(), FIRST_PAGE = _getIcons.FIRST_PAGE, LAST_PAGE = _getIcons.LAST_PAGE, PREV_PAGE = _getIcons.PREV_PAGE, NEXT_PAGE = _getIcons.NEXT_PAGE, REFRESH = _getIcons.REFRESH;
  getIcons.REFRESH = REFRESH;
  getIcons.NEXT_PAGE = NEXT_PAGE;
  getIcons.PREV_PAGE = PREV_PAGE;
  getIcons.LAST_PAGE = LAST_PAGE;
  getIcons.FIRST_PAGE = FIRST_PAGE;
  var _default2 = getIcons$1;
  getIcons.default = _default2;
  return getIcons;
}
var hasRequiredPaginationToolbar$1;
function requirePaginationToolbar$1() {
  if (hasRequiredPaginationToolbar$1)
    return PaginationToolbar;
  hasRequiredPaginationToolbar$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(PaginationToolbar, "__esModule", {
    value: true
  });
  PaginationToolbar.hasPrevPage = PaginationToolbar.hasNextPage = PaginationToolbar.getSkipForPage = PaginationToolbar.getPageCount = PaginationToolbar.getCurrentPage = PaginationToolbar.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _autoBind = _interopRequireDefault2(requireAutoBind());
  var _NumericInput = _interopRequireDefault2(requireNumericInput());
  var _ComboBox = _interopRequireDefault2(requireComboBox());
  var _ToolBar = _interopRequireDefault2(requireToolBar());
  var _Separator = _interopRequireDefault2(requireSeparator());
  var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$5());
  var _join = _interopRequireDefault2(requireJoin());
  var _PaginationIcon = _interopRequireDefault2(requirePaginationIcon());
  var _getIcons = requireGetIcons();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var stopPropagation = function stopPropagation2(e2) {
    return e2.stopPropagation();
  };
  var emptyObject = {};
  var PAGE_SIZES = [{
    value: 5
  }, {
    value: 10
  }, {
    value: 20
  }, {
    value: 25
  }, {
    value: 40
  }, {
    value: 50
  }, {
    value: 100
  }];
  var ICONS = {
    FIRST_PAGE: _getIcons.FIRST_PAGE,
    LAST_PAGE: _getIcons.LAST_PAGE,
    PREV_PAGE: _getIcons.PREV_PAGE,
    NEXT_PAGE: _getIcons.NEXT_PAGE,
    REFRESH: _getIcons.REFRESH
  };
  var CLASS_NAME = "inovua-react-pagination-toolbar";
  var SPACER = _react.default.createElement("div", {
    className: "".concat(CLASS_NAME, "__spacer")
  });
  var getPageCount = function getPageCount2(_ref2) {
    var count = _ref2.count, limit = _ref2.limit;
    return Math.ceil(count / limit);
  };
  PaginationToolbar.getPageCount = getPageCount;
  var getSkipForPage = function getSkipForPage2(_ref2) {
    var page = _ref2.page, limit = _ref2.limit;
    return Math.max(0, limit * (page - 1));
  };
  PaginationToolbar.getSkipForPage = getSkipForPage;
  var getCurrentPage = function getCurrentPage2(_ref3) {
    var skip2 = _ref3.skip, limit = _ref3.limit;
    return Math.floor(skip2 / limit) + 1;
  };
  PaginationToolbar.getCurrentPage = getCurrentPage;
  var hasNextPage = function hasNextPage2(_ref4) {
    var skip2 = _ref4.skip, limit = _ref4.limit, count = _ref4.count;
    return getCurrentPage({
      skip: skip2,
      limit
    }) < getPageCount({
      count,
      limit
    });
  };
  PaginationToolbar.hasNextPage = hasNextPage;
  var hasPrevPage = function hasPrevPage2(_ref5) {
    var skip2 = _ref5.skip, limit = _ref5.limit;
    return getCurrentPage({
      skip: skip2,
      limit
    }) > 1;
  };
  PaginationToolbar.hasPrevPage = hasPrevPage;
  var InovuaPaginationToolbar = function(_React$Component) {
    (0, _inherits2.default)(InovuaPaginationToolbar2, _React$Component);
    var _super = _createSuper(InovuaPaginationToolbar2);
    function InovuaPaginationToolbar2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaPaginationToolbar2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
        var skip2 = _this.getSkip(prevProps);
        var limit = _this.getLimit(prevProps);
        var pageCount = getPageCount({
          count: prevProps.totalCount,
          limit
        });
        var currentPage = Math.min(pageCount, getCurrentPage({
          skip: skip2,
          limit
        }));
        var nextSkip = _this.getSkip(_this.props);
        var nextLimit = _this.getLimit(_this.props);
        var nextPageCount = getPageCount({
          count: _this.props.totalCount,
          limit: nextLimit
        });
        var nextCurrentPage = Math.min(nextPageCount, getCurrentPage({
          skip: nextSkip,
          limit: nextLimit
        }));
        if (prevProps.totalCount !== _this.props.totalCount || currentPage !== nextCurrentPage) {
          _this.forceUpdate(function() {
            _this.setCurrentPageInputValue(nextCurrentPage, _this.props);
          });
        }
      });
      (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
      _this.state = {
        skip: props2.defaultSkip,
        limit: props2.defaultLimit
      };
      _this.ACTIONS = {
        REFRESH: _this.refresh,
        FIRST_PAGE: _this.gotoFirstPage,
        LAST_PAGE: _this.gotoLastPage,
        PREV_PAGE: _this.gotoPrevPage,
        NEXT_PAGE: _this.gotoNextPage
      };
      _this.refNumberInput = function(cmp) {
        _this.numberInput = cmp;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaPaginationToolbar2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
    }, {
      key: "getSkip",
      value: function getSkip() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return props2.skip === void 0 ? this.state.skip : props2.skip;
      }
    }, {
      key: "getLimit",
      value: function getLimit() {
        var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
        return props2.limit === void 0 ? this.state.limit : props2.limit;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props, totalCount = _this$props.totalCount, theme2 = _this$props.theme, rtl = _this$props.rtl, remotePagination = _this$props.remotePagination;
        _this$props.rootClassName;
        _this$props.changeButtonStyles;
        var skip2 = this.getSkip();
        var limit = this.getLimit();
        var skipLimitCount = {
          skip: skip2,
          limit,
          count: totalCount
        };
        var currentPage = getCurrentPage(skipLimitCount);
        var pageCount = getPageCount(skipLimitCount);
        var firstPage = this.renderIcon("FIRST_PAGE", currentPage <= 1);
        var lastPage = this.renderIcon("LAST_PAGE", currentPage >= pageCount);
        var prevPage = this.renderIcon("PREV_PAGE", !hasPrevPage(skipLimitCount));
        var nextPage = this.renderIcon("NEXT_PAGE", !hasNextPage(skipLimitCount));
        var refresh = remotePagination ? this.renderIcon("REFRESH", false) : null;
        var start = totalCount ? skip2 + 1 : 0;
        var end = Math.min(skip2 + limit, totalCount);
        var className = (0, _join.default)(this.props.className, CLASS_NAME, theme2 && "".concat(CLASS_NAME, "--theme-").concat(theme2), "".concat(CLASS_NAME, "--").concat(rtl ? "rtl" : "ltr"), this.props.bordered && "".concat(CLASS_NAME, "--bordered"));
        var combo = this.renderPageSizeCombo();
        var currentPageInput = this.renderCurrentPageInput({
          pageCount,
          currentPage
        });
        var domProps = _objectSpread2(_objectSpread2({}, (0, _reactCleanProps.default)(this.props, InovuaPaginationToolbar2.propTypes)), {}, {
          className,
          theme: theme2
        });
        var result;
        if (this.props.renderToolbar) {
          result = this.props.renderToolbar(domProps, {
            gotoFirstPageIcon: firstPage,
            gotoLastPageIcon: lastPage,
            gotoPrevPageIcon: prevPage,
            gotoNextPageIcon: nextPage,
            refreshIcon: refresh,
            pageSizeCombo: combo,
            start,
            end,
            totalCount,
            currentPageInput
          });
          if (result !== void 0) {
            return result;
          }
        }
        return _react.default.createElement(_ToolBar.default, _objectSpread2(_objectSpread2({}, domProps), {}, {
          useTransformOnScroll: false,
          onKeyDown: stopPropagation,
          rtl
        }), _react.default.createElement("div", {
          className: "".concat(CLASS_NAME, "__region")
        }, firstPage, prevPage, _react.default.createElement("span", {
          className: "".concat(CLASS_NAME, "__page-text")
        }, this.props.pageText), " ", currentPageInput, " ", this.props.ofText, " ", _react.default.createElement("span", {
          className: "".concat(CLASS_NAME, "__page-count-text"),
          style: {
            minWidth: Math.max("".concat(pageCount).length * 10, 25)
          }
        }, " " + (pageCount.toLocaleString ? pageCount.toLocaleString() : pageCount)), nextPage, lastPage, _react.default.createElement(_Separator.default, null), _react.default.createElement("span", {
          className: "".concat(CLASS_NAME, "__per-page-text")
        }, this.props.pageSizes === false ? null : this.props.perPageText), " ", combo, this.props.pageSizes !== false && refresh ? _react.default.createElement(_Separator.default, null) : null, refresh), SPACER, _react.default.createElement("div", {
          className: "".concat(CLASS_NAME, "__region")
        }, this.props.showingText, " ", start.toLocaleString ? start.toLocaleString() : start, " -", " ", end.toLocaleString ? end.toLocaleString() : end, " ", this.props.ofText, " ", totalCount.toLocaleString ? totalCount.toLocaleString() : totalCount));
      }
    }, {
      key: "renderCurrentPageInput",
      value: function renderCurrentPageInput(_ref6) {
        var pageCount = _ref6.pageCount, currentPage = _ref6.currentPage;
        var inputProps = {
          updateOnArrowKeys: false,
          className: "".concat(CLASS_NAME, "__current-page"),
          onBlur: this.onBlur,
          ref: this.refNumberInput,
          defaultValue: currentPage,
          currentPage,
          onChange: this.onNumberInputChange,
          enableClearButton: false,
          allowFloat: false,
          allowNegative: false,
          rtl: this.props.rtl,
          minValue: 1,
          maxValue: pageCount,
          style: {
            minWidth: 70
          },
          size: "".concat(pageCount).length,
          theme: this.props.theme
        };
        var result;
        if (this.props.renderCurrentPageInput) {
          result = this.props.renderCurrentPageInput(inputProps);
        }
        if (result === void 0) {
          delete inputProps.currentPage;
          result = _react.default.createElement(_NumericInput.default, _objectSpread2({}, inputProps));
        }
        return result;
      }
    }, {
      key: "renderPageSizeCombo",
      value: function renderPageSizeCombo() {
        var _comboProps;
        if (this.props.pageSizes === false) {
          return null;
        }
        var limit = this.getLimit();
        var comboProps = (_comboProps = {
          shadow: false,
          style: {
            minWidth: 70,
            width: 70
          },
          className: "".concat(CLASS_NAME, "__page-size-combo"),
          borderRadius: 0,
          idProperty: "value",
          displayProperty: "value",
          value: limit,
          renderListComponent: this.props.renderPageList,
          constrainTo: this.props.constrainTo,
          onChange: this.setPageSize,
          dataSource: this.props.pageSizes ? this.props.pageSizes.map(function(s) {
            return {
              value: s
            };
          }) : PAGE_SIZES,
          collapseOnSelect: true,
          changeValueOnNavigation: false,
          multiple: false,
          searchable: false,
          clearIcon: false
        }, (0, _defineProperty2.default)(_comboProps, "shadow", true), (0, _defineProperty2.default)(_comboProps, "rtl", this.props.rtl), (0, _defineProperty2.default)(_comboProps, "showShadowOnMouseOver", true), (0, _defineProperty2.default)(_comboProps, "allowSelectionToggle", false), (0, _defineProperty2.default)(_comboProps, "highlightFirst", false), (0, _defineProperty2.default)(_comboProps, "theme", this.props.theme), _comboProps);
        var result;
        if (this.props.renderPageSizeCombo) {
          result = this.props.renderPageSizeCombo(comboProps);
        }
        if (result === void 0) {
          result = _react.default.createElement(_ComboBox.default, _objectSpread2(_objectSpread2({}, comboProps), {}, {
            relativeToViewport: true
          }));
        }
        return result;
      }
    }, {
      key: "renderIcon",
      value: function renderIcon(name, disabled) {
        var icons2 = this.props.icons || ICONS;
        var icon = icons2[name];
        if (this.props.rtl) {
          if (name === "LAST_PAGE") {
            icon = icons2["FIRST_PAGE"];
          } else if (name === "FIRST_PAGE") {
            icon = icons2["LAST_PAGE"];
          }
          if (name === "NEXT_PAGE") {
            icon = icons2["PREV_PAGE"];
          } else if (name === "PREV_PAGE") {
            icon = icons2["NEXT_PAGE"];
          }
        }
        var iconProps = {
          name,
          size: this.props.iconSize,
          icon,
          disabled,
          action: this.ACTIONS[name],
          theme: this.props.theme
        };
        var result;
        if (this.props.renderIcon) {
          result = this.props.renderIcon(iconProps);
        }
        if (result === void 0) {
          result = _react.default.createElement(_PaginationIcon.default, _objectSpread2({}, iconProps));
        }
        return result;
      }
    }, {
      key: "setCurrentPageInputValue",
      value: function setCurrentPageInputValue(value) {
        var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.props;
        this.lastNotifiedSkip = getSkipForPage({
          page: value,
          limit: this.getLimit(props2)
        });
        if (this.numberInput && typeof this.numberInput.setValue === "function") {
          this.numberInput.setValue("".concat(value));
        }
      }
    }, {
      key: "onBlur",
      value: function onBlur3() {
        var currentPage = getCurrentPage({
          skip: this.getSkip(),
          limit: this.getLimit()
        });
        this.setCurrentPageInputValue(currentPage);
      }
    }, {
      key: "onNumberInputChange",
      value: function onNumberInputChange(numericValue) {
        this.gotoPage(numericValue || 1);
      }
    }, {
      key: "setPageSize",
      value: function setPageSize(limit) {
        var currentSkip = this.getSkip();
        var currentPage = getCurrentPage({
          skip: currentSkip,
          limit: this.getLimit()
        });
        var maxPage = getPageCount({
          count: this.props.totalCount,
          limit
        });
        var newPage = Math.min(currentPage, maxPage);
        var newSkip = getSkipForPage({
          page: newPage,
          limit
        });
        if (this.props.onPageSizeChange) {
          this.props.onPageSizeChange(limit);
        }
        if (this.props.onLimitChange) {
          this.props.onLimitChange(limit);
        }
        if (this.props.limit === void 0) {
          this.setState({
            limit
          });
        }
        if (newSkip != currentSkip && this.props.adjustSkipOnLimitChange) {
          this.gotoPage(newPage, {
            limit
          });
        }
      }
    }, {
      key: "gotoPage",
      value: function gotoPage(page) {
        var _this2 = this;
        var _ref7 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, _ref7$limit = _ref7.limit, limit = _ref7$limit === void 0 ? this.getLimit() : _ref7$limit;
        var skip2 = getSkipForPage({
          page,
          limit
        });
        if (this.lastNotifiedSkip === skip2) {
          return;
        }
        setTimeout(function() {
          delete _this2.lastNotifiedSkip;
        }, 50);
        this.lastNotifiedSkip = skip2;
        if (this.props.onPageChange) {
          this.props.onPageChange(page);
        }
        if (this.props.onSkipChange) {
          this.props.onSkipChange(skip2);
        }
        if (this.props.skip === void 0) {
          this.setCurrentPageInputValue("".concat(page));
          this.setState({
            skip: skip2
          });
        }
      }
    }, {
      key: "refresh",
      value: function refresh() {
        if (this.props.onRefresh) {
          this.props.onRefresh();
        }
      }
    }, {
      key: "gotoFirstPage",
      value: function gotoFirstPage() {
        this.gotoPage(1);
      }
    }, {
      key: "gotoLastPage",
      value: function gotoLastPage() {
        var lastPage = getPageCount({
          count: this.props.totalCount,
          limit: this.getLimit()
        });
        this.gotoPage(lastPage);
      }
    }, {
      key: "gotoNextPage",
      value: function gotoNextPage() {
        var nextPage = getCurrentPage({
          skip: this.getSkip(),
          limit: this.getLimit()
        }) + 1;
        this.gotoPage(nextPage);
      }
    }, {
      key: "gotoPrevPage",
      value: function gotoPrevPage() {
        var prevPage = getCurrentPage({
          skip: this.getSkip(),
          limit: this.getLimit()
        }) - 1;
        this.gotoPage(prevPage);
      }
    }]);
    return InovuaPaginationToolbar2;
  }(_react.default.Component);
  PaginationToolbar.default = InovuaPaginationToolbar;
  InovuaPaginationToolbar.defaultProps = {
    adjustSkipOnLimitChange: true,
    theme: "default-light",
    bordered: true,
    iconSize: 24,
    rtl: false,
    remotePagination: false,
    pageText: "Page ",
    ofText: " of ",
    perPageText: "Results per page",
    showingText: "Showing ",
    rootClassName: "inovua-react-pagination-toolbar"
  };
  InovuaPaginationToolbar.propTypes = {
    adjustSkipOnLimitChange: _propTypes.default.bool,
    pagination: _propTypes.default.any,
    bordered: _propTypes.default.bool,
    iconSize: _propTypes.default.number,
    pageText: _propTypes.default.node,
    ofText: _propTypes.default.node,
    perPageText: _propTypes.default.node,
    showingText: _propTypes.default.node,
    limit: _propTypes.default.number,
    defaultLimit: _propTypes.default.number,
    skip: _propTypes.default.number,
    defaultSkip: _propTypes.default.number,
    totalCount: _propTypes.default.number,
    gotoNextPage: _propTypes.default.func,
    gotoPrevPage: _propTypes.default.func,
    pageSize: _propTypes.default.number,
    currentPage: _propTypes.default.number,
    pageCount: _propTypes.default.number,
    gotoPage: _propTypes.default.func,
    onRefresh: _propTypes.default.func,
    hasNextPage: _propTypes.default.func,
    hasPrevPage: _propTypes.default.func,
    gotoLastPage: _propTypes.default.func,
    gotoFirstPage: _propTypes.default.func,
    remotePagination: _propTypes.default.bool,
    localPagination: _propTypes.default.any,
    renderPageList: _propTypes.default.any,
    reload: _propTypes.default.any,
    constrainTo: _propTypes.default.any,
    onPageChange: _propTypes.default.func,
    onSkipChange: _propTypes.default.func,
    onLimitChange: _propTypes.default.func,
    onPageSizeChange: _propTypes.default.func,
    pageSizes: _propTypes.default.arrayOf(_propTypes.default.number),
    renderCurrentPageInput: _propTypes.default.func,
    rootClassName: _propTypes.default.string,
    renderIcon: _propTypes.default.func,
    renderPageSizeCombo: _propTypes.default.func,
    renderToolbar: _propTypes.default.func,
    rtl: _propTypes.default.bool,
    theme: _propTypes.default.string
  };
  return PaginationToolbar;
}
var hasRequiredSrc$6;
function requireSrc$6() {
  if (hasRequiredSrc$6)
    return src$k;
  hasRequiredSrc$6 = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _PaginationToolbar = _interopRequireWildcard(requirePaginationToolbar$1());
    Object.keys(_PaginationToolbar).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _PaginationToolbar[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get2() {
          return _PaginationToolbar[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _PaginationToolbar.default;
    exports.default = _default2;
  })(src$k);
  return src$k;
}
var hasRequiredPaginationToolbar;
function requirePaginationToolbar() {
  if (hasRequiredPaginationToolbar)
    return PaginationToolbar$1;
  hasRequiredPaginationToolbar = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {};
    exports.default = void 0;
    var _src = _interopRequireWildcard(requireSrc$6());
    Object.keys(_src).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      if (key in exports && exports[key] === _src[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get2() {
          return _src[key];
        }
      });
    });
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _src.default;
    exports.default = _default2;
  })(PaginationToolbar$1);
  return PaginationToolbar$1;
}
var ColumnLayout = {};
var ResizeOverlay = {};
var hasRequiredResizeOverlay;
function requireResizeOverlay() {
  if (hasRequiredResizeOverlay)
    return ResizeOverlay;
  hasRequiredResizeOverlay = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(ResizeOverlay, "__esModule", {
    value: true
  });
  ResizeOverlay.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _join = _interopRequireDefault2(requireJoin());
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var ResizeOverlay$1 = function(_React$Component) {
    (0, _inherits2.default)(ResizeOverlay2, _React$Component);
    var _super = _createSuper(ResizeOverlay2);
    function ResizeOverlay2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, ResizeOverlay2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setConstrained", function(constrained) {
        if (_this.state.constrained != constrained) {
          _this.setState({
            constrained
          });
        }
        return (0, _assertThisInitialized2.default)(_this);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setOffset", function(offset) {
        _this.setState({
          offset
        });
        return (0, _assertThisInitialized2.default)(_this);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setActive", function(active, cfg) {
        _this.setState({
          active,
          offsetTop: cfg ? cfg.offsetTop || 0 : 0
        });
        return (0, _assertThisInitialized2.default)(_this);
      });
      _this.state = {
        offset: 0,
        constrained: false,
        active: false
      };
      return _this;
    }
    (0, _createClass2.default)(ResizeOverlay2, [{
      key: "render",
      value: function render() {
        var _proxyStyle;
        var props2 = this.props;
        var state2 = this.state;
        var constrained = state2.constrained;
        var active = props2.active !== void 0 ? props2.active : state2.active;
        var rtl = props2.rtl, columnResizeProxyWidth = props2.columnResizeProxyWidth, columnResizeHandleWidth = props2.columnResizeHandleWidth;
        var style = props2.style;
        if (active && props2.activeStyle) {
          style = Object.assign({}, style, props2.activeStyle);
        }
        var className = (0, _join.default)(props2.className, "InovuaReactDataGrid__resize-overlay", active && "InovuaReactDataGrid__resize-overlay--active");
        var proxyClassName = (0, _join.default)("InovuaReactDataGrid__resize-proxy", constrained && "InovuaReactDataGrid__resize-proxy--constrained");
        var offset = this.state.offset + (columnResizeHandleWidth - columnResizeProxyWidth) / 2;
        var proxyStyle = (_proxyStyle = {
          transform: "translate3d(".concat((rtl ? -1 : 1) * offset, "px,0px, 0px)")
        }, (0, _defineProperty2.default)(_proxyStyle, rtl ? "right" : "left", 0), (0, _defineProperty2.default)(_proxyStyle, rtl ? "left" : "right", "unset"), (0, _defineProperty2.default)(_proxyStyle, "width", columnResizeProxyWidth), (0, _defineProperty2.default)(_proxyStyle, "top", this.state.active ? this.state.offsetTop || 0 : 0), (0, _defineProperty2.default)(_proxyStyle, "bottom", 0), (0, _defineProperty2.default)(_proxyStyle, "height", "initial"), _proxyStyle);
        if (this.props.resizeProxyStyle) {
          proxyStyle = Object.assign({}, this.props.resizeProxyStyle, proxyStyle);
        }
        return _react.default.createElement("div", {
          style,
          className
        }, _react.default.createElement("div", {
          className: proxyClassName,
          style: proxyStyle
        }));
      }
    }]);
    return ResizeOverlay2;
  }(_react.default.Component);
  ResizeOverlay.default = ResizeOverlay$1;
  ResizeOverlay$1.propTypes = {
    resizeProxyStyle: _propTypes.default.shape({})
  };
  return ResizeOverlay;
}
var setupColumnResize = {};
var dragHelper = {};
var once = {};
var hasRequiredOnce;
function requireOnce() {
  if (hasRequiredOnce)
    return once;
  hasRequiredOnce = 1;
  Object.defineProperty(once, "__esModule", {
    value: true
  });
  once.default = once$1;
  function once$1(fn, scope) {
    var called;
    var result;
    return function() {
      if (called) {
        return result;
      }
      called = true;
      return result = fn && fn.apply(scope || this, arguments);
    };
  }
  return once;
}
var hasRequiredDragHelper;
function requireDragHelper() {
  if (hasRequiredDragHelper)
    return dragHelper;
  hasRequiredDragHelper = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(dragHelper, "__esModule", {
    value: true
  });
  dragHelper.default = _default2;
  var _regionAlign = _interopRequireDefault2(requireRegionAlign());
  var _once = _interopRequireDefault2(requireOnce());
  var _isMobile = _interopRequireDefault2(requireIsMobile$1());
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var Helper = function Helper2(config2) {
    this.config = config2;
  };
  var getEvents = function getEvents2(mobile) {
    return {
      move: mobile ? "touchmove" : "mousemove",
      up: mobile ? "touchend" : "mouseup"
    };
  };
  function getPageCoords(event2, mobile) {
    var firstTouch;
    var pageX = event2.pageX;
    var pageY = event2.pageY;
    if (mobile && event2.touches && (firstTouch = event2.touches[0])) {
      pageX = firstTouch.pageX;
      pageY = firstTouch.pageY;
    }
    return {
      pageX,
      pageY
    };
  }
  Object.assign(Helper.prototype, {
    initDrag: function initDrag(event2) {
      this.onDragInit(event2);
      var mobile = this.config.mobile;
      if (mobile === void 0) {
        mobile = _isMobile.default;
      }
      var events = this.config.events || getEvents(mobile);
      var onDragStart = (0, _once.default)(this.onDragStart, this);
      var target = mobile ? event2.target : globalObject;
      var mouseUpListener = function(event3) {
        this.onDrop(event3);
        target && target.removeEventListener(events.move, mouseMoveListener);
        target && target.removeEventListener(events.up, mouseUpListener);
      }.bind(this);
      var mouseMoveListener = function(event3) {
        if (!mobile && event3.which !== 1) {
          mouseUpListener(event3);
          return;
        }
        onDragStart(event3, mobile);
        this.onDrag(event3, mobile);
      }.bind(this);
      target && target.addEventListener(events.move, mouseMoveListener, false);
      target && target.addEventListener(events.up, mouseUpListener);
    },
    onDragInit: function onDragInit(event2) {
      var config2 = {
        diff: {
          left: 0,
          top: 0
        }
      };
      this.state = {
        config: config2
      };
      if (this.config.region) {
        this.state.initialRegion = _regionAlign.default.from(this.config.region);
        this.state.dragRegion = config2.dragRegion = this.state.initialRegion.clone();
      }
      if (this.config.constrainTo) {
        this.state.constrainTo = _regionAlign.default.from(this.config.constrainTo);
      }
      this.callConfig("onDragInit", event2);
    },
    onDragStart: function onDragStart(event2, mobile) {
      this.state.initPageCoords = getPageCoords(event2, mobile);
      this.state.didDrag = this.state.config.didDrag = true;
      this.callConfig("onDragStart", event2);
    },
    onDrag: function onDrag(event2, mobile) {
      var config2 = this.state.config;
      var initPageCoords = this.state.initPageCoords;
      var eventCoords = getPageCoords(event2, mobile);
      var diff = config2.diff = {
        left: eventCoords.pageX - initPageCoords.pageX,
        top: eventCoords.pageY - initPageCoords.pageY
      };
      if (this.state.initialRegion) {
        var dragRegion = config2.dragRegion;
        dragRegion.set(this.state.initialRegion);
        dragRegion.shift(diff);
        if (this.state.constrainTo) {
          diff.left = dragRegion.left - this.state.initialRegion.left;
          diff.top = dragRegion.top - this.state.initialRegion.top;
        }
        config2.dragRegion = dragRegion;
      }
      this.callConfig("onDrag", event2);
    },
    onDrop: function onDrop(event2) {
      this.callConfig("onDrop", event2);
      this.state = null;
    },
    callConfig: function callConfig(fnName, event2) {
      var config2 = this.state.config;
      var args = [event2, config2];
      var fn = this.config[fnName];
      if (fn) {
        fn.apply(this, args);
      }
    }
  });
  function _default2(event2, config2) {
    if (config2.scope) {
      var skippedKeys = {
        scope: 1,
        region: 1,
        constrainTo: 1
      };
      Object.keys(config2).forEach(function(key) {
        var value = config2[key];
        if (key in skippedKeys) {
          return;
        }
        if (typeof value == "function") {
          config2[key] = value.bind(config2.scope);
        }
      });
    }
    var helper = new Helper(config2);
    helper.initDrag(event2);
    return helper;
  }
  return dragHelper;
}
var hasRequiredSetupColumnResize;
function requireSetupColumnResize() {
  if (hasRequiredSetupColumnResize)
    return setupColumnResize;
  hasRequiredSetupColumnResize = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(setupColumnResize, "__esModule", {
    value: true
  });
  setupColumnResize.default = _default2;
  var _dragHelper = _interopRequireDefault2(requireDragHelper());
  var emptyFn = function emptyFn2() {
  };
  function _default2(_ref2, _ref22, event2) {
    var region2 = _ref2.region, headerRegion = _ref2.headerRegion, constrainTo = _ref2.constrainTo;
    _ref2.columnHeaderNodes;
    var columns = _ref2.columns, rtl = _ref2.rtl, index2 = _ref2.index, firstFlexIndex = _ref2.firstFlexIndex, shareSpace = _ref2.shareSpace, shareSpaceOnResize = _ref2.shareSpaceOnResize, initialSize = _ref2.initialSize, nextColumnSize = _ref2.nextColumnSize;
    _ref2.extraOffset;
    var groupColumns = _ref2.groupColumns;
    var _ref2$onResizeDragIni = _ref22.onResizeDragInit, onResizeDragInit = _ref2$onResizeDragIni === void 0 ? emptyFn : _ref2$onResizeDragIni, _ref2$onResizeDragSta = _ref22.onResizeDragStart, onResizeDragStart = _ref2$onResizeDragSta === void 0 ? emptyFn : _ref2$onResizeDragSta, _ref2$onResizeDrag = _ref22.onResizeDrag, onResizeDrag = _ref2$onResizeDrag === void 0 ? emptyFn : _ref2$onResizeDrag, _ref2$onResizeDrop = _ref22.onResizeDrop, onResizeDrop = _ref2$onResizeDrop === void 0 ? emptyFn : _ref2$onResizeDrop;
    var column2 = columns[index2];
    var nextColumn = columns[index2 + 1];
    var initialPosition = rtl ? headerRegion.right - region2.right : region2.left - headerRegion.left;
    var isContrained = function isContrained2(dragRegion) {
      var constrained = dragRegion.left <= constrainTo.left || dragRegion.right >= constrainTo.right;
      return constrained;
    };
    (0, _dragHelper.default)(event2, {
      constrainTo,
      region: region2,
      onDragInit: onResizeDragInit.bind(this, {
        offset: initialPosition,
        region: region2,
        initialPosition,
        constrained: isContrained(region2)
      }),
      onDragStart: function onDragStart(e2, config2) {
        var constrained = isContrained(config2.dragRegion);
        onResizeDragStart({
          initialPosition,
          offset: initialPosition,
          constrained,
          resizing: true,
          region: region2,
          column: column2
        });
      },
      onDrag: function onDrag(e2, config2) {
        var diff = config2.diff.left;
        var offset = initialPosition + (rtl ? -1 : 1) * diff;
        var constrained = isContrained(config2.dragRegion);
        e2.preventDefault();
        onResizeDrag({
          constrained,
          initialPosition,
          diff,
          offset,
          region: region2,
          column: column2
        });
      },
      onDrop: function onDrop(e2, config2) {
        var diff = (rtl ? -1 : 1) * Math.round(config2.diff.left);
        var offset = initialPosition + diff;
        var constrained = isContrained(config2.dragRegion);
        var size2 = initialSize + diff;
        var doShare = shareSpace;
        var nextColSize;
        if (doShare) {
          nextColSize = nextColumnSize - diff;
        }
        onResizeDrop({
          index: index2,
          constrained,
          initialPosition,
          region: region2,
          diff,
          offset,
          size: size2,
          shareSpaceOnResize,
          groupColumns,
          initialSize,
          firstFlexIndex,
          shareSpace: doShare,
          column: column2,
          nextColumn,
          nextColumnSize: nextColSize
        });
      }
    });
  }
  return setupColumnResize;
}
var FakeFlex = {};
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return (
    /** @class */
    function() {
      function class_1() {
        this.__entries__ = [];
      }
      Object.defineProperty(class_1.prototype, "size", {
        /**
         * @returns {boolean}
         */
        get: function() {
          return this.__entries__.length;
        },
        enumerable: true,
        configurable: true
      });
      class_1.prototype.get = function(key) {
        var index2 = getIndex(this.__entries__, key);
        var entry = this.__entries__[index2];
        return entry && entry[1];
      };
      class_1.prototype.set = function(key, value) {
        var index2 = getIndex(this.__entries__, key);
        if (~index2) {
          this.__entries__[index2][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };
      class_1.prototype.delete = function(key) {
        var entries = this.__entries__;
        var index2 = getIndex(entries, key);
        if (~index2) {
          entries.splice(index2, 1);
        }
      };
      class_1.prototype.has = function(key) {
        return !!~getIndex(this.__entries__, key);
      };
      class_1.prototype.clear = function() {
        this.__entries__.splice(0);
      };
      class_1.prototype.forEach = function(callback2, ctx) {
        if (ctx === void 0) {
          ctx = null;
        }
        for (var _i = 0, _a4 = this.__entries__; _i < _a4.length; _i++) {
          var entry = _a4[_i];
          callback2.call(ctx, entry[1], entry[0]);
        }
      };
      return class_1;
    }()
  );
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback2) {
    return setTimeout(function() {
      return callback2(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle$1(callback2, delay2) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback2();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay2);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = (
  /** @class */
  function() {
    function ResizeObserverController2() {
      this.connected_ = false;
      this.mutationEventsAdded_ = false;
      this.mutationsObserver_ = null;
      this.observers_ = [];
      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle$1(this.refresh.bind(this), REFRESH_DELAY);
    }
    ResizeObserverController2.prototype.addObserver = function(observer) {
      if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
      }
      if (!this.connected_) {
        this.connect_();
      }
    };
    ResizeObserverController2.prototype.removeObserver = function(observer) {
      var observers2 = this.observers_;
      var index2 = observers2.indexOf(observer);
      if (~index2) {
        observers2.splice(index2, 1);
      }
      if (!observers2.length && this.connected_) {
        this.disconnect_();
      }
    };
    ResizeObserverController2.prototype.refresh = function() {
      var changesDetected = this.updateObservers_();
      if (changesDetected) {
        this.refresh();
      }
    };
    ResizeObserverController2.prototype.updateObservers_ = function() {
      var activeObservers = this.observers_.filter(function(observer) {
        return observer.gatherActive(), observer.hasActive();
      });
      activeObservers.forEach(function(observer) {
        return observer.broadcastActive();
      });
      return activeObservers.length > 0;
    };
    ResizeObserverController2.prototype.connect_ = function() {
      if (!isBrowser || this.connected_) {
        return;
      }
      document.addEventListener("transitionend", this.onTransitionEnd_);
      window.addEventListener("resize", this.refresh);
      if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);
        this.mutationsObserver_.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      } else {
        document.addEventListener("DOMSubtreeModified", this.refresh);
        this.mutationEventsAdded_ = true;
      }
      this.connected_ = true;
    };
    ResizeObserverController2.prototype.disconnect_ = function() {
      if (!isBrowser || !this.connected_) {
        return;
      }
      document.removeEventListener("transitionend", this.onTransitionEnd_);
      window.removeEventListener("resize", this.refresh);
      if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
      }
      if (this.mutationEventsAdded_) {
        document.removeEventListener("DOMSubtreeModified", this.refresh);
      }
      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
    };
    ResizeObserverController2.prototype.onTransitionEnd_ = function(_a4) {
      var _b3 = _a4.propertyName, propertyName = _b3 === void 0 ? "" : _b3;
      var isReflowProperty = transitionKeys.some(function(key) {
        return !!~propertyName.indexOf(key);
      });
      if (isReflowProperty) {
        this.refresh();
      }
    };
    ResizeObserverController2.getInstance = function() {
      if (!this.instance_) {
        this.instance_ = new ResizeObserverController2();
      }
      return this.instance_;
    };
    ResizeObserverController2.instance_ = null;
    return ResizeObserverController2;
  }()
);
var defineConfigurable = function(target, props2) {
  for (var _i = 0, _a4 = Object.keys(props2); _i < _a4.length; _i++) {
    var key = _a4[_i];
    Object.defineProperty(target, key, {
      value: props2[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles2) {
  var positions2 = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions2[_i - 1] = arguments[_i];
  }
  return positions2.reduce(function(size2, position2) {
    var value = styles2["border-" + position2 + "-width"];
    return size2 + toFloat(value);
  }, 0);
}
function getPaddings(styles2) {
  var positions2 = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions2; _i < positions_1.length; _i++) {
    var position2 = positions_1[_i];
    var value = styles2["padding-" + position2];
    paddings[position2] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles2 = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles2);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles2.width), height = toFloat(styles2.height);
  if (styles2.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles2, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles2, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a4) {
  var x2 = _a4.x, y2 = _a4.y, width = _a4.width, height = _a4.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x2,
    y: y2,
    width,
    height,
    top: y2,
    right: x2 + width,
    bottom: height + y2,
    left: x2
  });
  return rect;
}
function createRectInit(x2, y2, width, height) {
  return { x: x2, y: y2, width, height };
}
var ResizeObservation = (
  /** @class */
  function() {
    function ResizeObservation2(target) {
      this.broadcastWidth = 0;
      this.broadcastHeight = 0;
      this.contentRect_ = createRectInit(0, 0, 0, 0);
      this.target = target;
    }
    ResizeObservation2.prototype.isActive = function() {
      var rect = getContentRect(this.target);
      this.contentRect_ = rect;
      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    ResizeObservation2.prototype.broadcastRect = function() {
      var rect = this.contentRect_;
      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;
      return rect;
    };
    return ResizeObservation2;
  }()
);
var ResizeObserverEntry = (
  /** @class */
  /* @__PURE__ */ function() {
    function ResizeObserverEntry2(target, rectInit) {
      var contentRect = createReadOnlyRect(rectInit);
      defineConfigurable(this, { target, contentRect });
    }
    return ResizeObserverEntry2;
  }()
);
var ResizeObserverSPI = (
  /** @class */
  function() {
    function ResizeObserverSPI2(callback2, controller, callbackCtx) {
      this.activeObservations_ = [];
      this.observations_ = new MapShim();
      if (typeof callback2 !== "function") {
        throw new TypeError("The callback provided as parameter 1 is not a function.");
      }
      this.callback_ = callback2;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
    }
    ResizeObserverSPI2.prototype.observe = function(target) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (observations.has(target)) {
        return;
      }
      observations.set(target, new ResizeObservation(target));
      this.controller_.addObserver(this);
      this.controller_.refresh();
    };
    ResizeObserverSPI2.prototype.unobserve = function(target) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (!observations.has(target)) {
        return;
      }
      observations.delete(target);
      if (!observations.size) {
        this.controller_.removeObserver(this);
      }
    };
    ResizeObserverSPI2.prototype.disconnect = function() {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
    };
    ResizeObserverSPI2.prototype.gatherActive = function() {
      var _this = this;
      this.clearActive();
      this.observations_.forEach(function(observation) {
        if (observation.isActive()) {
          _this.activeObservations_.push(observation);
        }
      });
    };
    ResizeObserverSPI2.prototype.broadcastActive = function() {
      if (!this.hasActive()) {
        return;
      }
      var ctx = this.callbackCtx_;
      var entries = this.activeObservations_.map(function(observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });
      this.callback_.call(ctx, entries, ctx);
      this.clearActive();
    };
    ResizeObserverSPI2.prototype.clearActive = function() {
      this.activeObservations_.splice(0);
    };
    ResizeObserverSPI2.prototype.hasActive = function() {
      return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI2;
  }()
);
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver$1 = (
  /** @class */
  /* @__PURE__ */ function() {
    function ResizeObserver2(callback2) {
      if (!(this instanceof ResizeObserver2)) {
        throw new TypeError("Cannot call a class as a function.");
      }
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback2, controller, this);
      observers.set(this, observer);
    }
    return ResizeObserver2;
  }()
);
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method) {
  ResizeObserver$1.prototype[method] = function() {
    var _a4;
    return (_a4 = observers.get(this))[method].apply(_a4, arguments);
  };
});
var index$1 = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver$1;
}();
const ResizeObserver_es = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$1
}, Symbol.toStringTag, { value: "Module" }));
const require$$14 = /* @__PURE__ */ getAugmentedNamespace(ResizeObserver_es);
var hasRequiredFakeFlex;
function requireFakeFlex() {
  if (hasRequiredFakeFlex)
    return FakeFlex;
  hasRequiredFakeFlex = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(FakeFlex, "__esModule", {
    value: true
  });
  FakeFlex.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _resizeObserverPolyfill = _interopRequireDefault2(require$$14);
  var _NotifyResize = _interopRequireDefault2(requireNotifyResize());
  var _autoBind = _interopRequireDefault2(requireAutoBind());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var ResizeObserver2 = globalObject.ResizeObserver || _resizeObserverPolyfill.default;
  var useFragment = !!_react.default.Fragment;
  var coverStyle = !useFragment ? {
    height: "100%",
    position: "absolute",
    width: "100%",
    top: 0,
    left: 0
  } : null;
  var FLEX_1_STYLE = {
    flex: 1
  };
  var nativeFlexCoverStyle = {
    height: "100%",
    position: "absolute",
    width: "100%",
    top: 0,
    left: 0,
    display: "flex",
    flexFlow: "column"
  };
  var FakeFlex$1 = function(_Component) {
    (0, _inherits2.default)(FakeFlex2, _Component);
    var _super = _createSuper(FakeFlex2);
    function FakeFlex2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, FakeFlex2);
      _this = _super.call(this, props2);
      (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
      _this.state = {
        flexHeight: null
      };
      _this.flexRef = (0, _react.createRef)();
      return _this;
    }
    (0, _createClass2.default)(FakeFlex2, [{
      key: "onResize",
      value: function onResize(size2) {
        var _this2 = this;
        if (this.props.useNativeFlex) {
          return;
        }
        this.size = size2;
        if (size2.height === this.availableHeight) {
          return;
        }
        this.availableHeight = size2.height;
        requestAnimationFrame(function() {
          _this2.computeSize();
          requestAnimationFrame(_this2.resync);
        });
      }
    }, {
      key: "resync",
      value: function resync() {
        var node2 = this.getNode();
        if (!node2 || this.unmounted) {
          return;
        }
        var _node$getBoundingClie = node2.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
        this.onResize({
          width,
          height
        });
      }
    }, {
      key: "onChildResize",
      value: function onChildResize() {
        this.computeSize();
      }
    }, {
      key: "computeSize",
      value: function computeSize() {
        var _this3 = this;
        var availableHeight = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.availableHeight;
        var node2 = this.getNode();
        if (!node2 || this.unmounted) {
          return;
        }
        var flexIndex = this.props.flexIndex;
        var sum = [].slice.call(node2.children).reduce(function(acc, child, index2) {
          if (index2 >= _this3.length) {
            return acc;
          }
          if (index2 === flexIndex) {
            return acc;
          }
          return acc + child.offsetHeight;
        }, 0);
        var flexHeight = availableHeight - sum;
        if (flexHeight != this.state.flexHeight) {
          this.setState({
            flexHeight
          });
        }
      }
    }, {
      key: "getNode",
      value: function getNode() {
        if (this.node) {
          return this.node;
        }
        if (this.props.getNode) {
          this.node = this.props.getNode();
        } else {
          this.node = this.flexRef.current;
        }
        return this.node;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this4 = this;
        this.unmounted = false;
        requestAnimationFrame(function() {
          _this4.setupObservers();
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.prevLength && this.prevLength !== this.length) {
          this.clearObservers();
          this.setupObservers();
        }
        this.prevLength = this.length;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unmounted = true;
        this.clearObservers();
      }
    }, {
      key: "setupObservers",
      value: function setupObservers() {
        var _this5 = this;
        if (this.props.useNativeFlex) {
          return;
        }
        var node2 = this.getNode();
        if (!node2) {
          return;
        }
        var flexIndex = this.props.flexIndex;
        this.observers = [].slice.call(node2.children).map(function(child, index2) {
          if (index2 >= _this5.length) {
            return null;
          }
          if (index2 === flexIndex) {
            return null;
          }
          if (child.__observer) {
            return child.__observer;
          }
          var observer = new ResizeObserver2(function(entries) {
            var first = entries[0];
            if (first) {
              _this5.onChildResize(first.contentRect);
            }
          });
          observer.observe(child);
          observer.__obsTarget = child;
          child.__observer = observer;
          return observer;
        }).filter(Boolean);
      }
    }, {
      key: "clearObservers",
      value: function clearObservers() {
        var node2 = this.getNode();
        if (!node2) {
          return;
        }
        [].slice.call(node2.children).map(function(child) {
          if (child && child.__observer) {
            child.__observer.__obsTarget = null;
            child.__observer = null;
          }
        });
        if (this.observers) {
          this.observers.forEach(function(o) {
            if (o.unobserve && o.__obsTarget) {
              o.__obsTarget.__observer = null;
              o.unobserve(o.__obsTarget);
            }
            if (o.disconnect) {
              o.disconnect();
            }
          });
        }
        delete this.observers;
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var flexIndex = props2.flexIndex, useNativeFlex = props2.useNativeFlex;
        var flexHeight = this.state.flexHeight;
        var children = _react.default.Children.toArray(props2.children).filter(Boolean).map(function(x2, i) {
          if (i === flexIndex && (useNativeFlex || flexHeight)) {
            var additionalStyle = useNativeFlex ? FLEX_1_STYLE : {
              height: flexHeight
            };
            x2 = (0, _react.cloneElement)(x2, {
              style: x2.props.style ? _objectSpread2(_objectSpread2({}, x2.props.style), additionalStyle) : additionalStyle
            });
          }
          return x2;
        });
        this.length = children.length;
        var resizer = !useNativeFlex ? _react.default.createElement(_NotifyResize.default, {
          key: "fakeflexresizer",
          onResize: this.onResize,
          notifyOnMount: true,
          ResizeObserver: ResizeObserver2
        }) : null;
        if (useFragment && !useNativeFlex) {
          return _react.default.createElement(_react.default.Fragment, {
            key: "fragment"
          }, children, resizer);
        }
        return _react.default.createElement("div", {
          ref: this.flexRef,
          style: useNativeFlex ? nativeFlexCoverStyle : coverStyle
        }, children, resizer);
      }
    }]);
    return FakeFlex2;
  }(_react.Component);
  FakeFlex$1.propTypes = {
    flexIndex: _propTypes.default.number.isRequired,
    getNode: _propTypes.default.func.isRequired,
    useNativeFlex: _propTypes.default.bool
  };
  var _default2 = FakeFlex$1;
  FakeFlex.default = _default2;
  return FakeFlex;
}
var HeaderLayout = {};
var contains = {};
var hasRequiredContains;
function requireContains() {
  if (hasRequiredContains)
    return contains;
  hasRequiredContains = 1;
  Object.defineProperty(contains, "__esModule", {
    value: true
  });
  contains.default = void 0;
  var DOCUMENT_POSITION_CONTAINED_BY = 16;
  var _default2 = contains$12;
  contains.default = _default2;
  function contains$12(container2, elem) {
    if (container2.contains) {
      return container2.contains(elem);
    }
    var comparison = container2.compareDocumentPosition(elem);
    return comparison === 0 || comparison & DOCUMENT_POSITION_CONTAINED_BY;
  }
  return contains;
}
var assignDefined = {};
var assignFilter = {};
var hasRequiredAssignFilter;
function requireAssignFilter() {
  if (hasRequiredAssignFilter)
    return assignFilter;
  hasRequiredAssignFilter = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(assignFilter, "__esModule", {
    value: true
  });
  assignFilter.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  function assignFilter$1(filter3, target) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var filteredArgs = args.map(function(obj) {
      if (obj == null) {
        return obj;
      }
      return Object.keys(obj).reduce(function(acc, propName) {
        var value = obj[propName];
        if (filter3(value, propName, obj)) {
          acc[propName] = value;
        }
        return acc;
      }, {});
    });
    return Object.assign.apply(Object, [target].concat((0, _toConsumableArray2.default)(filteredArgs)));
  }
  var _default2 = assignFilter$1;
  assignFilter.default = _default2;
  return assignFilter;
}
var hasRequiredAssignDefined;
function requireAssignDefined() {
  if (hasRequiredAssignDefined)
    return assignDefined;
  hasRequiredAssignDefined = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(assignDefined, "__esModule", {
    value: true
  });
  assignDefined.default = void 0;
  var _assignFilter = _interopRequireDefault2(requireAssignFilter());
  function isDefined2(value) {
    return value !== void 0;
  }
  var _default2 = function _default3(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }
    return _assignFilter.default.apply(void 0, [isDefined2, target].concat(sources));
  };
  assignDefined.default = _default2;
  return assignDefined;
}
var getRangesForBoxes = {};
var hasRequiredGetRangesForBoxes;
function requireGetRangesForBoxes() {
  if (hasRequiredGetRangesForBoxes)
    return getRangesForBoxes;
  hasRequiredGetRangesForBoxes = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getRangesForBoxes, "__esModule", {
    value: true
  });
  getRangesForBoxes.default = void 0;
  var _region = _interopRequireDefault2(requireRegion());
  var _default2 = function _default3(cells, getIndex) {
    return (cells || []).map(function(c2, i) {
      var node2 = c2.domRef ? c2.domRef.current : c2.getDOMNode ? c2.getDOMNode() : null;
      var reg = _region.default.from(node2);
      var isCell = typeof c2.getProps === "function";
      var props2 = isCell ? c2.getProps() : c2.props;
      var result = {
        left: reg.left,
        right: reg.right,
        width: reg.width,
        computedLocked: props2.computedLocked,
        index: getIndex === void 0 ? i : getIndex(i, c2, props2)
      };
      return result;
    });
  };
  getRangesForBoxes.default = _default2;
  return getRangesForBoxes;
}
var getRangesForColumns = {};
var hasRequiredGetRangesForColumns;
function requireGetRangesForColumns() {
  if (hasRequiredGetRangesForColumns)
    return getRangesForColumns;
  hasRequiredGetRangesForColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getRangesForColumns, "__esModule", {
    value: true
  });
  getRangesForColumns.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _default2 = function _default3(columns, _ref2) {
    _ref2.headerRegion;
    var initialOffset = _ref2.initialOffset, availableWidth = _ref2.availableWidth, totalLockedEndWidth = _ref2.totalLockedEndWidth, initialScrollLeft = _ref2.initialScrollLeft, rtlOffset = _ref2.rtlOffset, rtl = _ref2.rtl;
    var lockedEndOffset = 0;
    var result = columns.map(function(c2, i) {
      var _result;
      var computedLocked = c2.computedLocked;
      var offset = rtl ? initialOffset - (initialScrollLeft || 0) - c2.computedOffset : c2.computedOffset + (initialOffset - (initialScrollLeft || 0));
      if (rtl) {
        offset += rtlOffset;
      }
      if (computedLocked === "end") {
        offset = !rtl ? availableWidth - totalLockedEndWidth + lockedEndOffset + initialOffset : initialOffset - availableWidth + totalLockedEndWidth - lockedEndOffset;
        lockedEndOffset += c2.computedWidth;
      }
      if (computedLocked === "start") {
        offset = c2.computedOffset + (initialOffset || 0);
      }
      var result2 = (_result = {}, (0, _defineProperty2.default)(_result, rtl ? "right" : "left", offset), (0, _defineProperty2.default)(_result, rtl ? "left" : "right", rtl ? offset - c2.computedWidth : offset + c2.computedWidth), (0, _defineProperty2.default)(_result, "width", c2.computedWidth), (0, _defineProperty2.default)(_result, "computedLocked", computedLocked), (0, _defineProperty2.default)(_result, "index", i), _result);
      return result2;
    });
    return result;
  };
  getRangesForColumns.default = _default2;
  return getRangesForColumns;
}
var setupColumnDrag = {};
var hasRequiredSetupColumnDrag;
function requireSetupColumnDrag() {
  if (hasRequiredSetupColumnDrag)
    return setupColumnDrag;
  hasRequiredSetupColumnDrag = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(setupColumnDrag, "__esModule", {
    value: true
  });
  setupColumnDrag.default = void 0;
  var _dragHelper = _interopRequireDefault2(requireDragHelper());
  var emptyFn = function emptyFn2() {
  };
  var _default2 = function _default3(_ref2) {
    var constrainTo = _ref2.constrainTo, region2 = _ref2.region;
    var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var event2 = arguments.length > 2 ? arguments[2] : void 0;
    var _onDrag = cfg.onDrag || emptyFn;
    var _onDrop = cfg.onDrop || emptyFn;
    (0, _dragHelper.default)(event2, {
      constrainTo,
      region: region2,
      onDrag: function onDrag(event3, config2) {
        event3.preventDefault();
        _onDrag({
          left: config2.diff.left || 0,
          top: config2.diff.top || 0
        }, event3);
      },
      onDrop: function onDrop(event3, config2) {
        _onDrop(config2.diff);
      }
    });
  };
  setupColumnDrag.default = _default2;
  return setupColumnDrag;
}
var moveXBeforeY = {};
var hasRequiredMoveXBeforeY;
function requireMoveXBeforeY() {
  if (hasRequiredMoveXBeforeY)
    return moveXBeforeY;
  hasRequiredMoveXBeforeY = 1;
  Object.defineProperty(moveXBeforeY, "__esModule", {
    value: true
  });
  moveXBeforeY.default = void 0;
  var _default2 = function _default3(array, from2, to2) {
    if (!Array.isArray(array)) {
      array = [];
    }
    var result = [].concat(array);
    var len = array.length;
    if (from2 === to2 || !len || from2 == null || to2 == null || from2 >= len || to2 > len) {
      return result;
    }
    from2 = Array.isArray(from2) ? from2 : [from2];
    var lessThanCount = from2.reduce(function(acc, index2) {
      return acc + (index2 < to2 ? 1 : 0);
    }, 0);
    var values = from2.map(function(index2) {
      return array[index2];
    }).reverse();
    var emptyArray2 = [];
    emptyArray2.concat(from2).sort(function(a, b2) {
      return b2 - a;
    }).forEach(function(index2) {
      result.splice(index2, 1);
    });
    from2.reverse().forEach(function(_, i) {
      result.splice(to2 - lessThanCount, 0, values[i]);
    });
    return result;
  };
  moveXBeforeY.default = _default2;
  return moveXBeforeY;
}
var isFocusable = {};
var matchesSelector = {};
var hasRequiredMatchesSelector;
function requireMatchesSelector() {
  if (hasRequiredMatchesSelector)
    return matchesSelector;
  hasRequiredMatchesSelector = 1;
  Object.defineProperty(matchesSelector, "__esModule", {
    value: true
  });
  matchesSelector.default = void 0;
  var _default2 = function _default3(element, selector) {
    var proto = Element.prototype;
    var vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;
    function match2(el2, sel) {
      if (vendor) {
        return vendor.call(el2, sel);
      }
      var nodes = el2.parentNode.querySelectorAll(sel);
      for (var i = 0, len = nodes.length; i < len; i++) {
        if (nodes[i] == el2) {
          return true;
        }
      }
      return false;
    }
    return match2(element, selector);
  };
  matchesSelector.default = _default2;
  return matchesSelector;
}
var hasRequiredIsFocusable;
function requireIsFocusable() {
  if (hasRequiredIsFocusable)
    return isFocusable;
  hasRequiredIsFocusable = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(isFocusable, "__esModule", {
    value: true
  });
  isFocusable.default = void 0;
  var _matchesSelector = _interopRequireDefault2(requireMatchesSelector());
  var FOCUSABLE_SELECTOR = "input, select, textarea, button, object, a[href], [tabindex]";
  var _default2 = function _default3(element) {
    return (0, _matchesSelector.default)(element, FOCUSABLE_SELECTOR);
  };
  isFocusable.default = _default2;
  return isFocusable;
}
var getDropIndex = {};
var hasRequiredGetDropIndex;
function requireGetDropIndex() {
  if (hasRequiredGetDropIndex)
    return getDropIndex;
  hasRequiredGetDropIndex = 1;
  Object.defineProperty(getDropIndex, "__esModule", {
    value: true
  });
  getDropIndex.default = void 0;
  var _default2 = function _default3(_ref2) {
    var dragTarget = _ref2.dragTarget, dropTarget = _ref2.dropTarget, dragMinIndex = _ref2.dragMinIndex, dragMaxIndex = _ref2.dragMaxIndex, dragRange = _ref2.dragRange, ranges = _ref2.ranges, rtl = _ref2.rtl, dir = _ref2.dir, validDropPositions = _ref2.validDropPositions;
    ranges = ranges || [];
    var dragIndex = dragRange.index;
    var draggingLocked = dragRange.computedLocked;
    var locked = draggingLocked;
    var isValid = function isValid2(i2) {
      if (i2 === void 0) {
        return false;
      }
      var validDropIndex = dropTarget === "group" || !validDropPositions || validDropPositions[i2];
      if (dragMinIndex !== void 0 && i2 < dragMinIndex || dragMaxIndex !== void 0 && i2 > dragMaxIndex || !validDropIndex || i2 > ranges.length) {
        return false;
      }
      return true;
    };
    var searchInRanges = dragTarget != dropTarget ? ranges : dir == 1 ? ranges.slice(dragIndex) : ranges.slice(0, dragIndex);
    var currentRange;
    var halfSize;
    var thisDir;
    var index2;
    var foundIndex;
    for (var i = 0, len = searchInRanges.length; i < len; i++) {
      currentRange = searchInRanges[i];
      if (!currentRange) {
        continue;
      }
      index2 = currentRange.index;
      thisDir = index2 <= dragIndex || dragTarget !== dropTarget ? -1 : 1;
      halfSize = (currentRange.right - currentRange.left) / 2;
      if (thisDir > 0) {
        if (isValid(index2 + 1) && (rtl ? dragRange.left <= currentRange.right - halfSize : dragRange.right >= currentRange.left + halfSize)) {
          foundIndex = index2 + 1;
        }
      } else {
        if (isValid(index2) && (rtl ? dragRange.right > currentRange.right - halfSize : dragRange.left < currentRange.left + halfSize)) {
          foundIndex = index2;
          if (dropTarget !== dragTarget || dir === -1) {
            break;
          }
        }
      }
    }
    if (dragTarget === dropTarget) {
      if (foundIndex === dragIndex + 1) {
        foundIndex++;
      } else if (foundIndex === void 0) {
        foundIndex = dragIndex === ranges.length - 1 || dragIndex === 0 ? dragIndex : dir > 1 ? ranges.length : void 0;
      }
    } else if (foundIndex === void 0) {
      foundIndex = ranges.length;
    }
    if (!isValid(foundIndex)) {
      foundIndex = void 0;
    }
    if (dragMinIndex !== void 0 && foundIndex < dragMinIndex) {
      foundIndex = dragMinIndex;
    }
    if (dragMaxIndex !== void 0 && foundIndex > dragMaxIndex) {
      foundIndex = dragMaxIndex;
    }
    if (!isValid(foundIndex)) {
      foundIndex = dragIndex;
    }
    if (!isValid(foundIndex)) {
      foundIndex = void 0;
    }
    if (isValid(foundIndex) && ranges[foundIndex]) {
      locked = ranges[foundIndex].computedLocked;
    }
    var initialLocked = locked;
    if (dir === 1) {
      var targetRange = ranges[foundIndex];
      var beforeTargetRange = ranges[foundIndex - 1];
      var afterTargetRange = ranges[foundIndex + 1];
      if (targetRange && !targetRange.computedLocked) {
        if (rtl) {
          if (dragRange.left < targetRange.right) {
            locked = targetRange.computedLocked;
          } else {
            locked = beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
          }
        } else {
          if (dragRange.right > targetRange.left) {
            locked = targetRange.computedLocked;
          } else {
            locked = beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
          }
        }
      } else if (targetRange && targetRange.computedLocked === "end") {
        if (rtl) {
          locked = dragRange.left < targetRange.right ? "end" : beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
        } else {
          locked = dragRange.right > targetRange.left ? "end" : beforeTargetRange ? beforeTargetRange.computedLocked : initialLocked;
        }
      } else if (afterTargetRange && !afterTargetRange.computedLocked && (rtl ? dragRange.left > afterTargetRange.right : dragRange.right > afterTargetRange.left)) {
        locked = null;
      } else if (beforeTargetRange && beforeTargetRange.computedLocked === "end") {
        locked = "end";
      }
    }
    if (dir === -1) {
      var _targetRange = ranges[foundIndex];
      var _beforeTargetRange = ranges[foundIndex - 1];
      if (_beforeTargetRange && !_beforeTargetRange.computedLocked && (rtl ? dragRange.right > _beforeTargetRange.left : dragRange.left < _beforeTargetRange.right)) {
        locked = null;
      } else if (_beforeTargetRange && _beforeTargetRange.computedLocked === "start" && (rtl ? dragRange.right > _beforeTargetRange.left : dragRange.left < _beforeTargetRange.right)) {
        locked = "start";
      } else if (_targetRange && _targetRange.computedLocked === "end" && (rtl ? dragRange.right > _targetRange.left : dragRange.left < _targetRange.right)) {
        locked = "end";
      }
    }
    if (draggingLocked === "start" && ranges[foundIndex] && ranges[foundIndex].computedLocked === "start" && locked == null) {
      foundIndex++;
    }
    return {
      index: foundIndex,
      locked
    };
  };
  getDropIndex.default = _default2;
  return getDropIndex;
}
var getUndraggableSuccessiveCount = {};
var hasRequiredGetUndraggableSuccessiveCount;
function requireGetUndraggableSuccessiveCount() {
  if (hasRequiredGetUndraggableSuccessiveCount)
    return getUndraggableSuccessiveCount;
  hasRequiredGetUndraggableSuccessiveCount = 1;
  Object.defineProperty(getUndraggableSuccessiveCount, "__esModule", {
    value: true
  });
  getUndraggableSuccessiveCount.default = void 0;
  var _default2 = function _default3(columns) {
    return columns.reduce(function(acc, col) {
      if (col.draggable !== false) {
        acc.stop = true;
      }
      if (col.draggable === false && !acc.stop) {
        acc.count++;
      }
      return acc;
    }, {
      count: 0
    }).count;
  };
  getUndraggableSuccessiveCount.default = _default2;
  return getUndraggableSuccessiveCount;
}
var DragCell = {};
var Cell = {};
var renderHeader = {};
var renderFilter = {};
var StringFilter = {};
var TextInput = {};
var src$5 = {};
var Field = {};
var src$4 = {};
var hasRequiredSrc$5;
function requireSrc$5() {
  if (hasRequiredSrc$5)
    return src$4;
  hasRequiredSrc$5 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(src$4, "__esModule", {
    value: true
  });
  src$4.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var InovuaField = function(_Component) {
    (0, _inherits2.default)(InovuaField2, _Component);
    var _super = _createSuper(InovuaField2);
    function InovuaField2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaField2);
      _this = _super.call(this, props2);
      _this.ref = function(ref) {
        _this.input = ref;
      };
      _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));
      return _this;
    }
    (0, _createClass2.default)(InovuaField2, [{
      key: "render",
      value: function render() {
        var inputProps = _objectSpread2({}, this.props);
        delete inputProps.stopChangePropagation;
        return _react.default.createElement("input", _objectSpread2(_objectSpread2({}, inputProps), {}, {
          onChange: this.onChange,
          ref: this.ref
        }));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (this.input) {
          this.input.focus();
        }
      }
    }, {
      key: "onChange",
      value: function onChange(event2) {
        if (this.props.stopChangePropagation) {
          event2.stopPropagation();
        }
        this.props.onChange(event2.target.value, event2);
      }
    }, {
      key: "getNode",
      value: function getNode() {
        return this.input;
      }
    }]);
    return InovuaField2;
  }(_react.Component);
  InovuaField.propTypes = {
    type: _propTypes.default.string,
    stopChangePropagation: _propTypes.default.bool
  };
  InovuaField.defaultProps = {
    stopChangePropagation: true,
    onChange: function onChange() {
    },
    type: "text"
  };
  var _default2 = InovuaField;
  src$4.default = _default2;
  return src$4;
}
var hasRequiredField;
function requireField() {
  if (hasRequiredField)
    return Field;
  hasRequiredField = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Field, "__esModule", {
    value: true
  });
  Field.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$5());
  var _default2 = _src.default;
  Field.default = _default2;
  return Field;
}
var hasRequiredSrc$4;
function requireSrc$4() {
  if (hasRequiredSrc$4)
    return src$5;
  hasRequiredSrc$4 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(src$5, "__esModule", {
    value: true
  });
  src$5.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _autoBind = _interopRequireDefault2(requireAutoBind());
  var _Field = _interopRequireDefault2(requireField());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var preventDefault = function preventDefault2(e2) {
    return e2.preventDefault();
  };
  var getClearButtonClassNames = function getClearButtonClassNames2(props2) {
    var clearButtonClassName = (0, _join.default)("".concat(props2.rootClassName, "__clear-button"), props2.clearButtonClassName);
    return {
      clearButtonClassName
    };
  };
  var isControlled = function isControlled2(props2) {
    return props2.value !== void 0;
  };
  var emptyObject = {};
  var TextInput2 = function(_Component) {
    (0, _inherits2.default)(TextInput3, _Component);
    var _super = _createSuper(TextInput3);
    function TextInput3(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, TextInput3);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function(svgProps) {
        var result;
        if (_this.props.renderClearIcon && typeof _this.props.renderClearIcon === "function") {
          result = _this.props.renderClearIcon(_objectSpread2({}, svgProps));
        }
        if (result === void 0) {
          result = _react.default.createElement("svg", {
            style: _objectSpread2({}, svgProps),
            viewBox: "0 0 10 10"
          }, _react.default.createElement("path", {
            fill: "none",
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeWidth: "1.33",
            d: "M1 1l8 8m0-8L1 9"
          }));
        }
        return result;
      });
      _this.fieldRef = function(field) {
        _this.field = field;
      };
      _this.state = {
        focused: false,
        value: props2.defaultValue == null ? "" : props2.defaultValue
      };
      (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
      return _this;
    }
    (0, _createClass2.default)(TextInput3, [{
      key: "handleChange",
      value: function handleChange(value, event2) {
        this.setValue(value, event2);
      }
    }, {
      key: "focus",
      value: function focus() {
        this.field.focus();
      }
    }, {
      key: "setValue",
      value: function setValue(value, event2) {
        if (!isControlled(this.props)) {
          this.setState({
            value
          });
        }
        if (this.props.inputProps && this.props.inputProps.onChange) {
          this.props.inputProps.onChange(value, event2);
        }
        if (this.props.onChange) {
          this.props.onChange(value, event2);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props, state2 = this.state;
        var wrapperProps = props2.wrapperProps, style = props2.style, enableClearButton = props2.enableClearButton;
        var inputProps = props2.inputProps || emptyObject;
        var inputClassName = (0, _join.default)("".concat(props2.rootClassName, "__input"), inputProps.className);
        var value = isControlled(props2) ? props2.value : state2.value;
        var fieldProps = _objectSpread2(_objectSpread2({
          size: 1
        }, inputProps), {}, {
          ref: this.fieldRef,
          className: inputClassName,
          onChange: this.handleChange,
          value,
          type: props2.type,
          stopChangePropagation: props2.stopChangePropagation
        });
        if (props2.hidden) {
          fieldProps.hidden = props2.hidden;
        }
        if (props2.name) {
          fieldProps.name = props2.name;
        }
        if (props2.placeholder) {
          fieldProps.placeholder = props2.placeholder;
        }
        if (props2.required) {
          fieldProps.required = props2.required;
        }
        if (props2.readOnly) {
          fieldProps.readOnly = props2.readOnly;
        }
        if (props2.autoFocus) {
          fieldProps.autoFocus = props2.autoFocus;
        }
        if (props2.maxLength != void 0) {
          fieldProps.maxLength = props2.maxLength;
        }
        if (props2.minLength != void 0) {
          fieldProps.minLength = props2.minLength;
        }
        if (props2.size != void 0) {
          fieldProps.size = props2.size;
        }
        if (props2.disabled) {
          fieldProps.disabled = props2.disabled;
        }
        var className = (0, _join.default)(props2.rootClassName, props2.className, props2.rtl ? "".concat(props2.rootClassName, "--rtl") : "".concat(props2.rootClassName, "--ltr"), props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme), enableClearButton && "".concat(props2.rootClassName, "--enable-clear-button"), state2.focused && "".concat(props2.rootClassName, "--focused"), fieldProps.disabled && "".concat(props2.rootClassName, "--disabled"));
        var input = _react.default.createElement(_Field.default, _objectSpread2({}, fieldProps));
        var wrapperDomProps = (0, _cleanProps.default)(wrapperProps, TextInput3.propTypes);
        var domProps = (0, _cleanProps.default)(props2, TextInput3.propTypes);
        delete domProps.onChange;
        return _react.default.createElement("div", _objectSpread2(_objectSpread2(_objectSpread2({}, domProps), wrapperDomProps), {}, {
          className,
          style,
          onBlur: this.onBlur,
          onClick: this.onClick,
          onFocus: this.onFocus
        }), input, this.renderClearButtonWrapper(fieldProps));
      }
    }, {
      key: "handleClearButtonClick",
      value: function handleClearButtonClick(event2) {
        this.setState({
          focused: true
        });
        this.setValue("");
        this.focus();
      }
    }, {
      key: "renderClearButtonWrapper",
      value: function renderClearButtonWrapper(fieldProps) {
        var props2 = this.props, state2 = this.state;
        var clearButtonColor = props2.clearButtonColor, clearButtonStyle = props2.clearButtonStyle, clearButtonSize = props2.clearButtonSize, enableClearButton = props2.enableClearButton, rootClassName = props2.rootClassName;
        var value = isControlled(props2) ? props2.value : state2.value;
        var emptyValue = value == "" || value == null;
        var showButton = enableClearButton && !emptyValue && !fieldProps.disabled && !fieldProps.readOnly;
        return _react.default.createElement("div", {
          key: "clearButton",
          className: (0, _join.default)("".concat(rootClassName, "__clear-button-wrapper"), !showButton && "".concat(rootClassName, "__clear-button-wrapper--hidden"))
        }, this.renderClearButton(_objectSpread2({
          clearButtonColor,
          clearButtonStyle,
          clearButtonSize
        }, getClearButtonClassNames(props2))));
      }
    }, {
      key: "renderClearButton",
      value: function renderClearButton(config2) {
        var clearButtonColor = config2.clearButtonColor, clearButtonStyle = config2.clearButtonStyle, clearButtonClassName = config2.clearButtonClassName, clearButtonSize = config2.clearButtonSize;
        var svgProps = {};
        var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;
        if (clearButtonColor) {
          svgProps.fill = clearButtonColor;
        }
        if (clearButtonSize) {
          if (Array.isArray(clearButtonSize)) {
            svgProps.width = clearButtonSize[0];
            svgProps.height = clearButtonSize[1];
          } else {
            svgProps.width = clearButtonSize;
            svgProps.height = clearButtonSize;
          }
        }
        return _react.default.createElement("button", {
          key: "clearButton",
          type: "button",
          onClick: this.handleClearButtonClick,
          onMouseDown: preventDefault,
          className: clearButtonClassName,
          style: _objectSpread2({}, clearButtonStyle),
          tabIndex
        }, this.renderClearIcon(svgProps));
      }
    }, {
      key: "onClick",
      value: function onClick(event2) {
        if (!this.state.focused) {
          this.focus();
        }
        if (this.props.wrapperProps && this.props.wrapperProps.onClick) {
          this.props.wrapperProps.onClick(event2);
        }
      }
    }, {
      key: "onBlur",
      value: function onBlur3(event2) {
        this.setState({
          focused: false
        });
        if (this.props.onBlur) {
          this.props.onBlur(event2);
        }
      }
    }, {
      key: "onFocus",
      value: function onFocus3(event2) {
        this.setState({
          focused: true
        });
        if (this.props.onFocus) {
          this.props.onFocus(event2);
        }
      }
    }]);
    return TextInput3;
  }(_react.Component);
  TextInput2.defaultProps = {
    hidden: false,
    type: "text",
    theme: "default-light",
    rootClassName: "inovua-react-toolkit-text-input",
    enableClearButton: true,
    clearButtonSize: 10,
    stopChangePropagation: true,
    acceptClearToolFocus: false
  };
  TextInput2.propTypes = {
    type: _propTypes.default.string,
    theme: _propTypes.default.string,
    name: _propTypes.default.string,
    placeholder: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    maxLength: _propTypes.default.number,
    size: _propTypes.default.number,
    minLength: _propTypes.default.number,
    required: _propTypes.default.bool,
    readOnly: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    hidden: _propTypes.default.bool,
    stopChangePropagation: _propTypes.default.bool,
    enableClearButton: _propTypes.default.bool,
    acceptClearToolFocus: _propTypes.default.bool,
    rtl: _propTypes.default.bool,
    rootClassName: _propTypes.default.string,
    clearButtonSize: _propTypes.default.number,
    clearButtonColor: _propTypes.default.string,
    clearButtonStyle: _propTypes.default.object,
    clearButtonClassName: _propTypes.default.string,
    renderClearIcon: _propTypes.default.func
  };
  var _default2 = TextInput2;
  src$5.default = _default2;
  return src$5;
}
var hasRequiredTextInput;
function requireTextInput() {
  if (hasRequiredTextInput)
    return TextInput;
  hasRequiredTextInput = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(TextInput, "__esModule", {
    value: true
  });
  TextInput.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$4());
  var _default2 = _src.default;
  TextInput.default = _default2;
  return TextInput;
}
var hasRequiredStringFilter;
function requireStringFilter() {
  if (hasRequiredStringFilter)
    return StringFilter;
  hasRequiredStringFilter = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(StringFilter, "__esModule", {
    value: true
  });
  StringFilter.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _TextInput = _interopRequireDefault2(requireTextInput());
  var _debounce = _interopRequireDefault2(requireDebounce$1());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var StringFilter$1 = function(_React$Component) {
    (0, _inherits2.default)(StringFilter2, _React$Component);
    var _super = _createSuper(StringFilter2);
    function StringFilter2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, StringFilter2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "input", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refInput", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(_ref2) {
        var value = _ref2.filterValue.value;
        if (String(value).localeCompare(String(_this.props.filterValue && _this.props.filterValue.value))) {
          if (_this.props.filterValue) {
            _this.onChange(_this.props.filterValue.value);
          }
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getInputRef", function() {
        return _this.input;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderClearIcon", function(_ref2) {
        var width = _ref2.width, height = _ref2.height;
        return _react.default.createElement("svg", {
          style: {
            width,
            height
          },
          viewBox: "0 0 10 10"
        }, _react.default.createElement("path", {
          fill: "none",
          fillRule: "evenodd",
          strokeLinecap: "round",
          strokeWidth: "1.33",
          d: "M1 1l8 8m0-8L1 9"
        }));
      });
      _this.refInput = function(i) {
        var _props$filterEditorPr;
        var inputRef = props2.inputRef || ((_props$filterEditorPr = props2.filterEditorProps) === null || _props$filterEditorPr === void 0 ? void 0 : _props$filterEditorPr.inputRef);
        if (inputRef) {
          if (typeof inputRef === "function") {
            inputRef(i);
          } else {
            inputRef.current = i;
          }
        }
        _this.input = i;
      };
      var filterValue = props2.filterValue;
      _this.state = {
        value: filterValue ? filterValue.value || "" : ""
      };
      _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));
      _this.onValueChange = _this.onValueChange.bind((0, _assertThisInitialized2.default)(_this));
      if (props2.filterDelay && props2.filterDelay >= 1) {
        _this.onValueChange = (0, _debounce.default)(_this.onValueChange, props2.filterDelay, {
          leading: false,
          trailing: true
        });
      }
      return _this;
    }
    (0, _createClass2.default)(StringFilter2, [{
      key: "onChange",
      value: function onChange(value) {
        this.onValueChange(value);
        this.setValue(value);
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        this.setState({
          value
        });
      }
    }, {
      key: "onValueChange",
      value: function onValueChange(value) {
        this.props.onChange && this.props.onChange(_objectSpread2(_objectSpread2({}, this.props.filterValue), {}, {
          value
        }));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props, filterValue = _this$props.filterValue, readOnly = _this$props.readOnly, disabled = _this$props.disabled, style = _this$props.style, rtl = _this$props.rtl, theme2 = _this$props.theme, placeholder = _this$props.placeholder;
        var inputProps = {
          readOnly,
          disabled,
          theme: theme2,
          rtl,
          value: this.state.value,
          placeholder,
          style: _objectSpread2({
            minWidth: 0
          }, style)
        };
        var filterEditorProps;
        if (filterValue) {
          filterEditorProps = filterValue.filterEditorProps;
          inputProps.value = this.state.value;
        }
        return this.props.render && this.props.render(_react.default.createElement(_TextInput.default, _objectSpread2(_objectSpread2({}, filterEditorProps), {}, {
          type: "text",
          ref: this.refInput,
          onChange: this.onChange,
          renderClearIcon: this.renderClearIcon,
          className: "InovuaReactDataGrid__column-header__filter InovuaReactDataGrid__column-header__filter--string"
        }, inputProps)));
      }
    }]);
    return StringFilter2;
  }(_react.default.Component);
  var _default2 = StringFilter$1;
  StringFilter.default = _default2;
  return StringFilter;
}
var hasRequiredRenderFilter;
function requireRenderFilter() {
  if (hasRequiredRenderFilter)
    return renderFilter;
  hasRequiredRenderFilter = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderFilter, "__esModule", {
    value: true
  });
  renderFilter.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _StringFilter = _interopRequireDefault2(requireStringFilter());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var filterWrapperClassName = "InovuaReactDataGrid__column-header__filter-wrapper";
  var GenericFilter = function(_React$Component) {
    (0, _inherits2.default)(GenericFilter2, _React$Component);
    var _super = _createSuper(GenericFilter2);
    function GenericFilter2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, GenericFilter2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSettingsClickListener", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "settings", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refSettings", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "specificFilter", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unsubscribeColumnFilterVisibility", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupEventListener", function() {
        _this.unsubscribeColumnFilterVisibility = _this.props.props.notifyColumnFilterVisibleStateChange.onCalled(function(visible) {
          if (!visible && _this.state.open) {
            _this.close(_this.settings);
          }
        });
        _this.refSettings = function(s) {
          if (s) {
            if (!_this.onSettingsClickListener) {
              _this.onSettingsClickListener = s.addEventListener("mousedown", _this.onSettingsClick);
            }
          } else {
            if (_this.settings && _this.onSettingsClickListener) {
              _this.settings.removeEventListener(_this.onSettingsClickListener);
            }
          }
          _this.settings = s;
        };
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onSettingsClick", function(e2) {
        if (!_this.state.open) {
          _this.onMenuOpen(e2);
        } else {
          _this.onMenuClose(e2);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function() {
        _this.setState({
          focused: true
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBlur", function() {
        _this.setState({
          focused: false
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMenuOpen", function(e2) {
        e2.preventDefault();
        _this.props.cellInstance.showFilterContextMenu(_this.settings);
        _this.setState({
          focused: true,
          open: true
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMenuClose", function(e2) {
        e2.preventDefault();
        _this.close();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyDown", function(event2) {
        if (event2.key === "Enter") {
          _this.onMenuOpen(event2);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "close", function(settings) {
        _this.setState({
          focused: false,
          open: false
        }, function() {
          _this.props.cellInstance.hideFilterContextMenu(settings);
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValue", function(value) {
        if (_this.specificFilter.setValue) {
          _this.specificFilter.setValue(value);
        }
      });
      _this.onSettingsClick = _this.onSettingsClick.bind((0, _assertThisInitialized2.default)(_this));
      _this.onSettingsClickListener = null;
      _this.ref = function(specificFilter) {
        var inputRef = props2.inputRef || props2.props.filterEditorProps && props2.props.filterEditorProps.inputRef;
        if (inputRef) {
          if (typeof inputRef === "function") {
            inputRef(specificFilter);
          } else {
            inputRef.current = specificFilter;
          }
        }
        _this.specificFilter = specificFilter;
      };
      _this.state = {
        focused: false,
        open: false
      };
      return _this;
    }
    (0, _createClass2.default)(GenericFilter2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.cellInstance) {
          this.props.cellInstance.filter = this;
        }
        this.setupEventListener();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.props.cellInstance) {
          this.props.cellInstance.filter = null;
        }
        if (this.settings && this.onSettingsClickListener) {
          this.settings.removeEventListener(this.onSettingsClickListener);
        }
        this.onSettingsClickListener = null;
        this.settings = null;
        if (this.unsubscribeColumnFilterVisibility) {
          this.unsubscribeColumnFilterVisibility();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props, props2 = _this$props.props, cellInstance = _this$props.cellInstance;
        var filterValue = props2.computedFilterValue;
        var active = filterValue ? filterValue.active !== false : false;
        var filterType = filterValue ? filterValue.type || props2.filterType || props2.type : props2.filterType || props2.type || "string";
        if (filterValue && !filterValue.type) {
          filterValue = _objectSpread2(_objectSpread2({}, filterValue), {}, {
            type: filterType
          });
        }
        var className = filterWrapperClassName;
        if (filterValue) {
          if (!active) {
            className += " ".concat(className, "--disabled");
          }
        }
        var settings;
        var style = {
          minHeight: props2.filterRowHeight + 1
        };
        if (filterValue) {
          var settingsIconClassName = "InovuaReactDataGrid__column-header__filter-settings-icon";
          var settingsIcon = props2.filterEditorProps && props2.filterEditorProps.renderSettings ? props2.filterEditorProps.renderSettings({
            className: settingsIconClassName,
            filterValue
          }) : _react.default.createElement("svg", {
            tabIndex: 0,
            className: settingsIconClassName,
            width: "14",
            height: "14",
            viewBox: "0 0 14 14"
          }, _react.default.createElement("path", {
            fillRule: "evenodd",
            d: "M13.222 2H.778C.348 2 0 1.552 0 1s.348-1 .778-1h12.444c.43 0 .778.448.778 1s-.348 1-.778 1zM1.556 3.111l3.888 4.667v5.444c0 .43.349.778.778.778h1.556c.43 0 .778-.348.778-.778V7.778l3.888-4.667H1.556z"
          }));
          settings = _react.default.createElement("div", {
            className: "InovuaReactDataGrid__column-header__filter-settings",
            ref: this.refSettings,
            onKeyDown: this.onKeyDown,
            onFocus: this.onFocus,
            onBlur: this.onBlur
          }, settingsIcon);
        }
        if (!filterValue) {
          className += " ".concat(filterWrapperClassName, "--empty");
          return _react.default.createElement("div", {
            style,
            className
          });
        }
        var filterTypes2 = props2.filterTypes;
        var filterTypeDescription = filterTypes2[filterType] || {
          operators: []
        };
        var operator = filterTypeDescription.operators.filter(function(op) {
          return op.name === filterValue.operator;
        })[0];
        var operatorDisabled = operator && operator.disableFilterEditor;
        var filterProps2 = _objectSpread2(_objectSpread2({
          i18n: props2.i18n,
          rtl: props2.rtl,
          nativeScroll: props2.nativeScroll,
          filterDelay: props2.filterDelay !== void 0 ? props2.filterDelay : 250
        }, props2.filterEditorProps), {}, {
          filterEditorProps: props2.filterEditorProps,
          ref: this.ref,
          cellProps: props2,
          renderInPortal: props2.renderInPortal,
          cell: cellInstance,
          filterValue,
          emptyValue: filterTypeDescription.emptyValue,
          onChange: cellInstance.onFilterValueChange,
          active,
          disabled: !active || operatorDisabled,
          filterType,
          theme: props2.theme,
          render: function render2(node2) {
            return _react.default.createElement("div", {
              style,
              className
            }, node2, props2.enableColumnFilterContextMenu && settings);
          }
        });
        var FilterEditor = props2.filterEditor;
        if (FilterEditor && typeof FilterEditor != "string") {
          return _react.default.createElement(FilterEditor, _objectSpread2({}, filterProps2));
        }
        if (props2.renderFilterEditor) {
          return props2.renderFilterEditor(filterProps2, props2, cellInstance);
        }
        return _react.default.createElement(_StringFilter.default, _objectSpread2({}, filterProps2));
      }
    }]);
    return GenericFilter2;
  }(_react.default.Component);
  var _default2 = function _default3(props2, cellInstance) {
    return _react.default.createElement(GenericFilter, {
      key: "filter-".concat(cellInstance.getProps().id),
      props: props2,
      rtl: props2.rtl,
      cellInstance
    });
  };
  renderFilter.default = _default2;
  return renderFilter;
}
var ColumnResizer = {};
var lodash_throttle;
var hasRequiredLodash_throttle;
function requireLodash_throttle() {
  if (hasRequiredLodash_throttle)
    return lodash_throttle;
  hasRequiredLodash_throttle = 1;
  var FUNC_ERROR_TEXT = "Expected a function";
  var NAN = 0 / 0;
  var symbolTag = "[object Symbol]";
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var nativeMax = Math.max, nativeMin = Math.min;
  var now2 = function() {
    return root.Date.now();
  };
  function debounce2(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject2(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
      return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now2();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now2());
    }
    function debounced() {
      var time2 = now2(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  function throttle2(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject2(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce2(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject2(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject2(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, "");
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  lodash_throttle = throttle2;
  return lodash_throttle;
}
var hasRequiredColumnResizer;
function requireColumnResizer() {
  if (hasRequiredColumnResizer)
    return ColumnResizer;
  hasRequiredColumnResizer = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(ColumnResizer, "__esModule", {
    value: true
  });
  ColumnResizer.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _lodash = _interopRequireDefault2(requireLodash_throttle());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var propTypes2 = {
    onMouseDown: _propTypes.default.func.isRequired,
    onTouchStart: _propTypes.default.func.isRequired,
    resizeHandleClassName: _propTypes.default.string.isRequired
  };
  var ColumnResizer$1 = function(_Component) {
    (0, _inherits2.default)(ColumnResizer2, _Component);
    var _super = _createSuper(ColumnResizer2);
    function ColumnResizer2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, ColumnResizer2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "overHeight", 0);
      _this.state = {
        over: false
      };
      _this.domRef = _react.default.createRef();
      _this.onMouseDown = _this.onMouseDown.bind((0, _assertThisInitialized2.default)(_this));
      _this.onTouchStart = _this.onTouchStart.bind((0, _assertThisInitialized2.default)(_this));
      _this.onMouseEnter = _this.onMouseEnter.bind((0, _assertThisInitialized2.default)(_this));
      _this.onMouseLeave = _this.onMouseLeave.bind((0, _assertThisInitialized2.default)(_this));
      _this.setOver = (0, _lodash.default)(_this.setOver, 50, {
        leading: false
      });
      return _this;
    }
    (0, _createClass2.default)(ColumnResizer2, [{
      key: "onMouseEnter",
      value: function onMouseEnter() {
        var parent = this.domRef.current.parentElement;
        var overHeight = parent ? parent.offsetHeight : null;
        this.overHeight = overHeight;
        this.setOver(true);
      }
    }, {
      key: "setOver",
      value: function setOver(value) {
        if (value) {
          this.setState({
            over: true,
            overHeight: this.overHeight
          });
        } else {
          this.setState({
            over: false
          });
        }
      }
    }, {
      key: "onMouseLeave",
      value: function onMouseLeave() {
        this.setOver(false);
      }
    }, {
      key: "onMouseDown",
      value: function onMouseDown(event2) {
        event2.preventDefault();
        if (this.props.onMouseDown) {
          this.props.onMouseDown(event2);
        }
        this.setState({
          over: false
        });
      }
    }, {
      key: "onTouchStart",
      value: function onTouchStart(event2) {
        event2.preventDefault();
        if (this.props.onTouchStart) {
          this.props.onTouchStart(event2);
        }
        this.setState({
          over: false
        });
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var _this$props = this.props, className = _this$props.className, resizeHandleClassName = _this$props.resizeHandleClassName;
        var style = _objectSpread2(_objectSpread2({}, props2.style), {}, {
          height: this.state.overHeight
        });
        var resizeHandleStyle = _objectSpread2({}, props2.resizeHandleStyle);
        if (this.state.over) {
          resizeHandleStyle.visibility = "visible";
        } else {
          resizeHandleStyle.visibility = "hidden";
        }
        return _react.default.createElement("div", {
          ref: this.domRef,
          draggable: "false",
          className,
          onMouseDown: this.onMouseDown,
          onTouchStart: this.onTouchStart,
          onMouseEnter: this.onMouseEnter,
          onMouseLeave: this.onMouseLeave,
          style
        }, _react.default.createElement("div", {
          style: resizeHandleStyle,
          className: resizeHandleClassName
        }));
      }
    }]);
    return ColumnResizer2;
  }(_react.Component);
  ColumnResizer.default = ColumnResizer$1;
  (0, _defineProperty2.default)(ColumnResizer$1, "propTypes", propTypes2);
  return ColumnResizer;
}
var renderMenuTool = {};
var hasRequiredRenderMenuTool;
function requireRenderMenuTool() {
  if (hasRequiredRenderMenuTool)
    return renderMenuTool;
  hasRequiredRenderMenuTool = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(renderMenuTool, "__esModule", {
    value: true
  });
  renderMenuTool.default = renderMenuTool.MenuTool = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = _interopRequireWildcard(reactExports);
  var _join = _interopRequireDefault2(requireJoin());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var BASE_CLASS_NAME = "InovuaReactDataGrid__column-header__menu-tool";
  var MenuTool = function MenuTool2(props2) {
    var _useState = (0, _react.useState)(false), _useState2 = (0, _slicedToArray2.default)(_useState, 2), keepVisible = _useState2[0], setKeepVisible = _useState2[1];
    var domRef = (0, _react.useRef)();
    var _unmounted = (0, _react.useRef)();
    (0, _react.useEffect)(function() {
      _unmounted.current = false;
      return function() {
        _unmounted.current = true;
      };
    }, []);
    var onClick = function onClick2(event2) {
      event2.stopPropagation();
    };
    var onMouseDown = function onMouseDown2(event2) {
      event2.preventDefault();
      props2.showContextMenu && props2.showContextMenu(domRef.current, props2.showOnHover ? onHide : null);
      if (_unmounted.current) {
        return;
      }
      if (props2.showOnHover && !keepVisible) {
        setKeepVisible(true);
      }
    };
    var onHide = function onHide2() {
      if (_unmounted.current) {
        return;
      }
      setKeepVisible(false);
    };
    var renderMenuTool2 = function renderMenuTool3() {
      var domProps = {
        className: (0, _join.default)("", "InovuaReactDataGrid__sort-icon--desc"),
        width: 14,
        height: 12
      };
      if (props2.renderMenuTool) {
        return props2.renderMenuTool(domProps);
      }
      return _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, domProps), {}, {
        viewBox: "0 0 14 12"
      }), _react.default.createElement("g", {
        fillRule: "evenodd"
      }, _react.default.createElement("rect", {
        width: "14",
        height: "2",
        rx: "1"
      }), _react.default.createElement("rect", {
        width: "14",
        height: "2",
        y: "5",
        rx: "1"
      }), _react.default.createElement("rect", {
        width: "14",
        height: "2",
        y: "10",
        rx: "1"
      })));
    };
    var className = BASE_CLASS_NAME;
    var showOnHover = props2.showOnHover, rtl = props2.rtl;
    if (showOnHover) {
      className += " ".concat(BASE_CLASS_NAME, "--show-on-hover");
    }
    if (!showOnHover || keepVisible) {
      className += " ".concat(BASE_CLASS_NAME, "--visible");
    }
    className += " ".concat(BASE_CLASS_NAME, "--direction-").concat(rtl ? "rtl" : "ltr");
    return _react.default.createElement("div", {
      className,
      onMouseDown,
      onClick,
      ref: domRef
    }, renderMenuTool2());
  };
  renderMenuTool.MenuTool = MenuTool;
  var _default2 = function _default3(props2, cellInstance) {
    if (props2.groupSpacerColumn) {
      return null;
    }
    if (!props2.showColumnMenuTool) {
      return null;
    }
    return _react.default.createElement(MenuTool, {
      key: "menuTool",
      name: props2.name,
      rtl: props2.rtl,
      showOnHover: props2.showColumnMenuToolOnHover,
      showContextMenu: cellInstance.showContextMenu,
      renderMenuTool: props2.renderMenuTool
    });
  };
  renderMenuTool.default = _default2;
  return renderMenuTool;
}
var hasRequiredRenderHeader;
function requireRenderHeader() {
  if (hasRequiredRenderHeader)
    return renderHeader;
  hasRequiredRenderHeader = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderHeader, "__esModule", {
    value: true
  });
  renderHeader.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _join = _interopRequireDefault2(requireJoin());
  var _renderFilter = _interopRequireDefault2(requireRenderFilter());
  var _ColumnResizer = _interopRequireDefault2(requireColumnResizer());
  var _renderMenuTool = _interopRequireDefault2(requireRenderMenuTool());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var RESIZE_WRAPPER_CLASS_NAME = "InovuaReactDataGrid__column-header__resize-wrapper";
  var HEADER_CONTENT_CLASS_NAME = "InovuaReactDataGrid__column-header__content";
  var EMPTY_OBJECT = {};
  var renderContent = function renderContent2(props2) {
    if (!props2) {
      return;
    }
    if (props2.renderColumnReorderProxy) {
      return props2.renderColumnReorderProxy(props2);
    }
    return props2.children;
  };
  var renderHeader$1 = function renderHeader2(props2, domProps, cellInstance) {
    var state2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : EMPTY_OBJECT;
    var dragging = props2.dragging !== void 0 ? props2.dragging : state2.dragging;
    var last = props2.last || props2.computedVisibleIndex == props2.computedVisibleCount - 1;
    var depth = props2.depth, showBorderRight = props2.showBorderRight, showBorderLeft = props2.showBorderLeft, computedLocked = props2.computedLocked, firstInSection = props2.firstInSection, lastInSection = props2.lastInSection, group = props2.group, rtl = props2.rtl, virtualizeColumns = props2.virtualizeColumns, headerProps = props2.headerProps;
    var style = headerProps && headerProps.headerCellStyle ? headerProps.headerCellStyle : null;
    var content = _react.default.createElement("div", {
      key: "content",
      style,
      className: "".concat(HEADER_CONTENT_CLASS_NAME, " ").concat(props2.headerEllipsis !== false ? "InovuaReactDataGrid__box--ellipsis" : ""),
      children: renderContent(props2)
    });
    var menuTool = (0, _renderMenuTool.default)(props2, cellInstance);
    var headerAlign = props2.headerAlign != null ? props2.headerAlign : props2.textAlign;
    content = [headerAlign == "end" && menuTool, content, headerAlign != "end" && menuTool];
    if (props2.computedResizable || props2.computedFilterable) {
      var innerStyle = Object.assign({}, domProps.style || EMPTY_OBJECT);
      if (!dragging) {
        delete innerStyle.width;
        delete innerStyle.minWidth;
      }
      if (virtualizeColumns) {
        delete innerStyle.position;
      }
      var resizeHandleStyle;
      var right;
      var resizerClassName;
      if (props2.computedResizable) {
        right = props2.computedVisibleIndex === props2.computedVisibleCount - 1 && !showBorderRight || lastInSection ? 0 : -props2.columnResizeHandleWidth / 2;
        resizeHandleStyle = {
          width: props2.columnResizeHandleWidth,
          zIndex: 1e4 * (depth || 0)
        };
        if (lastInSection && computedLocked === "start") {
          right = -props2.columnResizeHandleWidth + 1;
        }
        if (props2.resizeProxyStyle) {
          resizeHandleStyle = Object.assign({}, props2.resizeProxyStyle, resizeHandleStyle);
        }
        if (dragging) {
          delete innerStyle.top;
          if (rtl) {
            delete innerStyle.right;
          } else {
            delete innerStyle.left;
          }
        }
        resizerClassName = "InovuaReactDataGrid__column-resizer";
        if (props2.lastUnlocked && !props2.last) {
          resizerClassName += " ".concat(resizerClassName, "--last-unlocked");
        }
        resizerClassName += " InovuaReactDataGrid__column-resizer--direction-".concat(rtl ? "rtl" : "ltr");
      }
      if (innerStyle.transform) {
        delete innerStyle.transform;
      }
      var theStyle = props2.style;
      var styleCloned = false;
      if (computedLocked) {
        theStyle = _objectSpread2({}, theStyle);
        styleCloned = true;
      }
      var resizeHandle;
      if (!dragging && !computedLocked && virtualizeColumns) {
        theStyle.left = props2.computedOffset;
        theStyle.position = "absolute";
      }
      if (props2.computedResizable) {
        var _style;
        resizeHandle = _react.default.createElement(_ColumnResizer.default, {
          key: "columnResizer",
          className: resizerClassName,
          onMouseDown: props2.onResizeMouseDown,
          onTouchStart: props2.onResizeTouchStart,
          style: (_style = {
            width: props2.columnResizeHandleWidth
          }, (0, _defineProperty2.default)(_style, props2.rtl ? "left" : "right", right), (0, _defineProperty2.default)(_style, "zIndex", (depth || 0) * 1e4 + (100 - props2.computedVisibleIndex || 0)), (0, _defineProperty2.default)(_style, "height", props2.headerHeight), _style),
          resizeHandleStyle,
          resizeHandleClassName: "InovuaReactDataGrid__column-resize-handle"
        });
      } else {
        if (dragging && props2.computedFilterable) {
          if (!styleCloned) {
            styleCloned = true;
            theStyle = _objectSpread2({}, theStyle);
          }
          if (rtl) {
            theStyle.right = state2.right || 0;
          } else {
            theStyle.left = state2.left || 0;
          }
          theStyle.top = state2.top || 0;
        }
      }
      return _react.default.createElement("div", {
        ref: domProps.ref,
        style: theStyle,
        onFocus: domProps.onFocus,
        className: (0, _join.default)(RESIZE_WRAPPER_CLASS_NAME, dragging && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--dragging"), group ? "".concat(RESIZE_WRAPPER_CLASS_NAME, "--has-group") : "".concat(RESIZE_WRAPPER_CLASS_NAME, "--has-no-group"), showBorderLeft && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--show-border-").concat(rtl ? "right" : "left"), (showBorderRight || props2.computedShowHeaderBorderRight && last && !firstInSection) && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--show-border-").concat(rtl ? "left" : "right"), "".concat(RESIZE_WRAPPER_CLASS_NAME, "--direction-").concat(rtl ? "rtl" : "ltr"), computedLocked && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--locked"), computedLocked && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--locked-").concat(computedLocked), firstInSection && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--first-in-section"), lastInSection && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--last-in-section"), last && "".concat(RESIZE_WRAPPER_CLASS_NAME, "--last"), props2.headerWrapperClassName)
      }, _react.default.createElement("div", _objectSpread2(_objectSpread2({}, cleanup2(domProps)), {}, {
        style: innerStyle,
        children: content
      })), resizeHandle, props2.computedFilterable && !dragging ? (0, _renderFilter.default)(props2, cellInstance) : null);
    }
    var ref = domProps.ref;
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, cleanup2(domProps)), {}, {
      ref,
      id: null,
      name: null,
      title: null,
      type: null,
      value: null,
      children: content
    }));
  };
  var cleanup2 = function cleanup3(domProps) {
    delete domProps.ref;
    delete domProps.id;
    delete domProps.computedOffset;
    delete domProps.name;
    delete domProps.title;
    delete domProps.type;
    delete domProps.value;
    delete domProps.onFocus;
    return domProps;
  };
  var _default2 = renderHeader$1;
  renderHeader.default = _default2;
  return renderHeader;
}
var renderGroupTool = {};
var hasRequiredRenderGroupTool;
function requireRenderGroupTool() {
  if (hasRequiredRenderGroupTool)
    return renderGroupTool;
  hasRequiredRenderGroupTool = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderGroupTool, "__esModule", {
    value: true
  });
  renderGroupTool.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var DEFAULT_STYLE = {
    position: "relative",
    verticalAlign: "middle",
    cursor: "pointer"
  };
  var stopPropagation = function stopPropagation2(e2) {
    return e2.stopPropagation();
  };
  var _default2 = function _default3(_ref2, cellProps) {
    var render = _ref2.render, rtl = _ref2.rtl, collapsed = _ref2.collapsed, toggleGroup = _ref2.toggleGroup, style = _ref2.style, size2 = _ref2.size, renderGroupCollapseTool = _ref2.renderGroupCollapseTool, renderGroupExpandTool = _ref2.renderGroupExpandTool;
    size2 = size2 || 18;
    style = style ? _objectSpread2(_objectSpread2({}, DEFAULT_STYLE), style) : DEFAULT_STYLE;
    var domProps = {
      onMouseDown: toggleGroup,
      onClick: stopPropagation,
      style
    };
    var result;
    if (render) {
      domProps.style = _objectSpread2({}, domProps.style);
      result = render(domProps, _objectSpread2(_objectSpread2({}, cellProps), {}, {
        collapsed,
        toggleGroup,
        size: size2
      }));
      if (result != void 0) {
        return result;
      }
    }
    var renderCollapseTool = function renderCollapseTool2() {
      var result2;
      if (renderGroupCollapseTool) {
        result2 = renderGroupCollapseTool({
          domProps,
          size: size2,
          rtl
        });
      }
      if (result2 === void 0) {
        result2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, domProps), {}, {
          height: size2,
          viewBox: "0 0 24 24",
          width: size2
        }), rtl ? _react.default.createElement("path", {
          d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
        }) : _react.default.createElement("path", {
          d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
        }));
      }
      return result2;
    };
    var renderExpandTool = function renderExpandTool2() {
      var result2;
      if (renderGroupExpandTool) {
        result2 = renderGroupExpandTool({
          domProps,
          size: size2,
          rtl
        });
      }
      if (result2 === void 0) {
        result2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, domProps), {}, {
          height: size2,
          viewBox: "0 0 24 24",
          width: size2
        }), _react.default.createElement("path", {
          d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
        }));
      }
      return result2;
    };
    if (collapsed) {
      return renderCollapseTool();
    }
    return renderExpandTool();
  };
  renderGroupTool.default = _default2;
  return renderGroupTool;
}
var renderNodeTool = {};
var hasRequiredRenderNodeTool;
function requireRenderNodeTool() {
  if (hasRequiredRenderNodeTool)
    return renderNodeTool;
  hasRequiredRenderNodeTool = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderNodeTool, "__esModule", {
    value: true
  });
  renderNodeTool.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var DEFAULT_STYLE = {
    position: "relative",
    verticalAlign: "middle",
    cursor: "pointer"
  };
  var stopPropagation = function stopPropagation2(e2) {
    return e2.stopPropagation();
  };
  var _default2 = function _default3(_ref2, cellProps) {
    var render = _ref2.render, nodeLoading = _ref2.nodeLoading, nodeCollapsed = _ref2.nodeCollapsed, leafNode = _ref2.leafNode, node2 = _ref2.node, nodeProps = _ref2.nodeProps, toggleNodeExpand = _ref2.toggleNodeExpand, style = _ref2.style, size2 = _ref2.size, renderTreeCollapseTool = _ref2.renderTreeCollapseTool, renderTreeExpandTool = _ref2.renderTreeExpandTool, renderTreeLoadingTool = _ref2.renderTreeLoadingTool;
    size2 = size2 || 18;
    if (!leafNode) {
      style = style ? _objectSpread2(_objectSpread2({}, DEFAULT_STYLE), style) : DEFAULT_STYLE;
    }
    var domProps = {
      onMouseDown: leafNode ? null : toggleNodeExpand,
      onClick: leafNode ? null : stopPropagation,
      style
    };
    var result;
    if (render) {
      domProps.style = _objectSpread2({}, domProps.style);
      result = render(domProps, _objectSpread2(_objectSpread2({}, cellProps), {}, {
        leafNode,
        nodeCollapsed,
        node: node2,
        nodeLoading,
        nodeProps,
        toggleNodeExpand,
        size: size2
      }));
      if (result != void 0) {
        return result;
      }
    }
    if (leafNode) {
      var tools = true;
      if (renderTreeCollapseTool === null && renderTreeExpandTool === null) {
        tools = false;
      }
      return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, domProps), {}, {
        style: _objectSpread2(_objectSpread2({}, domProps.style), {}, {
          width: tools ? size2 : 0,
          height: size2
        })
      }));
    }
    var renderNodeLoading = function renderNodeLoading2(_ref22) {
      var domProps2 = _ref22.domProps, size3 = _ref22.size;
      var className = "".concat(domProps2.className || "", " InovuaReactDataGrid__cell__node-tool--loading");
      var loadingTool;
      if (renderTreeLoadingTool === null) {
        return _react.default.createElement("div", {
          style: domProps2.style
        });
      }
      if (renderTreeLoadingTool) {
        loadingTool = renderTreeLoadingTool({
          domProps: domProps2,
          size: size3,
          className
        });
      }
      if (loadingTool === void 0) {
        loadingTool = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, domProps2), {}, {
          className,
          height: size3,
          width: size3,
          viewBox: "0 0 24 24"
        }), _react.default.createElement("path", {
          d: "M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"
        }));
      }
      return loadingTool;
    };
    if (nodeLoading) {
      return renderNodeLoading({
        domProps,
        size: size2
      });
    }
    var renderCollapseToolHandle = function renderCollapseToolHandle2() {
      var result2;
      if (renderTreeCollapseTool === null) {
        return _react.default.createElement("div", {
          style: domProps.style
        });
      }
      if (renderTreeCollapseTool) {
        result2 = renderTreeCollapseTool({
          domProps,
          size: size2
        });
      }
      if (result2 === void 0) {
        result2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, domProps), {}, {
          height: size2,
          viewBox: "0 0 24 24",
          width: size2
        }), _react.default.createElement("path", {
          d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
        }));
      }
      return result2;
    };
    var renderExpandToolHandle = function renderExpandToolHandle2() {
      var result2;
      if (renderTreeExpandTool === null) {
        return _react.default.createElement("div", {
          style: domProps.style
        });
      }
      if (renderTreeExpandTool) {
        result2 = renderTreeExpandTool({
          domProps,
          size: size2
        });
      }
      if (result2 === void 0) {
        result2 = _react.default.createElement("svg", _objectSpread2(_objectSpread2({}, domProps), {}, {
          height: size2,
          viewBox: "0 0 24 24",
          width: size2
        }), _react.default.createElement("path", {
          d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
        }));
      }
      return result2;
    };
    if (nodeCollapsed) {
      return renderCollapseToolHandle();
    }
    return renderExpandToolHandle();
  };
  renderNodeTool.default = _default2;
  return renderNodeTool;
}
var sealedObjectFactory$1 = {};
var hasRequiredSealedObjectFactory$1;
function requireSealedObjectFactory$1() {
  if (hasRequiredSealedObjectFactory$1)
    return sealedObjectFactory$1;
  hasRequiredSealedObjectFactory$1 = 1;
  Object.defineProperty(sealedObjectFactory$1, "__esModule", {
    value: true
  });
  sealedObjectFactory$1.default = void 0;
  var _default2 = function _default3(props2) {
    var rowProps = Object.seal ? Object.seal(props2) : {};
    return rowProps;
  };
  sealedObjectFactory$1.default = _default2;
  return sealedObjectFactory$1;
}
var bemFactory = {};
var hasRequiredBemFactory;
function requireBemFactory() {
  if (hasRequiredBemFactory)
    return bemFactory;
  hasRequiredBemFactory = 1;
  Object.defineProperty(bemFactory, "__esModule", {
    value: true
  });
  bemFactory.default = void 0;
  var _default2 = function _default3(className) {
    return function(element, modifier) {
      var el2 = element ? "-".concat(element) : "";
      var mod = modifier ? "--".concat(modifier) : "";
      return "".concat(className).concat(el2).concat(mod);
    };
  };
  bemFactory.default = _default2;
  return bemFactory;
}
var renderSortTool = {};
var hasRequiredRenderSortTool;
function requireRenderSortTool() {
  if (hasRequiredRenderSortTool)
    return renderSortTool;
  hasRequiredRenderSortTool = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderSortTool, "__esModule", {
    value: true
  });
  renderSortTool.default = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var _join = _interopRequireDefault2(requireJoin());
  var DEFAULT_SIZE = 10;
  var _default2 = function _default3(_ref2, extraProps) {
    var sortable = _ref2.sortable, size2 = _ref2.size, direction2 = _ref2.direction, renderSortTool2 = _ref2.renderSortTool;
    if (!sortable) {
      return null;
    }
    size2 = size2 || DEFAULT_SIZE;
    if (renderSortTool2) {
      return renderSortTool2(direction2, extraProps);
    }
    var visibilityClassName = "InovuaReactDataGrid__sort-icon";
    if (!direction2) {
      visibilityClassName += " InovuaReactDataGrid__sort-icon--hidden";
    }
    return _react.default.createElement("div", {
      className: "InovuaReactDataGrid__sort-icon-wrapper",
      key: "iconWrapper"
    }, _react.default.createElement("svg", {
      key: "sortToolAsc",
      className: (0, _join.default)(visibilityClassName, "InovuaReactDataGrid__sort-icon--asc", direction2 === 1 && "InovuaReactDataGrid__sort-icon--active"),
      width: size2,
      height: size2 / 2,
      viewBox: "0 0 10 5"
    }, _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M4.767.276L8.395 4.04c.142.147.138.382-.01.524-.069.066-.16.104-.257.104H.872c-.205 0-.37-.166-.37-.37 0-.097.036-.189.103-.258L4.233.276c.142-.147.377-.151.524-.009l.01.01z"
    })), _react.default.createElement("svg", {
      key: "sortToolDesc",
      className: (0, _join.default)(visibilityClassName, "InovuaReactDataGrid__sort-icon--desc", direction2 === -1 && "InovuaReactDataGrid__sort-icon--active"),
      width: size2,
      height: size2 / 2,
      viewBox: "0 0 10 5"
    }, _react.default.createElement("path", {
      fillRule: "evenodd",
      d: "M4.233 4.724L.605.96C.463.814.467.579.615.437.684.371.775.333.872.333h7.256c.205 0 .37.166.37.37 0 .097-.036.189-.103.258L4.767 4.724c-.142.147-.377.151-.524.009l-.01-.01z"
    })));
  };
  renderSortTool.default = _default2;
  return renderSortTool;
}
var defaultRowReorderColumnId = {};
var hasRequiredDefaultRowReorderColumnId;
function requireDefaultRowReorderColumnId() {
  if (hasRequiredDefaultRowReorderColumnId)
    return defaultRowReorderColumnId;
  hasRequiredDefaultRowReorderColumnId = 1;
  Object.defineProperty(defaultRowReorderColumnId, "__esModule", {
    value: true
  });
  defaultRowReorderColumnId.id = void 0;
  var id2 = "__reorder-column";
  defaultRowReorderColumnId.id = id2;
  return defaultRowReorderColumnId;
}
var Text$1 = {};
var hasRequiredText;
function requireText() {
  if (hasRequiredText)
    return Text$1;
  hasRequiredText = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Text$1, "__esModule", {
    value: true
  });
  Text$1.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _TextInput = _interopRequireDefault2(requireTextInput());
  var _autoBind = _interopRequireDefault2(requireAutoBind());
  var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var InovuaTextEditor = function(_React$Component) {
    (0, _inherits2.default)(InovuaTextEditor2, _React$Component);
    var _super = _createSuper(InovuaTextEditor2);
    function InovuaTextEditor2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaTextEditor2);
      _this = _super.call(this, props2);
      (0, _autoBind.default)((0, _assertThisInitialized2.default)(_this));
      return _this;
    }
    (0, _createClass2.default)(InovuaTextEditor2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var value = props2.value;
        var domProps = (0, _reactCleanProps.default)(props2, InovuaTextEditor2.propTypes);
        var className = "InovuaReactDataGrid__cell__editor InovuaReactDataGrid__cell__editor--text " + (domProps.className || "");
        return _react.default.createElement(_TextInput.default, _objectSpread2(_objectSpread2({
          autoFocus: props2.autoFocus,
          value,
          theme: props2.theme,
          onChange: this.onChange,
          onBlur: this.onBlur,
          onKeyDown: this.onKeyDown,
          enableClearButton: true
        }, domProps), {}, {
          className
        }));
      }
    }, {
      key: "onChange",
      value: function onChange(value, e2) {
        var onChange2 = this.props.onChange;
        if (onChange2) {
          onChange2(value, e2);
        }
      }
    }, {
      key: "onBlur",
      value: function onBlur3(e2) {
        if (this.props.onComplete) {
          this.props.onComplete(e2);
        }
      }
    }, {
      key: "onKeyDown",
      value: function onKeyDown(e2) {
        if (e2.key === "Enter") {
          if (this.props.onComplete) {
            this.props.onEnterNavigation(true, e2.shiftKey ? -1 : 1, e2);
          }
        }
        if (e2.key === "Escape") {
          if (this.props.onCancel) {
            this.props.onCancel(e2);
          }
        }
        if (e2.key == "Tab") {
          e2.preventDefault();
          this.props.onTabNavigation(true, e2.shiftKey ? -1 : 1, e2);
        }
      }
    }]);
    return InovuaTextEditor2;
  }(_react.default.Component);
  InovuaTextEditor.propTypes = {
    onCancel: _propTypes.default.func,
    onChange: _propTypes.default.func,
    onComplete: _propTypes.default.func,
    onKeyDown: _propTypes.default.func,
    onTabNavigation: _propTypes.default.func,
    gotoNext: _propTypes.default.func,
    gotoPrev: _propTypes.default.func,
    value: _propTypes.default.any,
    cell: _propTypes.default.any,
    cellProps: _propTypes.default.any,
    nativeScroll: _propTypes.default.any,
    editorProps: _propTypes.default.any,
    onEnterNavigation: _propTypes.default.func
  };
  var _default2 = InovuaTextEditor;
  Text$1.default = _default2;
  return Text$1;
}
var hasRequiredCell;
function requireCell() {
  if (hasRequiredCell)
    return Cell;
  hasRequiredCell = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Cell, "__esModule", {
    value: true
  });
  Cell.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _region = _interopRequireDefault2(requireRegion());
  var _shallowequal = _interopRequireWildcard(requireShallowequal$1());
  var _renderHeader = _interopRequireDefault2(requireRenderHeader());
  var _renderGroupTool = _interopRequireDefault2(requireRenderGroupTool());
  var _renderNodeTool = _interopRequireDefault2(requireRenderNodeTool());
  var _sealedObjectFactory = _interopRequireDefault2(requireSealedObjectFactory$1());
  var _join = _interopRequireDefault2(requireJoin());
  var _isFocusable = _interopRequireDefault2(requireIsFocusable());
  var _bemFactory = _interopRequireDefault2(requireBemFactory());
  var _renderSortTool = _interopRequireDefault2(requireRenderSortTool());
  var _defaultRowReorderColumnId = requireDefaultRowReorderColumnId();
  var _Text = _interopRequireDefault2(requireText());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var cellBem = (0, _bemFactory.default)("InovuaReactDataGrid__cell");
  var headerBem = (0, _bemFactory.default)("InovuaReactDataGrid__column-header");
  var emptyObject = Object.freeze ? Object.freeze({}) : {};
  var emptyFn = function emptyFn2() {
  };
  var CELL_RENDER_OBJECT = (0, _sealedObjectFactory.default)({
    empty: null,
    value: null,
    data: null,
    columnIndex: null,
    rowIndex: null,
    remoteRowIndex: null,
    rowIndexInGroup: null,
    nodeProps: null,
    rowSelected: null,
    rowExpanded: null,
    treeColumn: null,
    setRowSelected: null,
    setRowExpanded: null,
    isRowExpandable: null,
    toggleRowExpand: null,
    toggleNodeExpand: null,
    loadNodeAsync: null,
    toggleGroup: null,
    cellProps: null,
    totalDataCount: null,
    rendersInlineEditor: null,
    renderRowDetailsExpandIcon: null,
    renderRowDetailsCollapsedIcon: null,
    renderRowDetailsMoreIcon: null
  });
  var CELL_RENDER_SECOND_OBJ = (0, _sealedObjectFactory.default)({
    cellProps: null,
    column: null,
    headerProps: null
  });
  var wrapInContent = function wrapInContent2(value) {
    return _react.default.createElement("div", {
      key: "content",
      className: "InovuaReactDataGrid__cell__content",
      children: value
    });
  };
  function InovuaDataGridCell(props2) {
    var domRef = (0, _react.useRef)(null);
    var isCancelled = (0, _react.useRef)(false);
    var sortTimeoutId = (0, _react.useRef)(null);
    var lastEditCompleteTimestamp = (0, _react.useRef)(0);
    var unmounted = (0, _react.useRef)(false);
    var cleanupResizeObserver = (0, _react.useRef)(null);
    var callbackRef = (0, _react.useRef)(void 0);
    var _useState = (0, _react.useState)({
      props: props2
    }), _useState2 = (0, _slicedToArray2.default)(_useState, 2), theState = _useState2[0], setState = _useState2[1];
    var useInitialProps = !theState.props || props2.timestamp > theState.props.timestamp;
    var state2 = useInitialProps ? _objectSpread2(_objectSpread2({}, theState), {}, {
      props: props2,
      left: props2.left || 0
    }) : theState;
    var latestPropsRef = (0, _react.useRef)(state2.props);
    latestPropsRef.current = state2.props;
    var getProps = (0, _react.useCallback)(function() {
      return latestPropsRef.current;
    }, []);
    var updateState = (0, _react.useCallback)(function(newState, callback2) {
      callbackRef.current = callback2;
      setState(function(oldState) {
        return _objectSpread2(_objectSpread2({}, oldState), newState);
      });
    }, []);
    var updateProps = (0, _react.useCallback)(function(props3, callback2) {
      props3.timestamp = Date.now();
      var newState = {
        props: props3
      };
      requestAnimationFrame(function() {
        updateState(newState, callback2);
      });
    }, []);
    var setStateProps = (0, _react.useCallback)(function(stateProps) {
      if (unmounted.current) {
        return;
      }
      var newProps = Object.assign({}, InovuaDataGridCell.defaultProps, stateProps);
      if (!(0, _shallowequal.default)(newProps, getProps(), {
        timestamp: 1
      })) {
        updateProps(newProps);
      }
    }, [getProps]);
    (0, _react.useEffect)(function() {
      var callback2 = callbackRef.current;
      if (callback2 && typeof callback2 === "function") {
        callback2();
      }
      callbackRef.current = null;
    }, [state2]);
    (0, _react.useEffect)(function() {
      var _props$cellRef;
      unmounted.current = false;
      if (props2.onMount) {
        props2.onMount(props2, cellInstance);
      }
      (_props$cellRef = props2.cellRef) === null || _props$cellRef === void 0 ? void 0 : _props$cellRef.call(props2, cellInstance);
      return function() {
        if (cleanupResizeObserver.current) {
          var cleanupResizeObserverFn = cleanupResizeObserver.current;
          cleanupResizeObserverFn();
        }
        if (props2.onUnmount) {
          props2.onUnmount(props2, cellInstance);
        }
        unmounted.current = true;
      };
    }, []);
    var getDOMNode = (0, _react.useCallback)(function() {
      return domRef.current;
    }, []);
    var onUpdate = (0, _react.useCallback)(function() {
      if (props2.onUpdate) {
        props2.onUpdate(getProps(), cellInstance);
      }
    }, [props2.onUpdate]);
    var setDragging = (0, _react.useCallback)(function(dragging, callback2) {
      var newState = {
        dragging
      };
      if (!dragging) {
        newState.top = 0;
        if (props2.rtl) {
          newState.right = 0;
        } else {
          newState.left = 0;
        }
      }
      updateState(newState, callback2);
    }, [props2.rtl]);
    var setLeft = (0, _react.useCallback)(function(left) {
      updateState({
        left
      });
    }, []);
    var setRight = (0, _react.useCallback)(function(right) {
      updateState({
        right
      });
    }, []);
    var setTop = (0, _react.useCallback)(function(top) {
      updateState({
        top
      });
    }, []);
    var setHeight = (0, _react.useCallback)(function(height) {
      updateState({
        height
      });
    }, []);
    var setWidth = (0, _react.useCallback)(function(width) {
      updateState({
        width
      });
    }, []);
    var prepareStyle2 = function prepareStyle3(thisProps2) {
      var maxWidth = thisProps2.maxWidth, minRowHeight = thisProps2.minRowHeight, computedLocked = thisProps2.computedLocked, computedWidth = thisProps2.computedWidth, computedOffset = thisProps2.computedOffset, rowHeight = thisProps2.rowHeight, initialRowHeight = thisProps2.initialRowHeight, naturalRowHeight = thisProps2.naturalRowHeight, headerCell2 = thisProps2.headerCell, hidden2 = thisProps2.hidden, rtl = thisProps2.rtl, inTransition = thisProps2.inTransition, inShowTransition = thisProps2.inShowTransition, computedRowspan = thisProps2.computedRowspan, zIndex = thisProps2.zIndex;
      var style2 = {};
      if (typeof thisProps2.style === "function") {
        if (!headerCell2) {
          Object.assign(style2, thisProps2.style(thisProps2));
        }
      } else {
        Object.assign(style2, thisProps2.style);
      }
      style2.width = computedWidth;
      style2.minWidth = computedWidth;
      if (minRowHeight) {
        style2.minHeight = minRowHeight;
      }
      if (headerCell2) {
        style2.maxWidth = computedWidth;
      }
      if (maxWidth) {
        style2.maxWidth = maxWidth;
      }
      if (!headerCell2) {
        if (rowHeight && !naturalRowHeight) {
          style2.height = rowHeight;
        }
        if (naturalRowHeight) {
          style2.minHeight = minRowHeight;
        } else {
          if (initialRowHeight) {
            style2.height = initialRowHeight;
          }
          if (rowHeight && computedRowspan > 1) {
            style2.height = (initialRowHeight || rowHeight) * computedRowspan;
          }
        }
      }
      if (hidden2) {
        style2.display = "none";
      }
      if (!headerCell2 && !computedLocked) {
        style2.position = naturalRowHeight ? "relative" : "absolute";
        style2.top = 0;
        if (!naturalRowHeight) {
          if (rtl) {
            style2.right = computedOffset;
          } else {
            style2.left = computedOffset;
          }
        }
      }
      if (state2 && state2.dragging) {
        if (rtl) {
          style2.right = state2.right || 0;
        } else {
          style2.left = state2.left || 0;
        }
        style2.top = state2.top || 0;
        style2.height = state2.height || "";
        if (!thisProps2.computedResizable && thisProps2.computedFilterable) {
          if (rtl) {
            style2.right = 0;
          } else {
            style2.left = 0;
          }
          style2.top = 0;
        }
        style2.position = "absolute";
        style2.zIndex = 100;
      }
      if (zIndex) {
        style2.zIndex = zIndex;
      }
      if (computedWidth === 0) {
        style2.paddingLeft = 0;
        style2.paddingRight = 0;
      }
      if (inTransition) {
        var duration = inShowTransition ? thisProps2.showTransitionDuration : thisProps2.hideTransitionDuration;
        duration = duration || thisProps2.visibilityTransitionDuration;
        style2.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
      }
      return style2;
    };
    var prepareClassName2 = function prepareClassName3(thisProps2) {
      var isGroupCell = thisProps2.groupCell, groupTitleCell = thisProps2.groupTitleCell, groupExpandCell = thisProps2.groupExpandCell, isHeaderCell = thisProps2.headerCell, headerCellDefaultClassName = thisProps2.headerCellDefaultClassName, cellDefaultClassName = thisProps2.cellDefaultClassName, computedGroupBy = thisProps2.computedGroupBy, depth = thisProps2.depth, computedVisibleIndex2 = thisProps2.computedVisibleIndex, headerCell2 = thisProps2.headerCell, headerEllipsis = thisProps2.headerEllipsis, groupProps2 = thisProps2.groupProps, hidden2 = thisProps2.hidden, showBorderRight = thisProps2.showBorderRight, showBorderTop = thisProps2.showBorderTop, showBorderBottom = thisProps2.showBorderBottom, showBorderLeft = thisProps2.showBorderLeft, firstInSection = thisProps2.firstInSection, lastInSection = thisProps2.lastInSection, noBackground = thisProps2.noBackground, computedLocked = thisProps2.computedLocked, computedWidth = thisProps2.computedWidth, inTransition = thisProps2.inTransition, rowSelected2 = thisProps2.rowSelected, computedRowspan = thisProps2.computedRowspan, cellSelected2 = thisProps2.cellSelected, cellActive2 = thisProps2.cellActive, groupSpacerColumn2 = thisProps2.groupSpacerColumn, computedPivot = thisProps2.computedPivot, computedResizable = thisProps2.computedResizable, groupColumnVisible2 = thisProps2.groupColumnVisible, computedFilterable = thisProps2.computedFilterable, rtl = thisProps2.rtl, inEdit2 = thisProps2.inEdit, columnIndex = thisProps2.columnIndex, columnIndexHovered = thisProps2.columnIndexHovered, columnHoverClassName = thisProps2.columnHoverClassName, bulkUpdate = thisProps2.bulkUpdateMouseDown;
      var userSelect = thisProps2.userSelect, headerUserSelect = thisProps2.headerUserSelect;
      if (typeof userSelect === "boolean") {
        userSelect = userSelect ? "text" : "none";
      }
      if (typeof headerUserSelect === "boolean") {
        headerUserSelect = headerUserSelect ? "text" : "none";
      }
      var nested = depth != null && computedVisibleIndex2 == 0 && !headerCell2 && !groupColumnVisible2;
      var baseClassName = isHeaderCell ? headerCellDefaultClassName : cellDefaultClassName;
      var commonClassName = (0, _join.default)(!computedLocked && "".concat(baseClassName, "--unlocked"), computedLocked && "".concat(baseClassName, "--locked"), computedLocked && "".concat(baseClassName, "--locked-").concat(computedLocked));
      var last = thisProps2.last || thisProps2.computedVisibleIndex == thisProps2.computedVisibleCount - 1;
      var propsClassName = typeof thisProps2.className === "function" ? thisProps2.className(thisProps2) : thisProps2.className;
      var className2 = (0, _join.default)(propsClassName, baseClassName, commonClassName, !isHeaderCell && thisProps2.cellClassName, (nested || hidden2) && "".concat(baseClassName, "--no-padding"), hidden2 && "".concat(baseClassName, "--hidden"), "".concat(baseClassName, "--direction-").concat(rtl ? "rtl" : "ltr"), computedRowspan > 1 && "".concat(baseClassName, "--rowspan"), inTransition && "".concat(baseClassName, "--transition"), inTransition && computedWidth && "".concat(baseClassName, "--showing"), inTransition && !computedWidth && "".concat(baseClassName, "--hiding"), computedWidth === 0 && "".concat(baseClassName, "--no-size"), nested && "".concat(baseClassName, "--stretch"), isHeaderCell && headerUserSelect == null || !isHeaderCell ? userSelect && "".concat(baseClassName, "--user-select-").concat(userSelect) : null, groupExpandCell && "".concat(baseClassName, "--group-expand-cell"), groupTitleCell && "".concat(baseClassName, "--group-title-cell"), rowSelected2 && "".concat(baseClassName, "--selected"), groupProps2 && "".concat(baseClassName, "--group-cell"), computedPivot && "".concat(baseClassName, "--pivot-enabled"), groupSpacerColumn2 && "".concat(baseClassName, "--group-column-cell"), inEdit2 && "".concat(baseClassName, "--in-edit"), cellSelected2 && "".concat(baseClassName, "--cell-selected"), cellActive2 && "".concat(baseClassName, "--cell-active"), bulkUpdate && cellSelected2 && "".concat(baseClassName, "--cell-bulk-update-mouse-down"), thisProps2.textAlign && (isHeaderCell ? !thisProps2.headerAlign : true) && "".concat(baseClassName, "--align-").concat(thisProps2.textAlign), thisProps2.textVerticalAlign && (isHeaderCell ? !thisProps2.headerVerticalAlign : true) && "".concat(baseClassName, "--vertical-align-").concat(thisProps2.textVerticalAlign), thisProps2.virtualizeColumns && "".concat(baseClassName, "--virtualize-columns"), thisProps2.computedVisibleIndex === 0 && "".concat(baseClassName, "--first"), thisProps2.rowIndexInGroup === 0 && "".concat(baseClassName, "--first-row-in-group"), last && "".concat(baseClassName, "--last"), showBorderLeft && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? "right" : "left"), firstInSection && "".concat(baseClassName, "--first-in-section"), lastInSection && "".concat(baseClassName, "--last-in-section"), showBorderRight && computedWidth !== 0 && (!isHeaderCell || !(computedResizable || computedFilterable)) && "".concat(baseClassName, "--show-border-").concat(rtl ? "left" : "right"), showBorderTop && "".concat(baseClassName, "--show-border-top"), showBorderBottom && "".concat(baseClassName, "--show-border-bottom"), noBackground && "".concat(baseClassName, "--no-background"), columnIndex === columnIndexHovered ? columnHoverClassName ? (0, _join.default)("".concat(baseClassName, "--over"), columnHoverClassName) : "".concat(baseClassName, "--over") : "");
      if (cellSelected2) {
        className2 = (0, _join.default)(className2, thisProps2.hasTopSelectedSibling && "".concat(baseClassName, "--cell-has-top-selected-sibling"), thisProps2.hasBottomSelectedSibling && "".concat(baseClassName, "--cell-has-bottom-selected-sibling"), thisProps2.hasLeftSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? "right" : "left", "-selected-sibling"), thisProps2.hasRightSelectedSibling && "".concat(baseClassName, "--cell-has-").concat(rtl ? "left" : "right", "-selected-sibling"));
      }
      if (isHeaderCell) {
        className2 = (0, _join.default)(className2, commonClassName, thisProps2.headerClassName, thisProps2.titleClassName, state2 && state2.dragging && "".concat(baseClassName, "--dragging"), state2 && state2.left && "".concat(baseClassName, "--reordered"), thisProps2.computedSortable && "".concat(baseClassName, "--sortable"), headerUserSelect && "".concat(baseClassName, "--user-select-").concat(headerUserSelect), last && !headerEllipsis && "".concat(baseClassName, "--overflow-hidden"), "".concat(baseClassName, "--align-").concat(thisProps2.headerAlign || "start"), thisProps2.group ? "".concat(baseClassName, "--has-group") : "".concat(baseClassName, "--has-no-group"), thisProps2.headerVerticalAlign && "".concat(baseClassName, "--vertical-align-").concat(thisProps2.headerVerticalAlign), thisProps2.computedResizable ? "".concat(baseClassName, "--resizable") : "".concat(baseClassName, "--unresizable"), thisProps2.computedLockable ? "".concat(baseClassName, "--lockable") : "".concat(baseClassName, "--unlockable"), thisProps2.lastInGroup && "".concat(baseClassName, "--last-in-group"));
      } else {
        className2 = (0, _join.default)(className2, (groupProps2 ? groupProps2.depth == computedVisibleIndex2 : computedGroupBy ? computedGroupBy.length === computedVisibleIndex2 : computedVisibleIndex2 === 0) && "".concat(baseClassName, "--active-row-left-border"));
      }
      if (isGroupCell) {
        className2 = (0, _join.default)(className2, "InovuaReactDataGrid__group-cell");
      }
      return className2;
    };
    var getInitialIndex = (0, _react.useCallback)(function() {
      return props2.computedVisibleIndex;
    }, [props2.computedVisibleIndex]);
    var getcomputedVisibleIndex = (0, _react.useCallback)(function() {
      return getProps().computedVisibleIndex;
    }, []);
    var renderNodeTool2 = function renderNodeTool3(thisProps2) {
      var data2 = thisProps2.data, renderTreeCollapseTool = thisProps2.renderTreeCollapseTool, renderTreeExpandTool = thisProps2.renderTreeExpandTool, renderTreeLoadingTool = thisProps2.renderTreeLoadingTool;
      var nodeProps = data2.__nodeProps || emptyObject;
      var leafNode = nodeProps.leafNode;
      var loading = nodeProps.loading;
      var expanded = nodeProps.expanded;
      var collapsed = !expanded;
      var style2 = (0, _defineProperty2.default)({}, props2.rtl ? "marginRight" : "marginLeft", (nodeProps.depth || 0) * thisProps2.treeNestingSize);
      if (props2.rtl && collapsed) {
        style2.transform = "rotate(180deg)";
      }
      var element = (0, _renderNodeTool.default)({
        render: thisProps2.renderNodeTool,
        nodeExpanded: expanded,
        nodeCollapsed: collapsed,
        nodeLoading: loading,
        leafNode,
        nodeProps,
        node: data2,
        rtl: props2.rtl,
        size: 20,
        style: style2,
        toggleNodeExpand: thisProps2.toggleNodeExpand,
        renderTreeCollapseTool,
        renderTreeExpandTool,
        renderTreeLoadingTool
      }, thisProps2);
      if (!element) {
        return;
      }
      return (0, _react.cloneElement)(element, {
        key: "nodeTool"
      });
    };
    var getInitialDOMProps = (0, _react.useCallback)(function() {
      var thisProps2 = getProps();
      var domProps2 = thisProps2.domProps;
      var specificDomProps = thisProps2.headerCell ? thisProps2.headerDOMProps : thisProps2.cellDOMProps;
      if (typeof domProps2 == "function") {
        domProps2 = domProps2(thisProps2);
      }
      if (typeof specificDomProps == "function") {
        specificDomProps = specificDomProps(thisProps2);
      }
      return Object.assign({}, domProps2, specificDomProps);
    }, [getProps, props2.domProps, props2.headerCell, props2.headerDOMProps, props2.cellDOMProps]);
    var renderEditor = function renderEditor2(_props) {
      var thisProps2 = getProps();
      var editorProps = _objectSpread2(_objectSpread2({
        nativeScroll: thisProps2.nativeScroll
      }, thisProps2.editorProps), {}, {
        editorProps: thisProps2.editorProps,
        cell: cellInstance,
        cellProps: thisProps2,
        value: thisProps2.editValue,
        theme: thisProps2.theme,
        rtl: thisProps2.rtl,
        autoFocus: true,
        onChange: onEditValueChange,
        onComplete: onEditorComplete,
        onCancel: onEditorCancel,
        onEnterNavigation: onEditorEnterNavigation,
        onTabNavigation: onEditorTabNavigation,
        gotoNext: gotoNextEditor,
        gotoPrev: gotoPrevEditor,
        key: "editor",
        onClick: onEditorClick
      });
      var Editor = thisProps2.editor;
      if (Editor) {
        return _react.default.createElement(Editor, _objectSpread2({}, editorProps));
      }
      if (thisProps2.renderEditor) {
        return thisProps2.renderEditor(editorProps, editorProps.cellProps, cellInstance);
      }
      return _react.default.createElement(_Text.default, _objectSpread2({}, editorProps));
    };
    var isInEdit = (0, _react.useCallback)(function() {
      return getProps().inEdit;
    }, [props2.inEdit]);
    var getEditable = (0, _react.useCallback)(function(editValue) {
      var thisProps2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getProps();
      if (thisProps2.groupSpacerColumn || thisProps2.groupProps) {
        return Promise.resolve(false);
      }
      var editable = thisProps2.computedEditable;
      if (typeof editable === "function") {
        return Promise.resolve(editable(editValue, thisProps2));
      }
      return Promise.resolve(editable);
    }, [props2.groupSpacerColumn, props2.groupProps, props2.computedEditable]);
    var onEditorTabLeave = function onEditorTabLeave2(_direction) {
    };
    var gotoNextEditor = (0, _react.useCallback)(function() {
      return props2.tryRowCellEdit && props2.tryRowCellEdit(getProps().computedVisibleIndex + 1, 1);
    }, [props2.tryRowCellEdit, props2.computedVisibleIndex]);
    var gotoPrevEditor = (0, _react.useCallback)(function() {
      props2.tryRowCellEdit && props2.tryRowCellEdit(getProps().computedVisibleIndex - 1, -1);
    }, [props2.tryRowCellEdit, props2.computedVisibleIndex]);
    var onEditorEnterNavigation = (0, _react.useCallback)(function(complete, dir) {
      var thisProps2 = getProps();
      if (typeof dir !== "number") {
        dir = 0;
      }
      var newIndex = props2.rowIndex + dir;
      if (!complete) {
        stopEdit();
        if (newIndex != props2.rowIndex) {
          thisProps2.tryNextRowEdit && thisProps2.tryNextRowEdit(dir, props2.columnIndex, true);
        }
      } else {
        onEditorComplete();
        if (newIndex != thisProps2.rowIndex) {
          thisProps2.tryNextRowEdit && thisProps2.tryNextRowEdit(dir, thisProps2.columnIndex, true);
        }
      }
    }, [props2.tryNextRowEdit, props2.rowIndex, props2.columnIndex]);
    var onEditorTabNavigation = (0, _react.useCallback)(function(complete, dir) {
      var thisProps2 = getProps();
      if (typeof dir !== "number") {
        dir = 0;
      }
      var newIndex = thisProps2.computedVisibleIndex + dir;
      if (!complete) {
        stopEdit();
        if (newIndex != thisProps2.computedVisibleIndex) {
          thisProps2.tryRowCellEdit && thisProps2.tryRowCellEdit(newIndex, dir);
        }
      } else {
        onEditorComplete();
        if (newIndex != thisProps2.computedVisibleIndex) {
          thisProps2.tryRowCellEdit && thisProps2.tryRowCellEdit(newIndex, dir);
        }
      }
    }, [props2.computedVisibleIndex]);
    var onEditorClick = (0, _react.useCallback)(function(event2) {
      event2.stopPropagation();
    }, []);
    var onEditorCancel = (0, _react.useCallback)(function() {
      cancelEdit();
    }, []);
    var startEdit = (0, _react.useCallback)(function(editValue, errBack) {
      var thisProps2 = getProps();
      isCancelled.current = false;
      var editValuePromise = editValue === void 0 ? getEditStartValue(thisProps2) : Promise.resolve(editValue);
      return editValuePromise.then(function(editValue2) {
        return getEditable(editValue2, thisProps2).then(function(editable) {
          if (!editable) {
            return Promise.reject(editable);
          }
          if (thisProps2.onEditStart) {
            thisProps2.onEditStart(editValue2, thisProps2);
          }
          if (thisProps2.onEditStartForRow) {
            thisProps2.onEditStartForRow(editValue2, thisProps2);
          }
          return editValue2;
        });
      }).catch(errBack || function(_err) {
      });
    }, [props2.onEditStart, props2.onEditStartForRow]);
    var stopEdit = (0, _react.useCallback)(function() {
      var editValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getCurrentEditValue();
      var thisProps2 = getProps();
      if (thisProps2.onEditStop) {
        thisProps2.onEditStop(editValue, thisProps2);
      }
      if (thisProps2.onEditStopForRow) {
        thisProps2.onEditStopForRow(editValue, thisProps2);
      }
    }, [props2.onEditStop, props2.onEditStopForRow]);
    var cancelEdit = (0, _react.useCallback)(function() {
      isCancelled.current = true;
      stopEdit();
      var thisProps2 = getProps();
      if (thisProps2.onEditCancel) {
        thisProps2.onEditCancel(thisProps2);
      }
      if (thisProps2.onEditCancelForRow) {
        thisProps2.onEditCancelForRow(thisProps2);
      }
    }, [props2.onEditCancel, props2.onEditCancelForRow]);
    var onEditorComplete = (0, _react.useCallback)(function() {
      var now2 = Date.now();
      if (lastEditCompleteTimestamp.current && now2 - lastEditCompleteTimestamp.current < 50) {
        return;
      }
      lastEditCompleteTimestamp.current = now2;
      if (!isCancelled.current) {
        completeEdit();
      }
      isCancelled.current = false;
    }, []);
    var getEditCompleteValue = (0, _react.useCallback)(function() {
      var value2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getCurrentEditValue();
      if (props2.getEditCompleteValue) {
        return props2.getEditCompleteValue(value2, getProps());
      }
      return value2;
    }, [props2.getEditCompleteValue, props2.editValue]);
    var completeEdit = (0, _react.useCallback)(function() {
      var completeValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getEditCompleteValue();
      var thisProps2 = getProps();
      stopEdit();
      if (thisProps2.onEditComplete) {
        thisProps2.onEditComplete(completeValue, thisProps2);
      }
      if (thisProps2.onEditCompleteForRow) {
        thisProps2.onEditCompleteForRow(completeValue, thisProps2);
      }
    }, [props2.onEditComplete, props2.onEditCompleteForRow, getEditCompleteValue]);
    var getCurrentEditValue = function getCurrentEditValue2() {
      var editValue = getProps().editValue;
      return editValue;
    };
    var onFilterValueChange = (0, _react.useCallback)(function(filterValue) {
      var thisProps2 = getProps();
      if (thisProps2.onFilterValueChange) {
        thisProps2.onFilterValueChange(filterValue, thisProps2);
      }
    }, [props2.onFilterValueChange]);
    var onEditValueChange = (0, _react.useCallback)(function(e2) {
      var value2 = e2 && e2.target ? e2.target.value : e2;
      var thisProps2 = getProps();
      if (thisProps2.onEditValueChange) {
        thisProps2.onEditValueChange(value2, thisProps2);
      }
      if (thisProps2.onEditValueChangeForRow) {
        thisProps2.onEditValueChangeForRow(value2, thisProps2);
      }
    }, [props2.onEditValueChange, props2.onEditValueChangeForRow]);
    var renderSelectionBox = (0, _react.useCallback)(function(_props) {
      var thisProps2 = getProps();
      var inTransition = thisProps2.inTransition, inShowTransition = thisProps2.inShowTransition, cellSelected2 = thisProps2.cellSelected, cellActive2 = thisProps2.cellActive, bulkUpdate = thisProps2.bulkUpdateMouseDown;
      if (!cellSelected2 && !cellActive2) {
        return null;
      }
      var style2 = {};
      if (inTransition) {
        var duration = inShowTransition ? props2.showTransitionDuration : props2.hideTransitionDuration;
        duration = duration || props2.visibilityTransitionDuration;
        style2.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
      }
      var className2 = (0, _join.default)("InovuaReactDataGrid__cell__selection", bulkUpdate && "InovuaReactDataGrid__cell__selection__bulk-update-mouse-down");
      return _react.default.createElement("div", {
        key: "selectionBox",
        style: style2,
        className: className2
      }, props2.lastInRange && props2.computedCellMultiSelectionEnabled && _react.default.createElement("div", {
        className: "InovuaReactDataGrid__cell__selection-dragger InovuaReactDataGrid__cell__selection-dragger--direction-".concat(props2.rtl ? "rtl" : "ltr"),
        onMouseDown: onCellSelectionDraggerMouseDown
      }));
    }, [props2.computedCellMultiSelectionEnabled, props2.lastInRange, props2.rtl, props2.inTransition, props2.inShowTransition, props2.cellSelected, props2.cellActive, props2.showTransitionDuration, props2.hideTransitionDuration, props2.visibilityTransitionDuration]);
    var onHeaderCellFocus = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      if (thisProps2.onFocus) {
        thisProps2.onFocus(event2, thisProps2);
      }
      var initialProps = getInitialDOMProps();
      if (initialProps.onFocus) {
        initialProps.onFocus(event2, thisProps2);
      }
    }, [props2.onFocus, getInitialDOMProps]);
    var onColumnHoverMouseEnter = (0, _react.useCallback)(function(thisProps2) {
      if (thisProps2.groupProps || thisProps2.groupSpacerColumn || thisProps2.isRowDetailsCell || thisProps2.isCheckboxColumn) {
        return;
      }
      if (thisProps2.onColumnMouseEnter) {
        thisProps2.onColumnMouseEnter(thisProps2);
      }
    }, [props2.groupProps, props2.groupSpacerColumn, props2.isRowDetailsCell, props2.isCheckboxColumn, props2.onColumnMouseEnter]);
    var onColumnHoverMouseLeave = (0, _react.useCallback)(function(thisProps2) {
      if (thisProps2.groupProps || thisProps2.groupSpacerColumn || thisProps2.isRowDetailsCell || thisProps2.isCheckboxColumn) {
        return;
      }
      if (thisProps2.onColumnMouseLeave) {
        thisProps2.onColumnMouseLeave(thisProps2);
      }
    }, [props2.groupProps, props2.groupSpacerColumn, props2.isRowDetailsCell, props2.isCheckboxColumn, props2.onColumnMouseLeave]);
    var onCellEnterHandle = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      var initialProps = getInitialDOMProps();
      if (thisProps2.onCellEnter) {
        thisProps2.onCellEnter(event2, thisProps2);
      }
      if (thisProps2.computedEnableColumnHover) {
        onColumnHoverMouseEnter(thisProps2);
      }
      if (initialProps.onMouseEnter) {
        initialProps.onMouseEnter(event2, thisProps2);
      }
    }, [props2.onCellEnter, props2.computedEnableColumnHover, getInitialDOMProps]);
    var onCellLeave = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      var initialProps = getInitialDOMProps();
      if (thisProps2.onCellLeave) {
        thisProps2.onCellLeave(event2, thisProps2);
      }
      if (thisProps2.computedEnableColumnHover) {
        onColumnHoverMouseLeave(thisProps2);
      }
      if (initialProps.onMouseLeave) {
        initialProps.onMouseLeave(event2, thisProps2);
      }
    }, [props2.onCellLeave, props2.computedEnableColumnHover, getInitialDOMProps]);
    var onCellSelectionDraggerMouseDown = (0, _react.useCallback)(function(event2) {
      event2.preventDefault();
      event2.stopPropagation();
      if (props2.onCellSelectionDraggerMouseDown) {
        props2.onCellSelectionDraggerMouseDown(event2, getProps());
      }
      if (props2.onCellBulkUpdateMouseDown) {
        props2.onCellBulkUpdateMouseDown(event2, getProps());
      }
    }, [props2.onCellSelectionDraggerMouseDown, props2.onCellBulkUpdateMouseDown]);
    var prepareHeaderCellProps = (0, _react.useCallback)(function(cellProps2) {
      var thisProps2 = getProps();
      var children2 = cellProps2.children, computedSortInfo = cellProps2.computedSortInfo;
      var computedSortable = thisProps2.computedSortable;
      var sortTools = computedSortable ? getSortTools(computedSortInfo ? computedSortInfo.dir : null, cellProps2) : null;
      if (sortTools) {
        cellProps2.children = [children2 && children2.props ? (0, _react.cloneElement)(children2, {
          key: "content"
        }) : children2, sortTools];
        if (thisProps2.headerAlign === "end" || !thisProps2.headerAlign && thisProps2.textAlign == "end") {
          cellProps2.children.reverse();
        }
      }
      if (cellProps2.renderHeader) {
        if (!Array.isArray(cellProps2.children)) {
          cellProps2.children = [cellProps2.children];
        }
        cellProps2.children = cellProps2.renderHeader(cellProps2);
      }
      if (computedSortInfo && computedSortInfo.dir) {
        var dirName = computedSortInfo.dir === 1 ? "asc" : "desc";
        cellProps2.className = (0, _join.default)(cellProps2.className, "".concat(thisProps2.headerCellDefaultClassName, "--sort-").concat(dirName));
      }
      cellProps2.onResizeMouseDown = onResizeMouseDown.bind(cellInstance, cellProps2);
      cellProps2.onResizeTouchStart = onResizeTouchStart.bind(cellInstance, cellProps2);
      return cellProps2;
    }, [props2.computedSortable, props2.headerAlign, props2.textAlign, props2.headerCellDefaultClassName]);
    var onMouseDown = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      var initialDOMProps2 = getInitialDOMProps();
      if (event2.button === 2) {
        return;
      }
      if (thisProps2.onMouseDown) {
        thisProps2.onMouseDown(thisProps2, event2);
      }
      if (initialDOMProps2.onMouseDown) {
        initialDOMProps2.onMouseDown(event2, thisProps2);
      }
      if (thisProps2.onCellMouseDown) {
        thisProps2.onCellMouseDown(event2, thisProps2);
      }
      if (thisProps2.onDragRowMouseDown && thisProps2.id === _defaultRowReorderColumnId.id) {
        thisProps2.onDragRowMouseDown(event2, thisProps2.rowIndex, domRef);
      }
    }, [props2.onMouseDown, props2.onCellMouseDown, props2.onDragRowMouseDown, props2.id, props2.rowIndex]);
    var onContextMenu = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      var initialDOMProps2 = getInitialDOMProps();
      if (event2.nativeEvent) {
        event2.nativeEvent.__cellProps = thisProps2;
      }
      if (thisProps2.onContextMenu) {
        thisProps2.onContextMenu(event2, thisProps2);
      }
      if (initialDOMProps2.onContextMenu) {
        initialDOMProps2.onContextMenu(event2, thisProps2);
      }
    }, [props2.onContextMenu, getProps]);
    var onTouchStart = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      var initialDOMProps2 = getInitialDOMProps();
      if (thisProps2.onTouchStart) {
        thisProps2.onTouchStart(thisProps2, event2);
      }
      if (initialDOMProps2.onTouchStart) {
        initialDOMProps2.onTouchStart(event2, thisProps2);
      }
      if (thisProps2.onCellTouchStart) {
        thisProps2.onCellTouchStart(event2, thisProps2);
      }
      if (thisProps2.onDragRowMouseDown && thisProps2.id === _defaultRowReorderColumnId.id) {
        thisProps2.onDragRowMouseDown(event2, thisProps2.rowIndex, domRef);
      }
      event2.stopPropagation();
    }, [props2.onTouchStart, props2.onCellTouchStart, props2.onDragRowMouseDown, props2.id, props2.rowIndex]);
    var onResizeMouseDown = (0, _react.useCallback)(function(cellProps2, event2) {
      var thisProps2 = getProps();
      hideFilterContextMenu();
      if (thisProps2.hideColumnContextMenu) {
        thisProps2.hideColumnContextMenu();
      }
      if (thisProps2.onResizeMouseDown) {
        var node2 = getDOMNode();
        thisProps2.onResizeMouseDown(cellProps2, {
          colHeaderNode: node2,
          event: event2
        });
      }
    }, [props2.hideColumnContextMenu, props2.onResizeMouseDown]);
    var onResizeTouchStart = (0, _react.useCallback)(function(cellProps2, event2) {
      var thisProps2 = getProps();
      if (thisProps2.onResizeTouchStart) {
        thisProps2.onResizeTouchStart(cellProps2, {
          colHeaderNode: getDOMNode(),
          event: event2
        });
      }
    }, [props2.onResizeTouchStart]);
    var onClick = (0, _react.useCallback)(function(event2) {
      var thisProps2 = getProps();
      var initialDOMProps2 = getInitialDOMProps();
      if (thisProps2.onClick) {
        thisProps2.onClick(event2, thisProps2);
      }
      if (initialDOMProps2.onClick) {
        initialDOMProps2.onClick(event2, thisProps2);
      }
      if (!thisProps2.headerCell && thisProps2.onCellClick) {
        thisProps2.onCellClick(event2, thisProps2);
      }
      if (!thisProps2.headerCell) {
        if (thisProps2.computedEditable && !thisProps2.inEdit && (thisProps2.editStartEvent === "onClick" || thisProps2.editStartEvent === "click")) {
          startEdit();
        }
        return;
      }
      if (thisProps2.preventSortOnClick) {
        if (thisProps2.preventSortOnClick(event2, thisProps2) === true) {
          return;
        }
      }
      if (!thisProps2.sortDelay || thisProps2.sortDelay < 1) {
        return onSortClick();
      }
      if (sortTimeoutId.current) {
        clearTimeout(sortTimeoutId.current);
        sortTimeoutId.current = null;
      }
      sortTimeoutId.current = setTimeout(function() {
        onSortClick();
        sortTimeoutId.current = null;
      }, parseInt(thisProps2.sortDelay, 10));
      return void 0;
    }, [props2.onClick, props2.onCellClick, props2.headerCell, props2.computedEditable, props2.inEdit, props2.editStartEvent, props2.preventSortOnClick, props2.sortDelay]);
    var onDoubleClick = function onDoubleClick2(event2) {
      var thisProps2 = getProps();
      var initialDOMProps2 = getInitialDOMProps();
      if (thisProps2.onDoubleClick) {
        thisProps2.onDoubleClick(event2, thisProps2);
      }
      if (initialDOMProps2.onDoubleClick) {
        initialDOMProps2.onDoubleClick(event2, thisProps2);
      }
      var headerProps2 = thisProps2.headerProps, headerCell2 = thisProps2.headerCell;
      if (!headerCell2) {
        if (thisProps2.computedEditable && !thisProps2.inEdit && (thisProps2.editStartEvent === "onDoubleClick" || thisProps2.editStartEvent === "dblclick" || thisProps2.editStartEvent === "doubleclick")) {
          startEdit();
        }
        return;
      }
      if (headerProps2 && headerProps2.onDoubleClick) {
        headerProps2.onDoubleClick(event2, thisProps2);
      }
      if (sortTimeoutId.current) {
        clearTimeout(sortTimeoutId.current);
        sortTimeoutId.current = null;
      }
    };
    var getEditStartValue = function getEditStartValue2() {
      var thisProps2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getProps();
      if (typeof thisProps2.getEditStartValue == "function") {
        return Promise.resolve(thisProps2.getEditStartValue(thisProps2.value, thisProps2));
      }
      return Promise.resolve(thisProps2.value);
    };
    var onSortClick = function onSortClick2() {
      var thisProps2 = getProps();
      if (thisProps2.headerCell && thisProps2.computedSortable) {
        if (thisProps2.onSortClick) {
          thisProps2.onSortClick(thisProps2);
        }
      }
    };
    var getSortTools = (0, _react.useCallback)(function() {
      var direction2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      var cellProps2 = arguments.length > 1 ? arguments[1] : void 0;
      var _getProps = getProps(), computedSortable = _getProps.computedSortable, render = _getProps.renderSortTool;
      return (0, _renderSortTool.default)({
        sortable: computedSortable,
        direction: direction2,
        renderSortTool: render
      }, cellProps2);
    }, [props2.computedSortable, props2.renderSortTool]);
    var showFilterContextMenu = (0, _react.useCallback)(function(node2) {
      if (props2.showColumnFilterContextMenu) {
        props2.showColumnFilterContextMenu(node2, getProps());
      }
    }, [props2.showColumnFilterContextMenu]);
    var hideFilterContextMenu = (0, _react.useCallback)(function(node2) {
      if (props2.hideColumnFilterContextMenu) {
        props2.hideColumnFilterContextMenu(node2);
      }
    }, [props2.hideColumnFilterContextMenu]);
    var showContextMenu = (0, _react.useCallback)(function(domRef2, onHide) {
      if (props2.showColumnContextMenu) {
        props2.showColumnContextMenu(domRef2 ? domRef2 : null, getProps(), {
          computedVisibleIndex: props2.computedVisibleIndex
        }, onHide);
      }
    }, [props2.showColumnContextMenu]);
    var getProxyRegion = (0, _react.useCallback)(function() {
      var node2 = getDOMNode();
      var _getProps2 = getProps(), computedResizable = _getProps2.computedResizable, computedFilterable = _getProps2.computedFilterable;
      return computedFilterable ? _region.default.from(node2.firstChild) : _region.default.from(computedResizable ? node2.firstChild : node2);
    }, [props2.computedResizable, props2.computedFilterable]);
    var renderGroupTool2 = (0, _react.useCallback)(function() {
      var thisProps2 = getProps();
      var rtl = thisProps2.rtl, collapsed = thisProps2.collapsed, groupProps2 = thisProps2.groupProps, renderGroupCollapseTool = thisProps2.renderGroupCollapseTool, renderGroupExpandTool = thisProps2.renderGroupExpandTool;
      return (0, _renderGroupTool.default)({
        render: groupProps2 === null || groupProps2 === void 0 ? void 0 : groupProps2.renderGroupTool,
        collapsed,
        rtl,
        size: 20,
        renderGroupCollapseTool,
        renderGroupExpandTool,
        toggleGroup
      });
    }, [props2.rtl, props2.collapsed, props2.groupProps]);
    var toggleGroup = (0, _react.useCallback)(function(event2) {
      if (event2 && event2.preventDefault) {
        event2.preventDefault();
      }
      var props3 = getProps();
      if (typeof props3.onGroupToggle === "function") {
        var _data = props3.data;
        props3.onGroupToggle(_data.keyPath, props3, event2);
      }
    }, [props2.onGroupToggle, props2.data, getProps]);
    var cellInstance = {
      showContextMenu,
      getProps,
      setLeft,
      setRight,
      setTop,
      setHeight,
      setWidth,
      setDragging,
      setStateProps,
      updateState,
      updateProps,
      getDOMNode,
      onUpdate,
      getInitialIndex,
      getcomputedVisibleIndex,
      getInitialDOMProps,
      isInEdit,
      getEditable,
      onEditorTabLeave,
      gotoNextEditor,
      gotoPrevEditor,
      onEditorEnterNavigation,
      onEditorTabNavigation,
      onEditorClick,
      onEditorCancel,
      startEdit,
      stopEdit,
      cancelEdit,
      onEditorComplete,
      getEditCompleteValue,
      completeEdit,
      getCurrentEditValue,
      onFilterValueChange,
      onEditValueChange,
      onHeaderCellFocus,
      onColumnHoverMouseEnter,
      onColumnHoverMouseLeave,
      onCellEnterHandle,
      onCellLeave,
      onCellSelectionDraggerMouseDown,
      prepareHeaderCellProps,
      onMouseDown,
      onContextMenu,
      onTouchStart,
      onResizeMouseDown,
      onResizeTouchStart,
      onClick,
      onDoubleClick,
      getEditStartValue,
      onSortClick,
      getSortTools,
      showFilterContextMenu,
      hideFilterContextMenu,
      getProxyRegion,
      renderGroupTool: renderGroupTool2,
      toggleGroup,
      domRef: getDOMNode(),
      props: props2
    };
    var thisProps = getProps();
    var cellActive = thisProps.cellActive, cellSelected = thisProps.cellSelected, data = thisProps.data, empty2 = thisProps.empty, groupProps = thisProps.groupProps, headerCell = thisProps.headerCell, hidden = thisProps.hidden, name = thisProps.name, onRender = thisProps.onRender, treeColumn = thisProps.treeColumn, groupSpacerColumn = thisProps.groupSpacerColumn, loadNodeAsync = thisProps.loadNodeAsync, groupColumnVisible = thisProps.groupColumnVisible, rowIndex = thisProps.rowIndex, remoteRowIndex = thisProps.remoteRowIndex, rowSelected = thisProps.rowSelected, rowExpanded = thisProps.rowExpanded, setRowSelected = thisProps.setRowSelected, setRowExpanded = thisProps.setRowExpanded, isRowExpandable = thisProps.isRowExpandable, toggleRowExpand = thisProps.toggleRowExpand, toggleNodeExpand = thisProps.toggleNodeExpand, totalDataCount = thisProps.totalDataCount, computedVisibleIndex = thisProps.computedVisibleIndex, inEdit = thisProps.inEdit, renderRowDetailsMoreIcon = thisProps.renderRowDetailsMoreIcon, renderRowDetailsExpandIcon = thisProps.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = thisProps.renderRowDetailsCollapsedIcon, notifyColumnFilterVisibleStateChange = thisProps.notifyColumnFilterVisibleStateChange;
    var value = thisProps.value, renderCell2 = thisProps.render, renderSummary = thisProps.renderSummary;
    var className = prepareClassName2(thisProps);
    var style = prepareStyle2(thisProps);
    var headerProps = headerCell ? thisProps.headerProps || emptyObject : null;
    if (!headerCell && groupSpacerColumn && groupProps && groupProps.depth == computedVisibleIndex) {
      value = renderGroupTool2();
    }
    var children = value;
    var cellProps = Object.assign({}, thisProps, headerCell ? headerProps : thisProps.cellProps, {
      instance: cellInstance,
      value,
      name,
      notifyColumnFilterVisibleStateChange,
      columnIndex: computedVisibleIndex,
      children,
      onClick,
      onDoubleClick,
      onContextMenu,
      onMouseDown,
      onTouchStart,
      onMouseEnter: onCellEnterHandle,
      onMouseLeave: onCellLeave
    });
    cellProps.className = headerCell ? headerProps.className ? "".concat(className, " ").concat(headerProps.className) : className : thisProps.cellProps && thisProps.cellProps.className ? typeof thisProps.cellProps.className === "function" ? "".concat(className, " ").concat(thisProps.cellProps.className(cellProps)) : "".concat(className, " ").concat(thisProps.cellProps.className) : className;
    if (!headerCell) {
      CELL_RENDER_OBJECT.empty = empty2;
      CELL_RENDER_OBJECT.value = value;
      CELL_RENDER_OBJECT.data = data;
      CELL_RENDER_OBJECT.cellProps = cellProps;
      CELL_RENDER_OBJECT.columnIndex = computedVisibleIndex;
      CELL_RENDER_OBJECT.treeColumn = treeColumn;
      CELL_RENDER_OBJECT.rowIndex = rowIndex;
      CELL_RENDER_OBJECT.remoteRowIndex = remoteRowIndex;
      CELL_RENDER_OBJECT.rowIndexInGroup = thisProps.rowIndexInGroup;
      CELL_RENDER_OBJECT.rowSelected = rowSelected;
      CELL_RENDER_OBJECT.rowExpanded = rowExpanded;
      CELL_RENDER_OBJECT.nodeProps = data ? data.__nodeProps : emptyObject;
      CELL_RENDER_OBJECT.setRowSelected = setRowSelected;
      CELL_RENDER_OBJECT.setRowExpanded = setRowExpanded;
      CELL_RENDER_OBJECT.toggleGroup = toggleGroup;
      CELL_RENDER_OBJECT.toggleRowExpand = toggleRowExpand;
      CELL_RENDER_OBJECT.toggleNodeExpand = toggleNodeExpand;
      CELL_RENDER_OBJECT.loadNodeAsync = loadNodeAsync;
      CELL_RENDER_OBJECT.isRowExpandable = isRowExpandable;
      CELL_RENDER_OBJECT.totalDataCount = totalDataCount;
      CELL_RENDER_OBJECT.renderRowDetailsExpandIcon = renderRowDetailsExpandIcon;
      CELL_RENDER_OBJECT.renderRowDetailsCollapsedIcon = renderRowDetailsCollapsedIcon;
    }
    var rendersInlineEditor = headerCell ? false : cellProps.rendersInlineEditor;
    if (rendersInlineEditor && typeof rendersInlineEditor === "function") {
      rendersInlineEditor = cellProps.rendersInlineEditor(CELL_RENDER_OBJECT);
    }
    CELL_RENDER_OBJECT.rendersInlineEditor = rendersInlineEditor;
    cellProps.style = headerCell ? headerProps.style ? Object.assign({}, style, headerProps.style) : style : thisProps.cellProps && thisProps.cellProps.style ? typeof thisProps.cellProps.style === "function" ? Object.assign({}, style, thisProps.cellProps.style(cellProps)) : Object.assign({}, style, thisProps.cellProps.style) : style;
    if (inEdit || rendersInlineEditor) {
      cellProps.editProps = {
        inEdit,
        startEdit,
        value: thisProps.editValue,
        onClick: onEditorClick,
        onChange: onEditValueChange,
        onComplete: onEditorComplete,
        onCancel: onEditorCancel,
        onEnterNavigation: onEditorEnterNavigation,
        onTabNavigation: onEditorTabNavigation,
        gotoNext: gotoNextEditor,
        gotoPrev: gotoPrevEditor
      };
    }
    if (headerCell) {
      cellProps.onFocus = onHeaderCellFocus;
    }
    if (headerCell) {
      CELL_RENDER_OBJECT.renderRowDetailsMoreIcon = renderRowDetailsMoreIcon;
    }
    if (headerCell) {
      cellProps = prepareHeaderCellProps(cellProps);
    } else {
      if (data && (data.__summary || data.__group && data.groupColumnSummary) && renderSummary) {
        renderCell2 = renderSummary;
      }
      if (renderCell2) {
        CELL_RENDER_SECOND_OBJ.cellProps = cellProps;
        CELL_RENDER_SECOND_OBJ.column = cellProps;
        CELL_RENDER_SECOND_OBJ.headerProps = null;
        if (data && (!data.__group || groupColumnVisible)) {
          cellProps.children = renderCell2(CELL_RENDER_OBJECT, CELL_RENDER_SECOND_OBJ);
        }
      }
      if (!hidden && cellProps.children != null && cellProps.textEllipsis !== false) {
        cellProps.children = wrapInContent(cellProps.children);
      }
      if (onRender) {
        onRender(cellProps, CELL_RENDER_OBJECT);
      }
      if (cellSelected || cellActive || inEdit || rendersInlineEditor) {
        cellProps.children = [cellProps.children, renderSelectionBox(cellProps), inEdit && !rendersInlineEditor ? renderEditor() : null];
      }
      if (treeColumn) {
        if (Array.isArray(cellProps.children)) {
          cellProps.children = [renderNodeTool2(thisProps)].concat((0, _toConsumableArray2.default)(cellProps.children));
        } else {
          cellProps.children = [renderNodeTool2(thisProps), cellProps.children];
        }
      }
    }
    var initialDOMProps = getInitialDOMProps();
    var domProps = Object.assign({}, initialDOMProps, {
      onFocus: cellProps.onFocus || initialDOMProps.onFocus,
      onClick: cellProps.onClick || initialDOMProps.onClick,
      onContextMenu: cellProps.onContextMenu || initialDOMProps.onContextMenu,
      onDoubleClick: cellProps.onDoubleClick || initialDOMProps.onDoubleClick,
      onMouseDown: cellProps.onMouseDown || initialDOMProps.onMouseDown,
      onTouchStart: cellProps.onTouchStart || initialDOMProps.onTouchStart,
      onMouseEnter: cellProps.onMouseEnter || initialDOMProps.onMouseEnter,
      onMouseLeave: cellProps.onMouseLeave || initialDOMProps.onMouseLeave,
      style: initialDOMProps.style ? Object.assign({}, initialDOMProps.style, cellProps.style) : cellProps.style,
      className: (0, _join.default)(initialDOMProps.className, cellProps.className)
    });
    domProps.ref = domRef;
    return headerCell ? (0, _renderHeader.default)(cellProps, domProps, cellInstance, state2) : _react.default.createElement("div", _objectSpread2(_objectSpread2({}, domProps), {}, {
      children: cellProps.children,
      "data-props-id": props2.id,
      "data-state-props-id": getProps().id,
      id: null,
      name: null,
      value: null,
      title: null,
      data: null
    }));
  }
  InovuaDataGridCell.defaultProps = {
    cellDefaultClassName: cellBem(),
    headerCellDefaultClassName: headerBem(),
    computedMinWidth: 40,
    groupNestingSize: 10,
    treeNestingSize: 10,
    checkboxTabIndex: null,
    onSortClick: emptyFn,
    preventSortOnClick: function preventSortOnClick(event2) {
      var target = event2.target;
      return (0, _isFocusable.default)(target);
    }
  };
  InovuaDataGridCell.propTypes = {
    computedAbsoluteIndex: _propTypes.default.number,
    checkboxTabIndex: _propTypes.default.number,
    cellActive: _propTypes.default.bool,
    cellClassName: _propTypes.default.string,
    cellDefaultClassName: _propTypes.default.string,
    cellDOMProps: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    computedCellMultiSelectionEnabled: _propTypes.default.bool,
    cellSelectable: _propTypes.default.bool,
    cellSelected: _propTypes.default.bool,
    checkboxColumn: _propTypes.default.any,
    collapsed: _propTypes.default.bool,
    computedColspan: _propTypes.default.number,
    computedRowspan: _propTypes.default.number,
    columnIndex: _propTypes.default.number,
    columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    computedLocked: _propTypes.default.oneOf([false, "start", "end"]),
    computedWidth: _propTypes.default.number,
    data: _propTypes.default.oneOfType([_propTypes.default.shape({}), _propTypes.default.array]),
    defaultWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    depth: _propTypes.default.number,
    deselectAll: _propTypes.default.func,
    domProps: _propTypes.default.object,
    empty: _propTypes.default.bool,
    first: _propTypes.default.bool,
    firstInSection: _propTypes.default.bool,
    computedFlex: _propTypes.default.number,
    flex: _propTypes.default.number,
    group: _propTypes.default.string,
    computedGroupBy: _propTypes.default.any,
    groupCell: _propTypes.default.bool,
    groupSpacerColumn: _propTypes.default.bool,
    groupNestingSize: _propTypes.default.number,
    groupProps: _propTypes.default.object,
    hasBottomSelectedSibling: _propTypes.default.bool,
    hasLeftSelectedSibling: _propTypes.default.bool,
    hasLockedStart: _propTypes.default.bool,
    hasRightSelectedSibling: _propTypes.default.bool,
    hasTopSelectedSibling: _propTypes.default.bool,
    header: _propTypes.default.any,
    headerAlign: _propTypes.default.oneOf(["start", "center", "end"]),
    headerCell: _propTypes.default.bool,
    headerCellDefaultClassName: _propTypes.default.string,
    headerClassName: _propTypes.default.string,
    headerDOMProps: _propTypes.default.object,
    headerEllipsis: _propTypes.default.bool,
    headerHeight: _propTypes.default.number,
    headerProps: _propTypes.default.any,
    headerUserSelect: _propTypes.default.oneOf([true, false, "text", "none"]),
    headerVerticalAlign: _propTypes.default.oneOf(["top", "middle", "center", "bottom", "start", "end"]),
    headerWrapperClassName: _propTypes.default.string,
    hidden: _propTypes.default.bool,
    hideIntermediateState: _propTypes.default.bool,
    hideTransitionDuration: _propTypes.default.number,
    hiding: _propTypes.default.bool,
    id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    inHideTransition: _propTypes.default.bool,
    inShowTransition: _propTypes.default.bool,
    inTransition: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
    index: _propTypes.default.number,
    initialIndex: _propTypes.default.number,
    isColumn: _propTypes.default.bool,
    last: _propTypes.default.bool,
    lastInRange: _propTypes.default.bool,
    lastInSection: _propTypes.default.bool,
    lastRowInGroup: _propTypes.default.bool,
    lastUnlocked: _propTypes.default.bool,
    locked: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    maxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    computedMaxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    minWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    computedMinWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    minRowHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    multiSelect: _propTypes.default.bool,
    name: _propTypes.default.string,
    nativeScroll: _propTypes.default.bool,
    nextBorderLeft: _propTypes.default.bool,
    noBackground: _propTypes.default.bool,
    onCellClick: _propTypes.default.func,
    onCellEnter: _propTypes.default.func,
    onCellMouseDown: _propTypes.default.func,
    preventSortOnClick: _propTypes.default.func,
    onCellSelectionDraggerMouseDown: _propTypes.default.func,
    onGroupToggle: _propTypes.default.func,
    onMount: _propTypes.default.func,
    onRender: _propTypes.default.func,
    onResizeMouseDown: _propTypes.default.func,
    onResizeTouchStart: _propTypes.default.func,
    onSortClick: _propTypes.default.func,
    onUnmount: _propTypes.default.func,
    prevBorderRight: _propTypes.default.bool,
    render: _propTypes.default.func,
    renderCheckbox: _propTypes.default.func,
    renderGroupTitle: _propTypes.default.func,
    renderHeader: _propTypes.default.func,
    renderSortTool: _propTypes.default.func,
    computedResizable: _propTypes.default.bool,
    lockable: _propTypes.default.bool,
    resizeProxyStyle: _propTypes.default.object,
    rowActive: _propTypes.default.bool,
    rowHeight: _propTypes.default.number,
    initialRowHeight: _propTypes.default.number,
    rowIndex: _propTypes.default.number,
    rowIndexInGroup: _propTypes.default.number,
    rowRenderIndex: _propTypes.default.number,
    rowSelected: _propTypes.default.bool,
    scrollbarWidth: _propTypes.default.number,
    indexInHeaderGroup: _propTypes.default.number,
    parentGroups: _propTypes.default.array,
    selectAll: _propTypes.default.func,
    selectedCount: _propTypes.default.number,
    selection: _propTypes.default.any,
    setRowSelected: _propTypes.default.func,
    setRowExpanded: _propTypes.default.func,
    toggleRowExpand: _propTypes.default.func,
    toggleNodeExpand: _propTypes.default.func,
    shouldComponentUpdate: _propTypes.default.func,
    showBorderBottom: _propTypes.default.bool,
    showBorderLeft: _propTypes.default.bool,
    showBorderRight: _propTypes.default.any,
    showBorderTop: _propTypes.default.bool,
    showColumnContextMenu: _propTypes.default.func,
    showColumnMenuSortOptions: _propTypes.default.bool,
    showColumnMenuFilterOptions: _propTypes.default.bool,
    showColumnMenuLockOptions: _propTypes.default.bool,
    showColumnMenuGroupOptions: _propTypes.default.bool,
    showTransitionDuration: _propTypes.default.number,
    sort: _propTypes.default.any,
    sortDelay: _propTypes.default.number,
    computedSortInfo: _propTypes.default.any,
    computedSortable: _propTypes.default.bool,
    textAlign: _propTypes.default.oneOf(["start", "center", "end"]),
    textEllipsis: _propTypes.default.bool,
    textVerticalAlign: _propTypes.default.oneOf(["top", "middle", "center", "bottom", "start", "end"]),
    titleClassName: _propTypes.default.string,
    tryRowCellEdit: _propTypes.default.func,
    totalCount: _propTypes.default.number,
    totalDataCount: _propTypes.default.number,
    unselectedCount: _propTypes.default.number,
    userSelect: _propTypes.default.oneOf([true, false, "text", "none"]),
    value: _propTypes.default.any,
    virtualizeColumns: _propTypes.default.bool,
    visibilityTransitionDuration: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
    computedVisible: _propTypes.default.bool,
    computedVisibleCount: _propTypes.default.number,
    computedVisibleIndex: _propTypes.default.number,
    indexInColumns: _propTypes.default.number,
    width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    editable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
    onEditStop: _propTypes.default.func,
    onEditStart: _propTypes.default.func,
    onEditCancel: _propTypes.default.func,
    onEditValueChange: _propTypes.default.func,
    onEditComplete: _propTypes.default.func,
    onEditStopForRow: _propTypes.default.func,
    onEditStartForRow: _propTypes.default.func,
    onEditCancelForRow: _propTypes.default.func,
    onEditValueChangeForRow: _propTypes.default.func,
    onEditCompleteForRow: _propTypes.default.func,
    onDragRowMouseDown: _propTypes.default.func,
    isRowExpandable: _propTypes.default.func,
    editorProps: _propTypes.default.any,
    editValue: _propTypes.default.any,
    Editor: _propTypes.default.func,
    renderEditor: _propTypes.default.func,
    zIndex: _propTypes.default.number,
    computedOffset: _propTypes.default.number,
    groupTitleCell: _propTypes.default.bool,
    groupExpandCell: _propTypes.default.bool,
    rendersInlineEditor: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
    groupColumn: _propTypes.default.bool,
    treeColumn: _propTypes.default.bool,
    renderNodeTool: _propTypes.default.func,
    showInContextMenu: _propTypes.default.bool,
    naturalRowHeight: _propTypes.default.bool,
    rtl: _propTypes.default.bool,
    computedFilterable: _propTypes.default.bool,
    computedEditable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),
    groupColumnVisible: _propTypes.default.bool,
    filterTypes: _propTypes.default.any,
    filterDelay: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
    getFilterValue: _propTypes.default.func,
    onFilterValueChange: _propTypes.default.func,
    getEditStartValue: _propTypes.default.func,
    getEditCompleteValue: _propTypes.default.func,
    editStartEvent: _propTypes.default.string,
    setActiveIndex: _propTypes.default.func,
    renderColumnReorderProxy: _propTypes.default.func,
    columnHoverClassName: _propTypes.default.string,
    renderRowDetailsExpandIcon: _propTypes.default.func,
    renderRowDetailsCollapsedIcon: _propTypes.default.func
  };
  var _default2 = _react.default.memo(InovuaDataGridCell, function(prevProps, nextProps) {
    var areEqual = (0, _shallowequal.equalReturnKey)(nextProps, prevProps, {
      computedActiveIndex: 1,
      activeRowRef: 1,
      active: 1,
      timestamp: 1,
      remoteRowIndex: 1,
      onResizeMouseDown: 1,
      onResizeTouchStart: 1,
      onFocus: 1,
      onSortClick: 1,
      onTouchStart: 1,
      onColumnMouseEnter: 1,
      onColumnMouseLeave: 1
    });
    var equalProps = areEqual.result;
    if (!equalProps) {
      return false;
    }
    return true;
  });
  Cell.default = _default2;
  return Cell;
}
var hasRequiredDragCell;
function requireDragCell() {
  if (hasRequiredDragCell)
    return DragCell;
  hasRequiredDragCell = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(DragCell, "__esModule", {
    value: true
  });
  DragCell.default = DragCell.MAX_WIDTH = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _Cell = _interopRequireDefault2(requireCell());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var MAX_WIDTH = 350;
  DragCell.MAX_WIDTH = MAX_WIDTH;
  var DragCell$1 = function(_React$Component) {
    (0, _inherits2.default)(DragCell2, _React$Component);
    var _super = _createSuper(DragCell2);
    function DragCell2(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, DragCell2);
      _this = _super.call(this, _props);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "left", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "right", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "top", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "height", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "width", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getProps", function() {
        return _this.state.props || _this.props;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setProps", function(props2) {
        _this.setState({
          props: props2
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMount", function(props2, cell) {
        if (_this.left) {
          cell.setLeft(_this.left);
        }
        if (_this.right) {
          cell.setRight(_this.right);
        }
        if (_this.top) {
          cell.setTop(_this.top);
        }
        if (_this.height) {
          cell.setHeight(_this.height);
        }
        if (_this.width) {
          cell.setWidth(_this.width);
        }
        cell.setDragging(true);
        _this.cell = cell;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellUnmount", function() {
        _this.cell = null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function(visible, callback2) {
        if (!visible) {
          _this.top = void 0;
          _this.left = void 0;
          _this.right = void 0;
          _this.height = void 0;
          _this.width = void 0;
        }
        _this.setState({
          visible
        }, function() {
          if (_this.cell && visible) {
            _this.cell.setDragging(visible, callback2);
          }
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function(top) {
        _this.top = top;
        if (_this.cell && _this.state.visible) {
          _this.cell.setTop(top);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function(height) {
        _this.height = height;
        if (_this.cell && _this.state.visible) {
          _this.cell.setHeight(height);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function(width) {
        _this.width = width;
        if (_this.cell && _this.state.visible) {
          _this.cell.setWidth(width);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function(left) {
        _this.left = left;
        if (_this.cell && _this.state.visible) {
          _this.cell.setLeft(left);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function(right) {
        _this.right = right;
        if (_this.cell && _this.state.visible) {
          _this.cell.setRight(right);
        }
      });
      _this.state = {
        visible: false
      };
      return _this;
    }
    (0, _createClass2.default)(DragCell2, [{
      key: "render",
      value: function render() {
        if (this.state.visible) {
          var props2 = this.getProps();
          var className = props2.className ? "".concat(props2.className, " InovuaReactDataGrid__drag-proxy") : "InovuaReactDataGrid__drag-proxy";
          var headerWrapperClassName = props2.headerWrapperClassName ? "".concat(props2.headerWrapperClassName, " InovuaReactDataGrid__drag-proxy") : "InovuaReactDataGrid__drag-proxy";
          var maxWidth = props2.maxWidth ? Math.min(props2.maxWidth, MAX_WIDTH) : MAX_WIDTH;
          var computedWidth = Math.min(props2.computedWidth, maxWidth);
          return _react.default.createElement(_Cell.default, _objectSpread2(_objectSpread2({}, props2), {}, {
            maxWidth,
            computedWidth,
            className,
            headerWrapperClassName,
            onMount: this.onCellMount,
            onUnmount: this.onCellUnmount
          }));
        }
        return null;
      }
    }]);
    return DragCell2;
  }(_react.default.Component);
  DragCell.default = DragCell$1;
  return DragCell;
}
var DragHeaderGroup = {};
var HeaderGroup = {};
var humanize = {};
var hasRequiredHumanize;
function requireHumanize() {
  if (hasRequiredHumanize)
    return humanize;
  hasRequiredHumanize = 1;
  Object.defineProperty(humanize, "__esModule", {
    value: true
  });
  humanize.default = void 0;
  var _default2 = function _default3(x2) {
    return x2 || "";
  };
  humanize.default = _default2;
  return humanize;
}
var hasRequiredHeaderGroup;
function requireHeaderGroup() {
  if (hasRequiredHeaderGroup)
    return HeaderGroup;
  hasRequiredHeaderGroup = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(HeaderGroup, "__esModule", {
    value: true
  });
  HeaderGroup.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _region = _interopRequireDefault2(requireRegion());
  var _join = _interopRequireDefault2(requireJoin());
  var _humanize = _interopRequireDefault2(requireHumanize());
  var _ColumnResizer = _interopRequireDefault2(requireColumnResizer());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var emptyObject = Object.freeze ? Object.freeze({}) : {};
  var BASE_CLASS_NAME = "InovuaReactDataGrid__header-group__title";
  var TOP_Z_INDEX = 1e4;
  var defaultProps2 = {
    isHeaderGroup: true
  };
  var propTypes2 = {
    columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    group: _propTypes.default.shape({
      name: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
      className: _propTypes.default.string,
      style: _propTypes.default.object,
      headerClassName: _propTypes.default.string,
      headerStyle: _propTypes.default.object
    }),
    depth: _propTypes.default.number.isRequired,
    columns: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])).isRequired,
    children: _propTypes.default.node,
    extraChildrenProps: _propTypes.default.object,
    containsLastColumn: _propTypes.default.bool,
    lastInSection: _propTypes.default.bool,
    filterable: _propTypes.default.bool,
    onResizeMouseDown: _propTypes.default.func,
    onResizeTouchStart: _propTypes.default.func,
    parentGroups: _propTypes.default.array,
    showBorderLeft: _propTypes.default.bool,
    showBorderRight: _propTypes.default.bool,
    siblingCount: _propTypes.default.number,
    siblingIndex: _propTypes.default.number
  };
  var getHeader = function getHeader2() {
    var group = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyObject;
    var header = group.header, name = group.name;
    if (header) {
      if (typeof header !== "function") {
        return header;
      }
      return header(group);
    }
    return (0, _humanize.default)(name || "");
  };
  var HeaderGroup$1 = function(_React$Component) {
    (0, _inherits2.default)(HeaderGroup2, _React$Component);
    var _super = _createSuper(HeaderGroup2);
    function HeaderGroup2(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, HeaderGroup2);
      _this = _super.call(this, _props);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
        return _this.domRef && _this.domRef.current;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function(top) {
        _this.setState({
          top
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function(left) {
        _this.setState({
          left
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function(right) {
        _this.setState({
          right
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function(height) {
        _this.setState({
          height
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function(width) {
        _this.setState({
          width
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function(dragging, callback2) {
        var newState = {
          dragging
        };
        if (!dragging) {
          newState.top = 0;
          newState.left = 0;
          newState.width = 0;
          newState.height = 0;
        }
        _this.setState(newState, callback2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareStyle", function() {
        var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this), state2 = _assertThisInitialize.state, props2 = _assertThisInitialize.props;
        var style = props2.style || {};
        var group = props2.group;
        var headerProps = group.headerProps;
        if (props2.group.style) {
          style = _objectSpread2(_objectSpread2({}, style), props2.group.style);
        }
        if (headerProps && headerProps.style) {
          style = _objectSpread2(_objectSpread2({}, style), headerProps.style);
        }
        if (state2.dragging) {
          style = Object.assign({}, style, {
            zIndex: TOP_Z_INDEX
          });
          if (_this.props.rtl) {
            style.right = state2.right || 0;
          } else {
            style.left = state2.left || 0;
          }
          style.top = state2.top || 0;
          style.height = state2.height || "";
          style.width = state2.width || "";
          style.position = "absolute";
          style.overflow = "hidden";
        }
        return style;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getProxyRegion", function() {
        var node2 = _this.domRef ? _this.domRef.current : null;
        var region2 = _region.default.from(node2);
        if (_this.props.filterable) {
          var filterWrapper = node2.querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
          if (filterWrapper) {
            region2.setHeight(region2.getHeight() - filterWrapper.offsetHeight);
          }
        }
        return region2;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderChild", function(child, index2) {
        var extraProps = {
          parent: (0, _assertThisInitialized2.default)(_this),
          indexInHeaderGroup: index2
        };
        var dragging = _this.props.dragging || _this.state.dragging;
        if (_this.props.extraChildrenProps) {
          Object.assign(extraProps, _this.props.extraChildrenProps);
        }
        if (dragging) {
          extraProps.dragging = dragging;
        }
        extraProps.key = index2;
        return (0, _react.cloneElement)(child, extraProps);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function(event2) {
        if (_this.props.onResizeMouseDown) {
          event2.stopPropagation();
          _this.props.onResizeMouseDown(_this.props, (0, _assertThisInitialized2.default)(_this), event2);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function(event2) {
        if (_this.props.onResizeTouchStart) {
          event2.stopPropagation();
          _this.props.onResizeTouchStart(_this.props, (0, _assertThisInitialized2.default)(_this), event2);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMouseDown", function(event2) {
        if (_this.props.onMouseDown) {
          _this.props.onMouseDown(event2, _this.props, (0, _assertThisInitialized2.default)(_this));
        }
      });
      _this.state = {
        dragging: false
      };
      _this.domRef = _react.default.createRef();
      return _this;
    }
    (0, _createClass2.default)(HeaderGroup2, [{
      key: "render",
      value: function render() {
        var _style;
        var props2 = this.props;
        var showBorderLeft = props2.showBorderLeft, showBorderRight = props2.showBorderRight, resizable = props2.resizable, children = props2.children, group = props2.group, dragging = props2.dragging, depth = props2.depth, columnResizeHandleWidth = props2.columnResizeHandleWidth, containsLastColumn = props2.containsLastColumn, firstInSection = props2.firstInSection, lastInSection = props2.lastInSection, adjustResizer = props2.adjustResizer, locked = props2.locked, rtl = props2.rtl, resizeProxyStyle = props2.resizeProxyStyle;
        var style = this.prepareStyle();
        var resizerRight = containsLastColumn || adjustResizer || lastInSection ? 0 : -props2.columnResizeHandleWidth / 2;
        var header = getHeader(group);
        var _ref2 = group || emptyObject, headerAlign = _ref2.headerAlign;
        var className = (0, _join.default)(BASE_CLASS_NAME, firstInSection && "InovuaReactDataGrid__header-group__title--first-in-section", "InovuaReactDataGrid__header-group__title--depth-".concat(depth), group.headerClassName, "InovuaReactDataGrid__header-group__title--direction-".concat(rtl ? "rtl" : "ltr"), showBorderLeft && "InovuaReactDataGrid__header-group__title--show-border-".concat(rtl ? "right" : "left"), showBorderRight && "InovuaReactDataGrid__header-group__title--show-border-".concat(rtl ? "left" : "right"), locked && "InovuaReactDataGrid__header-group__title--locked-".concat(locked), dragging && "InovuaReactDataGrid__header-group__title--dragging", containsLastColumn && "InovuaReactDataGrid__header-group__title--last", !header ? "InovuaReactDataGrid__header-group__title--empty" : null, "".concat(BASE_CLASS_NAME, "--align-").concat(headerAlign || "start"));
        var groupHeader = !header && !depth ? null : _react.default.createElement("div", {
          style: group.headerStyle,
          className
        }, header || " ");
        var resizeHandleStyle;
        if (resizable) {
          resizeHandleStyle = {
            width: columnResizeHandleWidth
          };
          if (resizeProxyStyle) {
            resizeHandleStyle = Object.assign({}, resizeProxyStyle, resizeHandleStyle);
          }
        }
        var resizer = resizable ? _react.default.createElement(_ColumnResizer.default, {
          className: "InovuaReactDataGrid__header-group-resizer",
          onMouseDown: this.onResizeMouseDown,
          onTouchStart: this.onResizeTouchStart,
          style: (_style = {
            width: columnResizeHandleWidth
          }, (0, _defineProperty2.default)(_style, rtl ? "left" : "right", resizerRight), (0, _defineProperty2.default)(_style, rtl ? "right" : "left", "unset"), (0, _defineProperty2.default)(_style, "zIndex", depth * 1e4 + (100 - this.props.firstIndex || 0)), _style),
          resizeHandleStyle,
          resizeHandleClassName: "InovuaReactDataGrid__header-group-resize-handle"
        }) : null;
        var headerProps = group.headerProps;
        return _react.default.createElement("div", {
          onMouseDown: this.onMouseDown,
          style,
          ref: this.domRef,
          className: (0, _join.default)(props2.className, "InovuaReactDataGrid__header-group", group.className, props2.inTransition && "InovuaReactDataGrid__header-group--transition", this.state.dragging && "InovuaReactDataGrid__header-group--dragging", headerProps && headerProps.className ? headerProps.className : "")
        }, resizer, groupHeader, _react.default.createElement("div", {
          className: "InovuaReactDataGrid__header-group-cells"
        }, children.map(this.renderChild)));
      }
    }]);
    return HeaderGroup2;
  }(_react.default.Component);
  HeaderGroup.default = HeaderGroup$1;
  (0, _defineProperty2.default)(HeaderGroup$1, "defaultProps", defaultProps2);
  (0, _defineProperty2.default)(HeaderGroup$1, "propTypes", propTypes2);
  return HeaderGroup;
}
var hasRequiredDragHeaderGroup;
function requireDragHeaderGroup() {
  if (hasRequiredDragHeaderGroup)
    return DragHeaderGroup;
  hasRequiredDragHeaderGroup = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(DragHeaderGroup, "__esModule", {
    value: true
  });
  DragHeaderGroup.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _HeaderGroup = _interopRequireDefault2(requireHeaderGroup());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var extraChildrenProps = {
    onUnmount: null,
    ref: null,
    dragging: true
  };
  var DragHeaderGroup$1 = function(_React$Component) {
    (0, _inherits2.default)(DragHeaderGroup2, _React$Component);
    var _super = _createSuper(DragHeaderGroup2);
    function DragHeaderGroup2(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, DragHeaderGroup2);
      _this = _super.call(this, _props);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getProps", function() {
        return _this.state.props || _this.props;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setProps", function(props2) {
        _this.setState({
          props: props2
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setDragging", function(visible, callback2) {
        if (!visible) {
          _this.top = void 0;
          _this.left = void 0;
          _this.right = void 0;
          _this.width = void 0;
          _this.height = void 0;
        }
        _this.setState({
          visible
        }, function() {
          if (_this.headerGroup && visible) {
            _this.headerGroup.setDragging(visible, callback2);
            if (_this.top !== void 0) {
              _this.headerGroup.setTop(_this.top);
            }
            if (_this.left !== void 0) {
              _this.headerGroup.setLeft(_this.left);
            }
            if (_this.right !== void 0) {
              _this.headerGroup.setRight(_this.right);
            }
            if (_this.height !== void 0) {
              _this.headerGroup.setHeight(_this.height);
            }
            if (_this.width !== void 0) {
              _this.headerGroup.setWidth(_this.width);
            }
          }
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeight", function(height) {
        _this.height = height;
        if (_this.headerGroup && _this.state.visible) {
          _this.headerGroup.setHeight(height);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setWidth", function(width) {
        _this.width = width;
        if (_this.headerGroup && _this.state.visible) {
          _this.headerGroup.setWidth(width);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setTop", function(top) {
        _this.top = top;
        if (_this.headerGroup && _this.state.visible) {
          _this.headerGroup.setTop(top);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setLeft", function(left) {
        _this.left = left;
        if (_this.headerGroup && _this.state.visible) {
          _this.headerGroup.setLeft(left);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRight", function(right) {
        _this.right = right;
        if (_this.headerGroup && _this.state.visible) {
          _this.headerGroup.setRight(right);
        }
      });
      _this.refHeaderGroup = function(group) {
        _this.headerGroup = group;
      };
      _this.state = {
        visible: false
      };
      return _this;
    }
    (0, _createClass2.default)(DragHeaderGroup2, [{
      key: "render",
      value: function render() {
        if (this.state.visible) {
          var props2 = this.getProps();
          var className = props2.className ? "".concat(props2.className, " InovuaReactDataGrid__drag-proxy") : "InovuaReactDataGrid__drag-proxy";
          return _react.default.createElement(_HeaderGroup.default, _objectSpread2(_objectSpread2({}, props2), {}, {
            dragging: true,
            extraChildrenProps,
            className,
            ref: this.refHeaderGroup
          }));
        }
        return null;
      }
    }]);
    return DragHeaderGroup2;
  }(_react.default.Component);
  DragHeaderGroup.default = DragHeaderGroup$1;
  return DragHeaderGroup;
}
var HeaderWrapper = {};
var Header = {};
var renderCellsMaybeLocked = {};
var hasRequiredRenderCellsMaybeLocked;
function requireRenderCellsMaybeLocked() {
  if (hasRequiredRenderCellsMaybeLocked)
    return renderCellsMaybeLocked;
  hasRequiredRenderCellsMaybeLocked = 1;
  Object.defineProperty(renderCellsMaybeLocked, "__esModule", {
    value: true
  });
  renderCellsMaybeLocked.default = void 0;
  var emptyObject = Object.freeze ? Object.freeze({}) : null;
  var addTransitionDuration = function addTransitionDuration2(cols, style) {
    var firstCol = cols[0];
    if (firstCol.inTransition) {
      var duration = firstCol.inShowTransition ? firstCol.showTransitionDuration : firstCol.hideTransitionDuration;
      duration = duration || firstCol.visibilityTransitionDuration;
      style.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
      return true;
    }
    return false;
  };
  var _default2 = function _default3(initialCells, _ref2, scrollLeft) {
    var renderLockedStartCells = _ref2.renderLockedStartCells, renderLockedEndCells = _ref2.renderLockedEndCells, lockedStartColumns = _ref2.lockedStartColumns, lockedEndColumns = _ref2.lockedEndColumns, availableWidth = _ref2.availableWidth, virtualizeColumns = _ref2.virtualizeColumns, sticky = _ref2.sticky, rowHeight = _ref2.rowHeight;
    _ref2.columns;
    var depth = _ref2.depth, data = _ref2.data, initialRowHeight = _ref2.initialRowHeight;
    _ref2.groupNestingSize;
    var nativeScroll = _ref2.nativeScroll, scrollbarWidth = _ref2.scrollbarWidth, groupProps = _ref2.groupProps, expandGroupTitle = _ref2.expandGroupTitle, computedRowExpandEnabled = _ref2.computedRowExpandEnabled, expanded = _ref2.expanded, shouldRenderCollapsedRowDetails = _ref2.shouldRenderCollapsedRowDetails, virtualListBorderLeft = _ref2.virtualListBorderLeft, virtualListBorderRight = _ref2.virtualListBorderRight, getScrollLeftMax = _ref2.getScrollLeftMax, rtl = _ref2.rtl;
    var _ref22 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : emptyObject, lockedStartContent = _ref22.lockedStartContent, lockedEndContent = _ref22.lockedEndContent, unlockedContent = _ref22.unlockedContent, isHeader = _ref22.isHeader;
    var style = arguments.length > 4 ? arguments[4] : void 0;
    var lockedStartCount = lockedStartColumns ? lockedStartColumns.length : 0;
    var lockedEndCount = lockedEndColumns ? lockedEndColumns.length : 0;
    var lockedEndStartIndex = initialCells.length - lockedEndCount;
    data && data.__group ? data.depth - 1 : depth || 0;
    var lockedStartCells = null;
    var lockedEndCells = null;
    var unlockedCells = null;
    var hasRowDetails = computedRowExpandEnabled && (expanded || shouldRenderCollapsedRowDetails);
    var lockedStartEndArgs = {
      lockedStartCount,
      isHeader,
      virtualListBorderLeft,
      lockedStartColumns,
      style,
      virtualizeColumns,
      rtl,
      getScrollLeftMax,
      addTransitionDuration,
      lockedStartContent,
      initialCells,
      sticky,
      scrollLeft,
      rowHeight,
      groupProps,
      expandGroupTitle,
      lockedEndColumns,
      nativeScroll,
      scrollbarWidth,
      virtualListBorderRight,
      lockedEndContent,
      hasRowDetails,
      initialRowHeight,
      lockedEndStartIndex,
      availableWidth
    };
    if (lockedStartCount && renderLockedStartCells) {
      lockedStartCells = renderLockedStartCells(lockedStartEndArgs);
    }
    if (lockedEndCount && renderLockedEndCells) {
      lockedEndCells = renderLockedEndCells(lockedStartEndArgs);
    }
    unlockedCells = unlockedContent || initialCells.slice(lockedStartCount, lockedEndStartIndex);
    if (lockedStartCount || lockedEndCount) {
      return [lockedStartCells, unlockedCells, lockedEndCells];
    }
    return initialCells;
  };
  renderCellsMaybeLocked.default = _default2;
  return renderCellsMaybeLocked;
}
var getCellHeader = {};
var hasRequiredGetCellHeader;
function requireGetCellHeader() {
  if (hasRequiredGetCellHeader)
    return getCellHeader;
  hasRequiredGetCellHeader = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getCellHeader, "__esModule", {
    value: true
  });
  getCellHeader.default = void 0;
  var _humanize = _interopRequireDefault2(requireHumanize());
  var _default2 = function _default3(cellProps, column2, headerProps, contextMenu) {
    var header = cellProps.header, name = cellProps.name;
    if (header !== void 0) {
      if (typeof header !== "function") {
        return header;
      }
      return header(cellProps, {
        cellProps,
        column: column2,
        headerProps,
        contextMenu
      });
    }
    return (0, _humanize.default)(name || "");
  };
  getCellHeader.default = _default2;
  return getCellHeader;
}
var hasRequiredHeader;
function requireHeader() {
  if (hasRequiredHeader)
    return Header;
  hasRequiredHeader = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getCellHeader", {
      enumerable: true,
      get: function get2() {
        return _getCellHeader.default;
      }
    });
    exports.getParentGroups = void 0;
    var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
    var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
    var _createClass2 = _interopRequireDefault2(requireCreateClass());
    var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
    var _inherits2 = _interopRequireDefault2(requireInherits$1());
    var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
    var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
    var _react = _interopRequireDefault2(reactExports);
    var _propTypes = _interopRequireDefault2(requirePropTypes());
    var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
    var _region = _interopRequireDefault2(requireRegion());
    var _selectParent = _interopRequireDefault2(requireSelectParent());
    var _uglified = _interopRequireDefault2(requireUglified());
    var _Cell = _interopRequireDefault2(requireCell());
    var _HeaderGroup = _interopRequireDefault2(requireHeaderGroup());
    var _renderCellsMaybeLocked = _interopRequireDefault2(requireRenderCellsMaybeLocked());
    var _join = _interopRequireDefault2(requireJoin());
    var _getCellHeader = _interopRequireDefault2(requireGetCellHeader());
    function ownKeys2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var emptyFn = function emptyFn2() {
    };
    var getParentGroups = function getParentGroups2(groupName, groups) {
      var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        includeSelf: false
      }, includeSelf = _ref2.includeSelf;
      var parentGroups = [];
      if (!groups) {
        return parentGroups;
      }
      var nextGroup = groups[groupName] ? groups[groups[groupName].group] : null;
      if (includeSelf && groups[groupName]) {
        parentGroups.push(groups[groupName]);
      }
      while (nextGroup) {
        parentGroups.push(nextGroup);
        nextGroup = groups[nextGroup.group];
      }
      return parentGroups;
    };
    exports.getParentGroups = getParentGroups;
    var defaultProps2 = {
      onResize: function onResize() {
      },
      showWarnings: !_uglified.default
    };
    var propTypes2 = {
      availableWidth: _propTypes.default.number,
      columnHeaderUserSelect: _propTypes.default.bool,
      columnRenderCount: _propTypes.default.number,
      columnResizeHandleWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      columnUserSelect: _propTypes.default.bool,
      columns: _propTypes.default.array,
      columnsMap: _propTypes.default.object,
      lockedStartColumns: _propTypes.default.array,
      unlockedColumns: _propTypes.default.array,
      lockedEndColumns: _propTypes.default.array,
      deselectAll: _propTypes.default.func,
      notifyColumnFilterVisibleStateChange: _propTypes.default.func,
      firstLockedEndIndex: _propTypes.default.number,
      firstLockedStartIndex: _propTypes.default.number,
      isMultiSort: _propTypes.default.bool,
      onGroupMouseDown: _propTypes.default.func,
      onResizeMouseDown: _propTypes.default.func,
      onResizeTouchStart: _propTypes.default.func,
      resizable: _propTypes.default.bool,
      resizeProxyStyle: _propTypes.default.object,
      scrollbarWidth: _propTypes.default.number,
      selectAll: _propTypes.default.func,
      selectedCount: _propTypes.default.number,
      sortInfo: _propTypes.default.any,
      sortable: _propTypes.default.bool,
      totalCount: _propTypes.default.number,
      unselectedCount: _propTypes.default.number,
      virtualListBorderLeft: _propTypes.default.number,
      virtualListBorderRight: _propTypes.default.number,
      nativeScroll: _propTypes.default.bool,
      computedShowHeaderBorderRight: _propTypes.default.any,
      hasLockedEnd: _propTypes.default.bool,
      hasLockedStart: _propTypes.default.bool,
      showColumnContextMenu: _propTypes.default.func,
      showColumnFilterContextMenu: _propTypes.default.func,
      hideColumnFilterContextMenu: _propTypes.default.func,
      onColumnHeaderFocus: _propTypes.default.func,
      showColumnMenuTool: _propTypes.default.bool,
      showColumnMenuToolOnHover: _propTypes.default.bool,
      firstUnlockedIndex: _propTypes.default.number,
      lockedRows: _propTypes.default.any,
      i18n: _propTypes.default.any,
      filterable: _propTypes.default.bool,
      filterTypes: _propTypes.default.any,
      computedGroupsDepth: _propTypes.default.number,
      computedGroupsMap: _propTypes.default.objectOf(_propTypes.default.shape({
        name: _propTypes.default.string.isRequired
      })),
      headerHeight: _propTypes.default.number,
      maxWidth: _propTypes.default.number,
      renderSortTool: _propTypes.default.func,
      minWidth: _propTypes.default.number,
      onCellMouseDown: _propTypes.default.func,
      onCellTouchStart: _propTypes.default.func,
      onCellClick: _propTypes.default.func,
      computedOnColumnFilterValueChange: _propTypes.default.func,
      onSortClick: _propTypes.default.func,
      onResize: _propTypes.default.func,
      scrollLeft: _propTypes.default.number,
      showWarnings: _propTypes.default.bool,
      unselected: _propTypes.default.any,
      virtualizeColumns: _propTypes.default.bool,
      width: _propTypes.default.number,
      updateLockedWrapperPositions: _propTypes.default.func,
      lastLockedEndIndex: _propTypes.default.number,
      lastLockedStartIndex: _propTypes.default.number,
      lastUnlockedIndex: _propTypes.default.number,
      getScrollLeftMax: _propTypes.default.func,
      rtl: _propTypes.default.bool,
      renderLockedEndCells: _propTypes.default.func,
      renderLockedStartCells: _propTypes.default.func,
      renderInPortal: _propTypes.default.any,
      onFilterValueChange: _propTypes.default.func,
      setScrollLeft: _propTypes.default.func,
      sortedColumnsInfo: _propTypes.default.any,
      renderMenuTool: _propTypes.default.func,
      columnHoverClassName: _propTypes.default.string,
      onColumnMouseEnter: _propTypes.default.func,
      onColumnMouseLeave: _propTypes.default.func,
      columnIndexHovered: _propTypes.default.number,
      enableColumnFilterContextMenu: _propTypes.default.bool,
      computedEnableColumnHover: _propTypes.default.bool,
      renderRowDetailsMoreIcon: _propTypes.default.func,
      hideColumnContextMenu: _propTypes.default.func,
      updateMenuPosition: _propTypes.default.func,
      computedFilterable: _propTypes.default.bool,
      filterRowHeight: _propTypes.default.number
    };
    var InovuaDataGridHeader = function(_React$Component) {
      (0, _inherits2.default)(InovuaDataGridHeader2, _React$Component);
      var _super = _createSuper(InovuaDataGridHeader2);
      function InovuaDataGridHeader2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaDataGridHeader2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domRef", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unlockedCells", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cells", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "columnRenderStartIndex", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startIndex", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "endIndex", 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function(prevProps) {
          if (_this.props.columnRenderCount < prevProps.columnRenderCount) {
            _this.getUnlockedCells(prevProps).forEach(function(cell) {
              cell.setStateProps(null);
            });
          }
          if (prevProps.hasLockedStart && !_this.props.hasLockedStart) {
            setTimeout(function() {
              return _this.updateColumns();
            }, 0);
          }
          if (_this.props.virtualizeColumns && prevProps.columnRenderCount !== _this.props.columnRenderCount || _this.props.selectedCount !== prevProps.selectedCount || _this.props.unselectedCount !== prevProps.unselectedCount || _this.props.columns !== prevProps.columns || _this.props.columnIndexHovered !== prevProps.columnIndexHovered || _this.props.lockedStartColumns.length !== prevProps.lockedStartColumns.length) {
            _this.setState({
              children: _this.renderColumns()
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMount", function(cellProps, c2) {
          if (cellProps.dragging) {
            return;
          }
          if (_this.props.virtualizeColumns && !cellProps.computedLocked) {
            _this.unlockedCells.push(c2);
          }
          _this.cells.push(c2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellUnmount", function(cellProps, cell) {
          if (cellProps.dragging) {
            return;
          }
          if (_this.props.virtualizeColumns && !cellProps.computedLocked) {
            if (_this.unlockedCells) {
              _this.unlockedCells = _this.unlockedCells.filter(function(c2) {
                return c2 !== cell;
              });
            }
          }
          if (_this.cells) {
            _this.cells = _this.cells.filter(function(c2) {
              return c2 !== cell;
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "findCellById", function(cellId) {
          var cellsArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.cells;
          return cellsArray.filter(function(c2) {
            return c2.getProps().id === cellId;
          })[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCells", function() {
          var result = [];
          _this.props.columns.forEach(function(c2) {
            var cell = _this.findCellById(c2.id);
            if (cell) {
              var props2 = cell.getProps();
              result[props2.computedVisibleIndex] = cell;
            }
          });
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGroupsAndCells", function() {
          var cells = _this.getCells();
          var result = [];
          var add2 = function add3(item) {
            if (result.indexOf(item) == -1) {
              result.push(item);
            }
          };
          cells.forEach(function(cell) {
            var target = cell;
            while (target && target.props.parent) {
              add2(target);
              target = target.props.parent;
            }
            if (target) {
              add2(target);
            }
          });
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setCellIndex", function(cell, index2) {
          var cellProps = _this.getPropsForCells(index2)[0];
          cell.setStateProps(cellProps);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCellIndex", function(cell) {
          return cell.getProps().index;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sortCells", function(cells) {
          return cells.sort(function(cell1, cell2) {
            return _this.getCellIndex(cell1) - _this.getCellIndex(cell2);
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getUnlockedCells", function() {
          var thisProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var lockedStartColumns = thisProps.lockedStartColumns;
          var result = [];
          thisProps.columns.forEach(function(c2) {
            var cell = _this.findCellById(c2.id, _this.unlockedCells);
            if (cell) {
              var props2 = cell.getProps();
              var index2 = props2.computedVisibleIndex - lockedStartColumns.length;
              result[index2] = cell;
            }
          });
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedCells", function() {
          return _this.sortCells(_this.getUnlockedCells());
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGaps", function(startIndex, endIndex) {
          var visibleCellPositions = {};
          _this.getSortedCells().forEach(function(cell) {
            visibleCellPositions[_this.getCellIndex(cell)] = true;
          });
          var gaps = [];
          for (; startIndex <= endIndex; startIndex++) {
            if (!visibleCellPositions[startIndex]) {
              gaps.push(startIndex);
            }
          }
          return gaps;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setColumnRenderStartIndex", function(columnRenderStartIndex) {
          _this.columnRenderStartIndex = columnRenderStartIndex;
          var renderRange = _this.getColumnRenderRange();
          if (!renderRange) {
            return;
          }
          var start = renderRange.start, end = renderRange.end;
          var gaps = _this.getGaps(start, end);
          if (!gaps.length) {
            return;
          }
          _this.getUnlockedCells().forEach(function(cell) {
            var cellProps = cell.getProps();
            var cellIndex = cellProps.computedVisibleIndex, computedLocked = cellProps.computedLocked;
            if (computedLocked) {
              return;
            }
            var outOfView = cellIndex < start || cellIndex > end;
            var newIndex;
            if (outOfView && gaps.length) {
              newIndex = gaps[gaps.length - 1];
              _this.setCellIndex(cell, newIndex);
              gaps.length -= 1;
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getColumnRenderRange", function() {
          var _this$props = _this.props, columnRenderCount = _this$props.columnRenderCount, lockedStartColumns = _this$props.lockedStartColumns, lockedEndColumns = _this$props.lockedEndColumns, virtualizeColumns = _this$props.virtualizeColumns, columns = _this$props.columns;
          if (!virtualizeColumns) {
            return null;
          }
          var minStartIndex = lockedStartColumns.length;
          var maxEndIndex = columns.length - lockedEndColumns.length - 1;
          var columnRenderStartIndex = _this.columnRenderStartIndex == null ? _this.props.columnRenderStartIndex || 0 : _this.columnRenderStartIndex;
          columnRenderStartIndex = Math.max(columnRenderStartIndex, minStartIndex);
          if (columnRenderCount != null) {
            var columnRenderEndIndex = columnRenderStartIndex + columnRenderCount;
            columnRenderEndIndex = Math.min(columnRenderEndIndex, maxEndIndex);
            if (columnRenderEndIndex - columnRenderCount != columnRenderStartIndex) {
              columnRenderStartIndex = Math.max(columnRenderEndIndex - columnRenderCount, minStartIndex);
            }
            return {
              start: columnRenderStartIndex,
              end: columnRenderEndIndex
            };
          }
          return null;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareStyle", function(props2) {
          var headerHeight = props2.headerHeight, width = props2.width, minWidth = props2.minWidth, index2 = props2.index;
          var style = _objectSpread2({}, props2.style);
          if (width || minWidth) {
            if (width) {
              style.width = Math.max(width, minWidth || 0);
            }
            if (minWidth) {
              style.minWidth = minWidth;
            }
          }
          if (headerHeight) {
            style.height = headerHeight;
            if (props2.computedFilterable) {
              style.height += props2.filterRowHeight;
            }
          }
          style.zIndex = style.zIndex || 100 - (index2 || 0);
          var scrollLeft = _this.props.scrollLeft != null ? _this.props.scrollLeft : _this.scrollLeft;
          var transformPos = _this.props.rtl ? _this.props.getScrollLeftMax() - scrollLeft : -scrollLeft;
          style.transform = "translate3d(".concat(transformPos || 0, "px, 0px, 0px)");
          return style;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "notifyScrollLeftMax", function(scrollLeftMax) {
          var resizerClassName = "InovuaReactDataGrid__column-resizer";
          var lastUnlockedResizer = _this.getDOMNode().querySelector(".".concat(resizerClassName, "--last-unlocked"));
          if (lastUnlockedResizer) {
            var columnResizeHandleWidth = _this.props.columnResizeHandleWidth;
            var remaining = scrollLeftMax - (_this.scrollLeft + columnResizeHandleWidth / 2);
            var visible = remaining <= 0;
            lastUnlockedResizer.style.pointerEvents = visible ? "auto" : "none";
            var classList = lastUnlockedResizer.classList;
            if (classList && classList.add && classList.remove) {
              if (visible) {
                classList.add("".concat(resizerClassName, "--active"));
              } else {
                classList.remove("".concat(resizerClassName, "--active"));
              }
            } else {
              lastUnlockedResizer.style.zIndex = visible ? 5e3 : 2e3;
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function(scrollLeft, scrollLeftMax) {
          _this.scrollLeft = scrollLeft;
          var node2 = _this.props.hasLocked ? _this.getDOMNode().querySelector(".InovuaReactDataGrid__unlocked-wrapper") : _this.getDOMNode();
          if (node2) {
            var transformPos = _this.props.rtl ? _this.props.getScrollLeftMax() - scrollLeft : -scrollLeft;
            node2.style.transform = "translate3d(".concat(transformPos, "px, 0px, 0px)");
          }
          if (_this.props.updateLockedWrapperPositions) {
            _this.props.updateLockedWrapperPositions.call((0, _assertThisInitialized2.default)(_this), _this.props, scrollLeft, {
              isHeader: true
            });
          }
          if (_this.props.virtualizeColumns) {
            _this.maybeUpdateColumns();
            if (scrollLeft === 0 || scrollLeft === scrollLeftMax) {
              requestAnimationFrame(function() {
                return _this.maybeUpdateColumns();
              });
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maybeUpdateColumns", function() {
          var range2 = _this.getColumnRenderRange();
          if (range2 && range2.start !== _this.startIndex && range2.end !== _this.endIndex) {
            _this.updateColumns();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateColumns", function() {
          var newColumns = _this.renderColumns();
          _this.setState({
            children: newColumns
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function(event2) {
          var body = (0, _selectParent.default)(".InovuaReactDataGrid__body", event2.target);
          if (!body) {
            return;
          }
          var OFFSET = 15;
          var headerRegion = _region.default.from(body);
          var targetRegion = _region.default.from(event2.target);
          var scrollLeft = _this.scrollLeft || _this.props.scrollLeft || 0;
          if (!headerRegion.containsRegion(targetRegion)) {
            if (targetRegion.left < headerRegion.left) {
              var diff = headerRegion.left - targetRegion.left;
              var newScrollLeft = scrollLeft - (diff + OFFSET);
              _this.props.setScrollLeft(newScrollLeft);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPropsForCells", function(startIndex) {
          var endIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : startIndex + 1;
          var props2 = _this.props;
          var renderInPortal = props2.renderInPortal, columnHeaderUserSelect = props2.columnHeaderUserSelect, columnResizeHandleWidth = props2.columnResizeHandleWidth, columnUserSelect = props2.columnUserSelect, data = props2.data, showColumnContextMenu = props2.showColumnContextMenu, showColumnFilterContextMenu = props2.showColumnFilterContextMenu, hideColumnFilterContextMenu = props2.hideColumnFilterContextMenu, deselectAll = props2.deselectAll, notifyColumnFilterVisibleStateChange = props2.notifyColumnFilterVisibleStateChange, firstLockedEndIndex = props2.firstLockedEndIndex, firstUnlockedIndex = props2.firstUnlockedIndex, filterable = props2.filterable, computedShowHeaderBorderRight = props2.computedShowHeaderBorderRight, hasLockedEnd = props2.hasLockedEnd, hasLockedStart = props2.hasLockedStart, lockedEndColumns = props2.lockedEndColumns, nativeScroll = props2.nativeScroll, resizeProxyStyle = props2.resizeProxyStyle, rtl = props2.rtl, i18n = props2.i18n, scrollbarWidth = props2.scrollbarWidth, selectAll = props2.selectAll, selectedCount = props2.selectedCount, filterTypes2 = props2.filterTypes, totalCount = props2.totalCount, renderSortTool2 = props2.renderSortTool, unselectedCount = props2.unselectedCount, virtualizeColumns = props2.virtualizeColumns, showColumnMenuTool = props2.showColumnMenuTool, showColumnMenuToolOnHover = props2.showColumnMenuToolOnHover, lastUnlockedIndex = props2.lastUnlockedIndex, lastLockedStartIndex = props2.lastLockedStartIndex, lastLockedEndIndex = props2.lastLockedEndIndex, theme2 = props2.theme, renderMenuTool2 = props2.renderMenuTool, sortedColumnsInfo = props2.sortedColumnsInfo, onColumnMouseEnter = props2.onColumnMouseEnter, onColumnMouseLeave = props2.onColumnMouseLeave, columnIndexHovered = props2.columnIndexHovered, columnHoverClassName = props2.columnHoverClassName, enableColumnFilterContextMenu = props2.enableColumnFilterContextMenu, computedEnableColumnHover = props2.computedEnableColumnHover, renderRowDetailsMoreIcon = props2.renderRowDetailsMoreIcon, hideColumnContextMenu = props2.hideColumnContextMenu, updateMenuPosition = props2.updateMenuPosition, filterRowHeight = props2.filterRowHeight;
          var columns = props2.columns;
          if (startIndex !== void 0) {
            columns = columns.slice(startIndex, endIndex);
          }
          var firstLockedIndex = hasLockedEnd ? props2.columns.length - lockedEndColumns.length : -1;
          return columns.map(function(column2, i) {
            var sortableColumn = column2.computedSortable, resizableColumn = column2.computedResizable;
            var isSortable = sortableColumn;
            var isResizable = resizableColumn;
            var cellStyle = column2.style;
            if (props2.headerHeight) {
              if (column2.style) {
                cellStyle = Object.assign({}, cellStyle);
              }
              if (!cellStyle) {
                cellStyle = {};
              }
              cellStyle.height = props2.headerHeight;
              if (props2.computedFilterable) {
                cellStyle.height += props2.filterRowHeight;
              }
            }
            var defaults2 = {
              filterable,
              renderSortTool: renderSortTool2,
              renderMenuTool: renderMenuTool2,
              showColumnMenuTool,
              showColumnMenuToolOnHover
            };
            if (columnUserSelect !== void 0) {
              defaults2.userSelect = columnUserSelect;
            }
            if (columnHeaderUserSelect !== void 0) {
              defaults2.headerUserSelect = columnHeaderUserSelect;
            }
            var displayColumnFilterContextMenu = enableColumnFilterContextMenu;
            if (column2.enableColumnFilterContextMenu != null) {
              displayColumnFilterContextMenu = column2.enableColumnFilterContextMenu;
            }
            var cellProps = Object.assign(defaults2, column2, {
              headerCell: true,
              headerHeight: props2.headerHeight,
              i18n,
              selectedCount,
              unselectedCount,
              totalCount,
              showColumnContextMenu,
              showColumnFilterContextMenu,
              hideColumnFilterContextMenu,
              selectAll,
              deselectAll,
              style: cellStyle,
              resizeProxyStyle,
              renderInPortal,
              lastUnlockedIndex,
              lastLockedStartIndex,
              lastLockedEndIndex,
              notifyColumnFilterVisibleStateChange,
              filterTypes: filterTypes2,
              onFilterValueChange: _this.onFilterValueChange,
              lastUnlocked: column2.computedVisibleIndex === firstLockedIndex - 1,
              columnResizeHandleWidth,
              virtualizeColumns,
              rtl,
              onResizeMouseDown: props2.onResizeMouseDown,
              onResizeTouchStart: props2.onResizeTouchStart,
              onMouseDown: _this.onCellMouseDown,
              onTouchStart: _this.onCellTouchStart,
              computedSortable: isSortable,
              computedResizable: isResizable,
              hasLockedStart,
              nativeScroll,
              scrollbarWidth,
              data,
              theme: theme2,
              sortedColumnsInfo,
              onColumnMouseEnter,
              onColumnMouseLeave,
              columnIndex: i,
              columnIndexHovered,
              columnHoverClassName,
              enableColumnFilterContextMenu: displayColumnFilterContextMenu,
              computedEnableColumnHover,
              renderRowDetailsMoreIcon,
              hideColumnContextMenu,
              updateMenuPosition,
              filterRowHeight
            });
            cellProps.onFocus = _this.onHeaderCellFocus.bind((0, _assertThisInitialized2.default)(_this), cellProps, column2);
            if (cellProps.group) {
              cellProps.parentGroups = getParentGroups(cellProps.group, _this.props.computedGroupsMap, {
                includeSelf: true
              });
            }
            if (props2.onCellClick) {
              cellProps.onClick = props2.onCellClick;
            }
            if (cellProps.visibilityTransitionDuration || cellProps.hideTransitionDuration || cellProps.showTransitionDuration) {
              cellProps.onTransitionEnd = _this.onTransitionEnd.bind((0, _assertThisInitialized2.default)(_this), cellProps, column2);
            }
            cellProps.onSortClick = (props2.onSortClick || emptyFn).bind(null, cellProps);
            cellProps.value = (0, _getCellHeader.default)(cellProps, column2, props2);
            cellProps.onUnmount = _this.onCellUnmount;
            cellProps.onMount = _this.onCellMount;
            var showBorderLeft = cellProps.showBorderLeft, showBorderRight = cellProps.showBorderRight;
            cellProps.showBorderRight = cellProps.computedLocked === "start" && cellProps.computedVisibleIndex == firstUnlockedIndex - 1 || computedShowHeaderBorderRight && column2.computedVisibleIndex === column2.computedVisibleCount - 1;
            cellProps.lastInSection = cellProps.computedLocked === "start" ? cellProps.computedVisibleIndex === lastLockedStartIndex : cellProps.computedLocked === "end" ? cellProps.computedVisibleIndex === lastLockedEndIndex : cellProps.computedVisibleIndex === lastUnlockedIndex;
            cellProps.firstInSection = cellProps.computedLocked === "start" ? cellProps.computedVisibleIndex == 0 : cellProps.computedLocked === "end" ? cellProps.computedVisibleIndex === firstLockedEndIndex : cellProps.computedVisibleIndex === firstUnlockedIndex;
            cellProps.showBorderLeft = cellProps.computedLocked === "end" ? cellProps.computedVisibleIndex >= firstLockedEndIndex : cellProps.computedLocked === "start" ? cellProps.computedVisibleIndex > 0 : cellProps.computedVisibleIndex > firstUnlockedIndex;
            var prevColumn = columns[i - 1];
            var nextColumn = columns[i + 1];
            if (prevColumn && prevColumn.nextBorderLeft !== void 0) {
              cellProps.showBorderLeft = prevColumn.nextBorderLeft;
            }
            if (nextColumn && nextColumn.prevBorderRight !== void 0) {
              cellProps.showBorderRight = nextColumn.prevBorderRight;
            }
            if (showBorderLeft !== void 0) {
              cellProps.showBorderLeft = showBorderLeft;
            }
            if (showBorderRight !== void 0) {
              cellProps.showBorderRight = showBorderRight;
            }
            return cellProps;
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onHeaderCellFocus", function(headerCellProps, column2, e2) {
          if (_this.props.onColumnHeaderFocus) {
            _this.props.onColumnHeaderFocus(headerCellProps, column2, e2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTransitionEnd", function(cellProps, column2, e2) {
          e2.stopPropagation();
          if (column2.onTransitionEnd) {
            column2.onTransitionEnd(e2);
          }
          if (_this.props.onTransitionEnd) {
            _this.props.onTransitionEnd(e2, cellProps);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellMouseDown", function(headerCellProps, event2) {
          if (_this.props.onCellMouseDown) {
            _this.props.onCellMouseDown(headerCellProps, event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onCellTouchStart", function(headerCellProps, event2) {
          if (_this.props.onCellTouchStart) {
            _this.props.onCellTouchStart(headerCellProps, event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderColumns", function() {
          var _result2;
          var props2 = _this.props;
          var groups = props2.computedGroupsMap, hasLockedStart = props2.hasLockedStart, hasLockedEnd = props2.hasLockedEnd, lockedStartColumns = props2.lockedStartColumns, lockedEndColumns = props2.lockedEndColumns, columns = props2.columns;
          var renderRange = _this.getColumnRenderRange();
          _this.startIndex = renderRange === null || renderRange === void 0 ? void 0 : renderRange.start;
          _this.endIndex = renderRange === null || renderRange === void 0 ? void 0 : renderRange.end;
          var cellProps = renderRange ? _this.getPropsForCells(renderRange.start, renderRange.end + 1) : _this.getPropsForCells();
          var lockedStartCells;
          var lockedEndCells;
          if (renderRange) {
            if (hasLockedStart) {
              lockedStartCells = _this.getPropsForCells(0, lockedStartColumns.length);
            }
            if (hasLockedEnd) {
              lockedEndCells = _this.getPropsForCells(columns.length - lockedEndColumns.length, columns.length);
            }
          }
          if (groups) {
            if (hasLockedStart || hasLockedEnd) {
              if (hasLockedStart) {
                lockedStartCells = lockedStartCells || _this.getPropsForCells(0, lockedStartColumns.length);
                lockedStartCells = _this.renderGroupedCells(lockedStartCells);
              }
              if (hasLockedEnd) {
                lockedEndCells = lockedEndCells || _this.getPropsForCells(columns.length - lockedEndColumns.length, columns.length);
                lockedEndCells = _this.renderGroupedCells(lockedEndCells);
              }
              var unlockedCells = renderRange ? cellProps : _this.getPropsForCells(lockedStartColumns.length, columns.length - lockedEndColumns.length);
              unlockedCells = _this.renderGroupedCells(unlockedCells);
              return (0, _renderCellsMaybeLocked.default)([], _this.props, props2.scrollLeft, {
                lockedStartContent: lockedStartCells,
                lockedEndContent: lockedEndCells,
                unlockedContent: unlockedCells,
                isHeader: true
              });
            }
            return _this.renderGroupedCells(cellProps);
          }
          var result = [];
          if (hasLockedStart && lockedStartCells) {
            var _result;
            (_result = result).push.apply(_result, (0, _toConsumableArray2.default)(lockedStartCells));
          }
          (_result2 = result).push.apply(_result2, (0, _toConsumableArray2.default)(cellProps));
          if (hasLockedEnd && lockedEndCells) {
            var _result3;
            (_result3 = result).push.apply(_result3, (0, _toConsumableArray2.default)(lockedEndCells));
          }
          result = result.map(function(cProps, i) {
            var index2 = (renderRange === null || renderRange === void 0 ? void 0 : renderRange.start) + i;
            return _react.default.createElement(_Cell.default, _objectSpread2(_objectSpread2({}, cProps), {}, {
              timestamp: Date.now(),
              key: "".concat(index2, "__").concat(cProps.id),
              left: _this.props.columnWidthPrefixSums[index2]
            }));
          });
          return (0, _renderCellsMaybeLocked.default)(result, _this.props, props2.scrollLeft, {
            isHeader: true
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCellDOMNodeAt", function(index2) {
          var _this$props2 = _this.props, columns = _this$props2.columns, showWarnings = _this$props2.showWarnings, virtualizeColumns = _this$props2.virtualizeColumns;
          var column2 = columns[index2];
          if (!column2) {
            return null;
          }
          var arr = column2.computedLocked || !virtualizeColumns ? _this.getCells() : _this.getUnlockedCells();
          var cell = arr.filter(function(c2) {
            return c2.getProps().computedVisibleIndex === index2;
          })[0];
          if (!cell && showWarnings) {
            console.error("Cannot find dom cell at ".concat(index2, "."));
          }
          if (cell) {
            return cell.getDOMNode ? cell.getDOMNode() : cell.domRef ? cell.domRef.current : null;
          }
          return;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHeaderGroup", function(groupName, groupItems2, _) {
          var _this$props3 = _this.props, groups = _this$props3.computedGroupsMap, columnsMap = _this$props3.columnsMap, hasLockedEnd = _this$props3.hasLockedEnd, lockedStartColumns = _this$props3.lockedStartColumns, lockedEndColumns = _this$props3.lockedEndColumns, firstLockedEndIndex = _this$props3.firstLockedEndIndex, lastLockedStartIndex = _this$props3.lastLockedStartIndex, lastLockedEndIndex = _this$props3.lastLockedEndIndex, firstUnlockedIndex = _this$props3.firstUnlockedIndex, lastUnlockedIndex = _this$props3.lastUnlockedIndex, resizeProxyStyle = _this$props3.resizeProxyStyle, rtl = _this$props3.rtl;
          var group = groups[groupName];
          var parentGroups = getParentGroups(groupName, groups);
          var depth = group ? group.computedDepth : 0;
          var columns = groupItems2.filter(function(x2) {
            return !!x2;
          }).reduce(function(acc, item) {
            if (item.type == _HeaderGroup.default) {
              acc.push.apply(acc, (0, _toConsumableArray2.default)(item.props.columns));
            } else {
              acc.push(item.props.id);
            }
            return acc;
          }, []);
          var style = {
            width: columns.reduce(function(width, colId) {
              return width + columnsMap[colId].computedWidth;
            }, 0)
          };
          var resizable = group && group.resizable !== void 0 ? group.resizable : _this.props.resizable;
          var allColumnsUnresizable = columns.reduce(function(acc, colId) {
            return acc && columnsMap[colId].computedResizable === false;
          }, true);
          if (allColumnsUnresizable) {
            resizable = false;
          }
          var firstColumn = columnsMap[columns[0]];
          var lastColumn = columnsMap[columns[columns.length - 1]];
          var firstIndex = firstColumn.computedVisibleIndex;
          var lastIndex = lastColumn.computedVisibleIndex;
          var showBorderLeft = firstIndex >= lockedStartColumns.length ? firstIndex > lockedStartColumns.length || firstColumn.computedLocked === "end" : firstIndex > 0;
          var containsLastColumn = lastColumn.computedVisibleIndex === _this.props.columns.length - 1;
          var showBorderRight = lastColumn.computedVisibleIndex === lockedStartColumns.length - 1;
          var adjustResizer = hasLockedEnd && lastColumn.computedVisibleIndex === _this.props.columns.length - lockedEndColumns.length - 1;
          var firstInSection = firstColumn.computedLocked === "start" ? firstIndex === 0 : firstColumn.computedLocked === "end" ? firstIndex == firstLockedEndIndex : firstIndex === firstUnlockedIndex;
          var lastInSection = lastColumn.computedLocked === "start" ? lastIndex === lastLockedStartIndex : lastColumn.computedLocked === "end" ? lastIndex == lastLockedEndIndex : lastIndex === lastUnlockedIndex;
          if (firstColumn.inTransition) {
            var duration = firstColumn.inShowTransition ? firstColumn.showTransitionDuration : firstColumn.hideTransitionDuration;
            duration = duration || firstColumn.visibilityTransitionDuration;
            style.transitionDuration = typeof duration == "number" ? "".concat(duration, "ms") : duration;
          }
          var key = "".concat(groupName, "-").concat(depth, "-").concat(columns.join("-"));
          return _react.default.createElement(_HeaderGroup.default, {
            key,
            depth,
            group,
            style,
            rtl,
            firstIndex,
            lastUnlockedIndex: _this.props.lastUnlockedIndex,
            lastLockedStartIndex: _this.props.lastLockedStartIndex,
            lastLockedEndIndex: _this.props.lastLockedEndIndex,
            filterable: _this.props.filterable,
            inTransition: firstColumn.inTransition,
            inShowTransition: firstColumn.inShowTransition,
            inHideTransition: firstColumn.inHideTransition,
            showTransitionDuration: firstColumn.showTransitionDuration,
            hideTransitionDuration: firstColumn.hideTransitionDuration,
            visibilityTransitionDuration: firstColumn.visibilityTransitionDuration,
            onMouseDown: _this.props.onGroupMouseDown,
            columns,
            resizeProxyStyle,
            locked: lastColumn.computedLocked === "start" ? "start" : firstColumn.computedLocked === "end" ? "end" : false,
            parentGroups,
            containsLastColumn,
            firstInSection,
            lastInSection,
            adjustResizer,
            showBorderLeft,
            showBorderRight,
            children: groupItems2,
            resizable,
            columnResizeHandleWidth: _this.props.columnResizeHandleWidth,
            onResizeMouseDown: _this.onResizeMouseDown,
            onResizeTouchStart: _this.onResizeTouchStart
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function(groupProps, headerGroupInstance, event2) {
          if (_this.props.onResizeMouseDown) {
            var colId = groupProps.columns[groupProps.columns.length - 1];
            var visibleIndex = _this.props.columnsMap[colId].computedVisibleIndex;
            _this.props.onResizeMouseDown({
              visibleIndex,
              computedVisibleIndex: visibleIndex
            }, {
              colHeaderNode: headerGroupInstance.domRef ? headerGroupInstance.domRef.current : null,
              event: event2,
              groupColumns: groupProps.columns
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function(groupProps, headerGroupInstance, event2) {
          if (_this.props.onResizeTouchStart) {
            var colId = groupProps.columns[groupProps.columns.length - 1];
            var visibleIndex = _this.props.columnsMap[colId].computedVisibleIndex;
            _this.props.onResizeTouchStart({
              visibleIndex
            }, {
              colHeaderNode: headerGroupInstance.domRef ? headerGroupInstance.domRef.current : null,
              event: event2,
              groupColumns: groupProps.columns
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemsForDepth", function(items, depth) {
          return items.map(function(item) {
            return item.props.depth === depth ? item : null;
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderItems", function(items) {
          var computedGroupsDepth = _this.props.computedGroupsDepth;
          var currentDepth = computedGroupsDepth + 1;
          while (currentDepth > 0) {
            items = _this.groupItemsForDepth(items, currentDepth);
            currentDepth--;
          }
          return items;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "groupItemsForDepth", function(items, depth) {
          var depthItems = _this.getItemsForDepth(items, depth);
          var index2 = 0;
          var item = depthItems[index2];
          var currentGroupName = _this.getItemGroupName(item);
          var itemGroupName;
          var groupItems2;
          var headerGroup;
          var groupStartIndex = 0;
          var len = depthItems.length + 1;
          while (index2 <= len) {
            itemGroupName = _this.getItemGroupName(item);
            if (currentGroupName == null && itemGroupName != null) {
              groupStartIndex = index2;
              currentGroupName = itemGroupName;
            } else if (itemGroupName != currentGroupName) {
              groupItems2 = items.slice(groupStartIndex, index2);
              headerGroup = _this.renderHeaderGroup(currentGroupName, groupItems2);
              items.splice(groupStartIndex, groupItems2.length, headerGroup);
              depthItems.splice(groupStartIndex, groupItems2.length, headerGroup);
              index2 = groupStartIndex;
              currentGroupName = null;
            }
            index2++;
            item = depthItems[index2];
          }
          return items;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getItemGroupName", function(item) {
          if (!item) {
            return null;
          }
          var groups = _this.props.computedGroupsMap;
          var groupName;
          if (item.type == _HeaderGroup.default) {
            groupName = item.props.group ? item.props.group.group : null;
          } else {
            groupName = item.props.group;
          }
          var group = groups[groupName];
          return group ? group.name || "" : "";
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "fixDepth", function(item, depthDiff) {
          while (depthDiff >= 0) {
            item = _this.renderHeaderGroup(_this.getItemGroupName(item), [item], {
              depth: item.props.depth - 1,
              forceHeader: true
            });
            depthDiff--;
          }
          return item;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderGroupedCells", function(cellProps) {
          var _this$props4 = _this.props, groups = _this$props4.computedGroupsMap, showWarnings = _this$props4.showWarnings;
          var items = cellProps.map(function(props2) {
            var group = groups[props2.group];
            if (showWarnings && props2.group && !group) {
              _this.warn('Column "'.concat(props2.id, '" references group "').concat(props2.group, '", but the group is never defined in the groups prop.'));
            }
            var depth = group ? group.computedDepth + 1 : 0;
            return _react.default.createElement(_Cell.default, _objectSpread2(_objectSpread2({}, props2), {}, {
              key: props2.id,
              depth,
              timestamp: Date.now()
            }));
          });
          return _this.renderItems(items);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFilterValueChange", function(filterValue, cellProps) {
          if (_this.props.onFilterValueChange) {
            _this.props.onFilterValueChange({
              filterValue,
              columnId: cellProps.id,
              columnIndex: cellProps.computedVisibleIndex,
              cellProps
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "warn", function(msg) {
          console.error(msg);
        });
        _this.cells = [];
        _this.unlockedCells = [];
        _this.startIndex = 0;
        _this.endIndex = 0;
        _this.domRef = _react.default.createRef();
        _this.state = {
          children: _this.renderColumns()
        };
        return _this;
      }
      (0, _createClass2.default)(InovuaDataGridHeader2, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.cells = null;
          this.unlockedCells = null;
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          var _this$domRef;
          return (_this$domRef = this.domRef) === null || _this$domRef === void 0 ? void 0 : _this$domRef.current;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var rtl = props2.rtl, virtualizeColumns = props2.virtualizeColumns;
          var className = (0, _join.default)("InovuaReactDataGrid__header", "InovuaReactDataGrid__header--direction-".concat(rtl ? "rtl" : "ltr"), props2.className);
          var style = this.prepareStyle(props2);
          var children = virtualizeColumns ? this.state.children : this.renderColumns();
          var cleanedProps = (0, _reactCleanProps.default)(props2, InovuaDataGridHeader2.propTypes);
          delete cleanedProps.columnWidthPrefixSums;
          return _react.default.createElement("div", _objectSpread2(_objectSpread2({}, cleanedProps), {}, {
            className,
            data: null,
            style,
            ref: this.domRef,
            onFocus: this.onFocus
          }), children);
        }
      }]);
      return InovuaDataGridHeader2;
    }(_react.default.Component);
    exports.default = InovuaDataGridHeader;
    (0, _defineProperty2.default)(InovuaDataGridHeader, "defaultProps", defaultProps2);
    (0, _defineProperty2.default)(InovuaDataGridHeader, "propTypes", propTypes2);
  })(Header);
  return Header;
}
var hasRequiredHeaderWrapper;
function requireHeaderWrapper() {
  if (hasRequiredHeaderWrapper)
    return HeaderWrapper;
  hasRequiredHeaderWrapper = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(HeaderWrapper, "__esModule", {
    value: true
  });
  HeaderWrapper.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  var _Header = _interopRequireDefault2(requireHeader());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var fixScrollLeft = function fixScrollLeft2(event2) {
    var target = event2.currentTarget;
    requestAnimationFrame(function() {
      if (target.scrollLeft) {
        target.scrollLeft = 0;
      }
    });
  };
  var HeaderWrapper$1 = function(_React$Component) {
    (0, _inherits2.default)(HeaderWrapper2, _React$Component);
    var _super = _createSuper(HeaderWrapper2);
    function HeaderWrapper2() {
      var _this;
      (0, _classCallCheck2.default)(this, HeaderWrapper2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedColumnsInfo", function(_ref2) {
        var computedSortInfo = _ref2.computedSortInfo, columnsMap = _ref2.columnsMap;
        if (!computedSortInfo) {
          return;
        }
        var sortedColumnsInfo = [];
        if (Array.isArray(computedSortInfo)) {
          computedSortInfo.map(function(sortInfo) {
            sortedColumnsInfo.push(columnsMap[sortInfo.columnName || sortInfo.name]);
          });
        } else {
          return columnsMap[computedSortInfo.columnName];
        }
        return sortedColumnsInfo;
      });
      return _this;
    }
    (0, _createClass2.default)(HeaderWrapper2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var data = props2.data, deselectAll = props2.deselectAll, computedShowHeaderBorderRight = props2.computedShowHeaderBorderRight, headerProps = props2.headerProps, filterTypes2 = props2.filterTypes, filterable = props2.filterable, isMultiSort = props2.isMultiSort, nativeScroll = props2.nativeScroll, resizable = props2.resizable, resizeProxyStyle = props2.resizeProxyStyle, scrollLeft = props2.scrollLeft, scrollbars = props2.scrollbars, selectAll = props2.selectAll, selected = props2.computedSelected, unselected = props2.computedUnselected, selectedCount = props2.computedSelectedCount, sortInfo = props2.sortInfo, sortable = props2.sortable, renderSortTool2 = props2.renderSortTool, totalCount = props2.paginationCount, unselectedCount = props2.computedUnselectedCount, virtualListBorderLeft = props2.virtualListBorderLeft, virtualListBorderRight = props2.virtualListBorderRight, columns = props2.visibleColumns, lastLockedStartIndex = props2.lastLockedStartIndex, lastLockedEndIndex = props2.lastLockedEndIndex, lastUnlockedIndex = props2.lastUnlockedIndex, updateLockedWrapperPositions = props2.updateLockedWrapperPositions, theme2 = props2.theme, columnWidthPrefixSums = props2.columnWidthPrefixSums, renderMenuTool2 = props2.renderMenuTool, computedSortInfo = props2.computedSortInfo, columnsMap = props2.columnsMap, columnIndexHovered = props2.columnIndexHovered, onColumnMouseEnter = props2.onColumnMouseEnter, onColumnMouseLeave = props2.onColumnMouseLeave, columnHoverClassName = props2.columnHoverClassName, enableColumnFilterContextMenu = props2.enableColumnFilterContextMenu, computedEnableColumnHover = props2.computedEnableColumnHover, renderRowDetailsMoreIcon = props2.renderRowDetailsMoreIcon, hideColumnContextMenu = props2.hideColumnContextMenu, updateMenuPosition = props2.updateMenuPosition;
        var scrollbarWidth = 0;
        if (nativeScroll && scrollbars.vertical) {
          scrollbarWidth = (0, _getScrollbarWidth.default)();
        }
        var sortedColumnsInfo = this.getSortedColumnsInfo({
          computedSortInfo,
          columnsMap
        });
        var headerHeight = !props2.computedGroups ? props2.headerHeight : void 0;
        return _react.default.createElement("div", {
          className: "InovuaReactDataGrid__header-wrapper InovuaReactDataGrid__header-wrapper--direction-".concat(this.props.rtl ? "rtl" : "ltr"),
          onFocus: fixScrollLeft
        }, nativeScroll && this.props.rtl ? _react.default.createElement("div", {
          className: "InovuaReactDataGrid__header-rtl-scroll-spacer",
          style: {
            minWidth: scrollbarWidth,
            display: scrollbarWidth ? "block" : "none"
          }
        }) : null, _react.default.createElement(_Header.default, _objectSpread2(_objectSpread2({}, headerProps), {}, {
          notifyColumnFilterVisibleStateChange: props2.notifyColumnFilterVisibleStateChange,
          setScrollLeft: props2.setScrollLeft,
          getScrollLeftMax: props2.getScrollLeftMax,
          availableWidth: props2.availableWidth,
          lockedRows: props2.lockedRows,
          rtl: props2.rtl,
          i18n: props2.i18n,
          lastLockedStartIndex,
          lastLockedEndIndex,
          lastUnlockedIndex,
          columnHeaderUserSelect: props2.columnHeaderUserSelect,
          columnRenderCount: props2.columnRenderCount,
          columnResizeHandleWidth: props2.columnResizeHandleWidth,
          columnUserSelect: props2.columnUserSelect,
          renderInPortal: props2.renderInPortal,
          columns,
          columnsMap: props2.columnsMap,
          data,
          filterTypes: filterTypes2,
          showColumnMenuTool: props2.showColumnMenuTool,
          showColumnMenuToolOnHover: props2.showColumnMenuToolOnHover,
          deselectAll,
          firstLockedEndIndex: props2.firstLockedEndIndex,
          firstUnlockedIndex: props2.firstUnlockedIndex,
          computedGroupsMap: props2.computedGroupsMap,
          computedGroupsDepth: props2.computedGroupsDepth,
          onColumnHeaderFocus: props2.onColumnHeaderFocus,
          filterable,
          showColumnContextMenu: props2.showColumnContextMenu,
          showColumnFilterContextMenu: props2.showColumnFilterContextMenu,
          hideColumnFilterContextMenu: props2.hideColumnFilterContextMenu,
          computedShowHeaderBorderRight,
          hasLockedEnd: props2.hasLockedEnd,
          hasLockedStart: props2.hasLockedStart,
          headerHeight,
          isMultiSort,
          lockedEndColumns: props2.lockedEndColumns,
          lockedStartColumns: props2.lockedStartColumns,
          minWidth: props2.minRowWidth,
          nativeScroll,
          onCellClick: props2.onHeaderCellClick,
          onGroupMouseDown: props2.onHeaderGroupMouseDown,
          onCellMouseDown: props2.onHeaderCellMouseDown,
          onCellTouchStart: props2.onHeaderCellTouchStart,
          onResizeMouseDown: props2.onResizeMouseDown,
          onResizeTouchStart: props2.onResizeTouchStart,
          onSortClick: props2.onHeaderSortClick,
          onTransitionEnd: props2.onTransitionEnd,
          ref: props2.refHeader,
          renderSortTool: renderSortTool2,
          resizable,
          resizeProxyStyle,
          scrollLeft,
          scrollbarWidth,
          selectAll,
          selectedCount,
          selected,
          unselected,
          sortInfo,
          sortable,
          totalCount,
          theme: theme2,
          renderLockedStartCells: props2.renderLockedStartCells,
          renderLockedEndCells: props2.renderLockedEndCells,
          onFilterValueChange: props2.onFilterValueChange,
          unselectedCount,
          virtualListBorderLeft,
          virtualListBorderRight,
          updateLockedWrapperPositions,
          virtualizeColumns: props2.virtualizeColumns && !!headerHeight && !props2.computedGroups,
          columnWidthPrefixSums,
          renderMenuTool: renderMenuTool2,
          sortedColumnsInfo,
          columnIndexHovered,
          onColumnMouseEnter,
          onColumnMouseLeave,
          columnHoverClassName,
          enableColumnFilterContextMenu,
          computedEnableColumnHover,
          renderRowDetailsMoreIcon,
          hideColumnContextMenu,
          updateMenuPosition,
          computedFilterable: props2.computedFilterable,
          filterRowHeight: props2.filterRowHeight
        })), _react.default.createElement("div", {
          className: "InovuaReactDataGrid__header-wrapper__fill"
        }, props2.computedFilterable && _react.default.createElement("div", {
          className: "InovuaReactDataGrid__header-wrapper__fill__filters"
        })));
      }
    }]);
    return HeaderWrapper2;
  }(_react.default.Component);
  HeaderWrapper.default = HeaderWrapper$1;
  HeaderWrapper$1.propTypes = {
    visibleColumns: _propTypes.default.array.isRequired,
    columnsMap: _propTypes.default.object.isRequired,
    deselectAll: _propTypes.default.func,
    headerHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    headerProps: _propTypes.default.object,
    isMultiSort: _propTypes.default.bool,
    refHeader: _propTypes.default.func.isRequired,
    selectAll: _propTypes.default.func,
    setScrollLeft: _propTypes.default.func,
    sortable: _propTypes.default.bool,
    virtualizeColumns: _propTypes.default.bool,
    updateLockedWrapperPositions: _propTypes.default.func,
    lastLockedStartIndex: _propTypes.default.number,
    lastLockedEndIndex: _propTypes.default.number,
    lastUnlockedIndex: _propTypes.default.number,
    computedEnableColumnHover: _propTypes.default.bool,
    renderRowDetailsMoreIcon: _propTypes.default.func,
    computedFilterable: _propTypes.default.bool,
    filterRowHeight: _propTypes.default.number
  };
  return HeaderWrapper;
}
var hasRequiredHeaderLayout;
function requireHeaderLayout() {
  if (hasRequiredHeaderLayout)
    return HeaderLayout;
  hasRequiredHeaderLayout = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(HeaderLayout, "__esModule", {
    value: true
  });
  HeaderLayout.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactClass = _interopRequireDefault2(requireReactClass());
  var _debounce = _interopRequireDefault2(requireDebounce$1());
  var _contains = _interopRequireDefault2(requireContains());
  var _assignDefined2 = _interopRequireDefault2(requireAssignDefined());
  var _region = _interopRequireDefault2(requireRegion());
  var _isMobile = _interopRequireDefault2(requireIsMobile$1());
  var _getRangesForBoxes = _interopRequireDefault2(requireGetRangesForBoxes());
  var _getRangesForColumns = _interopRequireDefault2(requireGetRangesForColumns());
  var _setupColumnDrag = _interopRequireDefault2(requireSetupColumnDrag());
  var _moveXBeforeY = _interopRequireDefault2(requireMoveXBeforeY());
  var _isFocusable = _interopRequireDefault2(requireIsFocusable());
  var _getDropIndex2 = _interopRequireDefault2(requireGetDropIndex());
  var _getUndraggableSuccessiveCount = _interopRequireDefault2(requireGetUndraggableSuccessiveCount());
  var _DragCell = _interopRequireWildcard(requireDragCell());
  var _DragHeaderGroup = _interopRequireDefault2(requireDragHeaderGroup());
  var _HeaderWrapper = _interopRequireDefault2(requireHeaderWrapper());
  var _Header = requireHeader();
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  var _getGlobal = requireGetGlobal();
  var _join = _interopRequireDefault2(requireJoin());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var SCROLL_MARGIN = 40;
  var DRAG_INFO = null;
  var preventDefault = function preventDefault2(e2) {
    return e2.preventDefault();
  };
  var getColumnOrder = function getColumnOrder2(props2, filter3) {
    var doFilter = function doFilter2(c2) {
      return !c2.groupColumn && filter3 ? filter3(c2) : true;
    };
    var order;
    if (props2.computedColumnOrder) {
      order = props2.computedColumnOrder.map(function(id2) {
        return props2.columnsMap[id2];
      }).filter(Boolean);
    } else {
      order = props2.allColumns;
    }
    var toId = function toId2(c2) {
      return c2.id;
    };
    order = (order || []).filter(doFilter).map(toId);
    var lockedStart = props2.lockedStartColumns.filter(doFilter).map(toId);
    var lockedMap = lockedStart.reduce(function(acc, cId) {
      acc[cId] = true;
      return acc;
    }, {});
    var lockedEnd = props2.lockedEndColumns.filter(doFilter).map(toId);
    lockedEnd.reduce(function(acc, cId) {
      acc[cId] = true;
      return acc;
    }, lockedMap);
    return [].concat((0, _toConsumableArray2.default)(lockedStart), (0, _toConsumableArray2.default)(order.filter(function(cId) {
      return !lockedMap[cId];
    })), (0, _toConsumableArray2.default)(lockedEnd));
  };
  var getParentsForColumns = function getParentsForColumns2(columns, groups, maxDepth) {
    var parentsForColumns = columns.map(function(col) {
      var result = [col.id].concat((0, _toConsumableArray2.default)((0, _Header.getParentGroups)(col.group, groups, {
        includeSelf: true
      }).map(function(g2) {
        return g2.name;
      })));
      while (result.length <= maxDepth + 1) {
        result.splice(0, 0, result[0]);
      }
      return result;
    });
    return parentsForColumns;
  };
  var getValidDropPositions = function getValidDropPositions2(_ref2) {
    var dragTargetDepth = _ref2.dragTargetDepth, dragTargetIndex = _ref2.dragTargetIndex, dragTargetLength = _ref2.dragTargetLength, parentsForColumns = _ref2.parentsForColumns, lockedForColumns = _ref2.lockedForColumns, columns = _ref2.columns, allowGroupSplitOnReorder = _ref2.allowGroupSplitOnReorder;
    var getGroupsForColumn = function getGroupsForColumn2(parents) {
      parents = parents || [];
      var initialName = parents[0];
      var shouldCheck = true;
      var groups = [];
      parents.forEach(function(group) {
        if (!shouldCheck) {
          groups.push(group);
          return;
        }
        if (shouldCheck && group !== initialName) {
          shouldCheck = false;
          groups.push(group);
          return;
        }
        groups.push(null);
      });
      return groups;
    };
    var getGroupStartFor = function getGroupStartFor2(parents, depth, index2) {
      var initialParent = parents[index2].slice(-depth - 1)[0];
      var initialLocked = lockedForColumns[index2];
      var itParents;
      var currentParent;
      var currentLocked;
      do {
        itParents = parents[index2 - 1];
        if (!itParents) {
          break;
        }
        currentParent = itParents.slice(-depth - 1)[0];
        currentLocked = lockedForColumns[index2];
        if (currentParent !== initialParent || currentLocked !== initialLocked) {
          break;
        }
        index2--;
      } while (index2 >= 0);
      return index2;
    };
    var getGroupEndFor = function getGroupEndFor2(parents, depth, index2) {
      var initialParent = parents[index2].slice(-depth - 1)[0];
      var initialLocked = lockedForColumns[index2];
      var itParents;
      var currentParent;
      var currentLocked;
      do {
        index2++;
        itParents = parents[index2];
        if (!itParents) {
          break;
        }
        currentParent = itParents.slice(-depth - 1)[0];
        currentLocked = lockedForColumns[index2];
        if (currentParent !== initialParent || currentLocked !== initialLocked) {
          break;
        }
      } while (index2 < parents.length);
      return index2;
    };
    var res = columns.reduce(function(acc, col, index2) {
      if (index2 > dragTargetIndex && index2 <= dragTargetIndex + dragTargetLength) {
        return acc;
      }
      acc[index2] = true;
      return acc;
    }, {});
    res[columns.length] = true;
    if (!allowGroupSplitOnReorder) {
      var dragTargetParentGroups = getGroupsForColumn(parentsForColumns[dragTargetIndex]).filter(function(x2) {
        return x2;
      });
      var isSingleColumn = !dragTargetParentGroups.length;
      var usedDepth = isSingleColumn ? 0 : dragTargetDepth;
      var parentGroupStartIndex = !usedDepth ? 0 : getGroupStartFor(parentsForColumns, usedDepth - 1, dragTargetIndex);
      var parentGroupEndIndex = !usedDepth ? columns.length : getGroupEndFor(parentsForColumns, usedDepth - 1, dragTargetIndex);
      var currentGroupEndIndex = getGroupEndFor(parentsForColumns, usedDepth, dragTargetIndex);
      for (var i = 0; i <= columns.length; i++) {
        delete res[i];
      }
      for (var _i = parentGroupStartIndex; _i < parentGroupEndIndex; _i++) {
        var itGroupStartIndex = getGroupStartFor(parentsForColumns, usedDepth, _i);
        var itGroupEndIndex = getGroupEndFor(parentsForColumns, usedDepth, _i);
        res[itGroupStartIndex] = true;
        res[itGroupEndIndex] = true;
      }
      var groupEndIsLastUnlocked = columns[currentGroupEndIndex] && columns[currentGroupEndIndex].computedLocked === "end" && columns[currentGroupEndIndex - 1] && columns[currentGroupEndIndex - 1].computedLocked !== "end";
      if (!groupEndIsLastUnlocked) {
        delete res[currentGroupEndIndex];
      }
    }
    return res;
  };
  var ReorderArrow = function(_React$Component) {
    (0, _inherits2.default)(ReorderArrow2, _React$Component);
    var _super = _createSuper(ReorderArrow2);
    function ReorderArrow2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, ReorderArrow2);
      _this = _super.call(this, props2);
      _this.state = {
        visible: false,
        bottom: 0,
        top: 0,
        left: 0
      };
      return _this;
    }
    (0, _createClass2.default)(ReorderArrow2, [{
      key: "set",
      value: function set2(_ref2) {
        var bottom = _ref2.bottom, top = _ref2.top, left = _ref2.left, right = _ref2.right, target = _ref2.target;
        this.setState({
          target,
          bottom,
          left,
          top,
          right
        });
      }
    }, {
      key: "setVisible",
      value: function setVisible(visible) {
        if (visible != this.state.visible) {
          this.setState({
            visible
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var size2 = this.props.size;
        var _this$state = this.state, bottom = _this$state.bottom, top = _this$state.top, left = _this$state.left, right = _this$state.right, visible = _this$state.visible, target = _this$state.target;
        return _react.default.createElement("div", {
          ref: this.refReorderArrow,
          style: {
            position: "absolute",
            top,
            left,
            right,
            width: size2,
            height: bottom - top,
            bottom,
            pointerEvents: "none",
            opacity: visible ? 1 : 0,
            display: "block"
          },
          className: "InovuaReactDataGrid__column-reorder-arrow InovuaReactDataGrid__column-reorder-arrow--direction-".concat(this.props.rtl ? "rtl" : "ltr")
        }, _react.default.createElement("div", {
          className: "InovuaReactDataGrid__column-reorder-arrow-fill InovuaReactDataGrid__column-reorder-arrow-fill--direction-".concat(this.props.rtl ? "rtl" : "ltr", " InovuaReactDataGrid__column-reorder-arrow-fill--target-").concat(target || "none")
        }), this.props.renderReorderIndicator());
      }
    }]);
    return ReorderArrow2;
  }(_react.default.Component);
  ReorderArrow.defaultProps = {
    renderReorderIndicator: function renderReorderIndicator() {
    }
  };
  var InovuaDataGridHeaderLayout = function(_Component) {
    (0, _inherits2.default)(InovuaDataGridHeaderLayout2, _Component);
    var _super2 = _createSuper(InovuaDataGridHeaderLayout2);
    function InovuaDataGridHeaderLayout2(props2) {
      var _this2;
      (0, _classCallCheck2.default)(this, InovuaDataGridHeaderLayout2);
      _this2 = _super2.call(this, props2);
      _this2.state = {
        draggingProps: null
      };
      _this2.refDragGroupItem = function(item) {
        _this2.dragGroupItem = item;
      };
      _this2.refDragCell = function(cell) {
        _this2.dragCell = cell;
      };
      _this2.refDragHeaderGroup = function(item) {
        _this2.dragHeaderGroup = item;
      };
      _this2.groupToolbar = (0, _react.createRef)();
      _this2.refHeader = function(h3) {
        _this2.headerNode = null;
        if (h3) {
          _this2.headerNode = h3.getDOMNode ? h3.getDOMNode() : null;
          if (!_this2.headerNode) {
            throw "Cannot find header node";
          }
          if (_isMobile.default) {
            _this2.headerNode.addEventListener("touchmove", preventDefault);
          }
        } else {
          if (_this2.headerNode && _isMobile.default) {
            _this2.headerNode.removeEventListener("touchmove", preventDefault);
          }
          _this2.headerNode = null;
        }
        _this2.header = h3;
      };
      _this2.headerWrapper = (0, _react.createRef)();
      _this2.refReorderArrow = function(cmp) {
        _this2.reorderArrow = cmp;
      };
      _this2.headerDomNode = (0, _react.createRef)();
      _this2.lazyNotifyHeaderScrollLeftMax = (0, _debounce.default)(_this2.notifyHeaderScrollLeftMax, 150);
      return _this2;
    }
    (0, _createClass2.default)(InovuaDataGridHeaderLayout2, [{
      key: "notifyHeaderScrollLeftMax",
      value: function notifyHeaderScrollLeftMax(scrollLeftMax) {
        if (this.header && this.props.lockedEndColumns) {
          this.header.notifyScrollLeftMax(scrollLeftMax === void 0 ? this.getScrollLeftMax() : scrollLeftMax);
        }
      }
    }, {
      key: "onContainerScrollHorizontal",
      value: function onContainerScrollHorizontal(scrollLeft, scrollLeftMax) {
        this.scrollLeft = scrollLeft;
        if (this.header) {
          this.header.setScrollLeft(scrollLeft, scrollLeftMax);
          this.lazyNotifyHeaderScrollLeftMax();
        }
      }
    }, {
      key: "setScrollLeft",
      value: function setScrollLeft(scrollLeft) {
        this.props.setScrollLeft(scrollLeft);
      }
    }, {
      key: "getScrollLeft",
      value: function getScrollLeft() {
        return this.scrollLeft || 0;
      }
    }, {
      key: "getScrollLeftMax",
      value: function getScrollLeftMax() {
        return this.props.getScrollLeftMax();
      }
    }, {
      key: "setColumnRenderStartIndex",
      value: function setColumnRenderStartIndex(columnRenderStartIndex) {
        if (this.header) {
          this.header.setColumnRenderStartIndex(columnRenderStartIndex);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var className = (0, _join.default)("InovuaReactDataGrid__header-layout", this.props.stickyHeader && "InovuaReactDataGrid__header-layout__sticky-header");
        return _react.default.createElement("div", {
          ref: this.headerDomNode,
          className
        }, this.renderGroupToolbar(), this.renderHeaderWrapper(), this.renderDragCell(), this.renderDragGroupItem(), this.renderDragHeaderGroup(), this.renderReorderIndicator());
      }
    }, {
      key: "renderGroupToolbar",
      value: function renderGroupToolbar() {
        var _this$props = this.props, columnsMap = _this$props.columnsMap, onGroupByChange = _this$props.onGroupByChange, onHeaderSortClick = _this$props.onHeaderSortClick, renderGroupItem = _this$props.renderGroupItem, renderSortTool2 = _this$props.renderSortTool, renderGroupToolbar2 = _this$props.renderGroupToolbar, groupBy = _this$props.computedGroupBy, disableGroupByToolbar = _this$props.disableGroupByToolbar, i18n = _this$props.i18n, rtl = _this$props.rtl, theme2 = _this$props.theme;
        if (!groupBy || !renderGroupToolbar2) {
          return null;
        }
        return renderGroupToolbar2({
          columnsMap,
          groupBy,
          rtl,
          theme: theme2,
          renderSortTool: renderSortTool2,
          onGroupByChange,
          disableGroupByToolbar,
          renderGroupItem,
          headerGroupPlaceholderText: i18n("dragHeaderToGroup"),
          onItemMouseDown: this.onGroupItemMouseDown,
          onSortClick: onHeaderSortClick,
          ref: this.groupToolbar
        });
      }
    }, {
      key: "renderHeaderWrapper",
      value: function renderHeaderWrapper() {
        var props2 = this.props;
        var computedShowHeader = props2.computedShowHeader;
        if (!computedShowHeader) {
          return null;
        }
        var scrollLeft = (this.scrollLeft !== void 0 ? this.scrollLeft : props2.scrollLeft) || 0;
        var groupBy = this.props.computedGroupBy && this.props.computedGroupBy.length ? this.props.computedGroupBy : null;
        return _react.default.createElement(_HeaderWrapper.default, _objectSpread2(_objectSpread2({}, props2), {}, {
          groupBy,
          onHeaderGroupMouseDown: this.onHeaderGroupMouseDown,
          onHeaderCellMouseDown: this.onHeaderCellMouseDown,
          onHeaderCellTouchStart: this.onHeaderCellTouchStart,
          ref: this.headerWrapper,
          refHeader: this.refHeader,
          scrollLeft,
          setScrollLeft: this.setScrollLeft
        }));
      }
    }, {
      key: "renderDragCell",
      value: function renderDragCell() {
        return _react.default.createElement(_DragCell.default, {
          ref: this.refDragCell
        });
      }
    }, {
      key: "renderDragGroupItem",
      value: function renderDragGroupItem() {
        if (!this.props.renderDragGroupItem) {
          return null;
        }
        return this.props.renderDragGroupItem(this.refDragGroupItem);
      }
    }, {
      key: "renderDragHeaderGroup",
      value: function renderDragHeaderGroup() {
        if (!this.props.computedGroups) {
          return;
        }
        return _react.default.createElement(_DragHeaderGroup.default, {
          ref: this.refDragHeaderGroup
        });
      }
    }, {
      key: "onGroupItemMouseDown",
      value: function onGroupItemMouseDown(column2, index2, event2) {
        this.onHeaderCellMouseDown(column2, event2, {
          dragTarget: "group",
          dragIndex: index2
        });
      }
    }, {
      key: "getCellDOMNodeAt",
      value: function getCellDOMNodeAt(index2) {
        return this.header.getCellDOMNodeAt(index2);
      }
    }, {
      key: "getHeader",
      value: function getHeader() {
        return this.header;
      }
    }, {
      key: "onHeaderGroupMouseDown",
      value: function onHeaderGroupMouseDown(event2, headerGroupProps, headerGroup) {
        if (event2.ctrlKey || event2.metaKey) {
          return;
        }
        if (this._dragIndex !== void 0) {
          return;
        }
        if (headerGroupProps.group && headerGroupProps.group.draggable === false) {
          return;
        }
        var dragTargetNode = headerGroup.domRef ? headerGroup.domRef.current : null;
        var shouldStop = (0, _toConsumableArray2.default)(dragTargetNode.querySelectorAll(".InovuaReactDataGrid__column-header__filter-wrapper")).reduce(function(shouldStop2, filterWrapperNode) {
          if ((0, _contains.default)(filterWrapperNode, event2.target) || filterWrapperNode === event2.target) {
            return true;
          }
          return shouldStop2;
        }, false);
        if (shouldStop) {
          return;
        }
        var groupColumns = headerGroupProps.columns.reduce(function(acc, colId) {
          acc[colId] = true;
          return acc;
        }, {});
        this.groupColumns = groupColumns;
        var dragBoxes = this.header.getGroupsAndCells().filter(function(item) {
          if (item === headerGroup) {
            return true;
          }
          if (item.props.id in groupColumns) {
            return false;
          }
          return !item.props.isHeaderGroup;
        });
        var dragIndex = dragBoxes.indexOf(headerGroup);
        var dragTargetIndex = this.props.columnsMap[headerGroup.props.columns[0]].computedVisibleIndex;
        var dragTargetDepth = headerGroup.props.depth;
        var dragTargetLength = headerGroup.props.columns.length;
        var parentsForColumns = getParentsForColumns(this.props.visibleColumns, this.props.computedGroupsMap, this.props.computedGroupsDepth);
        this.maybeDragMouseDown(event2, {
          dragTarget: "headergroup",
          dragTargetIndex,
          dragTargetDepth,
          dragTargetLength,
          parentsForColumns,
          dragTargetNode,
          dragIndex,
          dragBoxes,
          allowTargetChange: false,
          ranges: (0, _getRangesForBoxes.default)(dragBoxes, function(i) {
            return i;
          })
        });
      }
    }, {
      key: "onHeaderCellTouchStart",
      value: function onHeaderCellTouchStart() {
        return this.onHeaderCellMouseDown.apply(this, arguments);
      }
    }, {
      key: "onHeaderCellMouseDown",
      value: function onHeaderCellMouseDown(_ref3, event2) {
        var visibleIndex = _ref3.computedVisibleIndex;
        var _ref4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
          dragTarget: "header"
        }, _ref4$dragTarget = _ref4.dragTarget, dragTarget = _ref4$dragTarget === void 0 ? "header" : _ref4$dragTarget, dragIndex = _ref4.dragIndex;
        if (this.props.reorderColumns === false) {
          return;
        }
        if ((0, _isFocusable.default)(event2.target)) {
          return;
        }
        if (event2.nativeEvent.which == 3 || event2.metaKey || event2.ctrlKey) {
          return;
        }
        if (dragIndex === void 0) {
          dragIndex = visibleIndex;
        }
        if (event2.ctrlKey || event2.metaKey) {
          return;
        }
        var allowTargetChange = void 0;
        var dragColumn;
        var dragTargetNode = this.getCellDOMNodeAt(visibleIndex);
        if (dragTarget == "header") {
          dragColumn = this.props.visibleColumns[visibleIndex];
          if (!dragColumn || dragColumn.groupColumn || dragColumn.draggable === false) {
            event2.stopPropagation();
            return;
          }
          if (this.props.computedGroupBy) {
            if (this.props.computedGroupBy.indexOf(dragColumn.id) != -1 || this.props.computedGroupBy.indexOf(dragColumn.name) != -1) {
              allowTargetChange = false;
            }
          }
          if (dragColumn.draggable === false) {
            return;
          }
          if (dragColumn.groupBy === false) {
            allowTargetChange = false;
          }
        }
        var dragTargetIndex = dragIndex;
        var dragTargetDepth = dragColumn && dragColumn.group && this.props.computedGroupsMap && this.props.computedGroupsMap[dragColumn.group] ? this.props.computedGroupsMap[dragColumn.group].computedDepth + 1 : this.props.computedGroupsDepth + 1;
        var parentsForColumns = getParentsForColumns(this.props.visibleColumns, this.props.computedGroupsMap, this.props.computedGroupsDepth);
        this.maybeDragMouseDown(event2, {
          dragTarget,
          dragIndex,
          dragTargetNode,
          parentsForColumns,
          dragTargetIndex,
          dragTargetDepth,
          dragTargetLength: 1,
          allowTargetChange
        });
      }
    }, {
      key: "maybeDragMouseDown",
      value: function maybeDragMouseDown(event2, _ref5) {
        var _this3 = this;
        var dragTarget = _ref5.dragTarget, dragIndex = _ref5.dragIndex, allowTargetChange = _ref5.allowTargetChange, ranges = _ref5.ranges, parentsForColumns = _ref5.parentsForColumns, dragTargetIndex = _ref5.dragTargetIndex, dragTargetDepth = _ref5.dragTargetDepth, dragTargetNode = _ref5.dragTargetNode, dragTargetLength = _ref5.dragTargetLength;
        if (this.props.computedPivot) {
          return;
        }
        this._dragIndex = dragIndex;
        var _removeListeners;
        var mouseMoveEventCount = 0;
        var didSetupDrag = false;
        var cleanup2 = function cleanup3() {
          delete _this3._dragIndex;
          if (_removeListeners) {
            _removeListeners();
          }
        };
        var onMouseUp = cleanup2;
        var onMouseMove = function onMouseMove2(event3) {
          if (didSetupDrag) {
            return;
          }
          mouseMoveEventCount++;
          if (mouseMoveEventCount > 1) {
            didSetupDrag = true;
            _removeListeners();
            _this3.setupDrag({
              dragTarget,
              dragIndex,
              allowTargetChange,
              ranges,
              parentsForColumns,
              dragTargetIndex,
              dragTargetDepth,
              dragTargetLength,
              dragTargetNode
            }, event3);
          }
        };
        var mouseup = _isMobile.default ? "touchend" : "mouseup";
        var mousemove = _isMobile.default ? "touchmove" : "mousemove";
        _removeListeners = function removeListeners() {
          _removeListeners = null;
          globalObject.removeEventListener(mouseup, onMouseUp, false);
          globalObject.removeEventListener(mousemove, onMouseMove, false);
        };
        if (_isMobile.default) {
          setTimeout(function() {
            onMouseUp();
          }, 350);
        }
        globalObject.addEventListener(mouseup, onMouseUp, false);
        globalObject.addEventListener(mousemove, onMouseMove, false);
      }
    }, {
      key: "renderReorderIndicator",
      value: function renderReorderIndicator() {
        var size2 = this.props.reorderProxySize;
        return _react.default.createElement(ReorderArrow, {
          ref: this.refReorderArrow,
          size: size2,
          rtl: this.props.rtl,
          renderReorderIndicator: this.props.renderReorderIndicator
        });
      }
    }, {
      key: "setReorderArrowAt",
      value: function setReorderArrowAt(index2, ranges, target) {
        var offset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        var visible = arguments.length > 4 ? arguments[4] : void 0;
        visible = visible !== void 0 ? visible : index2 != DRAG_INFO.dragIndex || target != DRAG_INFO.dragTarget;
        if (offset) {
          visible = true;
        }
        var rtl = this.props.rtl;
        this.reorderArrow.setVisible(visible);
        var last = index2 == ranges.length;
        var box = ranges[index2];
        var _DRAG_INFO = DRAG_INFO, headerRegion = _DRAG_INFO.headerRegion;
        _DRAG_INFO.initialScrollLeft;
        if (!box && last) {
          var _box;
          var lastBox = ranges[ranges.length - 1] || {
            left: headerRegion.left,
            right: headerRegion.left
          };
          box = (_box = {}, (0, _defineProperty2.default)(_box, rtl ? "right" : "left", rtl ? lastBox.left : lastBox.right), (0, _defineProperty2.default)(_box, "computedLocked", lastBox.computedLocked), _box);
        }
        box = box || (rtl ? {
          right: 0
        } : {
          left: 0
        });
        var boxPos = rtl ? box.right : box.left;
        if (rtl && this.props.nativeScroll && this.props.scrollbars.vertical) {
          boxPos -= (0, _getScrollbarWidth.default)();
        }
        return this.setReorderArrowPosition(rtl ? -boxPos + headerRegion.right - offset : boxPos - headerRegion.left + offset, target);
      }
    }, {
      key: "setReorderArrowPosition",
      value: function setReorderArrowPosition(pos, target) {
        var rtl = this.props.rtl;
        this.reorderArrowPosition = this.reorderArrowPosition || {};
        (0, _assignDefined2.default)(this.reorderArrowPosition, (0, _defineProperty2.default)({}, rtl ? "right" : "left", pos));
        this.reorderArrow.set(_objectSpread2((0, _defineProperty2.default)({
          target
        }, rtl ? "right" : "left", rtl ? this.reorderArrowPosition.right : this.reorderArrowPosition.left), DRAG_INFO.reorderProxyPosition[target]));
        return this;
      }
    }, {
      key: "setReorderArrowVisible",
      value: function setReorderArrowVisible(visible) {
        this.reorderArrow.setVisible(visible);
        return this;
      }
    }, {
      key: "getGroupToolbar",
      value: function getGroupToolbar() {
        return this.groupToolbar.current;
      }
    }, {
      key: "getGroupByItems",
      value: function getGroupByItems() {
        if (!this.groupToolbar.current) {
          return null;
        }
        return this.groupToolbar.current.getSortedItemsInfo();
      }
    }, {
      key: "getHeaderCells",
      value: function getHeaderCells() {
        return this.header.getCells();
      }
    }, {
      key: "getBoxesFor",
      value: function getBoxesFor(target) {
        if (target == "header") {
          return this.header.getCells();
        }
        if (target == "group" && this.groupToolbar.current) {
          return this.groupToolbar.current.getCells();
        }
        if (target == "headergroup") {
          return this.header.getGroupsAndCells();
        }
        return [];
      }
    }, {
      key: "getDragBoxInstance",
      value: function getDragBoxInstance(dragIndex, dragTarget, dragTargetDepth, dragTargetLength) {
        if (dragTarget === "group") {
          return this.getGroupToolbar() && this.getGroupToolbar().getCells()[dragIndex];
        }
        var dragCell = this.getHeaderCells()[dragIndex];
        var dragBox = dragCell;
        if (dragTargetLength) {
          var cellProps = dragCell.getProps();
          while (cellProps.depth > dragTargetDepth) {
            if (cellProps.parent) {
              dragBox = cellProps.parent;
              cellProps = dragBox.props;
            } else {
              break;
            }
          }
        }
        return dragBox;
      }
    }, {
      key: "setupDrag",
      value: function setupDrag(_ref6, event2) {
        var _DRAG_INFO2;
        var dragTarget = _ref6.dragTarget, dragIndex = _ref6.dragIndex, _ref6$allowTargetChan = _ref6.allowTargetChange, allowTargetChange = _ref6$allowTargetChan === void 0 ? true : _ref6$allowTargetChan, parentsForColumns = _ref6.parentsForColumns, dragTargetIndex = _ref6.dragTargetIndex, dragTargetDepth = _ref6.dragTargetDepth, dragTargetLength = _ref6.dragTargetLength;
        var columns = this.props.visibleColumns;
        var rtl = this.props.rtl;
        var headerRegion = _region.default.from(this.headerDomNode.current);
        var dragBox = this.getDragBoxInstance(dragIndex, dragTarget, dragTargetDepth, dragTargetLength);
        var initialScrollLeft = this.getScrollLeft();
        var dragBoxProps = dragBox.getProps ? dragBox.getProps() : dragBox.props;
        var rtlOffset = Math.max(this.props.totalComputedWidth - this.props.size.width, 0);
        var columnRanges = (0, _getRangesForColumns.default)(columns, {
          rtl,
          rtlOffset,
          initialOffset: rtl ? headerRegion.right : headerRegion.left,
          headerRegion,
          initialScrollLeft,
          availableWidth: Math.min(this.props.availableWidth, this.props.totalComputedWidth),
          totalLockedEndWidth: this.props.totalLockedEndWidth
        });
        var groupToolbarCells = this.getGroupToolbar() && this.getGroupToolbar().getCells();
        var groupByRanges = this.props.computedGroupBy && this.props.computedGroupBy.length ? (0, _getRangesForBoxes.default)(groupToolbarCells) || [] : [];
        var dragProxy = dragTarget == "header" ? this.dragCell : dragTarget == "group" ? this.dragGroupItem : this.dragHeaderGroup;
        var dragColumn = dragTarget === "group" ? dragBoxProps.column : columns[dragIndex];
        var headerDragColumn = dragTarget == "header" ? dragColumn : null;
        var columnId = dragTarget == "header" ? headerDragColumn.id : dragTarget == "group" ? dragColumn.id : null;
        var dragBoxNode = dragBox.getDOMNode ? dragBox.getDOMNode() : null;
        var dragBoxInitialRegion = dragBox && dragBox.getProxyRegion ? dragBox.getProxyRegion() : _region.default.from(dragBoxNode);
        if (_DragCell.MAX_WIDTH && dragBoxInitialRegion.getWidth() > _DragCell.MAX_WIDTH) {
          dragBoxInitialRegion.setWidth(_DragCell.MAX_WIDTH);
        }
        if (_region.default.from(dragBoxNode).getWidth() > headerRegion.getWidth() / 2) {
          if (rtl) {
            dragBoxInitialRegion.shift({
              right: event2.pageX - dragBoxInitialRegion.right - this.props.columnReorderScrollByAmount
            });
          } else {
            dragBoxInitialRegion.shift({
              left: event2.pageX - dragBoxInitialRegion.left - this.props.columnReorderScrollByAmount
            });
          }
        }
        var dragBoxOffsets = (0, _defineProperty2.default)({
          top: headerRegion.top
        }, rtl ? "right" : "left", rtl ? headerRegion.right : headerRegion.left);
        var extendedDragBoxProps = _objectSpread2({}, dragBoxProps);
        if (this.props.renderColumnReorderProxy) {
          Object.assign(extendedDragBoxProps, {
            renderColumnReorderProxy: this.props.renderColumnReorderProxy
          });
        }
        dragProxy.setProps(extendedDragBoxProps);
        var dragProxyPosition = (0, _defineProperty2.default)({
          top: dragBoxInitialRegion.top - dragBoxOffsets.top
        }, rtl ? "right" : "left", rtl ? dragBoxOffsets.right - dragBoxInitialRegion.right : dragBoxInitialRegion.left - dragBoxOffsets.left);
        dragProxy.setHeight(dragBoxInitialRegion.height);
        dragProxy.setWidth(dragBoxInitialRegion.width);
        dragProxy.setTop(dragProxyPosition.top);
        if (rtl) {
          dragProxy.setRight(dragProxyPosition.right);
        } else {
          dragProxy.setLeft(dragProxyPosition.left);
        }
        var maxHeaderIndex = columns.length - (0, _getUndraggableSuccessiveCount.default)((0, _toConsumableArray2.default)(columns).reverse());
        var minHeaderIndex = (0, _getUndraggableSuccessiveCount.default)(columns);
        var validDropPositions = columns.reduce(function(acc, col, i) {
          acc[i] = true;
          return acc;
        }, {});
        validDropPositions[columns.length] = true;
        if (this.props.groups && this.props.groups.length && !this.props.allowGroupSplitOnReorder) {
          validDropPositions = getValidDropPositions({
            dragTargetDepth,
            dragTargetIndex,
            dragTargetLength,
            parentsForColumns,
            lockedForColumns: columns.map(function(c2) {
              return c2.computedLocked;
            }),
            columns,
            allowGroupSplitOnReorder: this.props.allowGroupSplitOnReorder,
            maxDepth: this.props.computedGroupsDepth + 1
          });
        }
        if (validDropPositions && !validDropPositions[dragIndex] && dragTarget != "group") {
          validDropPositions[dragIndex] = true;
        }
        var wrapperNode = this.headerDomNode ? this.headerDomNode.current : null;
        var filterRowHeight = 0;
        if (this.props.computedFilterable) {
          var filterWrapperNode = wrapperNode.querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
          if (filterWrapperNode) {
            filterRowHeight = filterWrapperNode.offsetHeight;
          }
        }
        DRAG_INFO = (_DRAG_INFO2 = {
          allowTargetChange,
          columnId,
          headerRegion,
          headerDragColumn,
          minHeaderIndex,
          maxHeaderIndex,
          dragColumn,
          dragColumnsIds: dragTarget == "headergroup" ? dragBox.props.columns : null,
          dragBox,
          dragBoxInitialRegion,
          dragBoxRegion: dragBoxInitialRegion.clone(),
          dragBoxProps,
          dragBoxOffsets,
          dragProxy,
          dragProxyInitialPosition: dragProxyPosition,
          dragTarget,
          dropTarget: dragTarget,
          dragIndex,
          columnRanges,
          groupByRanges,
          parentsForColumns,
          dragTargetIndex,
          dragTargetDepth,
          dragTargetLength,
          scrollLeftMax: this.props.getScrollLeftMax(),
          initialScrollLeft
        }, (0, _defineProperty2.default)(_DRAG_INFO2, "headerRegion", headerRegion), (0, _defineProperty2.default)(_DRAG_INFO2, "validDropPositions", validDropPositions), _DRAG_INFO2);
        var groupToolbarNode = this.groupToolbar.current ? this.groupToolbar.current.domRef ? this.groupToolbar.current.domRef.current : null : null;
        var headerGroupTargetNode = wrapperNode;
        var groupTargetNode = groupToolbarNode || this.headerDomNode.current;
        var groupComputedStyle = getComputedStyle(groupTargetNode);
        DRAG_INFO.reorderProxyPosition = {
          group: {
            top: parseInt(groupComputedStyle.paddingTop),
            bottom: groupTargetNode.offsetHeight - parseInt(groupComputedStyle.paddingBottom)
          },
          header: {
            top: this.props.computedGroupBy ? groupToolbarNode ? groupTargetNode.offsetHeight : this.headerDomNode.current.offsetTop : 0,
            bottom: headerGroupTargetNode.offsetHeight - filterRowHeight
          },
          headergroup: {
            top: this.props.computedGroupBy ? groupToolbarNode ? groupTargetNode.offsetHeight : this.headerDomNode.current.offsetTop : 0,
            bottom: headerGroupTargetNode.offsetHeight - filterRowHeight
          }
        };
        this.setReorderArrowAt(dragIndex, dragTarget === "group" ? groupByRanges : columnRanges, dragTarget);
        this.setReorderArrowPosition(void 0, dragTarget);
        dragProxy.setDragging(true);
        this.props.coverHandleRef.current.setActive(true);
        this.props.coverHandleRef.current.setCursor("grabbing");
        var headerNode = this.headerDomNode ? this.headerDomNode.current : null;
        (0, _setupColumnDrag.default)({
          constrainTo: this.props.constrainReorder ? _region.default.from(headerNode.parentNode) : void 0,
          region: dragBoxInitialRegion
        }, {
          onDrag: this.onHeaderCellDrag,
          onDrop: this.onHeaderCellDrop
        }, event2);
      }
    }, {
      key: "onHeaderCellDrop",
      value: function onHeaderCellDrop() {
        var _this4 = this;
        this.props.coverHandleRef.current.setActive(false);
        delete this._dragIndex;
        var dropIndex = this.dropIndex, props2 = this.props;
        if (dropIndex === void 0 || !DRAG_INFO) {
          if (DRAG_INFO) {
            DRAG_INFO.dragProxy.setDragging(false);
          }
          this.setReorderArrowVisible(false);
          DRAG_INFO = null;
          return;
        }
        var _DRAG_INFO3 = DRAG_INFO;
        _DRAG_INFO3.dragColumn;
        var columnId = _DRAG_INFO3.columnId, dragColumnsIds = _DRAG_INFO3.dragColumnsIds, dragTarget = _DRAG_INFO3.dragTarget, dropTarget = _DRAG_INFO3.dropTarget, dragProxy = _DRAG_INFO3.dragProxy, newLocked = _DRAG_INFO3.newLocked;
        var _DRAG_INFO4 = DRAG_INFO, dragIndex = _DRAG_INFO4.dragIndex;
        DRAG_INFO = null;
        this.setReorderArrowVisible(false);
        dragProxy.setDragging(false);
        var columns = this.props.visibleColumns;
        var currentLocked = columns[dragIndex].computedLocked;
        if (dropIndex == dragIndex && newLocked === currentLocked && dragTarget == dropTarget) {
          return;
        }
        if (this.props.virtualizeColumns) {
          setTimeout(function() {
            _this4.header.updateColumns();
          }, 10);
        }
        if (dragTarget == "headergroup") {
          if (dropIndex == dragIndex && dragTarget == dropTarget && newLocked === currentLocked) {
            return;
          }
          if (columns[dropIndex]) {
            this.moveColumnsBeforeIndex(dragColumnsIds, columns[dropIndex].computedVisibleIndex, newLocked);
          } else if (dropIndex == columns.length) {
            var col = columns[columns.length - 1];
            if (col) {
              this.moveColumnsBeforeIndex(dragColumnsIds, col.computedVisibleIndex + 1, newLocked);
            }
          }
          return;
        }
        var visibleColumns = props2.visibleColumns, groupBy = props2.computedGroupBy;
        if (dropTarget == dragTarget) {
          if (dragTarget == "group") {
            this.setGroupBy((0, _moveXBeforeY.default)(groupBy, dragIndex, dropIndex));
          }
          if (dragTarget == "header") {
            this.moveColumnsBeforeIndex([columnId], dropIndex, newLocked);
          }
        }
        if (dragTarget == "header" && dropTarget == "group") {
          var groupByColumn = visibleColumns[dragIndex];
          var newGroupBy = [].concat(groupBy);
          newGroupBy.splice(dropIndex, 0, groupByColumn.id);
          this.setGroupBy(newGroupBy);
        }
        if (dragTarget == "group" && dropTarget == "header") {
          this.ungroupColumnToIndex(columnId, dropIndex);
        }
      }
    }, {
      key: "ungroupColumnToIndex",
      value: function ungroupColumnToIndex(columnId, dropIndex) {
        var props2 = this.props;
        var allColumns = props2.allColumns, visibleColumns = props2.visibleColumns;
        var dragColumn = allColumns.filter(function(c2) {
          return c2.id === columnId;
        })[0];
        var newGroupBy = [].concat(this.props.computedGroupBy).filter(function(g2) {
          return g2 != columnId;
        });
        var columnAtDropIndex = visibleColumns[dropIndex];
        if (columnAtDropIndex && columnAtDropIndex.id === columnId) {
          this.setGroupBy(newGroupBy);
          return;
        }
        var order = getColumnOrder(props2, function(c2) {
          return c2.id !== columnId;
        });
        var insertIndex = columnAtDropIndex ? order.indexOf(columnAtDropIndex.id) : order.length;
        order.splice(insertIndex, 0, columnId);
        var columnAtDropIndexOrLast = columnAtDropIndex || visibleColumns[visibleColumns.length - 1];
        if (columnAtDropIndexOrLast.computedLocked != dragColumn.computedLocked) {
          this.props.setColumnLocked(columnId, columnAtDropIndexOrLast.computedLocked);
        }
        this.setGroupBy(newGroupBy);
        this.setColumnOrder(order);
      }
    }, {
      key: "moveColumnsBeforeIndex",
      value: function moveColumnsBeforeIndex(columnsIds, dropIndex, newLocked) {
        var _this5 = this;
        var props2 = this.props;
        var visibleColumns = props2.visibleColumns, columnVisibilityMap = props2.columnVisibilityMap, allowGroupSplitOnReorder = props2.allowGroupSplitOnReorder;
        var columnOrder = getColumnOrder(props2);
        var columns = visibleColumns.filter(function(col) {
          return columnsIds.indexOf(col.id) != -1;
        });
        var dragColumnsIndexesInAllColumns = columnsIds.map(function(columnId) {
          return columnOrder.indexOf(columnId);
        });
        var dropBeforeIndexInAllColumns = visibleColumns[dropIndex] ? columnOrder.indexOf(visibleColumns[dropIndex].id) : columnOrder.length;
        var firstDragIndex = dragColumnsIndexesInAllColumns[0];
        if (!allowGroupSplitOnReorder && firstDragIndex < dropBeforeIndexInAllColumns) {
          while (true) {
            var columnRightBefore = columnOrder[dropBeforeIndexInAllColumns - 1];
            if (columnRightBefore && columnVisibilityMap[columnRightBefore] === false) {
              dropBeforeIndexInAllColumns--;
              continue;
            }
            break;
          }
        }
        visibleColumns[dropIndex] || visibleColumns[visibleColumns.length - 1];
        columns.forEach(function(col) {
          if (newLocked != col.computedLocked) {
            _this5.props.setColumnLocked(col.id, newLocked);
          }
        });
        var newColumnOrder = (0, _moveXBeforeY.default)(columnOrder, dragColumnsIndexesInAllColumns, dropBeforeIndexInAllColumns);
        this.setColumnOrder(newColumnOrder);
      }
    }, {
      key: "onHeaderCellDrag",
      value: function onHeaderCellDrag(_ref7) {
        var diffLeft = _ref7.left, diffTop = _ref7.top;
        if (!DRAG_INFO) {
          return;
        }
        var _DRAG_INFO5 = DRAG_INFO, allowTargetChange = _DRAG_INFO5.allowTargetChange, dragTarget = _DRAG_INFO5.dragTarget, dragIndex = _DRAG_INFO5.dragIndex, dragProxy = _DRAG_INFO5.dragProxy, dragColumn = _DRAG_INFO5.dragColumn, dragBoxInitialRegion = _DRAG_INFO5.dragBoxInitialRegion, dragBoxOffsets = _DRAG_INFO5.dragBoxOffsets, dragBoxRegion = _DRAG_INFO5.dragBoxRegion, groupByRanges = _DRAG_INFO5.groupByRanges, theRanges = _DRAG_INFO5.columnRanges, headerRegion = _DRAG_INFO5.headerRegion, scrollLeftMax = _DRAG_INFO5.scrollLeftMax, initialScrollLeft = _DRAG_INFO5.initialScrollLeft, validDropPositions = _DRAG_INFO5.validDropPositions;
        dragBoxRegion.set({
          left: dragBoxInitialRegion.left,
          top: dragBoxInitialRegion.top,
          bottom: dragBoxInitialRegion.bottom,
          right: dragBoxInitialRegion.right
        });
        var _DRAG_INFO6 = DRAG_INFO, dropTarget = _DRAG_INFO6.dropTarget;
        var _this$props2 = this.props, columnReorderScrollByAmount = _this$props2.columnReorderScrollByAmount, rtl = _this$props2.rtl;
        var scrollLeft = this.getScrollLeft();
        var scrollDiff = scrollLeft - initialScrollLeft;
        var initialDiffLeft = diffLeft;
        dragBoxRegion.shift({
          top: diffTop,
          left: diffLeft
        });
        diffLeft += scrollDiff;
        var minScrollLeft = Math.max(headerRegion.left, 0);
        var maxScrollRight = headerRegion.right;
        var groupToolbarNode = this.groupToolbar && this.groupToolbar.current && this.groupToolbar.current.domRef ? this.groupToolbar.current.domRef.current : null;
        if (this.groupToolbar.current && allowTargetChange) {
          var groupToolbarRegion = _region.default.from(groupToolbarNode);
          if (dragBoxRegion.top + dragBoxRegion.height / 2 < groupToolbarRegion.bottom) {
            if (dropTarget !== "group" && dragColumn.groupBy !== false) {
              dropTarget = DRAG_INFO.dropTarget = "group";
            }
          } else {
            if (dropTarget != "header") {
              dropTarget = DRAG_INFO.dropTarget = "header";
            }
          }
        }
        var scrollAdjust = 0;
        var dragProxyAdjust = 0;
        var dragComputedLocked = this.props.visibleColumns[dragIndex].computedLocked;
        if (dropTarget == "header" || dropTarget == "headergroup") {
          if (dragBoxInitialRegion.left + initialDiffLeft - this.props.totalLockedStartWidth < minScrollLeft + SCROLL_MARGIN && initialDiffLeft < 0) {
            scrollAdjust = -columnReorderScrollByAmount;
          } else if (dragBoxInitialRegion.right + initialDiffLeft > maxScrollRight - SCROLL_MARGIN - this.props.totalLockedEndWidth && initialDiffLeft > 0) {
            scrollAdjust = columnReorderScrollByAmount;
          }
          if (scrollAdjust) {
            if (scrollLeft + scrollAdjust < 0) {
              scrollAdjust = -scrollLeft;
            }
            if (scrollLeft + scrollAdjust > scrollLeftMax) {
              scrollAdjust = scrollLeftMax - scrollLeft;
            }
            if (scrollAdjust) {
              this.setScrollLeft(scrollLeft + scrollAdjust);
              dragProxyAdjust = scrollAdjust;
            }
          }
        }
        if (rtl) {
          dragProxy.setRight(dragBoxOffsets.right + -initialDiffLeft - dragBoxInitialRegion.right - dragProxyAdjust);
        } else {
          dragProxy.setLeft(dragBoxInitialRegion.left + initialDiffLeft - dragBoxOffsets.left - dragProxyAdjust);
        }
        dragProxy.setTop(dragBoxRegion.top - dragBoxOffsets.top);
        var dir = dropTarget == "group" && dragTarget == "group" ? initialDiffLeft < 0 ? -1 : 1 : dragTarget != dropTarget || diffLeft < 0 ? -1 : 1;
        if (dragComputedLocked) {
          dir = initialDiffLeft < 0 ? -1 : 1;
        }
        if (rtl) {
          dir *= -1;
        }
        var mapRange = function mapRange2(r2) {
          if (!r2.computedLocked) {
            return _objectSpread2(_objectSpread2({}, r2), {}, {
              left: r2.left - scrollDiff,
              right: r2.right - scrollDiff
            });
          }
          return r2;
        };
        var currentRanges = dropTarget === "group" ? groupByRanges : theRanges;
        var ranges = currentRanges.map(mapRange);
        var compareRanges = currentRanges.map(mapRange);
        var dragMinIndex = dropTarget == "header" ? DRAG_INFO.minHeaderIndex : void 0;
        var dragMaxIndex = dropTarget == "header" ? DRAG_INFO.maxHeaderIndex : void 0;
        var dropIndex;
        var _getDropIndex = (0, _getDropIndex2.default)({
          dir,
          rtl,
          dragMinIndex,
          dragMaxIndex,
          dragTarget,
          dropTarget,
          dragRange: _objectSpread2(_objectSpread2({}, ranges[dragIndex]), {}, {
            left: dragBoxRegion.left,
            right: dragBoxRegion.right,
            index: dragIndex
          }),
          dragIndex,
          ranges: compareRanges,
          validDropPositions: dropTarget === dragTarget ? validDropPositions : void 0
        }), newDropIndex = _getDropIndex.index, locked = _getDropIndex.locked;
        DRAG_INFO.newLocked = locked;
        if (newDropIndex != void 0) {
          dropIndex = newDropIndex;
        }
        var offset = 0;
        var visible;
        if (locked === "start" && newDropIndex === this.props.firstUnlockedIndex) {
          offset = (rtl ? -1 : 1) * -11;
        }
        if (newDropIndex === this.props.firstLockedEndIndex && dragIndex !== this.props.firstLockedEndIndex) {
          if (locked === "end") {
            offset = (rtl ? -1 : 1) * 4;
          } else if (!locked) {
            offset = (rtl ? -1 : 1) * -6;
          }
        }
        if (newDropIndex === this.props.visibleColumns.length) {
          offset = rtl ? 6 : -6;
        }
        if (locked == null && dragComputedLocked === "end" && newDropIndex === this.props.firstLockedEndIndex) {
          visible = true;
        }
        this.dropIndex = dropIndex;
        this.setReorderArrowPosition(void 0, dropTarget);
        this.setReorderArrowAt(dropIndex, compareRanges, dropTarget, offset, visible);
      }
    }, {
      key: "setColumnOrder",
      value: function setColumnOrder(newColumnOrder) {
        var columnOrder = getColumnOrder(this.props);
        if (this.props.setColumnOrder && JSON.stringify(columnOrder) !== JSON.stringify(newColumnOrder)) {
          this.props.setColumnOrder(newColumnOrder);
        }
      }
    }, {
      key: "setGroupBy",
      value: function setGroupBy(groupBy) {
        if (this.props.onGroupByChange && JSON.stringify(groupBy) !== JSON.stringify(this.props.computedGroupBy)) {
          this.props.onGroupByChange(groupBy);
        }
      }
    }, {
      key: "insertGroupBy",
      value: function insertGroupBy(at, column2) {
        var props2 = this.props;
        var order = (0, _toConsumableArray2.default)(props2.computedGroupBy);
        order.splice(at, 0, column2.id);
        this.setGroupBy(order);
      }
    }]);
    return InovuaDataGridHeaderLayout2;
  }(_reactClass.default);
  HeaderLayout.default = InovuaDataGridHeaderLayout;
  InovuaDataGridHeaderLayout.propTypes = {
    i18n: _propTypes.default.func.isRequired,
    renderGroupToolbar: _propTypes.default.func,
    renderDragGroupItem: _propTypes.default.func,
    getScrollLeftMax: _propTypes.default.func.isRequired,
    setScrollLeft: _propTypes.default.func.isRequired,
    renderColumnReorderProxy: _propTypes.default.func,
    stickyHeader: _propTypes.default.bool
  };
  return HeaderLayout;
}
var Content = {};
var List = {};
var src$3 = {};
var VirtualList = {};
var src$2 = {};
var hasSticky = {};
var hasRequiredHasSticky;
function requireHasSticky() {
  if (hasRequiredHasSticky)
    return hasSticky;
  hasRequiredHasSticky = 1;
  Object.defineProperty(hasSticky, "__esModule", {
    value: true
  });
  hasSticky.sticky = hasSticky.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var div = globalObject.document && globalObject.document.createElement ? globalObject.document.createElement("div") : null;
  var HAS_STICKY = false;
  var sticky;
  hasSticky.sticky = sticky;
  if (div) {
    div.style.position = "sticky";
    if (div.style.position === "sticky") {
      hasSticky.sticky = sticky = "sticky";
      HAS_STICKY = true;
    }
    if (!HAS_STICKY) {
      div.style.position = "-webkit-sticky";
      if (div.style.position === "-webkit-sticky") {
        HAS_STICKY = true;
        hasSticky.sticky = sticky = "-webkit-sticky";
      }
    }
  }
  var _default2 = function _default3() {
    return HAS_STICKY;
  };
  hasSticky.default = _default2;
  return hasSticky;
}
var StickyScroller = {};
var isSafari = {};
var hasRequiredIsSafari;
function requireIsSafari() {
  if (hasRequiredIsSafari)
    return isSafari;
  hasRequiredIsSafari = 1;
  Object.defineProperty(isSafari, "__esModule", {
    value: true
  });
  isSafari.default = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var IS_SAFARI;
  var _default2 = function _default3() {
    if (IS_SAFARI !== void 0) {
      return IS_SAFARI;
    }
    var ua2 = globalObject.navigator ? globalObject.navigator.userAgent : "";
    return IS_SAFARI = ua2.indexOf("Safari") !== -1 && ua2.indexOf("Chrome") === -1;
  };
  isSafari.default = _default2;
  return isSafari;
}
var hasRequiredStickyScroller;
function requireStickyScroller() {
  if (hasRequiredStickyScroller)
    return StickyScroller;
  hasRequiredStickyScroller = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get2() {
        return _getScrollbarWidth.default;
      }
    });
    Object.defineProperty(exports, "isMobile", {
      enumerable: true,
      get: function get2() {
        return _isMobile.default;
      }
    });
    var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
    var _createClass2 = _interopRequireDefault2(requireCreateClass());
    var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
    var _inherits2 = _interopRequireDefault2(requireInherits$1());
    var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
    var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
    var _react = _interopRequireDefault2(reactExports);
    var _reactDom = reactDomExports;
    var _propTypes = _interopRequireDefault2(requirePropTypes());
    var _src = _interopRequireDefault2(requireSrc$e());
    var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
    var _hasSticky = requireHasSticky();
    var _smoothScrollTo = _interopRequireDefault2(requireSmoothScrollTo());
    var _isMobile = _interopRequireDefault2(requireIsMobile$1());
    var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
    var _join = _interopRequireDefault2(requireJoin());
    var _isSafari = _interopRequireDefault2(requireIsSafari());
    var _src2 = _interopRequireDefault2(requireSrc$l());
    var _getGlobal = requireGetGlobal();
    function ownKeys2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var STICKY_STYLE = {
      position: _hasSticky.sticky,
      top: 0,
      left: 0
    };
    var WRAPPER_STYLE = {
      display: "block",
      position: "absolute",
      flex: "",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
    var ua2 = globalObject.navigator ? globalObject.navigator.userAgent : "";
    var IS_EDGE = ua2.indexOf("Edge/") !== -1;
    var StickyVirtualScrollContainer = function(_React$Component) {
      (0, _inherits2.default)(StickyVirtualScrollContainer2, _React$Component);
      var _super = _createSuper(StickyVirtualScrollContainer2);
      function StickyVirtualScrollContainer2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, StickyVirtualScrollContainer2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initializeScrollLeftForRtl", function() {
          var fixScrollLeft = function fixScrollLeft2() {
            if (_this.scroller && _this.scrollLeftMax) {
              _this.scroller.getScrollerNode().scrollLeft = 1e9;
              return;
            }
            requestAnimationFrame(fixScrollLeft2);
          };
          requestAnimationFrame(fixScrollLeft);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
          if (_this.props.onResize) {
            var _this$props;
            (_this$props = _this.props).onResize.apply(_this$props, arguments);
          }
          _this.sync();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sync", function() {
          _this.scroller.sync();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rafSync", function() {
          if (_this.scroller.rafSync) {
            _this.scroller.rafSync();
          } else {
            _this.scroller.sync();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function(newValue, config2, callback2) {
          (0, _smoothScrollTo.default)(_this.scroller, newValue, config2, callback2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollbars", function() {
          return {
            horizontal: _this.hasHorizontalScrollbar(),
            vertical: _this.hasVerticalScrollbar()
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasScrollbar", function(orientation) {
          return _this.scroller.hasScrollbar.call((0, _assertThisInitialized2.default)(_this), orientation);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasVerticalScrollbar", function() {
          return _this.hasScrollbar("vertical");
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHorizontalScrollbar", function() {
          return _this.hasScrollbar("horizontal");
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function() {
          _this.scroller.focus();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function(event2) {
          if (event2.target === _this.domNode) {
            _this.focus();
          }
          if (_this.props.onFocus) {
            _this.props.onFocus(event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTransformNode", function() {
          return _this.viewNode.children[0].children[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollSize", function() {
          var node2 = _this.getTransformNode();
          var size2;
          if (_this.props.getScrollSize) {
            size2 = _this.props.getScrollSize(node2);
          } else {
            size2 = {
              width: node2.scrollWidth,
              height: node2.scrollHeight
            };
          }
          return size2;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollPosition", function() {
          return _this.scroller.getScrollPosition();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollStyle", function(scrollPos, prevScrollPos) {
          scrollPos = scrollPos || _this.getScrollPosition();
          var _scrollPos = scrollPos, scrollTop = _scrollPos.scrollTop, scrollLeft = _scrollPos.scrollLeft, scrollLeftMax = _scrollPos.scrollLeftMax;
          _this.scrollLeftMaxValue = scrollLeftMax;
          if (_this.props.onContainerScroll) {
            _this.props.onContainerScroll(scrollPos, prevScrollPos);
          }
          var node2 = _this.getTransformNode();
          var shouldApplyDefaultTransform = true;
          if (_this.props.applyScrollStyle) {
            shouldApplyDefaultTransform = _this.props.applyScrollStyle({
              scrollLeft,
              scrollTop,
              scrollLeftMax
            }, node2) !== false;
          }
          if (shouldApplyDefaultTransform) {
            node2.style.willChange = "transform";
            node2.style.backfaceVisibility = "hidden";
            if (_this.props.useTransformToScroll) {
              node2.style.transform = "translate3d(".concat(-scrollLeft, "px, ").concat(-scrollTop, "px, 0px)");
            } else {
              node2.style.top = "".concat(-scrollTop, "px");
              node2.style.left = "".concat(-scrollLeft, "px");
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeHeight", function() {
          return _this.props.before ? _this.state.beforeElementSize.height || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfterHeight", function() {
          return _this.props.after ? _this.state.afterElementSize.height || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeAndAfterHeight", function() {
          return _this.getBeforeHeight() + _this.getAfterHeight();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewResize", function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var size2 = args[0];
          _this.setState({
            size: size2
          }, function() {
            _this.rafSync();
          });
          if (_this.props.onViewResize) {
            var _this$props2;
            (_this$props2 = _this.props).onViewResize.apply(_this$props2, args);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacer", function() {
          var spacerProps = {
            key: "spacer",
            "data-name": "spacer--sticky-scroller",
            style: _objectSpread2({
              pointerEvents: "none",
              position: "absolute",
              top: 0,
              left: 0
            }, _this.state.size)
          };
          var result;
          if (_this.props.renderScrollerSpacer) {
            result = _this.props.renderScrollerSpacer(spacerProps, _this.state.size);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread2({}, spacerProps));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function(scrollerProps) {
          var scrollerOffset = _this.props.nativeScroll ? 0 : -_this.getEmptyScrollOffset();
          var props2 = _objectSpread2(_objectSpread2({}, scrollerProps), {}, {
            "data-name": "scroller",
            className: "",
            style: {
              display: "block",
              position: "absolute",
              WebkitOverflowScrolling: "touch",
              top: 0,
              left: 0,
              right: scrollerOffset,
              bottom: scrollerOffset,
              overflow: _this.props.nativeScroll ? "auto" : "scroll"
            },
            children: [_this.props.extraChildren, scrollerProps.children, _this.renderScrollerSpacer()]
          });
          var result;
          if (_this.props.renderScroller) {
            result = _this.props.renderScroller(props2);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread2({}, props2));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBefore", function() {
          var before = _this.props.before;
          if (!before) {
            return null;
          }
          return _react.default.cloneElement(before, {
            style: _objectSpread2({
              position: "absolute",
              top: 0
            }, before.props.style),
            children: _react.default.createElement(_react.default.Fragment, null, before.props.children, _react.default.createElement(_src2.default, {
              notifyOnMount: true,
              onResize: _this.onBeforeElementResize
            }))
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfter", function() {
          var after = _this.props.after;
          if (!after) {
            return null;
          }
          return _react.default.cloneElement(after, {
            style: _objectSpread2({
              position: "absolute",
              bottom: 0
            }, after.props.style),
            children: _react.default.createElement(_react.default.Fragment, null, after.props.children, _react.default.createElement(_src2.default, {
              notifyOnMount: true,
              onResize: _this.onAfterElementResize
            }))
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBeforeElementResize", function(size2) {
          _this.setState({
            beforeElementSize: size2
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAfterElementResize", function(size2) {
          _this.setState({
            afterElementSize: size2
          });
        });
        _this.refView = function(c2) {
          _this.viewNode = c2 ? (0, _reactDom.findDOMNode)(c2) : null;
        };
        _this.refScroller = function(s) {
          _this.scroller = s;
          _this.scrollerNode = s ? s.getScrollerNode() : null;
        };
        _this.state = {
          size: {},
          beforeElementSize: {
            height: 0
          },
          afterElementSize: {
            height: 0
          }
        };
        return _this;
      }
      (0, _createClass2.default)(StickyVirtualScrollContainer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.sync();
          if (this.props.rtl) {
            this.initializeScrollLeftForRtl();
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.scroller.getDOMNode();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.props.rtl) {
            if (prevProps.rtl !== this.props.rtl || prevProps.nativeScroll !== this.props.nativeScroll) {
              this.initializeScrollLeftForRtl();
            }
          }
        }
      }, {
        key: "scrollTop",
        get: function get2() {
          return this.scroller.scrollTop;
        },
        set: function set2(value) {
          this.scroller.scrollTop = value;
        }
      }, {
        key: "scrollTopMax",
        get: function get2() {
          return this.scroller.scrollTopMax;
        }
      }, {
        key: "scrollLeft",
        get: function get2() {
          return this.scroller.scrollLeft;
        },
        set: function set2(value) {
          this.scroller.scrollLeft = this.props.rtl && value < 0 ? this.scrollLeftMax + value : value;
        }
      }, {
        key: "scrollLeftMax",
        get: function get2() {
          return this.scrollLeftMaxValue != null ? this.scrollLeftMaxValue : this.scroller.scrollLeftMax;
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          return this.props.emptyScrollOffset == null ? (0, _getScrollbarWidth.default)() : this.props.emptyScrollOffset;
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var props2 = this.props;
          var style = props2.style, className = props2.className;
          var rtl = props2.rtl, contain = props2.contain;
          if (contain) {
            style = _objectSpread2({}, style);
            if (contain === true) {
              style.contain = "style layout paint";
            } else {
              style.contain = contain;
            }
          }
          if (this.props.rtl) {
            style = _objectSpread2(_objectSpread2({}, style), {}, {
              direction: "ltr"
            });
          }
          className = (0, _join.default)(className, "inovua-react-virtual-scroll-container", rtl && "inovua-react-virtual-scroll-container--rtl", "inovua-react-virtual-scroll-container--sticky-strategy");
          var stickyStyle = STICKY_STYLE;
          if (this.props.rtl) {
            stickyStyle = _objectSpread2(_objectSpread2({}, stickyStyle), {}, {
              direction: "rtl"
            });
          }
          var beforeHeight = this.getBeforeHeight();
          var afterHeight = this.getAfterHeight();
          var renderView = function renderView2(viewProps) {
            var viewDOMProps = {
              ref: _this2.refView,
              style: stickyStyle,
              key: "view",
              "data-name": "view",
              children: _react.default.createElement("div", {
                style: {
                  position: "absolute",
                  minWidth: "100%",
                  direction: "ltr"
                }
              }, _react.default.createElement("div", {
                style: {
                  position: "absolute",
                  overflow: "visible",
                  minWidth: "100%",
                  direction: _this2.props.rtl ? "rtl" : "ltr"
                }
              }, viewProps.children[0], viewProps.children[1]))
            };
            var result;
            if (_this2.props.renderView) {
              result = _this2.props.renderView(viewDOMProps);
            }
            if (result === void 0) {
              result = _react.default.createElement("div", _objectSpread2({}, viewDOMProps));
            }
            return result;
          };
          var cleanedProps = (0, _reactCleanProps.default)(this.props, this.constructor.propTypes);
          if (this.props.nativeScroll) {
            cleanedProps.scrollbars = false;
          }
          return _react.default.createElement(_src.default, _objectSpread2(_objectSpread2({
            tabIndex: -1,
            display: this.props.display || "block",
            className,
            wrapperStyle: _objectSpread2(_objectSpread2({}, WRAPPER_STYLE), {}, {
              top: beforeHeight,
              bottom: afterHeight
            })
          }, cleanedProps), {}, {
            style,
            before: this.getBefore(),
            after: this.getAfter(),
            nativeScroll: this.props.nativeScroll,
            emptyScrollOffset: 0,
            getScrollSize: this.getScrollSize,
            renderScroller: this.renderScroller,
            renderView,
            onViewResize: this.onViewResize,
            onContainerScroll: this.updateScrollStyle,
            ref: this.refScroller
          }));
        }
      }]);
      return StickyVirtualScrollContainer2;
    }(_react.default.Component);
    StickyVirtualScrollContainer.propTypes = {
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      before: _propTypes.default.element,
      after: _propTypes.default.element,
      extraChildren: _propTypes.default.node,
      renderScrollerSpacer: _propTypes.default.func,
      applyScrollStyle: _propTypes.default.func,
      useTransformToScroll: _propTypes.default.bool,
      preventRtlInherit: _propTypes.default.bool
    };
    StickyVirtualScrollContainer.defaultProps = {
      useTransformToScroll: !IS_EDGE,
      shouldAllowScrollbars: function shouldAllowScrollbars(props2, scrollbarWidth) {
        if (props2.nativeScroll) {
          return false;
        }
        if (scrollbarWidth) {
          return true;
        }
        if (_isMobile.default || (0, _isSafari.default)()) {
          return false;
        }
        return true;
      }
    };
    var _default2 = StickyVirtualScrollContainer;
    exports.default = _default2;
  })(StickyScroller);
  return StickyScroller;
}
var old = {};
var ScrollerFactory = {};
var hasRequiredScrollerFactory;
function requireScrollerFactory() {
  if (hasRequiredScrollerFactory)
    return ScrollerFactory;
  hasRequiredScrollerFactory = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(ScrollerFactory, "__esModule", {
    value: true
  });
  ScrollerFactory.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
  var _debounce = _interopRequireDefault2(requireDebounce$1());
  var _src = _interopRequireDefault2(requireSrc$l());
  var _smoothScrollTo = _interopRequireDefault2(requireSmoothScrollTo());
  var _uglified = _interopRequireDefault2(requireUglified());
  var _join = _interopRequireDefault2(requireJoin());
  var _isSafari = _interopRequireDefault2(requireIsSafari());
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var raf2 = globalObject.requestAnimationFrame;
  var HAS_NEGATIVE_SCROLL;
  var ua2 = globalObject.navigator ? globalObject.navigator.userAgent : "";
  var IS_EDGE = ua2.indexOf("Edge/") !== -1;
  var IS_MS_BROWSER = IS_EDGE || ua2.indexOf("Trident") !== -1;
  var IS_IE = IS_MS_BROWSER && !IS_EDGE;
  var IS_FF = ua2.toLowerCase().indexOf("firefox") > -1;
  var SCROLLER_Z_INDEX = 1e3;
  var SCROLLER_STYLE = {
    overflow: "auto",
    position: "static",
    flex: "1 1 auto",
    WebkitOverflowScrolling: "auto"
  };
  if (IS_EDGE) {
    SCROLLER_STYLE.position = "relative";
  } else {
    SCROLLER_STYLE.zIndex = SCROLLER_Z_INDEX;
  }
  var _default2 = function _default3(displayName, CONFIG) {
    var VirtualScrollContainer = function(_React$Component) {
      (0, _inherits2.default)(VirtualScrollContainer2, _React$Component);
      var _super = _createSuper(VirtualScrollContainer2);
      function VirtualScrollContainer2(props2) {
        var _this;
        (0, _classCallCheck2.default)(this, VirtualScrollContainer2);
        _this = _super.call(this, props2);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
          if (_this.props.onResize) {
            var _this$props;
            (_this$props = _this.props).onResize.apply(_this$props, arguments);
          }
          _this.sync();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sync", function() {
          if (!_this.domNode) {
            return;
          }
          CONFIG.sync.call((0, _assertThisInitialized2.default)(_this));
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function(newValue, config2, callback2) {
          (0, _smoothScrollTo.default)(_this.scroller, newValue, config2, callback2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollbars", function() {
          return {
            horizontal: _this.hasHorizontalScrollbar(),
            vertical: _this.hasVerticalScrollbar()
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasScrollbar", function(orientation) {
          return CONFIG.hasScrollbar.call((0, _assertThisInitialized2.default)(_this), orientation);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasVerticalScrollbar", function() {
          return _this.hasScrollbar("vertical");
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hasHorizontalScrollbar", function() {
          return _this.hasScrollbar("horizontal");
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focus", function() {
          _this.scroller.focus();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function(event2) {
          if (event2.target === _this.domNode) {
            _this.focus();
          }
          if (_this.props.onFocus) {
            _this.props.onFocus(event2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onChildResize", function(scrollSize) {
          _this.setState({
            scrollSize
          }, _this.sync);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollPosition", function() {
          return CONFIG.getScrollPosition.call((0, _assertThisInitialized2.default)(_this));
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollStyle", function(scrollPos) {
          scrollPos = scrollPos || _this.getScrollPosition();
          var _scrollPos = scrollPos, scrollTop = _scrollPos.scrollTop;
          var _scrollPos2 = scrollPos, scrollLeft = _scrollPos2.scrollLeft;
          if (_this.props.rtl && scrollLeft < 0) {
            HAS_NEGATIVE_SCROLL = true;
          }
          var node2 = _this.childNode.current ? _this.childNode.current.firstChild : null;
          if (_this.props.rtl) {
            if (!HAS_NEGATIVE_SCROLL) {
              if (IS_MS_BROWSER) {
                scrollLeft = -scrollLeft;
              } else {
                scrollLeft = -(_this.scrollLeftMax - scrollLeft);
              }
            }
          }
          if (_this.props.applyScrollStyle) {
            _this.props.applyScrollStyle({
              scrollLeft,
              scrollTop
            }, node2);
          } else {
            node2.style.top = "".concat(-scrollTop, "px");
            node2.style.left = "".concat(-scrollLeft, "px");
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onNotifyResizeMount", function() {
          _this.notifierMounted = true;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBefore", function() {
          var before = _this.props.before;
          if (!before) {
            return null;
          }
          return _react.default.cloneElement(before, {
            key: "before",
            style: _objectSpread2({
              position: "absolute",
              top: 0,
              zIndex: 2 * SCROLLER_Z_INDEX + 1
            }, before.props.style),
            children: _react.default.createElement(_react.default.Fragment, null, before.props.children, _react.default.createElement(_src.default, {
              notifyOnMount: true,
              onResize: _this.onBeforeElementResize
            }))
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfter", function() {
          var after = _this.props.after;
          if (!after) {
            return null;
          }
          var bottom = _this.props.nativeScroll ? _this.oldScrollbars && _this.oldScrollbars.horizontal ? (0, _getScrollbarWidth.default)() : 0 : 0;
          return _react.default.cloneElement(after, {
            key: "after",
            style: _objectSpread2(_objectSpread2({
              position: "absolute",
              zIndex: 2 * SCROLLER_Z_INDEX + 1
            }, after.props.style), {}, {
              bottom
            }),
            children: _react.default.createElement(_react.default.Fragment, null, after.props.children, _react.default.createElement(_src.default, {
              notifyOnMount: true,
              onResize: _this.onAfterElementResize
            }))
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getBeforeHeight", function() {
          return _this.props.before ? _this.state.beforeElementSize.height || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getAfterHeight", function() {
          return _this.props.after ? _this.state.afterElementSize.height || 0 : 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onBeforeElementResize", function(size2) {
          _this.setState({
            beforeElementSize: size2
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAfterElementResize", function(size2) {
          _this.setState({
            afterElementSize: size2
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollIntoView", function(_ref2) {
          var target = _ref2.target;
          if (target === _this.childNode.current) {
            if (target.scrollTop !== 0) {
              _this.scrollTop += target.scrollTop;
              target.scrollTop = 0;
            }
            if (target.scrollLeft !== 0) {
              _this.scrollLeft += target.scrollLeft;
              target.scrollLeft = 0;
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollIntent", function() {
          if (!_this.wheelCapturedOnScroller || IS_EDGE) {
            return;
          }
          _this.clear();
          _this.lazyRestorePointerEvents();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lazyRestorePointerEvents", function() {
          if (_this.childNode.current && _this.wheelCapturedOnScroller) {
            _this.clear();
            _this.rafHandle = raf2(function() {
              _this.wheelCapturedOnScroller = false;
              delete _this.rafHandle;
              _this.childNode.current.style.pointerEvents = "auto";
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onWheelEvent", function(event2) {
          if ((0, _isSafari.default)() && globalObject.WheelEvent) {
            _this.scrollerNode.dispatchEvent(new WheelEvent("wheel", event2.nativeEvent));
            event2.stopPropagation();
            event2.preventDefault();
            return;
          }
          _this.childNode.current.style.pointerEvents = "none";
          _this.wheelCapturedOnScroller = true;
          event2.stopPropagation();
          var isProbablyChrome = !IS_MS_BROWSER && !IS_FF && !(0, _isSafari.default)();
          var now2 = Date.now ? Date.now() : +/* @__PURE__ */ new Date();
          if (isProbablyChrome) {
            if (now2 - _this.wheelEventTimestamp < 150) {
              event2.preventDefault();
            }
          } else {
            event2.preventDefault();
          }
          _this.wheelEventTimestamp = now2;
          _this.onScrollIntent();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clear", function() {
          if (_this.rafHandle) {
            cancelAnimationFrame(_this.rafHandle);
            _this.rafHandle = null;
          }
        });
        _this.wheelEventTimestamp = 0;
        _this.lazyRestorePointerEvents = (0, _debounce.default)(_this.lazyRestorePointerEvents, props2.pointerEventsRestoreDelay, {
          leading: false,
          trailing: true
        });
        _this.childNode = (0, _react.createRef)();
        _this.refThis = function(c2) {
          _this.domNode = c2;
        };
        if (CONFIG.init) {
          CONFIG.init.call((0, _assertThisInitialized2.default)(_this), props2);
        }
        _this.state = {
          beforeElementSize: {
            height: 0
          },
          afterElementSize: {
            height: 0
          }
        };
        return _this;
      }
      (0, _createClass2.default)(VirtualScrollContainer2, [{
        key: "ensureNonStaticStyle",
        value: function ensureNonStaticStyle(style, domNode) {
          if (!this.props.forceNonStaticPosition) {
            return style;
          }
          style = style || {};
          var _style = style, position2 = _style.position;
          var nonStatic = position2 === "relative" || position2 === "absolute";
          if (nonStatic) {
            return style;
          }
          if (domNode) {
            position2 = globalObject.getComputedStyle(domNode).position;
            nonStatic = position2 === "relative" || position2 === "absolute";
            if (!nonStatic) {
              return Object.assign({}, style, {
                position: "relative"
              });
            }
          }
          return Object.assign({}, style, {
            position: "relative"
          });
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.showWarnings) {
            if (!this.props.scrollSize) {
              if (!this.notifierMounted) {
                console.warn("The component inside the ".concat(displayName, " has not rendered its children. Please either render its children, or specify a 'scrollSize' prop to determine the size of the scrolling content."));
              }
            }
            if (!this.props.forceNonStaticPosition && getComputedStyle(this.domNode).position === "static") {
              console.warn("".concat(displayName, ' has position: "static". It should have a non-static position!'));
            }
          }
          var contentNode = this.childNode.current ? this.childNode.current.firstChild : null;
          if (contentNode) {
            contentNode.style.willChange = "transform";
          }
          if (this.props.rtl && !this.scrollLeft) {
            this.updateScrollStyle();
          }
          this.sync();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var prevScrollSize = prevProps.scrollSize;
          var scrollSize = this.props.scrollSize;
          if (prevScrollSize && !scrollSize) {
            this.sync();
          } else if (prevScrollSize && scrollSize) {
            if (prevScrollSize.width !== scrollSize.width || prevScrollSize.height !== scrollSize.height) {
              this.sync();
            }
          }
        }
      }, {
        key: "clientSize",
        get: function get2() {
          return CONFIG.getClientSize.call(this);
        }
      }, {
        key: "scrollTopMax",
        get: function get2() {
          return CONFIG.getScrollTopMax.call(this);
        }
      }, {
        key: "scrollLeftMax",
        get: function get2() {
          return CONFIG.getScrollLeftMax.call(this);
        }
      }, {
        key: "scrollTop",
        get: function get2() {
          return this.scroller.scrollTop;
        },
        set: function set2(value) {
          this.scroller.scrollTop = value;
        }
      }, {
        key: "scrollLeft",
        get: function get2() {
          return this.scroller.scrollLeft;
        },
        set: function set2(value) {
          this.scroller.scrollLeft = value;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var style = props2.style, className = props2.className;
          var rtl = props2.rtl, inertialScroll = props2.inertialScroll, useWheelCapture = props2.useWheelCapture, contain = props2.contain, renderView = props2.renderView;
          style = Object.assign({}, this.ensureNonStaticStyle(style, this.domNode), {
            overflow: "hidden",
            display: "flex",
            alignItems: "stretch",
            alignContent: "stretch",
            flexFlow: "column",
            flexWrap: "nowrap",
            transform: "translate3d(0px, 0px, 0px)"
          });
          if (contain) {
            if (contain === true) {
              style.contain = "style layout paint";
            } else {
              style.contain = contain;
            }
          }
          className = (0, _join.default)(className, "inovua-react-virtual-scroll-container", rtl && "inovua-react-virtual-scroll-container--rtl");
          if (CONFIG.prepareClassName) {
            className = CONFIG.prepareClassName.call(this, className);
          }
          var content = _react.default.Children.only(props2.children);
          var newContentProps = {};
          if (!this.props.scrollSize) {
            newContentProps.children = [_react.default.createElement(_src.default, {
              key: "notify-resize",
              onResize: this.onChildResize,
              notifyOnMount: true,
              ResizeObserver: this.props.ResizeObserver,
              useRaf: this.props.rafOnResize,
              checkResizeDelay: this.props.checkResizeDelay,
              onMount: this.onNotifyResizeMount
            }), content.props.children];
          }
          newContentProps.style = Object.assign({}, content.props.style, (0, _defineProperty2.default)({
            position: "absolute",
            top: 0
          }, rtl ? "right" : "left", 0));
          var beforeHeight = this.getBeforeHeight();
          var useAbsolutePosition = IS_IE || IS_FF;
          var childStyle = {
            overflow: "hidden",
            position: useAbsolutePosition ? "absolute" : "fixed",
            top: beforeHeight,
            left: 0,
            right: 0,
            bottom: 0
          };
          if (!useAbsolutePosition) {
            childStyle.backfaceVisibility = "hidden";
            if ((0, _isSafari.default)()) {
              childStyle.WebkitBackfaceVisibility = "hidden";
            }
          }
          if (!IS_EDGE) {
            childStyle.zIndex = 2 * SCROLLER_Z_INDEX;
          }
          var domProps = (0, _defineProperty2.default)({
            ref: this.childNode,
            style: childStyle,
            onScroll: this.scrollIntoView
          }, useWheelCapture ? "onWheelCapture" : "onWheel", IS_EDGE ? null : this.onWheelEvent);
          content = _react.default.createElement(_react.default.Fragment, null, this.getBefore(), _react.default.createElement("div", _objectSpread2({
            key: "content"
          }, domProps), (0, _react.cloneElement)(content, newContentProps)), this.getAfter());
          var scrollSize = this.props.scrollSize || this.state.scrollSize;
          var afterHeight = this.getAfterHeight();
          var extraHeight = beforeHeight + afterHeight;
          if (extraHeight && scrollSize) {
            scrollSize = Object.assign({}, scrollSize, {
              height: scrollSize.height + extraHeight
            });
          }
          var spacer = _react.default.createElement("div", {
            "data-name": "spacer",
            key: "spacer",
            style: Object.assign({
              pointerEvents: "none"
            }, scrollSize)
          });
          if (this.props.renderSpacer) {
            spacer = this.props.renderSpacer(spacer, {
              scrollSize
            });
          }
          var scrollerStyle = inertialScroll ? Object.assign({}, SCROLLER_STYLE, {
            WebkitOverflowScrolling: "touch"
          }) : SCROLLER_STYLE;
          return _react.default.createElement("div", _objectSpread2(_objectSpread2({
            tabIndex: -1
          }, (0, _reactCleanProps.default)(this.props, this.constructor.propTypes)), {}, {
            onFocus: this.onFocus,
            style,
            className,
            ref: this.refThis
          }), _react.default.createElement(_src.default, {
            onResize: this.onResize,
            notifyOnMount: true,
            ResizeObserver: this.props.ResizeObserver,
            useRaf: this.props.rafOnResize,
            checkResizeDelay: this.props.checkResizeDelay,
            measureSize: this.props.measureSize
          }), CONFIG.renderScroller.call(this, {
            props: props2,
            content,
            spacer,
            scrollerStyle,
            renderView
          }));
        }
      }]);
      return VirtualScrollContainer2;
    }(_react.default.Component);
    VirtualScrollContainer.propTypes = {
      applyScrollStyle: _propTypes.default.func,
      avoidRepaintOnScroll: _propTypes.default.bool,
      forceNonStaticPosition: _propTypes.default.bool,
      hideNativeScrollbarIfPossible: _propTypes.default.bool,
      inertialScroll: _propTypes.default.bool,
      measureSize: _propTypes.default.func,
      onResize: _propTypes.default.func,
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      onScrollbarsChange: _propTypes.default.func,
      pointerEventsRestoreDelay: _propTypes.default.number,
      checkResizeDelay: _propTypes.default.number,
      rafOnResize: _propTypes.default.bool,
      rtl: _propTypes.default.bool,
      scrollSize: _propTypes.default.shape({
        height: _propTypes.default.number,
        width: _propTypes.default.number
      }),
      scrollerStyle: _propTypes.default.shape({}),
      viewStyle: _propTypes.default.shape({}),
      showWarnings: _propTypes.default.bool,
      useWheelCapture: _propTypes.default.bool
    };
    VirtualScrollContainer.defaultProps = {
      avoidRepaintOnScroll: true,
      inertialScroll: true,
      rtl: false,
      rafOnResize: true,
      useWheelCapture: true,
      forceNonStaticPosition: false,
      pointerEventsRestoreDelay: 250,
      showWarnings: !_uglified.default
    };
    return VirtualScrollContainer;
  };
  ScrollerFactory.default = _default2;
  return ScrollerFactory;
}
var hasRequiredOld;
function requireOld() {
  if (hasRequiredOld)
    return old;
  hasRequiredOld = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(old, "__esModule", {
    value: true
  });
  old.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _src = _interopRequireWildcard(requireSrc$e());
  var _ScrollerFactory = _interopRequireDefault2(requireScrollerFactory());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var raf2 = globalObject.requestAnimationFrame;
  var caf = globalObject.cancelAnimationFrame;
  var VIEW_STYLE = {
    position: "static"
  };
  var FLEX_1_STYLE = {
    flex: 1
  };
  var filterScrollerProps = function filterScrollerProps2(props2) {
    return Object.keys(props2).reduce(function(acc, propName) {
      if (_src.propTypes[propName] !== void 0) {
        acc[propName] = props2[propName];
      }
      return acc;
    }, {});
  };
  var InovuaVirtualScrollContainer = (0, _ScrollerFactory.default)("InovuaVirtualScrollContainer", {
    init: function init2() {
      var _this = this;
      this.childScrollLeft = 0;
      this.childScrollTop = 0;
      this.refScroller = function(s) {
        _this.scroller = s;
        _this.scrollerNode = s ? s.getScrollerNode() : null;
      };
      this.onContainerScroll = function(scrollPos) {
        var scrollLeft = scrollPos.scrollLeft, scrollTop = scrollPos.scrollTop;
        _this.childScrollLeft = scrollLeft;
        _this.childScrollTop = scrollTop;
        if (_this.containerScrollRafId) {
          caf(_this.containerScrollRafId);
        }
        _this.containerScrollRafId = raf2(function() {
          delete _this.containerScrollRafId;
          _this.updateScrollStyle(scrollPos);
        });
        if (_this.props.onContainerScroll) {
          var _this$props;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_this$props = _this.props).onContainerScroll.apply(_this$props, [scrollPos].concat(args));
        }
        if (_this.onScrollIntent) {
          _this.onScrollIntent();
        }
      };
    },
    sync: function sync() {
      if (!this.scroller) {
        return;
      }
      if (this.scroller.rafSync) {
        this.scroller.rafSync();
      } else if (this.scroller.sync) {
        this.scroller.sync();
      }
    },
    getClientSize: function getClientSize() {
      var scroller = this.scroller;
      return scroller.getClientSize();
    },
    hasScrollbar: function hasScrollbar(orientation) {
      return this.scroller.hasScrollbar(orientation);
    },
    getScrollLeftMax: function getScrollLeftMax() {
      var scroller = this.scroller;
      return scroller.scrollLeftMax;
    },
    getScrollTopMax: function getScrollTopMax() {
      var scroller = this.scroller;
      return scroller.scrollTopMax;
    },
    getScrollPosition: function getScrollPosition() {
      return {
        scrollTop: this.childScrollTop,
        scrollLeft: this.childScrollLeft
      };
    },
    renderScroller: function renderScroller(_ref2) {
      var props2 = _ref2.props, content = _ref2.content, spacer = _ref2.spacer, scrollerStyle = _ref2.scrollerStyle, renderView = _ref2.renderView, viewStyle = _ref2.viewStyle;
      var className = "inovua-react-virtual-scroll-container__scroll-container";
      if (props2.avoidRepaintOnScroll) {
        className += " ".concat(className, "--avoid-repaint");
      }
      return _react.default.createElement(_src.default, _objectSpread2(_objectSpread2({}, filterScrollerProps(props2)), {}, {
        onContainerScroll: this.onContainerScroll,
        ref: this.refScroller,
        style: FLEX_1_STYLE,
        className,
        scrollerStyle,
        renderView,
        viewStyle: viewStyle ? Object.assign({}, VIEW_STYLE, viewStyle) : VIEW_STYLE,
        resizer: false
      }), content, spacer);
    }
  });
  InovuaVirtualScrollContainer.propTypes = Object.assign({
    renderSpacer: _propTypes.default.func,
    renderScrollerSpacer: _propTypes.default.func
  }, _src.propTypes, InovuaVirtualScrollContainer.propTypes);
  var _default2 = InovuaVirtualScrollContainer;
  old.default = _default2;
  return old;
}
var NativeScrollContainer = {};
var hasRequiredNativeScrollContainer;
function requireNativeScrollContainer() {
  if (hasRequiredNativeScrollContainer)
    return NativeScrollContainer;
  hasRequiredNativeScrollContainer = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(NativeScrollContainer, "__esModule", {
    value: true
  });
  NativeScrollContainer.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _src = requireSrc$e();
  var _debounce = _interopRequireDefault2(requireDebounce$1());
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  var _isSafari = _interopRequireDefault2(requireIsSafari());
  var _ScrollerFactory = _interopRequireDefault2(requireScrollerFactory());
  var _getGlobal = requireGetGlobal();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var raf2 = globalObject.requestAnimationFrame;
  var emptyObject = {};
  var SCROLLBAR_WIDTH = (0, _getScrollbarWidth.default)();
  var onScrollbarsChange = function onScrollbarsChange2(scrollbars) {
    if (SCROLLBAR_WIDTH) {
      var style = this.childNode.style;
      var rtl = this.props.rtl;
      var right = scrollbars.vertical ? SCROLLBAR_WIDTH : 0;
      var bottom = scrollbars.horizontal ? SCROLLBAR_WIDTH : 0;
      style ? style[rtl && !(0, _isSafari.default)() ? "left" : "right"] = "".concat(right, "px") : null;
      style ? style.bottom = "".concat(bottom, "px") : null;
    }
    if (this.props.onScrollbarsChange) {
      this.props.onScrollbarsChange(scrollbars);
    }
  };
  var onStop = function onStop2(scrollPos, prevScrollPos) {
    this.scrollStarted = false;
    if (this.props.onScrollStop) {
      this.props.onScrollStop(scrollPos, prevScrollPos);
    }
  };
  var onScroll = function onScroll2(_ref2) {
    var target = _ref2.target;
    var _this$props = this.props, onScrollStart = _this$props.onScrollStart, onScrollStop = _this$props.onScrollStop;
    var startStop = !!(onScrollStart || onScrollStop);
    var scrollTop = target.scrollTop, scrollLeft = target.scrollLeft;
    var scrollPos = {
      scrollTop,
      scrollLeft
    };
    var prevScrollPos = this.currentScrollPosition || emptyObject;
    var prevScrollTop = prevScrollPos.scrollTop, prevScrollLeft = prevScrollPos.scrollLeft;
    if (startStop) {
      if (!this.scrollStarted) {
        if (onScrollStart) {
          onScrollStart(scrollPos, prevScrollPos);
        }
      }
    }
    var scrollVertical = false;
    var scrollHorizontal = false;
    if (this.props.onContainerScroll) {
      this.props.onContainerScroll(scrollPos, prevScrollPos);
    }
    var scrollTopChange = scrollTop !== prevScrollTop;
    if (scrollTopChange) {
      scrollVertical = true;
      if (this.props.onContainerScrollVertical) {
        this.props.onContainerScrollVertical(scrollTop, prevScrollTop);
      }
      if (this.props.onContainerScrollVerticalMin && scrollTop === 0) {
        this.props.onContainerScrollVerticalMin(0);
      }
      if (this.props.onContainerScrollVerticalMax && scrollTop === this.scrollTopMax) {
        this.props.onContainerScrollVerticalMax(scrollTop);
      }
    }
    var scrollLeftChange = scrollLeft !== prevScrollLeft;
    if (scrollLeftChange) {
      scrollHorizontal = true;
      if (this.props.onContainerScrollHorizontal) {
        this.props.onContainerScrollHorizontal(scrollLeft, prevScrollLeft);
      }
      if (this.props.onContainerScrollHorizontalMin && scrollLeft === 0) {
        this.props.onContainerScrollHorizontalMin(0);
      }
      if (this.props.onContainerScrollHorizontalMax && scrollLeft === this.scrollLeftMax) {
        this.props.onContainerScrollHorizontalMax(scrollLeft);
      }
    }
    if (startStop && (scrollTopChange || scrollLeftChange)) {
      if (!this.scrollStarted || this.scrollStarted.vertical !== scrollVertical || this.scrollStarted.horizontal !== scrollHorizontal) {
        this.scrollStarted = {
          horizontal: scrollHorizontal,
          vertical: scrollVertical
        };
      }
      this.onStop(scrollPos, prevScrollPos);
    }
    this.currentScrollPosition = scrollPos;
  };
  var InovuaNativeScrollContainer = (0, _ScrollerFactory.default)("InovuaNativeScrollContainer", {
    init: function init2(props2) {
      var _this = this;
      this.refScroller = function(s) {
        _this.scroller = s;
      };
      this.onStop = (0, _debounce.default)(onStop.bind(this), props2.scrollStopDelay, {
        leading: false
      });
      this.onScrollerScroll = function(event2) {
        if (event2.target === _this.scroller) {
          raf2(function() {
            _this.updateScrollStyle();
          });
          onScroll.call(_this, event2);
          _this.onScrollIntent();
        }
        if (_this.props.onScroll) {
          _this.props.onScroll(event2);
        }
      };
    },
    prepareClassName: function prepareClassName2(className) {
      return "".concat(className, " inovua-react-virtual-scroll-container--native");
    },
    sync: function sync() {
      if (!this.oldScrollbars) {
        this.oldScrollbars = this.getScrollbars();
        return;
      }
      var scrollbars = this.getScrollbars();
      if (scrollbars.vertical !== this.oldScrollbars.vertical || scrollbars.horizontal !== this.oldScrollbars.horizontal) {
        onScrollbarsChange.call(this, scrollbars);
      }
      this.oldScrollbars = scrollbars;
    },
    getClientSize: function getClientSize() {
      var scroller = this.scroller;
      return {
        height: scroller.clientHeight,
        width: scroller.clientWidth
      };
    },
    hasScrollbar: function hasScrollbar(orientation) {
      var scroller = this.scroller;
      return orientation === "horizontal" ? scroller.scrollWidth > scroller.clientWidth : scroller.scrollHeight > scroller.clientHeight;
    },
    getScrollLeftMax: function getScrollLeftMax() {
      var scroller = this.scroller;
      return scroller.scrollWidth - scroller.clientWidth;
    },
    getScrollTopMax: function getScrollTopMax() {
      var scroller = this.scroller;
      return scroller.scrollHeight - scroller.clientHeight;
    },
    getScrollPosition: function getScrollPosition() {
      return {
        scrollTop: this.scrollTop,
        scrollLeft: this.scrollLeft
      };
    },
    renderScroller: function renderScroller(_ref2) {
      var content = _ref2.content, spacer = _ref2.spacer, scrollerStyle = _ref2.scrollerStyle, props2 = _ref2.props;
      var renderScroller2 = props2.renderScroller;
      var className = "inovua-react-virtual-scroll-container__scroll-container";
      if (props2.avoidRepaintOnScroll) {
        className += " ".concat(className, "--avoid-repaint");
      }
      var domProps = {
        key: "scroller",
        tabIndex: -1,
        onScroll: this.onScrollerScroll,
        ref: this.refScroller,
        style: scrollerStyle,
        className,
        children: [content, spacer]
      };
      var result = typeof renderScroller2 === "function" ? renderScroller2(domProps) : _react.default.createElement("div", _objectSpread2({}, domProps));
      return result;
    }
  });
  InovuaNativeScrollContainer.propTypes = _objectSpread2(_objectSpread2({
    renderScrollerSpacer: _propTypes.default.func
  }, _src.propTypes), InovuaNativeScrollContainer.propTypes);
  InovuaNativeScrollContainer.defaultProps.scrollStopDelay = 150;
  var _default2 = InovuaNativeScrollContainer;
  NativeScrollContainer.default = _default2;
  return NativeScrollContainer;
}
var hasRequiredSrc$3;
function requireSrc$3() {
  if (hasRequiredSrc$3)
    return src$2;
  hasRequiredSrc$3 = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.NativeScrollContainer = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get2() {
        return _getScrollbarWidth.default;
      }
    });
    Object.defineProperty(exports, "hasSticky", {
      enumerable: true,
      get: function get2() {
        return _hasSticky.default;
      }
    });
    Object.defineProperty(exports, "isMobile", {
      enumerable: true,
      get: function get2() {
        return _StickyScroller.isMobile;
      }
    });
    var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
    var _hasSticky = _interopRequireDefault2(requireHasSticky());
    var _StickyScroller = _interopRequireWildcard(requireStickyScroller());
    var _old = _interopRequireDefault2(requireOld());
    var _NativeScrollContainer = _interopRequireDefault2(requireNativeScrollContainer());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = (0, _hasSticky.default)() ? _StickyScroller.default : _old.default;
    exports.default = _default2;
    var NativeScrollContainer2 = (0, _hasSticky.default)() ? _StickyScroller.default : _NativeScrollContainer.default;
    exports.NativeScrollContainer = NativeScrollContainer2;
  })(src$2);
  return src$2;
}
var binarySearch$1 = {};
var hasRequiredBinarySearch;
function requireBinarySearch() {
  if (hasRequiredBinarySearch)
    return binarySearch$1;
  hasRequiredBinarySearch = 1;
  Object.defineProperty(binarySearch$1, "__esModule", {
    value: true
  });
  binarySearch$1.default = void 0;
  var _default2 = function _default3(haystack, needle, comparator, low, high) {
    var mid, cmp;
    if (low === void 0)
      low = 0;
    else {
      low = low | 0;
      if (low < 0 || low >= haystack.length)
        throw new RangeError("invalid lower bound");
    }
    if (high === void 0)
      high = haystack.length - 1;
    else {
      high = high | 0;
      if (high < low || high >= haystack.length)
        throw new RangeError("invalid upper bound");
    }
    while (low <= high) {
      mid = low + (high - low >> 1);
      cmp = +comparator(haystack[mid], needle, mid, haystack);
      if (cmp < 0)
        low = mid + 1;
      else if (cmp > 0)
        high = mid - 1;
      else
        return mid;
    }
    return ~low;
  };
  binarySearch$1.default = _default2;
  return binarySearch$1;
}
var RowHeightManager = {};
var hasRequiredRowHeightManager;
function requireRowHeightManager() {
  if (hasRequiredRowHeightManager)
    return RowHeightManager;
  hasRequiredRowHeightManager = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(RowHeightManager, "__esModule", {
    value: true
  });
  RowHeightManager.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _binarySearch = _interopRequireDefault2(requireBinarySearch());
  var _eventemitter = _interopRequireDefault2(requireEventemitter3());
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var sortAsc = function sortAsc2(a, b2) {
    return a - b2;
  };
  var RowHeightManager$1 = function(_EventEmitter) {
    (0, _inherits2.default)(RowHeightManager2, _EventEmitter);
    var _super = _createSuper(RowHeightManager2);
    function RowHeightManager2(rowHeight) {
      var _this;
      var rowHeightsMap = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var config2 = arguments.length > 2 ? arguments[2] : void 0;
      (0, _classCallCheck2.default)(this, RowHeightManager2);
      _this = _super.call(this);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowHeight", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowHeightFn", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "map", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "heights", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indexes", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offsets", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "minHeight", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "maxHeight", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indexesToOffsets", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offsetsToIndexes", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lazyRowHeightRafId", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowToOffsetCache", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cache", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "__id", "");
      _this.rowHeight = (0, _typeof2.default)(rowHeight) === "object" ? typeof rowHeight.rowHeight === "number" ? rowHeight.rowHeight : rowHeight.minRowHeight || 40 : 40;
      _this.map = rowHeightsMap;
      if ((0, _typeof2.default)(rowHeight) === "object" && typeof rowHeight.rowHeight === "function") {
        _this.rowHeightFn = rowHeight.rowHeight;
      }
      if (!config2 || config2.cache !== false) {
        _this.setCache({});
      }
      _this.index(_this.rowHeight, rowHeightsMap);
      return _this;
    }
    (0, _createClass2.default)(RowHeightManager2, [{
      key: "setRowHeight",
      value: function setRowHeight(_ref2) {
        var index2 = _ref2.index, height = _ref2.height, defaultRowHeight = _ref2.defaultRowHeight, skipIndex = _ref2.skipIndex;
        if (this.map[index2] === height && !defaultRowHeight) {
          console.warn("NOOP");
          return;
        }
        this.map[index2] = height;
        if (defaultRowHeight) {
          this.rowHeight = defaultRowHeight;
        }
        if (this.cache) {
          this.setCache({});
        }
        if (!skipIndex) {
          this.index();
        }
      }
    }, {
      key: "indexRaf",
      value: function indexRaf() {
        var _this2 = this;
        if (this.lazyRowHeightRafId) {
          cancelAnimationFrame(this.lazyRowHeightRafId);
          this.lazyRowHeightRafId = 0;
        }
        this.lazyRowHeightRafId = requestAnimationFrame(function() {
          _this2.lazyRowHeightRafId = 0;
          _this2.index();
        });
      }
    }, {
      key: "setRowHeightLazy",
      value: function setRowHeightLazy(_ref2) {
        var index2 = _ref2.index, height = _ref2.height, defaultRowHeight = _ref2.defaultRowHeight;
        this.setRowHeight({
          index: index2,
          height,
          defaultRowHeight: defaultRowHeight || this.rowHeight,
          skipIndex: true
        });
        this.indexRaf();
      }
    }, {
      key: "setHeights",
      value: function setHeights(map2) {
        this.map = map2;
        if (this.cache) {
          this.setCache({});
        }
        this.index(this.rowHeight, this.map);
      }
    }, {
      key: "setValues",
      value: function setValues(_ref3) {
        var defaultRowHeight = _ref3.defaultRowHeight, map2 = _ref3.map;
        if (defaultRowHeight) {
          this.rowHeight = defaultRowHeight;
        }
        if (this.map) {
          this.map = map2;
        }
        if (this.cache) {
          this.setCache({});
        }
        this.index(this.rowHeight, this.map);
      }
    }, {
      key: "setDefaultRowHeight",
      value: function setDefaultRowHeight(defaultRowHeight) {
        this.rowHeight = defaultRowHeight;
        if (this.cache) {
          this.setCache({});
        }
        this.index(this.rowHeight, this.map);
      }
    }, {
      key: "index",
      value: function index2() {
        var _this3 = this;
        var defaultRowHeight = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.rowHeight;
        var map2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.map;
        this.rowToOffsetCache = {};
        var indexes = map2 ? Object.keys(map2).map(function(x2) {
          return +x2;
        }).sort(sortAsc) : [];
        this.minHeight = defaultRowHeight;
        this.maxHeight = defaultRowHeight;
        this.__id = JSON.stringify(this.heights);
        this.heights = indexes.map(function(index3) {
          var height = map2[index3];
          if (height > _this3.maxHeight) {
            _this3.maxHeight = height;
          }
          if (height < _this3.minHeight) {
            _this3.minHeight = height;
          }
          return [index3, height];
        });
        var prev2 = 0;
        this.indexes = indexes;
        this.offsets = indexes.map(function(index3, i) {
          var prevIndex = i === 0 ? -1 : indexes[i - 1];
          var prevIndexRowHeight = map2[prevIndex] || 0;
          return prev2 = prev2 + (index3 - (prevIndex + 1)) * defaultRowHeight + prevIndexRowHeight;
        });
        this.offsetsToIndexes = {};
        this.indexesToOffsets = this.offsets.reduce(function(acc, offset, i) {
          var index3 = indexes[i];
          acc[index3] = offset;
          _this3.offsetsToIndexes[offset] = index3;
          return acc;
        }, {});
        var __id = JSON.stringify(this.heights);
        if (__id === this.__id) {
          return;
        }
        this.afterIndex();
      }
    }, {
      key: "afterIndex",
      value: function afterIndex() {
        this.emit("index");
      }
    }, {
      key: "setCache",
      value: function setCache(cache) {
        this.cache = cache;
      }
    }, {
      key: "getTotalSize",
      value: function getTotalSize(count) {
        if (count == null) {
          throw new Error("Specify a count when calling getTotalSize!");
        }
        if (count <= 0 || isNaN(count)) {
          return 0;
        }
        var sum = 0;
        for (var i = 0; i < count; i++) {
          var value = this.map[i];
          sum += value === void 0 ? this.rowHeight : value;
        }
        return sum;
      }
    }, {
      key: "getDefaultRowHeight",
      value: function getDefaultRowHeight() {
        return this.rowHeight;
      }
    }, {
      key: "getMinHeight",
      value: function getMinHeight() {
        return this.minHeight || this.rowHeight;
      }
    }, {
      key: "getMaxHeight",
      value: function getMaxHeight() {
        return this.maxHeight || this.rowHeight;
      }
    }, {
      key: "getRowOffset",
      value: function getRowOffset(index2) {
        var offset = this.indexesToOffsets[index2];
        if (offset !== void 0) {
          return offset;
        }
        offset = this.rowToOffsetCache[index2];
        if (offset !== void 0) {
          return offset;
        }
        var insertPos = ~(0, _binarySearch.default)(this.indexes, index2, sortAsc);
        var closestIndex = this.indexes[insertPos - 1];
        if (insertPos === 0) {
          offset = index2 * this.rowHeight;
        } else {
          var closestOffset = this.indexesToOffsets[closestIndex];
          offset = closestOffset + this.map[closestIndex] + (index2 - closestIndex - 1) * this.rowHeight;
        }
        this.rowToOffsetCache[index2] = offset;
        return offset;
      }
    }, {
      key: "getRowHeight",
      value: function getRowHeight(index2, fn) {
        var value = this.map[index2];
        if (value !== void 0) {
          return value;
        }
        if (fn) {
          return fn();
        }
        return this.rowHeight;
      }
    }, {
      key: "getRowAt",
      value: function getRowAt(offset) {
        if (offset < 0) {
          return 0;
        }
        var roundedOffset = Math.floor(offset / this.rowHeight) * this.rowHeight;
        var result = this.cache ? this.cache[roundedOffset] : void 0;
        if (result !== void 0) {
          return result;
        }
        if (!this.map) {
          result = roundedOffset / this.rowHeight;
          if (this.cache) {
            this.cache[roundedOffset] = result;
          }
          return result;
        }
        var index2 = (0, _binarySearch.default)(this.offsets, offset, sortAsc);
        if (index2 < 0) {
          var insertPos = ~index2;
          var beforeKnownIndex = this.indexes[insertPos - 1];
          if (beforeKnownIndex !== void 0) {
            var beforeKnownOffset = this.indexesToOffsets[beforeKnownIndex];
            var nextOffset = beforeKnownOffset + this.map[beforeKnownIndex];
            if (offset < nextOffset) {
              result = beforeKnownIndex;
            } else {
              result = beforeKnownIndex + Math.floor((offset - nextOffset) / this.rowHeight) + 1;
            }
          } else {
            result = Math.floor(offset / this.rowHeight);
          }
        } else {
          result = this.indexes[index2];
        }
        if (this.cache) {
          this.cache[roundedOffset] = result;
        }
        return result;
      }
    }]);
    return RowHeightManager2;
  }(_eventemitter.default);
  var _default2 = RowHeightManager$1;
  RowHeightManager.default = _default2;
  return RowHeightManager;
}
var renderRows$1 = {};
var Row$1 = {};
var sealedObjectFactory = {};
var hasRequiredSealedObjectFactory;
function requireSealedObjectFactory() {
  if (hasRequiredSealedObjectFactory)
    return sealedObjectFactory;
  hasRequiredSealedObjectFactory = 1;
  Object.defineProperty(sealedObjectFactory, "__esModule", {
    value: true
  });
  sealedObjectFactory.default = void 0;
  var DEFAULTS = {};
  var _default2 = function _default3() {
    var shape = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULTS;
    var sealed = Object.seal ? Object.seal(shape) : {};
    return sealed;
  };
  sealedObjectFactory.default = _default2;
  return sealedObjectFactory;
}
var hasRequiredRow$1;
function requireRow$1() {
  if (hasRequiredRow$1)
    return Row$1;
  hasRequiredRow$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Row$1, "__esModule", {
    value: true
  });
  Row$1.propTypes = Row$1.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$5());
  var _sealedObjectFactory = _interopRequireDefault2(requireSealedObjectFactory());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var sharedRowProps = (0, _sealedObjectFactory.default)({
    index: null,
    count: null,
    rowHeight: null,
    renderIndex: null,
    empty: null,
    sticky: null,
    rowSpan: null
  });
  var STR_HIDDEN = "hidden";
  var STR_ABSOLUTE = "absolute";
  var STR_ZERO_PX = "0px";
  var STR_VISIBLE = "visible";
  var raf2 = globalObject.requestAnimationFrame;
  var caf = globalObject.cancelAnimationFrame;
  var InovuaVirtualListRow = function(_React$Component) {
    (0, _inherits2.default)(InovuaVirtualListRow2, _React$Component);
    var _super = _createSuper(InovuaVirtualListRow2);
    function InovuaVirtualListRow2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaVirtualListRow2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mounted", true);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_appliedIndex", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refetchNode", true);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visible", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "index", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "offset", 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowSpan", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "oldRowSpan", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "row", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "node", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "prepareSetIndex", function() {
        var rowHeightManager = _this.props.rowHeightManager;
        if (rowHeightManager != null) {
          var index2 = _this.getIndex();
          delete _this.index;
          _this.setIndex(index2, void 0, false);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowSpan", function() {
        return _this.rowSpan;
      });
      _this.ref = function(r2) {
        _this.row = r2;
      };
      _this.mounted = true;
      return _this;
    }
    (0, _createClass2.default)(InovuaVirtualListRow2, [{
      key: "getInstance",
      value: function getInstance() {
        return this.row;
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        if (!nextProps.pure) {
          return true;
        }
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.mounted = true;
        if (this.props.onMount) {
          this.props.onMount(this);
        }
        var naturalRowHeight = this.props.naturalRowHeight;
        this.fetchNode();
        if (naturalRowHeight && this.node) {
          this.node.style.visibility = STR_HIDDEN;
          return;
        }
        this.updateRowHeight();
        this.updateRowSpan();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;
        if (this.props.onUnmount) {
          this.props.onUnmount(this);
        }
        this.node = null;
        this.info = null;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refetchNode) {
          this.fetchNode();
          this.refetchNode = false;
        }
        this.updateRowSpan();
      }
    }, {
      key: "updateRowSpan",
      value: function updateRowSpan() {
        if (this.rowSpan !== this.oldRowSpan) {
          this.props.notifyRowSpan(this.getIndex(), this.rowSpan);
          var node2 = this.getDOMNode();
          node2.style.zIndex = this.rowSpan > 1 ? 1 : null;
        }
      }
    }, {
      key: "getDOMNode",
      value: function getDOMNode() {
        if (this.node) {
          return this.node;
        }
        if (!this.row) {
          return null;
        }
        this.node = this.row.domRef ? this.row.domRef.current : this.row;
        return this.node;
      }
    }, {
      key: "fetchNode",
      value: function fetchNode() {
        var node2 = this.getDOMNode();
        if (!this.props.virtualized) {
          this.prepareSetIndex();
          return;
        }
        if (node2 && !this.isVisible()) {
          node2.style.visibility = STR_HIDDEN;
        }
        var contain = this.props.contain;
        if (node2) {
          node2.style.position = STR_ABSOLUTE;
          node2.style.top = STR_ZERO_PX;
          if (contain) {
            if (contain === true) {
              node2.style.contain = "style layout paint";
            } else {
              node2.style.contain = contain;
            }
          }
          this.prepareSetIndex();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props, renderRow = _this$props.renderRow, count = _this$props.count, renderIndex = _this$props.index, showEmptyRows = _this$props.showEmptyRows, onKeyDown = _this$props.onKeyDown, onFocus3 = _this$props.onFocus, rowHeightManager = _this$props.rowHeightManager, sticky = _this$props.sticky, contain = _this$props.contain, virtualized = _this$props.virtualized, useTransformPosition = _this$props.useTransformPosition;
        var index2 = this.getIndex();
        sharedRowProps.empty = false;
        if (index2 >= count) {
          if (!showEmptyRows) {
            this.renderResult = false;
            return null;
          }
          sharedRowProps.empty = true;
        }
        var rowHeight = rowHeightManager ? rowHeightManager.getRowHeight(index2) : this.props.rowHeight;
        sharedRowProps.rowHeight = rowHeight;
        sharedRowProps.count = count;
        sharedRowProps.index = index2;
        sharedRowProps.renderIndex = renderIndex;
        sharedRowProps.rowSpan = 1;
        sharedRowProps.sticky = sticky;
        var row = renderRow(sharedRowProps);
        this.oldRowSpan = this.rowSpan || 1;
        this.rowSpan = sharedRowProps.rowSpan;
        if (this.renderResult === false && row) {
          this.refetchNode = true;
        }
        this.renderResult = !!row;
        if (!row) {
          return null;
        }
        var extraStyle = null;
        if (virtualized) {
          extraStyle = {
            top: 0,
            position: STR_ABSOLUTE,
            backfaceVisibility: STR_HIDDEN,
            visibility: this.isVisible() ? STR_VISIBLE : STR_HIDDEN
          };
          extraStyle[useTransformPosition ? "transform" : "top"] = useTransformPosition ? "translate3d(0px, ".concat(this.offset, "px, 0px)") : this.offset;
          if (contain) {
            if (contain === true) {
              extraStyle.contain = "style layout paint";
            } else {
              extraStyle.contain = contain;
            }
          }
          if (row.props && row.props.style) {
            extraStyle = _objectSpread2(_objectSpread2({}, row.props.style), extraStyle);
          }
        }
        return (0, _react.cloneElement)(row, {
          key: this.props.index,
          ref: this.ref,
          onFocus: onFocus3 ? onFocus3.bind(null, index2) : null,
          onKeyDown: onKeyDown ? onKeyDown.bind(null, index2) : null,
          style: extraStyle
        });
      }
    }, {
      key: "updateRowHeight",
      value: function updateRowHeight(config2) {
        var _this2 = this;
        var _this$props2 = this.props, naturalRowHeight = _this$props2.naturalRowHeight, rowHeightManager = _this$props2.rowHeightManager;
        if (naturalRowHeight) {
          var index2 = this.index;
          var getDOMHeight = function getDOMHeight2() {
            var _this2$node;
            return ((_this2$node = _this2.node) === null || _this2$node === void 0 ? void 0 : _this2$node.scrollHeight) || 0;
          };
          var rowHeight = rowHeightManager.getRowHeight(index2);
          var offsetHeight = getDOMHeight();
          var height = offsetHeight;
          if (rowHeight != offsetHeight) {
            var info = {
              index: index2,
              height
            };
            if (!offsetHeight) {
              return;
            }
            var useRaf = config2 && config2.useRaf !== void 0 ? !!config2.useRaf : true;
            if (useRaf) {
              rowHeightManager.setRowHeightLazy(info);
            } else {
              rowHeightManager.setRowHeight(info);
            }
          }
        }
      }
    }, {
      key: "update",
      value: function update(callback2) {
        var _this3 = this;
        if (this.mounted === false) {
          return;
        }
        if (this.props.rowHeightManager != null) {
          this.forceUpdate(function() {
            _this3.updateRowHeight();
            if (typeof callback2 === "function") {
              callback2();
            }
          });
          return;
        }
        this.forceUpdate(function() {
          if (typeof callback2 == "function") {
            callback2(_this3.getInfo(true));
          }
        });
      }
    }, {
      key: "setVisible",
      value: function setVisible(value, callback2) {
        if (this.mounted === false) {
          return;
        }
        this.visible = value;
        if (this.node) {
          this.node.style.visibility = value ? STR_VISIBLE : STR_HIDDEN;
        }
        if (typeof callback2 == "function") {
          callback2(this.getInfo());
        }
      }
    }, {
      key: "setRowOffset",
      value: function setRowOffset() {
        var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.index;
        var _this$props3 = this.props, rowHeightManager = _this$props3.rowHeightManager, useTransformPosition = _this$props3.useTransformPosition;
        if (!this.node) {
          return;
        }
        if (rowHeightManager) {
          var rowOffset = rowHeightManager.getRowOffset(index2);
          this.offset = rowOffset;
          if (useTransformPosition) {
            this.node.style.transform = "translate3d(0px, ".concat(rowOffset, "px, 0px)");
          } else {
            this.node.style.top = "".concat(rowOffset, "px");
          }
        }
      }
    }, {
      key: "setIndex",
      value: function setIndex(index2, callback2) {
        var useRaf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var force = arguments.length > 3 ? arguments[3] : void 0;
        if (this.mounted === false) {
          return;
        }
        if (this.index === index2 && this.isVisible() && !force) {
          if (callback2) {
            callback2();
          }
          return;
        }
        this.index = index2;
        this._appliedIndex = void 0;
        this.doSetIndex(index2, callback2, useRaf);
      }
    }, {
      key: "doSetIndex",
      value: function doSetIndex(index2, callback2, useRaf) {
        var _this4 = this;
        var sameIndex = this._appliedIndex === index2;
        this._appliedIndex = index2;
        if (useRaf !== true) {
          this.setVisible(true);
          this.setRowOffset(index2);
          if (sameIndex) {
            if (callback2) {
              callback2();
            }
            return;
          }
          this.update(callback2);
        } else {
          if (this.setIndexRafId) {
            caf(this.setIndexRafId);
          }
          this.setIndexRafId = raf2(function() {
            delete _this4.setIndexRafId;
            _this4.setVisible(true);
            _this4.setRowOffset(index2);
            if (sameIndex) {
              if (callback2) {
                callback2();
              }
              return;
            }
            _this4.update(callback2);
          });
        }
      }
    }, {
      key: "isVisible",
      value: function isVisible2() {
        return this.visible !== false;
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.offset = offset;
        if (this.node) {
          var nodeStyle = this.node.style;
          nodeStyle.position = STR_ABSOLUTE;
          nodeStyle.top = STR_ZERO_PX;
          nodeStyle.backfaceVisibility = STR_HIDDEN;
          if (this.props.useTransformPosition) {
            nodeStyle.transform = "translate3d(0px, ".concat(offset, "px, 0px)");
          } else {
            nodeStyle.top = "".concat(offset, "px");
          }
        }
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        return this.index === void 0 ? this.props.index : this.index;
      }
    }, {
      key: "getInfo",
      value: function getInfo(updateHeight) {
        if (this.mounted === false) {
          return this.info;
        }
        if (!this.info) {
          this.info = (0, _sealedObjectFactory.default)({
            row: null,
            node: null,
            height: null,
            index: null,
            key: null,
            offset: null
          });
        }
        this.info.row = this;
        this.info.node = this.node;
        this.info.height = updateHeight || this.height === void 0 ? this.node ? this.node.offsetHeight : 0 : this.height;
        this.info.index = this.getIndex();
        this.info.key = this.props.index;
        this.info.offset = this.props.virtualized ? this.offset : this.node ? this.node.offsetTop : 0;
        return this.info;
      }
    }]);
    return InovuaVirtualListRow2;
  }(_react.default.Component);
  Row$1.default = InovuaVirtualListRow;
  InovuaVirtualListRow.defaultProps = {
    pure: false,
    useTransformPosition: false
  };
  var propTypes2 = {
    pure: _propTypes.default.bool,
    naturalRowHeight: _propTypes.default.bool,
    rowHeightManager: _propTypes.default.object,
    count: _propTypes.default.number,
    contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    index: _propTypes.default.number.isRequired,
    onRowHeightChange: _propTypes.default.func,
    renderRow: _propTypes.default.func.isRequired,
    useTransformPosition: _propTypes.default.bool,
    virtualized: _propTypes.default.bool
  };
  Row$1.propTypes = propTypes2;
  InovuaVirtualListRow.propTypes = propTypes2;
  return Row$1;
}
var hasRequiredRenderRows$1;
function requireRenderRows$1() {
  if (hasRequiredRenderRows$1)
    return renderRows$1;
  hasRequiredRenderRows$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderRows$1, "__esModule", {
    value: true
  });
  renderRows$1.default = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var _Row = _interopRequireDefault2(requireRow$1());
  var _default2 = function _default3(_ref2) {
    var count = _ref2.count, renderRow = _ref2.renderRow, rowHeight = _ref2.rowHeight, showEmptyRows = _ref2.showEmptyRows, ref = _ref2.ref, pure = _ref2.pure, sticky = _ref2.sticky, notifyRowSpan = _ref2.notifyRowSpan, rowHeightManager = _ref2.rowHeightManager, onRowHeightChange = _ref2.onRowHeightChange, onKeyDown = _ref2.onKeyDown, onFocus3 = _ref2.onFocus, onMount = _ref2.onMount, onUnmount = _ref2.onUnmount, rowContain = _ref2.rowContain, naturalRowHeight = _ref2.naturalRowHeight, useTransformPosition = _ref2.useTransformPosition, _ref$from = _ref2.from, from2 = _ref$from === void 0 ? 0 : _ref$from, _ref$to = _ref2.to, to2 = _ref$to === void 0 ? count : _ref$to, virtualized = _ref2.virtualized;
    var rows = [];
    for (var i = from2; i < to2; i++) {
      rows.push(_react.default.createElement(_Row.default, {
        contain: rowContain,
        pure,
        ref,
        sticky,
        rowHeight,
        useTransformPosition,
        onRowHeightChange,
        notifyRowSpan,
        key: i,
        index: i,
        count,
        renderRow,
        rowHeightManager,
        showEmptyRows,
        onKeyDown,
        onFocus: onFocus3,
        onMount,
        onUnmount,
        virtualized,
        naturalRowHeight
      }));
    }
    return rows;
  };
  renderRows$1.default = _default2;
  return renderRows$1;
}
var getVisibleRange = {};
var hasRequiredGetVisibleRange;
function requireGetVisibleRange() {
  if (hasRequiredGetVisibleRange)
    return getVisibleRange;
  hasRequiredGetVisibleRange = 1;
  Object.defineProperty(getVisibleRange, "__esModule", {
    value: true
  });
  getVisibleRange.default = void 0;
  var _default2 = function _default3(_ref2) {
    var size2 = _ref2.size, scrollTop = _ref2.scrollTop, count = _ref2.count, rowHeightManager = _ref2.rowHeightManager, naturalRowHeight = _ref2.naturalRowHeight, showEmptyRows = _ref2.showEmptyRows;
    var start = rowHeightManager.getRowAt(scrollTop);
    var end = naturalRowHeight ? rowHeightManager.getRowAt(scrollTop + size2.height) + 1 : start + Math.ceil(size2.height / rowHeightManager.getDefaultRowHeight());
    if (!showEmptyRows) {
      end = Math.min(count - 1, end);
    }
    return {
      start,
      end
    };
  };
  getVisibleRange.default = _default2;
  return getVisibleRange;
}
var StickyRowsContainer = {};
var hasRequiredStickyRowsContainer;
function requireStickyRowsContainer() {
  if (hasRequiredStickyRowsContainer)
    return StickyRowsContainer;
  hasRequiredStickyRowsContainer = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(StickyRowsContainer, "__esModule", {
    value: true
  });
  StickyRowsContainer.default = StickyRowsContainer.StickyRowsContainerClassName = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = _interopRequireWildcard(reactExports);
  var _hasSticky = requireHasSticky();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var StickyRowsContainerClassName = "InovuaReactDataGrid__virtual-list-sticky-rows-container";
  StickyRowsContainer.StickyRowsContainerClassName = StickyRowsContainerClassName;
  var StickyRowsContainer$1 = function StickyRowsContainer2(props2) {
    var latestProps = (0, _react.useRef)(props2);
    var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), content = _useState2[0], setContent = _useState2[1];
    var currentHeightRef = (0, _react.useRef)(0);
    var domNodeRef = (0, _react.useRef)(null);
    var nonEmptyRowElementsRefRef = (0, _react.useRef)(null);
    var rowElementsRef = (0, _react.useRef)(null);
    var renderedRowsRef = (0, _react.useRef)([]);
    var scrollTopRef = (0, _react.useRef)(0);
    latestProps.current = props2;
    var setEnteringRow = function setEnteringRow2(_ref2) {
      var scrollTop = _ref2.scrollTop, enteringRow = _ref2.enteringRow;
      if (enteringRow == null) {
        scrollTopRef.current = scrollTop;
        var domNode = domNodeRef.current;
        (0, _toConsumableArray2.default)(domNode.children).forEach(function(rowNode) {
          rowNode.style.transform = "translate3d(0px, 0px, 0px)";
        });
        return;
      }
      scrollTopRef.current = scrollTop;
      var rowsToTranslateIndexes = [];
      var rowsToTranslate = renderedRowsRef.current.filter(function(r2, i) {
        var result = r2.scale >= enteringRow.scale;
        if (result) {
          rowsToTranslateIndexes.push(i);
        }
        return result;
      });
      rowsToTranslate.forEach(function(_rowToTranslate, i) {
        var rowToTranslateIndex = rowsToTranslateIndexes[i];
        var domNode2 = domNodeRef.current;
        var rowNode = domNode2.children[rowToTranslateIndex];
        if (rowNode) {
          var y2 = props2.rowHeightManager.getRowOffset(enteringRow.index) - scrollTop - currentHeightRef.current;
          rowNode.style.transform = "translate3d(0px, ".concat(y2, "px, 0px)");
        }
      });
    };
    var setStickyRows = function setStickyRows2(content2, rows, config2) {
      var domNode = domNodeRef.current;
      var renderedContent = content2;
      if (content2 == null) {
        renderedContent = nonEmptyRowElementsRefRef.current;
        if (domNode && rowElementsRef.current) {
          domNode.style.opacity = "0";
          domNode.style.pointerEvents = "none";
        }
      } else {
        if (domNode && !rowElementsRef.current) {
          domNode.style.opacity = "1";
          domNode.style.pointerEvents = "all";
        }
      }
      setContent(renderedContent);
      if (content2) {
        nonEmptyRowElementsRefRef.current = content2;
      }
      renderedRowsRef.current = rows;
      rowElementsRef.current = content2;
      requestAnimationFrame(function() {
        setEnteringRow(config2);
      });
    };
    var getCurrentVisibleStickyRowsCount = function getCurrentVisibleStickyRowsCount2() {
      return rowElementsRef.current ? rowElementsRef.current.length : 0;
    };
    (0, _react.useLayoutEffect)(function() {
      var domNode = domNodeRef.current;
      var totalHeight = 0;
      if (domNode && domNode.children) {
        (0, _toConsumableArray2.default)(domNode.children).forEach(function(c2, i) {
          c2.style.zIndex = 1e3 - i;
          totalHeight += c2.offsetHeight;
        });
        currentHeightRef.current = totalHeight;
      }
    }, [content]);
    (0, _react.useLayoutEffect)(function() {
      if (props2.handle) {
        props2.handle({
          setStickyRows,
          getCurrentVisibleStickyRowsCount,
          setEnteringRow
        });
      }
      return function() {
        var props3 = latestProps.current;
        if (props3 && typeof props3.handle === "function") {
          props3.handle(null);
        }
      };
    }, []);
    return _react.default.createElement("div", {
      className: StickyRowsContainerClassName,
      ref: domNodeRef,
      style: (0, _defineProperty2.default)({
        position: _hasSticky.sticky,
        top: 0,
        left: 0,
        right: 0,
        height: 0,
        zIndex: 1,
        contain: "layout"
      }, props2.rtl ? "transform" : "", props2.rtl ? "translate3d(".concat(props2.stickyOffset, "px, 0px, 0px)") : "")
    }, content);
  };
  var _default2 = _react.default.memo(StickyRowsContainer$1);
  StickyRowsContainer.default = _default2;
  return StickyRowsContainer;
}
var hasRequiredVirtualList;
function requireVirtualList() {
  if (hasRequiredVirtualList)
    return VirtualList;
  hasRequiredVirtualList = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "RowHeightManager", {
      enumerable: true,
      get: function get2() {
        return _RowHeightManager.default;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get2() {
        return _src.getScrollbarWidth;
      }
    });
    exports.propTypes = void 0;
    Object.defineProperty(exports, "shouldComponentUpdate", {
      enumerable: true,
      get: function get2() {
        return _shouldComponentUpdate2.default;
      }
    });
    var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
    var _createClass2 = _interopRequireDefault2(requireCreateClass());
    var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
    var _inherits2 = _interopRequireDefault2(requireInherits$1());
    var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
    var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
    var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
    var _react = _interopRequireWildcard(reactExports);
    var _propTypes = _interopRequireDefault2(requirePropTypes());
    var _contains = _interopRequireDefault2(requireContains());
    var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
    var _resizeObserverPolyfill = _interopRequireDefault2(require$$14);
    var _src = _interopRequireWildcard(requireSrc$3());
    var _uglified = _interopRequireDefault2(requireUglified());
    var _join = _interopRequireDefault2(requireJoin());
    var _binarySearch = _interopRequireDefault2(requireBinarySearch());
    var _RowHeightManager = _interopRequireDefault2(requireRowHeightManager());
    var _getFocusableElements = _interopRequireDefault2(requireGetFocusableElements$2());
    var _renderRows2 = _interopRequireDefault2(requireRenderRows$1());
    var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$5());
    var _getVisibleRange = _interopRequireDefault2(requireGetVisibleRange());
    var _StickyRowsContainer = _interopRequireDefault2(requireStickyRowsContainer());
    var _lodash = _interopRequireDefault2(requireLodash_throttle());
    var _getGlobal = requireGetGlobal();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e2) {
        return false;
      }
    }
    var globalObject = (0, _getGlobal.getGlobal)();
    var sortAsc = function sortAsc2(a, b2) {
      return a - b2;
    };
    var emptyFn = function emptyFn2() {
    };
    var emptyObject = Object.freeze ? Object.freeze({}) : {};
    var ua2 = globalObject.navigator ? globalObject.navigator.userAgent : "";
    var IS_EDGE = ua2.indexOf("Edge/") !== -1;
    var IS_FF = ua2.toLowerCase().indexOf("firefox") > -1;
    var BASE_CLASS_NAME = "inovua-react-virtual-list";
    var ResizeObserver2 = globalObject.ResizeObserver || _resizeObserverPolyfill.default;
    var unique = function unique2(arr) {
      if (Set) {
        return (0, _toConsumableArray2.default)(new Set(arr));
      }
      return Object.keys(arr.reduce(function(acc, item) {
        acc[item] = true;
        return acc;
      }, {}));
    };
    var InovuaVirtualList = function(_Component) {
      (0, _inherits2.default)(InovuaVirtualList2, _Component);
      var _super = _createSuper(InovuaVirtualList2);
      function InovuaVirtualList2(_props) {
        var _this;
        (0, _classCallCheck2.default)(this, InovuaVirtualList2);
        _this = _super.call(this, _props);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "size", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rows", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowSpans", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowCoveredBy", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollTopPos", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getContainerNode", function() {
          return _this.containerNode;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function(props2) {
          var offset = _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          var style = _objectSpread2(_objectSpread2({}, props2.style), {}, {
            overscrollBehavior: _this.props.overscrollBehavior || "none",
            backfaceVisibility: "hidden",
            WebkitOverscrollBehavior: _this.props.overscrollBehavior || "none",
            right: -offset,
            bottom: -offset
          });
          props2.style = style;
          if (_this.props.showEmptyRows && _this.props.count < _this.strictVisibleCount && (0, _src.getScrollbarWidth)() && _this.props.nativeScroll) {
            style.overflowY = "hidden";
          }
          var result;
          if (_this.props.renderScroller) {
            result = _this.props.renderScroller(props2);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread2({}, props2));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacerOnNaturalRowHeight", function(spacerProps) {
          spacerProps.style.height = _this.getScrollHeight();
          if (_this.props.renderScrollerSpacer) {
            _this.props.renderScrollerSpacer(spacerProps);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderView", function(props2) {
          var offset = _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          var minHeight = offset ? "calc(100% - ".concat(offset, "px)") : "100%";
          var maxWidth = offset ? "calc(100% - ".concat(offset, "px)") : "100%";
          if (_this.props.rtl && !_this.props.nativeScroll) {
            maxWidth = "100%";
          }
          var style = _objectSpread2(_objectSpread2({}, props2.style), {}, {
            minHeight,
            maxWidth
          });
          if (_this.props.rtl && !(0, _src.getScrollbarWidth)()) {
            style.transform = "translateX(".concat(-offset, "px)");
          }
          var viewProps = _objectSpread2(_objectSpread2({}, props2), {}, {
            style,
            "data-name": "view"
          });
          var result;
          if (_this.props.renderView) {
            result = _this.props.renderView(viewProps);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread2({}, viewProps));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTotalRowHeight", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          return props2.rowHeightManager ? props2.rowHeightManager.getTotalSize(props2.count) : props2.count * props2.rowHeight;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollHeight", function() {
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var offset = SCROLLBAR_WIDTH ? 0 : _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          var height = _this.getTotalRowHeight();
          return height + offset;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollSize", function(node2) {
          var res = {
            width: node2.scrollWidth,
            height: _this.getScrollHeight()
          };
          return res;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getClientSize", function(n2) {
          var node2 = n2.firstChild;
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var offset = SCROLLBAR_WIDTH ? 0 : _this.getEmptyScrollOffset() || 0;
          if (_this.props.nativeScroll) {
            offset = 0;
          }
          return {
            width: node2.clientWidth + offset,
            height: node2.clientHeight + offset
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initSizes", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var minRowHeight = props2.minRowHeight, rowHeightManager = props2.rowHeightManager;
          if (rowHeightManager) {
            return;
          }
          var count = _this.getMaxRenderCount(props2);
          var rowOffsets = [];
          var totalHeight = 0;
          var rowHeights = (0, _toConsumableArray2.default)(Array(count)).map(function() {
            rowOffsets.push(totalHeight);
            totalHeight += minRowHeight;
            return minRowHeight;
          });
          rowOffsets[count] = totalHeight;
          _this.rowOffsets = rowOffsets;
          _this.rowHeights = rowHeights;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setHeightForRows", function(indexes, heights) {
          if (!indexes.length || !heights.length) {
            return 0;
          }
          if (_this.props.showWarnings) {
            if (indexes.length != heights.length) {
              console.warn("setHeightForRows signature mismatch!!!");
              return 0;
            }
            indexes.forEach(function(_, i2) {
              if (i2 > 0) {
                var _diff = indexes[i2] - indexes[i2 - 1];
                if (_diff !== 1) {
                  console.warn("setHeightForRows should be called with successive indexes!", indexes);
                }
              }
            });
          }
          var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this), rowHeights = _assertThisInitialize.rowHeights, rowOffsets = _assertThisInitialize.rowOffsets;
          var count = _this.props.count;
          var diff = 0;
          indexes.forEach(function(index2, i2) {
            var height = heights[i2] || 0;
            var oldHeight = rowHeights[index2] || 0;
            rowHeights[index2] = height;
            rowOffsets[index2] = diff + (rowOffsets[index2] || 0);
            diff += height - oldHeight;
          });
          for (var i = indexes[indexes.length - 1] + 1; i <= count; i++) {
            rowOffsets[i] = diff + (rowOffsets[i] || 0);
          }
          return diff;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSizer", function(scrollHeight) {
          var _this$props = _this.props, renderSizer = _this$props.renderSizer, minRowWidth = _this$props.minRowWidth, emptyScrollOffset = _this$props.emptyScrollOffset, rowHeightManager = _this$props.rowHeightManager, showEmptyRows = _this$props.showEmptyRows, virtualized = _this$props.virtualized;
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          var offset = SCROLLBAR_WIDTH ? 0 : emptyScrollOffset || 0;
          if (!virtualized) {
            scrollHeight = 0;
          }
          var minHeight = scrollHeight + offset;
          if (showEmptyRows) {
            minHeight = Math.max(minHeight, _this.strictVisibleCount * rowHeightManager.getDefaultRowHeight());
          }
          var style = {
            minHeight: isNaN(minHeight) ? "" : minHeight,
            minWidth: minRowWidth ? minRowWidth + offset : 0
          };
          var result;
          if (renderSizer) {
            result = renderSizer({
              style
            }, scrollHeight);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", {
              key: "sizer",
              "data-name": "sizer",
              style
            });
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRowContainer", function() {
          var props2 = {
            key: "rowContainer",
            className: "".concat(BASE_CLASS_NAME, "__row-container"),
            ref: _this.refContainerNode,
            children: _this.renderRows()
          };
          var result;
          if (_this.props.renderRowContainer) {
            result = _this.props.renderRowContainer(props2);
          }
          if (result === void 0) {
            result = _react.default.createElement("div", _objectSpread2({}, props2));
          }
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onViewResize", function() {
          requestAnimationFrame(function() {
            _this.rafSync();
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollbarsChange", function(_ref2) {
          var vertical = _ref2.vertical, horizontal = _ref2.horizontal;
          if (!vertical && _this.scrollTopPos || !horizontal && _this.scrollLeftPos) {
            _this.applyScrollStyle({
              scrollTop: !vertical ? 0 : _this.scrollTopPos,
              scrollLeft: !horizontal ? 0 : _this.scrollLeftPos
            });
          }
          if (_this.props.onScrollbarsChange) {
            _this.props.onScrollbarsChange({
              vertical,
              horizontal
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowUnmount", function(row) {
          if (!_this.rows) {
            return;
          }
          var currentRowIndex = row.getIndex();
          var isFound = _this.mapping[currentRowIndex];
          if (!isFound) {
            return;
          }
          delete _this.mapping[currentRowIndex];
          var index2 = _this.rows.indexOf(row);
          if (index2 != -1) {
            _this.rows.splice(index2, 1);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowMount", function(r2) {
          if (!r2) {
            return;
          }
          _this.mapping[r2.props.index] = r2;
          _this.rows[r2.props.index] = r2;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStart", function() {
          _this.scrolling = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (_this.props.scrollOneDirectionOnly) {
            var scrollPos = args[0], prevScrollPos = args[1];
            var absTop = Math.abs(scrollPos.scrollTop - prevScrollPos.scrollTop);
            var absLeft = Math.abs(scrollPos.scrollLeft - prevScrollPos.scrollLeft);
            var scrollerNode = _this.getScrollerNode();
            if (absTop != absLeft) {
              _this.disableScrollPropName = absTop > absLeft ? "overflowX" : "overflowY";
              _this.disableScrollOtherPropName = absTop > absLeft ? "overflowY" : "overflowX";
              _this.disableScrollPropValue = scrollerNode.style[_this.disableScrollPropName];
              scrollerNode.style[_this.disableScrollOtherPropName] = "scroll";
              scrollerNode.style[_this.disableScrollPropName] = "hidden";
            }
          }
          if (_this.props.onScrollStart) {
            var _this$props2;
            (_this$props2 = _this.props).onScrollStart.apply(_this$props2, args);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollerNode", function() {
          return _this.scrollContainer.scrollerNode;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStop", function() {
          _this.scrolling = false;
          if (_this.props.scrollOneDirectionOnly) {
            var scrollerNode = _this.getScrollerNode();
            scrollerNode.style[_this.disableScrollPropName] = _this.disableScrollPropValue;
            scrollerNode.style.overflow = "scroll";
          }
          if (_this.props.onScrollStop) {
            var _this$props3;
            (_this$props3 = _this.props).onScrollStop.apply(_this$props3, arguments);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRows", function() {
          var rows = [];
          _this.forEachRow(function(row) {
            if (row) {
              rows.push(row);
            }
          });
          return rows;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "forEachRow", function(fn) {
          var onlyVisible = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var rows = _this.rows;
          var visibleCount = _this.getVisibleCount();
          var i = -1;
          for (var initialIndex in rows) {
            if (rows.hasOwnProperty(initialIndex) && (!onlyVisible || onlyVisible && initialIndex < visibleCount)) {
              i++;
              fn(rows[initialIndex], i);
            }
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sortRows", function(rows) {
          return rows.slice().sort(function(row1, row2) {
            return row1.getIndex() - row2.getIndex();
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowAt", function(index2) {
          var row = _this.mapping[index2];
          if (row && row.getIndex() != index2) {
            row = null;
          }
          return row;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleCount", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var virtualized = props2.virtualized, enableRowSpan = props2.enableRowSpan, extraRowsProps = props2.extraRows;
          var extraRows = enableRowSpan ? 2 : extraRowsProps || 0;
          if (_this.visibleCount === void 0) {
            return 0;
          }
          if (!virtualized) {
            return (props2.showEmptyRows ? Math.max(_this.visibleCount || 0, props2.count || 0) : props2.count) + extraRows;
          }
          return (props2.showEmptyRows ? _this.visibleCount || props2.count : Math.min(_this.visibleCount || props2.count, props2.count)) + extraRows;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRowIndex", function(row, index2, callback2) {
          var existingRow = _this.mapping[index2];
          if (existingRow) {
            existingRow.setIndex(index2, callback2);
            if (existingRow !== row) {
              row.setVisible(false);
            }
            return;
          }
          var oldIndex = row.getIndex();
          row.setIndex(index2, callback2);
          delete _this.mapping[oldIndex];
          _this.mapping[index2] = row;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getSortedRows", function() {
          var rows = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.getRows();
          return _this.sortRows(rows);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowsUpdated", function(newIndexes, range2, updateScroll) {
          newIndexes.sort(function(i1, i2) {
            return i1 - i2;
          });
          var start = newIndexes[0];
          var end = _this.props.showEmptyRows ? newIndexes[newIndexes.length - 1] : Math.min(newIndexes[newIndexes.length - 1], _this.props.count - 1);
          var minRowHeight = _this.props.minRowHeight;
          var rowIndexes = [];
          var rowHeights = [];
          var rows = [];
          for (var row, rowHeight, i = start; i <= end; i++) {
            row = _this.mapping[i];
            rowHeight = row ? row.getInfo().height : minRowHeight;
            if (row) {
              rows.push(row);
            }
            rowIndexes.push(i);
            rowHeights.push(rowHeight);
          }
          var newToTopHeight = 0;
          var oldTop;
          if (_this.oldRowIndexes) {
            oldTop = _this.oldRowIndexes[0];
            rowIndexes.forEach(function(rowIndex, i2) {
              var diff;
              if (rowIndex < oldTop) {
                diff = rowHeights[i2] - _this.rowHeights[rowIndex];
                newToTopHeight += diff;
              }
            });
          }
          if (rowIndexes.length) {
            _this.setHeightForRows(rowIndexes, rowHeights);
          }
          rows.forEach(function(row2) {
            var index2 = row2.getIndex();
            var offset = _this.rowOffsets[index2];
            row2.setOffset(offset);
          });
          _this.oldRowIndexes = rowIndexes;
          var newScrollTop;
          if (newToTopHeight) {
            newScrollTop = _this.scrollTopPos + newToTopHeight;
            updateScroll(newScrollTop);
            _this.forceScrollTop = newScrollTop;
            _this.scrollTop = newScrollTop;
          } else {
            updateScroll();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleRange", function(args) {
          return (0, _getVisibleRange.default)(args);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applyScrollStyle", function(_ref2, domNode) {
          var scrollTop = _ref2.scrollTop, scrollLeft = _ref2.scrollLeft, force = _ref2.force, reorder = _ref2.reorder;
          if (scrollTop < 0) {
            scrollTop = 0;
          }
          if (!_this.props.rtl) {
            if (scrollLeft < 0) {
              scrollLeft = 0;
            }
          } else {
            if (scrollLeft > 0) {
              scrollLeft = 0;
            }
          }
          if (_this.forceScrollTop !== void 0) {
            scrollTop = _this.forceScrollTop;
            _this.forceScrollTop = void 0;
            return;
          }
          if (_this.props.applyScrollLeft && scrollLeft !== void 0) {
            scrollLeft = 0;
            _this.props.applyScrollLeft(scrollLeft, domNode);
          }
          if (scrollTop === void 0) {
            scrollTop = _this.prevScrollTopPos;
          }
          if (scrollLeft === void 0) {
            scrollLeft = _this.prevScrollLeftPos;
          }
          _this.scrollTopPos = scrollTop;
          _this.scrollLeftPos = scrollLeft;
          var _this$props4 = _this.props, count = _this$props4.count, useTransformPosition = _this$props4.useTransformPosition, rowHeightManager = _this$props4.rowHeightManager, naturalRowHeight = _this$props4.naturalRowHeight, virtualized = _this$props4.virtualized, showEmptyRows = _this$props4.showEmptyRows;
          var range2 = _this.getVisibleRange({
            scrollTop,
            size: _this.size,
            count,
            naturalRowHeight,
            rowHeightManager,
            showEmptyRows
          });
          var startRowIndex = range2.start;
          var prevStartRowIndex = _this.prevStartRowIndex;
          _this.prevScrollTopPos = scrollTop;
          _this.prevScrollLeftPos = scrollLeft;
          _this.prevStartRowIndex = startRowIndex;
          _this.updateStickyRows(scrollTop, void 0, {
            force: false
          });
          var updateScroll = function updateScroll2() {
            var top = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : scrollTop;
            var parentNodeStyle = _this.containerNode.parentNode.style;
            _this.containerNode.parentNode.classList.add("".concat(BASE_CLASS_NAME, "__view-container"));
            var scrollLeftTranslateValue = -scrollLeft;
            if (useTransformPosition) {
              parentNodeStyle.transform = "translate3d(".concat(scrollLeftTranslateValue, "px, ").concat(-top, "px, 0px)");
            } else {
              parentNodeStyle.left = "".concat(scrollLeftTranslateValue, "px");
              parentNodeStyle.top = "".concat(-top, "px");
            }
          };
          if (rowHeightManager == null) {
            force = true;
          }
          if (startRowIndex == prevStartRowIndex && !force || !virtualized) {
            updateScroll();
            return;
          }
          updateScroll();
          _this.updateRows(range2, reorder, emptyFn);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollingElement", function() {
          return _this.scrollContainer;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "smoothScrollTo", function() {
          var _this$scrollContainer;
          (_this$scrollContainer = _this.scrollContainer).smoothScrollTo.apply(_this$scrollContainer, arguments);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidMount", function() {
          _this.mounted = true;
          _this.unmounted = false;
          _this.setupRowHeightManager(_this.props.rowHeightManager);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "fixEdgeScrollPosition", function() {
          if (!(IS_EDGE || IS_FF)) {
            return;
          }
          var maxTop = _this.getTotalRowHeight() - (_this.scrollContainer.viewNode ? _this.scrollContainer.viewNode.offsetHeight : 0);
          if (_this.scrollTop > maxTop) {
            globalObject.requestAnimationFrame(function() {
              if (_this.unmounted) {
                return;
              }
              _this.scrollTop = maxTop;
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupRowHeightManager", function(rowHeightManager) {
          if (rowHeightManager) {
            rowHeightManager.on("index", _this.onIndex);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onIndex", function() {
          _this.updateVisibleCount(_this.size.height);
          _this.forceUpdate(function() {
            if (_this.unmounted) {
              return;
            }
            _this.refreshLayout({
              reorder: false,
              force: true
            });
            _this.cleanupRows();
            _this.fixEdgeScrollPosition();
            _this.rows.forEach(function(row) {
              row.setIndex(row.getIndex(), void 0, void 0, true);
            });
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refreshLayout", function(config2) {
          var defaults2 = {
            force: true,
            reorder: true
          };
          _this.adjustHeights();
          var options = config2 ? _objectSpread2(_objectSpread2({}, defaults2), config2) : defaults2;
          _this.applyScrollStyle(options);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getOverlappingHeight", function() {
          if (_this.scrollContainer && _this.scrollContainer.getBeforeAndAfterHeight) {
            return _this.scrollContainer.getBeforeAndAfterHeight();
          }
          return 0;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateVisibleCount", function(height, props2) {
          props2 = props2 || _this.props;
          var _props2 = props2, rowHeightManager = _props2.rowHeightManager, minRowHeight = _props2.minRowHeight, showEmptyRows = _props2.showEmptyRows;
          var strictVisibleCount = rowHeightManager ? Math.ceil(height / rowHeightManager.getMinHeight()) : Math.ceil(height / (minRowHeight || 1));
          _this.strictVisibleCount = strictVisibleCount;
          _this.visibleCount = rowHeightManager ? strictVisibleCount + 1 : strictVisibleCount + 2;
          var maxCount = props2.count;
          if (_this.visibleCount > maxCount && !showEmptyRows) {
            _this.visibleCount = maxCount;
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGapsFor", function(startRowIndex, endRowIndex, sortedRows) {
          var visibleRowPositions = {};
          var enableRowSpan = _this.props.enableRowSpan;
          var rows = sortedRows || _this.getSortedRows();
          rows.forEach(function(row) {
            if (row.isVisible()) {
              visibleRowPositions[row.getIndex()] = true;
            }
          });
          var gaps = [];
          if (enableRowSpan && _this.rowCoveredBy[startRowIndex] != null) {
            startRowIndex = _this.rowCoveredBy[startRowIndex];
          }
          var alreadyVisible;
          var coveredBy;
          for (; startRowIndex <= endRowIndex; startRowIndex++) {
            alreadyVisible = visibleRowPositions[startRowIndex];
            if (enableRowSpan && !alreadyVisible) {
              coveredBy = _this.rowCoveredBy[startRowIndex];
              if (coveredBy != null) {
                alreadyVisible = _this.props.recycleCoveredRows;
              }
            }
            if (!alreadyVisible) {
              gaps.push(startRowIndex);
            }
          }
          return gaps;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCleanupRows", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var indexes = [];
          var length2 = _this.rows && _this.rows.length;
          var visibleCount = _this.getVisibleCount(props2);
          for (var i = visibleCount; i < length2; i++) {
            indexes.push(i);
          }
          return indexes;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cleanupRows", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          _this.getCleanupRows(props2).forEach(function(i) {
            var row = _this.rows[i];
            if (row) {
              delete _this.mapping[row.getIndex()];
              delete _this.rows[i];
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
          var node2 = _this.getDOMNode();
          if (!node2) {
            return;
          }
          var size2 = _this.props.measureSize ? _this.props.measureSize(node2) : {
            width: node2.clientWidth,
            height: node2.clientHeight
          };
          size2.height -= _this.getOverlappingHeight();
          _this.size = size2;
          if (_this.props.scrollProps && typeof _this.props.scrollProps.onResize == "function") {
            _this.props.scrollProps.onResize(size2);
          }
          _this.updateVisibleCount(size2.height);
          if (_this.props.virtualized) {
            if (_this.props.showEmptyRows) {
              _this.initSizes();
            }
            _this.forceUpdate(function() {
              if (_this.unmounted) {
                return;
              }
              _this.refreshLayout({
                reorder: false,
                force: true
              });
              _this.cleanupRows();
            });
          }
          if (_this.props.onResize) {
            _this.props.onResize(size2);
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setRowRowSpan", function(rowIndex, rowSpan) {
          if (rowSpan === 1) {
            return;
          }
          _this.rowSpans[rowIndex] = rowSpan;
          var current = rowIndex + 1;
          var last = rowIndex + rowSpan - 1;
          for (; current <= last; current++) {
            _this.rowCoveredBy[current] = rowIndex;
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowKeyDown", function(index2, event2) {
          if (event2.key !== "Tab") {
            return;
          }
          if (_this.props.handleRowKeyDown) {
            _this.props.handleRowKeyDown(index2, event2);
            return;
          }
          var activeElement = globalObject.document.activeElement;
          var theRow = _this.getRowAt(index2);
          var rowNode = theRow.getDOMNode ? theRow.getDOMNode() : theRow.node;
          if (!activeElement || !(0, _contains.default)(rowNode, activeElement)) {
            return;
          }
          var dir = event2.shiftKey ? -1 : 1;
          var nextIndex = index2 + dir;
          var maxCount = _this.getMaxRenderCount();
          if (nextIndex < 0 || nextIndex >= maxCount) {
            return;
          }
          var thisElements = _this.props.getRowFocusableElements ? _this.props.getRowFocusableElements(index2, rowNode) : (0, _getFocusableElements.default)(rowNode);
          if (thisElements && thisElements.length) {
            var limit = dir === -1 ? 0 : thisElements.length - 1;
            if (thisElements[limit] !== activeElement) {
              return;
            }
          }
          if (typeof _this.props.shouldPreventDefaultTabKeyOnRow !== "function" || _this.props.shouldPreventDefaultTabKeyOnRow(index2, event2) !== false) {
            event2.preventDefault();
          }
          _this.focusRow(nextIndex, dir);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getMaxRenderCount", function() {
          var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.props;
          var visibleCount = _this.getVisibleCount(props2);
          var maxCount = props2.showEmptyRows ? Math.max(visibleCount || 0, props2.count) : Math.max(props2.count || 0, 0);
          return maxCount;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusRow", function(index2, dir, callback2) {
          if (index2 >= _this.getMaxRenderCount() || index2 < 0) {
            return;
          }
          _this.scrollToIndex(index2, {
            direction: dir == 1 ? "bottom" : "top",
            duration: 50
          }, function() {
            var nextRow = _this.getRowAt(index2);
            var nextRowNode = nextRow.getDOMNode ? nextRow.getDOMNode() : nextRow.node;
            var elements2 = _this.props.getRowFocusableElements ? _this.props.getRowFocusableElements(index2, nextRowNode) : (0, _getFocusableElements.default)(nextRowNode);
            if (elements2.length) {
              var focusIndex = dir === -1 ? elements2.length - 1 : 0;
              elements2[focusIndex].focus();
            }
            if (typeof callback2 == "function") {
              callback2();
            }
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowRendered", function(index2) {
          return !!_this.getRowAt(index2);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getStickyRowsArray", function() {
          var stickyRows = _this.props.stickyRows;
          var scaleMap = {};
          var rows = Object.keys(stickyRows).map(function(key, i) {
            var scale2 = +(stickyRows[key] || 1);
            var row = {
              index: +key,
              scale: scale2,
              indexInAllRows: i
            };
            scaleMap[scale2] = scaleMap[scale2] || [];
            scaleMap[scale2].push(row);
            return row;
          }).sort(function(a, b2) {
            return sortAsc(a.index, b2.index);
          });
          var scales2 = unique(rows.map(function(r2) {
            return r2.scale;
          })).sort(sortAsc);
          var result = {
            rows,
            scales: scales2,
            rowsPerScales: scales2.map(function(scale2) {
              return scaleMap[scale2];
            })
          };
          return result;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "currentStickyRows", []);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateStickyRows", function() {
          var scrollTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.scrollTop;
          var firstVisibleRowIndex = arguments.length > 1 ? arguments[1] : void 0;
          var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
            force: true
          }, force = _ref3.force;
          if (!_this.props.stickyRows) {
            return;
          }
          var _this$getStickyRowsAr = _this.getStickyRowsArray(), rowsPerScales = _this$getStickyRowsAr.rowsPerScales, allRows = _this$getStickyRowsAr.rows;
          if (firstVisibleRowIndex === void 0) {
            firstVisibleRowIndex = _this.getFirstVisibleRowIndexForSticky(scrollTop);
          }
          firstVisibleRowIndex = firstVisibleRowIndex || 0;
          var enteringRows = [];
          var comparator = function comparator2(_ref4, b2) {
            var index2 = _ref4.index;
            return sortAsc(index2, b2);
          };
          var initialIndex = -1;
          var currentStickyRows = [];
          var currentStickyRowsMap = [];
          var maxStickyRowIndex = -1;
          var firstFreeVisibleRowIndex = firstVisibleRowIndex;
          rowsPerScales.forEach(function(rows) {
            if (!rows.length) {
              return;
            }
            var foundIndex = (0, _binarySearch.default)(rows, firstFreeVisibleRowIndex, comparator);
            var computedFoundIndex = foundIndex;
            var stickyRow;
            var stickyRowIndex;
            if (foundIndex < 0) {
              computedFoundIndex = ~foundIndex - 1;
            }
            stickyRow = rows[computedFoundIndex];
            if (stickyRow) {
              stickyRowIndex = stickyRow.index;
              if (stickyRowIndex > initialIndex) {
                firstFreeVisibleRowIndex++;
                currentStickyRows.push(stickyRow);
                currentStickyRowsMap[stickyRowIndex] = true;
                initialIndex = stickyRowIndex;
                maxStickyRowIndex = Math.max(maxStickyRowIndex, stickyRowIndex);
              }
              var nextRow = allRows[stickyRow.indexInAllRows + 1];
              if (nextRow && nextRow.index <= firstFreeVisibleRowIndex) {
                enteringRows.push(nextRow);
              }
            }
          });
          enteringRows = enteringRows.filter(function(row) {
            return !currentStickyRowsMap[row.index] && row.index > maxStickyRowIndex;
          });
          var enteringRow = enteringRows[0];
          if (JSON.stringify(_this.currentStickyRows) === JSON.stringify(currentStickyRows) && !force) {
            _this.stickyRowsContainer.setEnteringRow({
              enteringRow,
              scrollTop
            });
            return;
          }
          _this.setStickyRows(currentStickyRows, scrollTop, enteringRow);
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setStickyRows", function() {
          var currentStickyRows = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this.currentStickyRows;
          var scrollTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.scrollTop;
          var enteringRow = arguments.length > 2 ? arguments[2] : void 0;
          _this.currentStickyRows = currentStickyRows;
          var rowElements = currentStickyRows.map(function(row) {
            return _this.renderStickyRow(row.index);
          });
          _this.stickyRowsContainer.setStickyRows(rowElements.length ? rowElements : null, currentStickyRows, {
            enteringRow,
            scrollTop
          });
          _this.currentStickyRows = currentStickyRows;
          if (_this.props.onStickyRowUpdate) {
            _this.props.onStickyRowUpdate();
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderStickyRow", function(index2) {
          var _this$props5 = _this.props, rowHeight = _this$props5.rowHeight, renderRow = _this$props5.renderRow, count = _this$props5.count, pureRows = _this$props5.pureRows, rowHeightManager = _this$props5.rowHeightManager;
          _this$props5.showEmptyRows;
          _this$props5.virtualized;
          var rowContain = _this$props5.rowContain, naturalRowHeight = _this$props5.naturalRowHeight, useTransformRowPosition = _this$props5.useTransformRowPosition;
          return (0, _renderRows2.default)({
            pure: pureRows,
            renderRow,
            rowHeightManager,
            rowHeight,
            rowContain,
            count,
            from: index2,
            to: index2 + 1,
            naturalRowHeight,
            sticky: true,
            useTransformPosition: useTransformRowPosition,
            virtualized: false
          })[0];
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowVisible", function(index2) {
          if (!_this.isRowRendered(index2)) {
            return false;
          }
          var rowHeightManager = _this.props.rowHeightManager;
          var top = _this.scrollTop;
          var bottom = top + _this.size.height;
          var rowTop;
          var rowBottom;
          if (rowHeightManager) {
            rowTop = rowHeightManager.getRowOffset(index2);
            rowBottom = rowTop + rowHeightManager.getRowHeight(index2);
          } else {
            var row = _this.getRowAt(index2);
            var info = row.getInfo();
            rowTop = info.offset;
            rowBottom = rowTop + info.height;
          }
          return top <= rowTop && rowBottom <= bottom;
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowVisibilityInfo", function(index2, offset) {
          var rendered = _this.isRowRendered(index2);
          var _this$props6 = _this.props, rowHeightManager = _this$props6.rowHeightManager;
          _this$props6.rowHeight;
          var minRowHeight = _this$props6.minRowHeight;
          var scrollTop = _this.scrollTop;
          var top = scrollTop + offset;
          var bottom = scrollTop + _this.size.height - offset;
          var rowTop;
          var rowBottom;
          if (rowHeightManager) {
            rowTop = rowHeightManager.getRowOffset(index2);
            rowBottom = rowTop + rowHeightManager.getRowHeight(index2);
          } else {
            var row = _this.getRowAt(index2);
            if (row) {
              var info = row.getInfo();
              rowTop = info.offset;
              rowBottom = rowTop + info.height;
            } else {
              var indexes = _this.getRenderedIndexes();
              var firstRenderedIndex = indexes[0];
              var lastRenderedIndex = indexes[indexes.length - 1];
              if (index2 < firstRenderedIndex) {
                rowTop = _this.rowOffsets[firstRenderedIndex] - (firstRenderedIndex - index2) * minRowHeight;
              } else if (index2 > lastRenderedIndex) {
                rowTop = _this.rowOffsets[lastRenderedIndex] + _this.rowHeights[lastRenderedIndex] + (index2 - lastRenderedIndex) * minRowHeight;
              } else {
                rowTop = _this.rowOffsets[index2];
              }
              rowBottom = rowTop + _this.rowHeights[index2];
            }
          }
          var visible = top <= rowTop && rowBottom <= bottom;
          return {
            rendered,
            visible,
            top: rowTop,
            bottom: rowBottom,
            topDiff: rowTop - top,
            bottomDiff: bottom - rowBottom
          };
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRenderedIndexes", function() {
          return Object.keys(_this.mapping).map(function(k2) {
            return k2 * 1;
          });
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowFocus", function(index2, event2) {
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rafSync", function() {
          if (_this.scrollContainer) {
            _this.scrollContainer.rafSync();
          }
          _this.adjustHeights();
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "adjustHeights", function() {
          if (Array.isArray(_this.rows)) {
            _this.rows.forEach(function(r2) {
              return r2.updateRowHeight();
            });
          }
        });
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "checkHeights", function() {
          var rows = _this.getSortedRows();
          var result = true;
          rows.forEach(function(row) {
            if (result !== true) {
              return;
            }
            var index2 = row.getIndex();
            if (row.node.offsetHeight != _this.rowHeights[index2]) {
              console.warn("row height mismatch at ".concat(index2, "!"));
              result = index2;
            }
          });
          if (result === true) {
            _this.rowHeights.reduce(function(acc, height, index2) {
              if (_this.rowOffsets[index2] !== acc && result === true && index2 < _this.props.count) {
                console.warn("row offset mismatch at ".concat(index2, "!"));
                result = index2;
              }
              return acc + height;
            }, 0);
          }
          return result;
        });
        _this.initSizes(_props);
        _this.visibleCount = void 0;
        _this.size = {
          height: 0,
          width: 0
        };
        _this.scrollTopPos = 0;
        _this.scrollLeftPos = 0;
        _this.prevScrollLeftPos = 0;
        _this.prevScrollTopPos = 0;
        _this.mapping = {};
        _this.rowSpans = {};
        _this.rowCoveredBy = {};
        _this.rows = [];
        _this.rowRef = function(r2) {
          _this.row = r2;
        };
        _this.refScrollContainer = function(c2) {
          _this.scrollContainer = c2;
        };
        _this.refStickyContainer = function(c2) {
          _this.stickyRowsContainer = c2;
        };
        _this.refContainerNode = function(domNode) {
          _this.containerNode = domNode;
        };
        _this.updateRows = (0, _lodash.default)(_this.updateRows, 16);
        return _this;
      }
      (0, _createClass2.default)(InovuaVirtualList2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate2(nextProps, nextState) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
      }, {
        key: "renderStickyRowsContainer",
        value: function renderStickyRowsContainer() {
          return this.props.stickyRows ? _react.default.createElement(_StickyRowsContainer.default, {
            rtl: this.props.rtl,
            key: "stickyrowscontainer",
            stickyOffset: this.props.stickyOffset,
            handle: this.refStickyContainer,
            rowHeightManager: this.props.rowHeightManager
          }) : null;
        }
      }, {
        key: "render",
        value: function render() {
          var props2 = this.props;
          var naturalRowHeight = props2.naturalRowHeight, scrollProps = props2.scrollProps, theme2 = props2.theme, minRowHeight = props2.minRowHeight, rowHeightManager = props2.rowHeightManager, count = props2.count;
          if (this.oldProps) {
            this.transitionProps(props2, this.oldProps);
          }
          this.oldProps = props2;
          var style = _objectSpread2({
            position: "relative"
          }, this.props.style);
          var className = (0, _join.default)(props2.className, BASE_CLASS_NAME, theme2 && "".concat(BASE_CLASS_NAME, "--theme-").concat(theme2), "".concat(BASE_CLASS_NAME, "--virtual-scroll"));
          var scrollHeight = rowHeightManager ? rowHeightManager.getTotalSize(count) : this.scrollHeight || minRowHeight * count;
          var rowContainer = this.renderRowContainer();
          var sizer = this.renderSizer(scrollHeight);
          var stickyRowsContainer = this.renderStickyRowsContainer();
          var children;
          if ((0, _src.hasSticky)()) {
            children = _react.default.Fragment ? _react.default.createElement(_react.default.Fragment, null, rowContainer, sizer) : [rowContainer, sizer];
          } else {
            children = _react.default.createElement("div", null, rowContainer, sizer);
          }
          var Factory = this.props.nativeScroll ? _src.NativeScrollContainer : _src.default;
          var renderScrollerSpacer = this.props.renderScrollerSpacer;
          if (naturalRowHeight) {
            renderScrollerSpacer = this.renderScrollerSpacerOnNaturalRowHeight;
          }
          return _react.default.createElement(Factory, _objectSpread2(_objectSpread2(_objectSpread2({
            contain: this.props.contain,
            ResizeObserver: this.props.ResizeObserver !== void 0 ? this.props.ResizeObserver : ResizeObserver2,
            extraChildren: stickyRowsContainer,
            useTransformToScroll: this.props.useTransformPosition
          }, (0, _reactCleanProps.default)(props2, InovuaVirtualList2.propTypes)), scrollProps), {}, {
            rtl: this.props.rtl,
            nativeScroll: this.props.nativeScroll,
            ref: this.refScrollContainer,
            onScrollbarsChange: this.onScrollbarsChange,
            style,
            theme: theme2,
            className,
            onScrollStart: this.onScrollStart,
            onScrollStop: this.onScrollStop,
            applyScrollStyle: this.applyScrollStyle,
            onResize: this.onResize,
            onViewResize: this.onViewResize,
            renderScroller: this.renderScroller,
            renderScrollerSpacer,
            renderView: this.renderView,
            getClientSize: this.getClientSize,
            getScrollSize: this.getScrollSize,
            children
          }));
        }
      }, {
        key: "updateRows",
        value: function updateRows(range2, reorder, updateScroll) {
          var _this2 = this;
          var rowHeightManager = this.props.rowHeightManager;
          var startRowIndex = range2.start;
          var endRowIndex = range2.end;
          if (this.props.onRenderRangeChange) {
            this.props.onRenderRangeChange(startRowIndex, endRowIndex);
          }
          var rows = this.getSortedRows();
          var gaps = this.getGapsFor(startRowIndex, endRowIndex, rows);
          var newIndexes = [];
          var _this$props7 = this.props, recycleCoveredRows = _this$props7.recycleCoveredRows, enableRowSpan = _this$props7.enableRowSpan;
          var visited = {};
          rows.forEach(function(row, i) {
            var rowIndex = row.getIndex();
            if (reorder) {
              var newRowIndex = startRowIndex + i;
              _this2.setRowIndex(row, newRowIndex);
              if (rowHeightManager == null) {
                newIndexes.push(newRowIndex);
              }
              return;
            }
            var extraRows = enableRowSpan ? row.getRowSpan() - 1 : 0;
            var outOfView = rowIndex + extraRows < startRowIndex || rowIndex > endRowIndex || visited[rowIndex] || enableRowSpan && recycleCoveredRows && _this2.rowCoveredBy[rowIndex] !== void 0;
            visited[rowIndex] = true;
            if (rowHeightManager == null) {
              if (outOfView) {
                if (gaps.length) {
                  var newIndex = gaps.pop();
                  newIndexes.push(newIndex);
                  _this2.setRowIndex(row, newIndex);
                } else {
                  row.setVisible(false);
                }
              } else {
                row.setVisible(true);
                newIndexes.push(row.getIndex());
              }
              return;
            }
            if (outOfView && gaps.length) {
              var _newIndex = gaps.pop();
              _this2.setRowIndex(row, _newIndex);
            }
          });
          if (newIndexes.length && rowHeightManager == null) {
            if (this.updateRafHandle) {
              globalObject.cancelAnimationFrame(this.updateRafHandle);
            }
            this.updateRafHandle = globalObject.requestAnimationFrame(function() {
              _this2.updateRafHandle = null;
              _this2.onRowsUpdated(newIndexes, {
                start: startRowIndex,
                end: endRowIndex
              }, function() {
              });
            });
          }
        }
      }, {
        key: "scrollTopMax",
        get: function get2() {
          return this.mounted ? this.scrollContainer.scrollTopMax : 0;
        }
      }, {
        key: "scrollLeftMax",
        get: function get2() {
          return this.mounted ? this.scrollContainer.scrollLeftMax : 0;
        }
      }, {
        key: "scrollTop",
        get: function get2() {
          return this.mounted ? this.getScrollingElement().scrollTop : 0;
        },
        set: function set2(value) {
          var element = this.getScrollingElement();
          if (element) {
            element.scrollTop = value;
          }
        }
      }, {
        key: "scrollLeft",
        get: function get2() {
          return this.mounted ? this.getScrollingElement().scrollLeft : 0;
        },
        set: function set2(value) {
          var element = this.getScrollingElement();
          if (element) {
            element.scrollLeft = value;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.props.rowHeightManager) {
            this.props.rowHeightManager.removeListener("index", this.onIndex);
          }
          this.mounted = false;
          this.unmounted = true;
          this.rows.length = 0;
          this.rowHeights = null;
          this.rowOffsets = null;
        }
      }, {
        key: "transitionProps",
        value: function transitionProps(nextProps, thisProps) {
          var nextCount = Math.max(nextProps.count, 0);
          var rowHeightChange = thisProps.rowHeight && nextProps.rowHeight != thisProps.rowHeight;
          if (thisProps.renderRow !== nextProps.renderRow) {
            this.rowCoveredBy = {};
            this.rowSpans = {};
          }
          if (nextCount != thisProps.count || nextProps.showEmptyRows != thisProps.showEmptyRows || rowHeightChange) {
            var oldVisibleCount = this.getVisibleCount();
            this.updateVisibleCount(this.size.height, nextProps);
            this.cleanupRows(nextProps);
            this.reorder = rowHeightChange || this.getVisibleCount(nextProps) < oldVisibleCount;
            this.initSizes(nextProps);
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this3 = this;
          var prevScrollTopPos;
          var prevScrollLeftPos;
          if (this.props.nativeScroll !== prevProps.nativeScroll) {
            prevScrollTopPos = this.scrollTopPos;
            prevScrollLeftPos = this.scrollLeftPos;
            globalObject.requestAnimationFrame(function() {
              if (_this3.unmounted) {
                return;
              }
              _this3.scrollTop = prevScrollTopPos;
              _this3.scrollLeft = prevScrollLeftPos;
            });
          }
          if (this.props.rowHeightManager !== prevProps.rowHeightManager) {
            if (prevProps.rowHeightManager) {
              prevProps.rowHeightManager.removeListener("index", this.onIndex);
            }
            this.setupRowHeightManager(this.props.rowHeightManager);
          }
          if (this.props.count != prevProps.count || this.props.renderRow != prevProps.renderRow || this.props.rowHeightManager != prevProps.rowHeightManager || this.props.rowHeightManager == null || this.props.showEmptyRows != prevProps.showEmptyRows) {
            var refreshConfig = {
              reorder: this.reorder
            };
            if (prevScrollTopPos !== void 0) {
              refreshConfig.scrollTop = prevScrollTopPos;
              refreshConfig.scrollLeft = prevScrollLeftPos;
            }
            if (this.props.count <= this.visibleCount) {
              refreshConfig.scrollTop = 0;
            }
            if ((IS_EDGE || IS_FF) && this.props.count < prevProps.count) {
              this.fixEdgeScrollPosition();
            }
            this.reorder = false;
            this.refreshLayout(refreshConfig);
          }
          if (prevProps.stickyRows !== this.props.stickyRows) {
            this.updateStickyRows(void 0, void 0, {
              force: true
            });
          }
        }
      }, {
        key: "getDOMNode",
        value: function getDOMNode() {
          return this.scrollContainer ? this.scrollContainer.domNode || this.scrollContainer.getDOMNode() : null;
        }
      }, {
        key: "renderRows",
        value: function renderRows2() {
          var props2 = this.props;
          var rowHeight = props2.rowHeight, renderRow = props2.renderRow, count = props2.count, pureRows = props2.pureRows, rowHeightManager = props2.rowHeightManager, showEmptyRows = props2.showEmptyRows, virtualized = props2.virtualized, rowContain = props2.rowContain, naturalRowHeight = props2.naturalRowHeight, useTransformRowPosition = props2.useTransformRowPosition;
          var to2 = this.getVisibleCount();
          return (0, _renderRows2.default)({
            ref: this.rowRef,
            onMount: this.onRowMount,
            onUnmount: this.onRowUnmount,
            notifyRowSpan: this.setRowRowSpan,
            pure: pureRows,
            renderRow,
            rowHeightManager,
            rowHeight,
            rowContain,
            count,
            from: 0,
            to: to2,
            naturalRowHeight,
            onKeyDown: this.onRowKeyDown,
            onFocus: this.onRowFocus,
            useTransformPosition: useTransformRowPosition,
            showEmptyRows,
            virtualized
          });
        }
      }, {
        key: "getFirstVisibleRowIndexForSticky",
        value: function getFirstVisibleRowIndexForSticky() {
          var scrollTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.scrollTopPos;
          var rowHeightManager = this.props.rowHeightManager;
          var stickyHeight = this.currentStickyRows ? this.currentStickyRows.reduce(function(_, row) {
            return rowHeightManager.getRowHeight(row.index);
          }, 0) : 0;
          var rowIndex = Math.max(0, rowHeightManager.getRowAt(scrollTop + stickyHeight) - 1);
          return rowIndex;
        }
      }, {
        key: "scrollToIndex",
        value: function scrollToIndex(index2) {
          var _this4 = this;
          var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, direction2 = _ref5.direction, force = _ref5.force, _ref5$duration = _ref5.duration, duration = _ref5$duration === void 0 ? 0 : _ref5$duration, _ref5$offset = _ref5.offset, offset = _ref5$offset === void 0 ? 0 : _ref5$offset;
          var callback2 = arguments.length > 2 ? arguments[2] : void 0;
          if (direction2) {
            if (direction2 != "top" && direction2 != "bottom") {
              direction2 = null;
            }
          }
          if (force && !direction2) {
            force = false;
          }
          if (index2 < 0 || index2 >= this.getMaxRenderCount()) {
            return;
          }
          if (typeof callback2 != "function") {
            callback2 = emptyFn;
          }
          var info = this.getRowVisibilityInfo(index2, offset);
          if (!info.rendered) {
            var rowHeight = this.props.rowHeight;
            if (!direction2) {
              var existingIndex = this.rows[0].getIndex();
              direction2 = index2 > existingIndex ? "bottom" : "top";
            }
            var newScrollTop = direction2 === "top" ? info.top - offset : this.scrollTop - info.bottomDiff + offset;
            var afterScroll = function afterScroll2() {
              if (!rowHeight) {
                setTimeout(function() {
                  globalObject.requestAnimationFrame(function() {
                    _this4.scrollToIndex(index2, {
                      direction: direction2,
                      force,
                      duration: duration ? 100 : 0
                    }, callback2);
                  });
                });
              } else {
                callback2();
              }
            };
            if (duration) {
              this.smoothScrollTo(newScrollTop, {
                duration
              }, afterScroll);
            } else {
              this.scrollTop = newScrollTop;
              afterScroll();
            }
            return;
          }
          var visible = info.visible;
          if (!visible) {
            if (!direction2) {
              direction2 = info.topDiff < 0 ? "top" : "bottom";
              force = true;
            }
          }
          if (!visible || direction2 && force) {
            var _newScrollTop;
            if (direction2 == "top" || info.topDiff < 0) {
              _newScrollTop = this.scrollTop + info.topDiff - offset;
            } else if (direction2 == "bottom" || info.bottomDiff < 0) {
              _newScrollTop = this.scrollTop - info.bottomDiff + offset;
            }
            if (_newScrollTop != null) {
              if (duration) {
                this.smoothScrollTo(_newScrollTop, {
                  duration
                }, callback2);
                return;
              }
              this.scrollTop = _newScrollTop;
            }
          }
          callback2();
        }
      }, {
        key: "getEmptyScrollOffset",
        value: function getEmptyScrollOffset() {
          if (this.props.emptyScrollOffset != null) {
            return this.props.emptyScrollOffset;
          }
          var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
          return this.props.emptyScrollOffset || SCROLLBAR_WIDTH || 17;
        }
      }]);
      return InovuaVirtualList2;
    }(_react.Component);
    exports.default = InovuaVirtualList;
    InovuaVirtualList.defaultProps = {
      minRowHeight: 20,
      nativeScroll: false,
      shouldAllowScrollbars: function shouldAllowScrollbars() {
        return true;
      },
      rafOnResize: false,
      theme: "default-light",
      showEmptyRows: false,
      showWarnings: !_uglified.default,
      virtualized: true,
      scrollOneDirectionOnly: false,
      useTransformPosition: !IS_EDGE && (0, _src.hasSticky)(),
      useTransformRowPosition: false,
      recycleCoveredRows: true,
      scrollProps: {}
    };
    var propTypes2 = {
      applyScrollLeft: _propTypes.default.func,
      naturalRowHeight: _propTypes.default.bool,
      count: function count(props2) {
        var count2 = props2.count;
        if (count2 == null) {
          throw new Error('"count" is required!');
        }
        if (typeof count2 != "number") {
          throw new Error('"count" should be a number!');
        }
        if (count2 < 0) {
          throw new Error('"count" should be >= 0!');
        }
      },
      getRowFocusableElements: _propTypes.default.func,
      contain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      rowContain: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
      handleRowKeyDown: _propTypes.default.func,
      rafOnResize: _propTypes.default.bool,
      checkResizeDelay: _propTypes.default.number,
      extraRows: _propTypes.default.number,
      measureSize: _propTypes.default.func,
      minRowHeight: _propTypes.default.number,
      minRowWidth: _propTypes.default.number,
      nativeScroll: _propTypes.default.bool,
      onRenderRangeChange: _propTypes.default.func,
      shouldFocusNextRow: _propTypes.default.func,
      onResize: _propTypes.default.func,
      onScrollStart: _propTypes.default.func,
      onScrollbarsChange: _propTypes.default.func,
      onScrollStop: _propTypes.default.func,
      pureRows: _propTypes.default.bool,
      rowHeight: _propTypes.default.number,
      renderRow: _propTypes.default.func.isRequired,
      renderRowContainer: _propTypes.default.func,
      renderSizer: _propTypes.default.func,
      showEmptyRows: _propTypes.default.bool,
      useTransformPosition: _propTypes.default.bool,
      useTransformRowPosition: _propTypes.default.bool,
      scrollProps: _propTypes.default.object,
      showWarnings: _propTypes.default.bool,
      renderView: _propTypes.default.func,
      renderScroller: _propTypes.default.func,
      renderScrollerSpacer: _propTypes.default.func,
      shouldComponentUpdate: _propTypes.default.func,
      shouldPreventDefaultTabKeyOnRow: _propTypes.default.func,
      theme: _propTypes.default.string,
      overscrollBehavior: _propTypes.default.string,
      virtualized: _propTypes.default.bool,
      scrollOneDirectionOnly: _propTypes.default.bool,
      onStickyRowUpdate: _propTypes.default.func,
      stickyRows: _propTypes.default.object,
      recycleCoveredRows: _propTypes.default.bool,
      stickyOffset: _propTypes.default.number,
      enableRowSpan: _propTypes.default.bool,
      rowHeightManager: function rowHeightManager(props2, propName) {
        var value = props2[propName];
        if (!value) {
          return new Error('\n You have to provide a "rowHeightManager" property, which should be an instance of RowHeightManager.\n ');
        }
        if (!(value instanceof _RowHeightManager.default)) {
          return new Error('The "rowHeightManager" property should be an instance of RowHeightManager!');
        }
      }
    };
    exports.propTypes = propTypes2;
    InovuaVirtualList.propTypes = propTypes2;
  })(VirtualList);
  return VirtualList;
}
var hasRequiredSrc$2;
function requireSrc$2() {
  if (hasRequiredSrc$2)
    return src$3;
  hasRequiredSrc$2 = 1;
  (function(exports) {
    var _typeof2 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "RowHeightManager", {
      enumerable: true,
      get: function get2() {
        return _VirtualList.RowHeightManager;
      }
    });
    exports.default = void 0;
    Object.defineProperty(exports, "getScrollbarWidth", {
      enumerable: true,
      get: function get2() {
        return _VirtualList.getScrollbarWidth;
      }
    });
    Object.defineProperty(exports, "propTypes", {
      enumerable: true,
      get: function get2() {
        return _VirtualList.propTypes;
      }
    });
    Object.defineProperty(exports, "shouldComponentUpdate", {
      enumerable: true,
      get: function get2() {
        return _VirtualList.shouldComponentUpdate;
      }
    });
    var _VirtualList = _interopRequireWildcard(requireVirtualList());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default2 = _VirtualList.default;
    exports.default = _default2;
  })(src$3);
  return src$3;
}
var renderRows = {};
var Row = {};
var adjustCellProps = {};
var renderGroupTitle = {};
var hasRequiredRenderGroupTitle;
function requireRenderGroupTitle() {
  if (hasRequiredRenderGroupTitle)
    return renderGroupTitle;
  hasRequiredRenderGroupTitle = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderGroupTitle, "__esModule", {
    value: true
  });
  renderGroupTitle.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _react = reactExports;
  var _uglified = _interopRequireDefault2(requireUglified());
  var emptyObject = {};
  var isValid = function isValid2(value) {
    if (value == null) {
      return true;
    }
    if (Array.isArray(value)) {
      return true;
    }
    var type = (0, _typeof2.default)(value);
    if (type == "string" || type == "number") {
      return true;
    }
    return (0, _react.isValidElement)(value);
  };
  var _default2 = function _default3(_ref2) {
    var cellProps = _ref2.cellProps, rowProps = _ref2.rowProps;
    var computedLocked = cellProps.computedLocked;
    var data = rowProps.data, _rowProps$groupProps = rowProps.groupProps, groupProps = _rowProps$groupProps === void 0 ? emptyObject : _rowProps$groupProps, hasLockedStart = rowProps.hasLockedStart;
    var renderGroupTitle2 = computedLocked === "start" || !hasLockedStart && !computedLocked ? groupProps.renderGroupTitle : computedLocked === "end" ? groupProps.renderLockedEndGroupTitle : groupProps.renderUnlockedGroupTitle;
    var groupColId;
    if (rowProps.data.fieldPath && rowProps.data.fieldPath.length) {
      groupColId = rowProps.data.fieldPath[rowProps.data.fieldPath.length - 1];
    }
    groupColId = groupColId || rowProps.data.name || rowProps.data.id;
    var col = rowProps.columnsMap[groupColId];
    if (col && col.renderGroupTitle) {
      return col.renderGroupTitle(rowProps.data.value, rowProps);
    }
    if (renderGroupTitle2) {
      return renderGroupTitle2(rowProps.data.value, rowProps);
    }
    if (col && col.groupToString) {
      return col.groupToString(rowProps.data.value, {
        data: rowProps.data,
        fieldName: col.name,
        renderGroupTitle: true
      });
    }
    if (computedLocked === "start") {
      if (!_uglified.default && !isValid(data.value)) {
        return 'Invalid group title for column "'.concat(groupColId, '". Use "renderGroupTitle" column prop.');
      }
      return data.value;
    }
    if (!hasLockedStart && !computedLocked) {
      if (!_uglified.default && !isValid(data.value)) {
        return 'Invalid group title for column "'.concat(groupColId, '". Use "renderGroupTitle" column prop.');
      }
      return data.value;
    }
    return null;
  };
  renderGroupTitle.default = _default2;
  return renderGroupTitle;
}
var hasRequiredAdjustCellProps;
function requireAdjustCellProps() {
  if (hasRequiredAdjustCellProps)
    return adjustCellProps;
  hasRequiredAdjustCellProps = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(adjustCellProps, "__esModule", {
    value: true
  });
  adjustCellProps.default = void 0;
  var _renderGroupTitle = _interopRequireDefault2(requireRenderGroupTitle());
  var _default2 = function _default3(cellProps, rowProps) {
    var groupProps = rowProps.groupProps, totalLockedStartWidth = rowProps.totalLockedStartWidth, totalLockedEndWidth = rowProps.totalLockedEndWidth, totalUnlockedWidth = rowProps.totalUnlockedWidth, totalComputedWidth = rowProps.totalComputedWidth, totalColumnCount = rowProps.totalColumnCount, firstLockedEndIndex = rowProps.firstLockedEndIndex, firstUnlockedIndex = rowProps.firstUnlockedIndex;
    rowProps.groupColumn;
    var hasLockedEnd = rowProps.hasLockedEnd, hasLockedStart = rowProps.hasLockedStart;
    var computedVisibleIndex = cellProps.computedVisibleIndex, computedLocked = cellProps.computedLocked, expandColumnIndex = cellProps.expandColumnIndex;
    var expandColumn = computedVisibleIndex === expandColumnIndex;
    var expandGroupTitle = rowProps.expandGroupTitle;
    if (!hasLockedStart && !hasLockedEnd) {
      expandGroupTitle = true;
    }
    rowProps.data;
    var lockedStart = computedLocked === "start";
    var lockedEnd = computedLocked === "end";
    if (groupProps && computedVisibleIndex < groupProps.depth || expandColumnIndex != null && computedVisibleIndex < expandColumnIndex) {
      cellProps.value = null;
      cellProps.noBackground = true;
      return cellProps;
    }
    if (computedVisibleIndex === (groupProps === null || groupProps === void 0 ? void 0 : groupProps.depth)) {
      cellProps.value = null;
      cellProps.collapsed = groupProps.collapsed;
      cellProps.textAlign = "center";
      cellProps.noBackground = false;
      cellProps.firstInSection = true;
      return cellProps;
    }
    if (computedVisibleIndex === (groupProps === null || groupProps === void 0 ? void 0 : groupProps.depth) + 1 || expandColumn) {
      var remainingWidth = lockedStart ? totalLockedStartWidth : totalComputedWidth - totalLockedEndWidth;
      if (expandGroupTitle || expandColumn) {
        remainingWidth = totalComputedWidth;
        cellProps.last = true;
        cellProps.computedColspan = Math.max(totalColumnCount - computedVisibleIndex, 1);
      } else {
        cellProps.computedColspan = Math.max(lockedStart ? firstUnlockedIndex - computedVisibleIndex : lockedEnd ? totalColumnCount - computedVisibleIndex : firstLockedEndIndex - computedVisibleIndex, 1);
      }
      cellProps.lastInSection = true;
      cellProps.noBackground = false;
      cellProps.computedWidth = remainingWidth - cellProps.computedOffset;
      if (!expandColumn) {
        cellProps.value = (0, _renderGroupTitle.default)({
          cellProps,
          rowProps,
          groupProps
        });
      }
      cellProps.zIndex = 1;
      cellProps.textAlign = "start";
      if (cellProps.render) {
        if (!expandColumn) {
          cellProps.render = function() {
            return cellProps.value;
          };
        }
      }
      return cellProps;
    }
    if (lockedStart) {
      cellProps.hidden = true;
    } else {
      var fakeHidden = lockedEnd ? computedVisibleIndex !== firstLockedEndIndex : computedVisibleIndex !== firstUnlockedIndex;
      if (!cellProps.hidden) {
        cellProps.textAlign = "start";
        cellProps.value = fakeHidden ? null : (0, _renderGroupTitle.default)({
          cellProps,
          rowProps,
          groupProps
        });
        if (cellProps.render) {
          cellProps.render = function() {
            return cellProps.value;
          };
        }
        cellProps.computedWidth = lockedEnd ? totalLockedEndWidth : totalUnlockedWidth;
        if (!lockedEnd && computedVisibleIndex >= firstUnlockedIndex + 1) {
          cellProps.hidden = true;
        }
        cellProps.firstInSection = true;
        cellProps.last = hasLockedEnd ? lockedEnd : true;
        cellProps.lastInSection = true;
        cellProps.computedColspan = Math.max(lockedEnd ? totalColumnCount - computedVisibleIndex : firstLockedEndIndex - computedVisibleIndex, 1);
      }
    }
    return cellProps;
  };
  adjustCellProps.default = _default2;
  return adjustCellProps;
}
var usePrevious = {};
var hasRequiredUsePrevious;
function requireUsePrevious() {
  if (hasRequiredUsePrevious)
    return usePrevious;
  hasRequiredUsePrevious = 1;
  Object.defineProperty(usePrevious, "__esModule", {
    value: true
  });
  usePrevious.default = void 0;
  var _react = reactExports;
  var usePrevious$1 = function usePrevious2(value, initialValue) {
    var ref = (0, _react.useRef)(initialValue);
    (0, _react.useEffect)(function() {
      ref.current = value;
    });
    return ref.current;
  };
  var _default2 = usePrevious$1;
  usePrevious.default = _default2;
  return usePrevious;
}
var hasRequiredRow;
function requireRow() {
  if (hasRequiredRow)
    return Row;
  hasRequiredRow = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Row, "__esModule", {
    value: true
  });
  Row.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
  var _shallowequal = _interopRequireWildcard(requireShallowequal$1());
  var _join = _interopRequireDefault2(requireJoin());
  var _clamp = _interopRequireDefault2(requireClamp$1());
  var _Cell = _interopRequireDefault2(requireCell());
  var _renderCellsMaybeLocked = _interopRequireDefault2(requireRenderCellsMaybeLocked());
  var _adjustCellProps = _interopRequireDefault2(requireAdjustCellProps());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var CLASS_NAME = "InovuaReactDataGrid__row";
  var skipSelect = function skipSelect2(event2) {
    event2.nativeEvent.skipSelect = true;
  };
  var getValueForPivotColumn = function getValueForPivotColumn2(item, path) {
    return path.reduce(function(acc, field, index2) {
      if (!acc || acc[field] == null) {
        return null;
      }
      if (index2 === path.length - 1) {
        return acc[field];
      }
      return acc[field].pivotSummary || acc[field].values;
    }, item);
  };
  var getValueForPivotColumnSummary = function getValueForPivotColumnSummary2(item, _ref2) {
    var path = _ref2.pivotSummaryPath;
    var i = 0;
    var root = item;
    var current;
    while ((current = path[i]) && root) {
      if (!root.pivotSummary) {
        return null;
      }
      root = root.pivotSummary[current.value];
      i++;
    }
    if (root && root.pivotColumnSummary) {
      return root.pivotColumnSummary[path[path.length - 1].field];
    }
    return null;
  };
  var DataGridRow = _react.default.forwardRef(function(props2, ref) {
    var cells = (0, _react.useRef)([]);
    var cellRef = (0, _react.useCallback)(function(c2) {
      if (!c2) {
        return;
      }
      cells.current.push(c2);
    }, []);
    var domRef = (0, _react.useRef)(null);
    var columnRenderStartIndex = (0, _react.useRef)(0);
    var hasBorderTop = (0, _react.useRef)(false);
    var hasBorderBottom = (0, _react.useRef)(false);
    var maxRowspan = (0, _react.useRef)(1);
    var scrollingInProgress = (0, _react.useRef)(false);
    var scrollingDirection = (0, _react.useRef)("vertical");
    var cleanupCells = (0, _react.useCallback)(function() {
      cells.current = cells.current.filter(Boolean);
      return cells.current;
    }, []);
    var getCells = (0, _react.useCallback)(function() {
      return cells.current;
    }, []);
    var prevColumnRenderCount = (0, _usePrevious.default)(props2.columnRenderCount, props2.columnRenderCount);
    if (props2.columnRenderCount < prevColumnRenderCount) {
      cleanupCells();
    }
    var getDOMNode = (0, _react.useCallback)(function() {
      return domRef.current;
    }, []);
    var setActiveRowRef = function setActiveRowRef2() {
      props2.activeRowRef.current = {
        instance: {
          hasBorderBottom: hasBorderBottom.current,
          hasBorderTop: hasBorderTop.current,
          props: props2
        },
        node: getDOMNode()
      };
    };
    if (props2.active) {
      setActiveRowRef();
    }
    (0, _react.useEffect)(function() {
      if (props2.columnRenderStartIndex) {
        setColumnRenderStartIndex(props2.columnRenderStartIndex);
      }
      return function() {
        cells.current = [];
      };
    }, []);
    var prevRowIndex = (0, _usePrevious.default)(props2.rowIndex, props2.rowIndex);
    var prevEditing = (0, _usePrevious.default)(props2.editing, props2.editing);
    var prevActive = (0, _usePrevious.default)(props2.active, props2.active);
    (0, _react.useEffect)(function() {
      if (props2.groupProps && props2.rowIndex !== prevRowIndex) {
        fixForColspan();
      }
      if (props2.editing !== prevEditing) {
        updateEditCell();
      }
      if (!prevActive && props2.active) {
        setActiveRowRef();
      }
    });
    var onCellUnmount = (0, _react.useCallback)(function(_cellProps, cell) {
      if (cells.current) {
        cells.current = cells.current.filter(function(c2) {
          return c2 !== cell;
        });
      }
    }, []);
    var orderCells = (0, _react.useCallback)(function() {
      var cells2 = cleanupCells();
      var sortedProps = cells2.map(function(c2) {
        return c2.getProps();
      }).sort(function(p1, p2) {
        return p1.index - p2.index;
      });
      cells2.sort(function(cell1, cell2) {
        return cell1.props.renderIndex - cell2.props.renderIndex;
      });
      cells2.forEach(function(c2, i) {
        c2.setStateProps(sortedProps[i]);
      });
    }, [cleanupCells]);
    var updateEditCell = (0, _react.useCallback)(function() {
      var cells2 = getCells();
      var editColumnIndex = props2.editColumnIndex;
      for (var i = 0, len = cells2.length, cell; i < len; i++) {
        cell = cells2[i];
        if (getCellIndex(cell) === editColumnIndex) {
          setCellIndex(cell, editColumnIndex);
        }
        if (cell.getProps().inEdit) {
          setCellIndex(cell, getCellIndex(cell));
        }
      }
    }, [props2.editColumnIndex]);
    var fixForColspan = (0, _react.useCallback)(function() {
      if (props2.computedHasColSpan) {
        setColumnRenderStartIndex(columnRenderStartIndex.current);
      }
    }, [props2.computedHasColSpan]);
    var setScrolling = (0, _react.useCallback)(function(scrolling) {
      var node2 = getDOMNode() || domRef.current;
      var scrollingDir = scrollingDirection.current;
      if (scrolling !== false) {
        scrollingDirection.current = scrolling;
      }
      var oldScrollingInProgress = scrollingInProgress.current;
      scrollingDirection.current = scrollingDir;
      scrollingInProgress.current = scrolling ? true : false;
      if (!node2) {
        return;
      }
      if (oldScrollingInProgress !== scrollingInProgress.current) {
        var _className = "".concat(CLASS_NAME, "--scrolling");
        if (scrollingInProgress.current) {
          node2.classList.add(_className);
        } else {
          node2.classList.remove(_className);
        }
      }
      return;
    }, []);
    var renderRowDetails = (0, _react.useCallback)(function(rowDetailsInfo2) {
      if (props2.computedRenderRowDetails) {
        return props2.computedRenderRowDetails(rowDetailsInfo2);
      }
      return "Please specify `renderRowDetails`";
    }, []);
    var onContextMenu = (0, _react.useCallback)(function(event2) {
      var passedProps2 = props2.passedProps, onRowContextMenu = props2.onRowContextMenu;
      if (onRowContextMenu) {
        onRowContextMenu(props2, event2);
      }
      if (passedProps2 && passedProps2.onContextMenu) {
        passedProps2.onContextMenu(event2, props2);
      }
    }, [props2.passedProps, props2.passedProps.onContextMenu, props2.onRowContextMenu]);
    var setCellIndex = (0, _react.useCallback)(function(cell, index2, cellProps) {
      cellProps = cellProps || (props2.computedHasColSpan ? getPropsForCells().slice(index2, index2 + 1)[0] : getPropsForCells(index2, index2)[0]);
      cell.setStateProps(cellProps);
    }, [props2.computedHasColSpan]);
    var getCellIndex = (0, _react.useCallback)(function(cell) {
      return cell.getProps().computedVisibleIndex;
    }, []);
    var sortCells = (0, _react.useCallback)(function(cells2) {
      return cells2.sort(function(cell1, cell2) {
        return getCellIndex(cell1) - getCellIndex(cell2);
      });
    }, []);
    var getCellAt = (0, _react.useCallback)(function(index2) {
      return getCells().filter(function(c2) {
        return c2.getProps().computedVisibleIndex === index2;
      })[0];
    }, []);
    var getCellById = (0, _react.useCallback)(function(id3) {
      return getCells().filter(function(c2) {
        return c2.getProps().id === id3;
      })[0];
    }, []);
    var getSortedCells = (0, _react.useCallback)(function() {
      return sortCells(getCells().slice());
    }, []);
    var getGaps = (0, _react.useCallback)(function(startIndex, endIndex) {
      var visibleCellPositions = {};
      var sortedCells = getSortedCells();
      sortedCells.forEach(function(cell) {
        var cellProps = cell.getProps();
        if (cellProps.computedLocked) {
          return;
        }
        var computedVisibleIndex = cellProps.computedVisibleIndex, computedColspan = cellProps.computedColspan, groupProps2 = cellProps.groupProps;
        if (groupProps2 && computedVisibleIndex <= groupProps2.depth + 1) {
          return;
        }
        visibleCellPositions[computedVisibleIndex] = true;
        if (computedColspan) {
          for (var i = 0; i < computedColspan; i++) {
            visibleCellPositions[computedVisibleIndex + i] = true;
          }
        }
      });
      var gaps = [];
      for (; startIndex <= endIndex; startIndex++) {
        if (!visibleCellPositions[startIndex]) {
          gaps.push(startIndex);
        }
      }
      return gaps;
    }, []);
    var getVirtualizeColumns = (0, _react.useCallback)(function() {
      return props2.virtualizeColumns;
    }, [props2.virtualizeColumns]);
    var toggleRowExpand = (0, _react.useCallback)(function(rowIndex) {
      if (typeof rowIndex !== "number") {
        rowIndex = props2.realIndex;
      }
      props2.toggleRowExpand(rowIndex);
    }, [props2.realIndex, props2.toggleRowExpand]);
    var toggleNodeExpand = (0, _react.useCallback)(function(rowIndex) {
      if (typeof rowIndex !== "number") {
        rowIndex = props2.realIndex;
      }
      props2.toggleNodeExpand(rowIndex);
    }, [props2.realIndex, props2.toggleNodeExpand]);
    var loadNodeAsync = (0, _react.useCallback)(function() {
      var _props$loadNodeAsync;
      (_props$loadNodeAsync = props2.loadNodeAsync) === null || _props$loadNodeAsync === void 0 ? void 0 : _props$loadNodeAsync.call(props2, props2.data);
    }, [props2.loadNodeAsync, props2.data]);
    var isRowExpandable = (0, _react.useCallback)(function(rowIndex) {
      if (typeof rowIndex !== "number") {
        rowIndex = props2.realIndex;
      }
      return props2.isRowExpandableAt(rowIndex);
    }, [props2.realIndex, props2.isRowExpandableAt]);
    var setRowExpanded = (0, _react.useCallback)(function(expanded2, _) {
      var rowIndex = props2.realIndex;
      var _expanded = expanded2;
      if (typeof expanded2 === "number") {
        rowIndex = expanded2;
        _expanded = _;
      }
      props2.setRowExpanded(rowIndex, _expanded);
    }, [props2.realIndex, props2.setRowExpanded]);
    var getCurrentGaps = function getCurrentGaps2() {
    };
    var setColumnRenderStartIndex = (0, _react.useCallback)(function(columnStartIndex) {
      if (columnRenderStartIndex.current === columnStartIndex) {
        return;
      }
      columnRenderStartIndex.current = columnStartIndex;
      if (getVirtualizeColumns() === false) {
        return;
      }
      var newCellProps;
      var renderRange;
      var cellPropsAt;
      if (props2.computedHasColSpan) {
        newCellProps = getPropsForCells();
        renderRange = getColumnRenderRange(newCellProps);
        cellPropsAt = function cellPropsAt2(index2) {
          return newCellProps[index2];
        };
      } else {
        var _renderRange, _renderRange2;
        renderRange = getColumnRenderRange();
        newCellProps = getPropsForCells((_renderRange = renderRange) === null || _renderRange === void 0 ? void 0 : _renderRange.start, (((_renderRange2 = renderRange) === null || _renderRange2 === void 0 ? void 0 : _renderRange2.end) || 0) + 1);
        cellPropsAt = function cellPropsAt2(index2) {
          return newCellProps.filter(function(cellProps) {
            return cellProps.computedVisibleIndex === index2;
          })[0];
        };
      }
      if (!renderRange) {
        return;
      }
      var _renderRange3 = renderRange, start = _renderRange3.start, end = _renderRange3.end;
      var gaps = getGaps(start, end);
      if (!gaps.length) {
        return;
      }
      var gapsMap = gaps.reduce(function(acc, gapIndex) {
        acc[gapIndex] = true;
        return acc;
      }, {});
      var tempCellMap = {};
      var calls = [];
      getCells().forEach(function(cell) {
        var cellProps = cell.getProps();
        var groupProps2 = cellProps.groupProps, cellIndex = cellProps.computedVisibleIndex, computedColspan = cellProps.computedColspan, computedLocked = cellProps.computedLocked;
        if (computedLocked) {
          return;
        }
        if (!props2.groupColumn && groupProps2 && cellIndex <= groupProps2.depth + 1) {
          return;
        }
        var outside = cellIndex < start || cellIndex > end || cellIndex === void 0;
        if (outside && computedColspan) {
          var endCellIndex = cellIndex + (computedColspan - 1);
          outside = cellIndex < start && endCellIndex < start || cellIndex > end;
        }
        var outOfView = outside || tempCellMap[cellIndex] || gapsMap[cellIndex];
        tempCellMap[cellIndex] = true;
        var newIndex;
        if (outOfView && gaps.length) {
          newIndex = gaps[gaps.length - 1];
          calls.push([cell, newIndex]);
          gaps.length -= 1;
        }
      });
      calls.forEach(function(call) {
        var cell = call[0];
        var newIndex = call[1];
        setCellIndex(cell, newIndex, cellPropsAt(newIndex));
      });
    }, [props2.columnRenderStartIndex, props2.computedHasColSpan, props2.columnRenderCount, props2.virtualizeColumns]);
    var propsRef = (0, _react.useRef)(props2);
    propsRef.current = props2;
    var lastDataSource = (0, _usePrevious.default)(propsRef.current.dataSourceArray, propsRef.current.dataSourceArray);
    var lastColumns = (0, _usePrevious.default)(propsRef.current.columns, propsRef.current.columns);
    var getPropsForCells = function getPropsForCells2(startIndex, endIndex) {
      var _columns$filter$;
      var props3 = propsRef.current;
      var initialColumns = props3.columns;
      var columns2 = initialColumns;
      var hasLockedStart2 = props3.hasLockedStart, data2 = props3.data, onGroupToggle = props3.onGroupToggle, computedPivot2 = props3.computedPivot, rowHeight2 = props3.rowHeight, remoteRowIndex2 = props3.remoteRowIndex, initialRowHeight2 = props3.initialRowHeight, lastLockedStartIndex = props3.lastLockedStartIndex, lastLockedEndIndex = props3.lastLockedEndIndex, lastUnlockedIndex = props3.lastUnlockedIndex, minRowHeight = props3.minRowHeight, realIndex2 = props3.realIndex, showHorizontalCellBorders2 = props3.showHorizontalCellBorders, showVerticalCellBorders = props3.showVerticalCellBorders, empty3 = props3.empty, treeColumn = props3.treeColumn, groupColumn2 = props3.groupColumn, totalDataCount = props3.totalDataCount, depth = props3.depth, dataSourceArray2 = props3.dataSourceArray, computedGroupBy = props3.computedGroupBy, groupProps2 = props3.groupProps, summaryProps2 = props3.summaryProps, indexInGroup2 = props3.indexInGroup, firstUnlockedIndex = props3.firstUnlockedIndex, firstLockedEndIndex = props3.firstLockedEndIndex, selectAll = props3.selectAll, deselectAll = props3.deselectAll, columnUserSelect = props3.columnUserSelect, multiSelect = props3.multiSelect, selection = props3.selection, setRowSelected = props3.setRowSelected, computedRowExpandEnabled2 = props3.computedRowExpandEnabled, rtl2 = props3.rtl, lastRow = props3.last, computedCellSelection = props3.computedCellSelection, lastNonEmpty = props3.lastNonEmpty, maxVisibleRows = props3.maxVisibleRows, onCellClick = props3.onCellClick, editStartEvent = props3.editStartEvent, naturalRowHeight2 = props3.naturalRowHeight, renderNodeTool2 = props3.renderNodeTool, computedTreeEnabled = props3.computedTreeEnabled, rowExpanded = props3.expanded, expandGroupTitle = props3.expandGroupTitle, expandColumnFn = props3.expandColumn, onCellSelectionDraggerMouseDown = props3.onCellSelectionDraggerMouseDown, onCellMouseDown = props3.onCellMouseDown, onCellEnter = props3.onCellEnter, computedCellMultiSelectionEnabled = props3.computedCellMultiSelectionEnabled, getCellSelectionKey = props3.getCellSelectionKey, lastCellInRange = props3.lastCellInRange, computedRowspans = props3.computedRowspans, renderIndex = props3.renderIndex, nativeScroll2 = props3.nativeScroll, onDragRowMouseDown = props3.onDragRowMouseDown, theme2 = props3.theme, onContextMenu2 = props3.onContextMenu, setActiveIndex = props3.setActiveIndex, renderTreeCollapseTool = props3.renderTreeCollapseTool, renderTreeExpandTool = props3.renderTreeExpandTool, renderGroupCollapseTool = props3.renderGroupCollapseTool, renderGroupExpandTool = props3.renderGroupExpandTool, renderTreeLoadingTool = props3.renderTreeLoadingTool, onColumnMouseEnter = props3.onColumnMouseEnter, onColumnMouseLeave = props3.onColumnMouseLeave, columnIndexHovered = props3.columnIndexHovered, computedEnableColumnHover = props3.computedEnableColumnHover, columnHoverClassName = props3.columnHoverClassName, enableColumnAutosize = props3.enableColumnAutosize, renderRowDetailsExpandIcon = props3.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = props3.renderRowDetailsCollapsedIcon, disabledRow2 = props3.disabledRow, onCellDoubleClick = props3.onCellDoubleClick, onCellBulkUpdateMouseDown = props3.onCellBulkUpdateMouseDown, onCellBulkUpdateMouseUp = props3.onCellBulkUpdateMouseUp, bulkUpdateMouseDown = props3.bulkUpdateMouseDown;
      var dataSourceChange = !(0, _shallowequal.default)(lastDataSource, props3.dataSourceArray);
      var columnsChange = !(0, _shallowequal.default)(lastColumns, props3.columns);
      var expandColumnId = expandColumnFn ? expandColumnFn({
        data: data2
      }) : void 0;
      var virtualizeColumns2 = getVirtualizeColumns();
      var visibleColumnCount = columns2.length;
      var expandColumnIndex = expandColumnId ? (_columns$filter$ = columns2.filter(function(c2) {
        return c2.id === expandColumnId;
      })[0]) === null || _columns$filter$ === void 0 ? void 0 : _columns$filter$.computedVisibleIndex : void 0;
      if (startIndex !== void 0) {
        columns2 = columns2.slice(startIndex, endIndex ? endIndex + 1 : startIndex + 1);
      }
      startIndex = startIndex || 0;
      var hasBorderTopVar = false;
      var hasBorderBottomVar = false;
      var hiddenCells = {};
      var belongsToColspan = {};
      var columnsTillColspanStart = {};
      var lastInGroup2 = indexInGroup2 == props3.groupCount - 1;
      var activeCell = props3.computedActiveCell && getCellSelectionKey ? getCellSelectionKey.apply(void 0, (0, _toConsumableArray2.default)(props3.computedActiveCell)) : null;
      var lastInRange = lastCellInRange || activeCell || null;
      var maxRowspanVar = 1;
      var cellPropsArray = columns2.map(function(column2, idx) {
        var theColumnIndex = idx + startIndex;
        var columnProps = column2;
        var name = columnProps.name, computedVisibleIndex = columnProps.computedVisibleIndex;
        var value = data2 ? data2[name] : null;
        var rowIndex = realIndex2;
        if (groupProps2 && data2 && data2.groupColumnSummary) {
          value = data2.groupColumnSummary[name];
        }
        if (groupProps2 && data2 && column2.groupColumn) {
          value = data2.value;
        }
        if (columnProps.pivotColumnPath) {
          value = data2.pivotSummary ? getValueForPivotColumn(data2.pivotSummary, columnProps.pivotColumnPath) : value;
        }
        if (columnProps.pivotGrandSummaryColumn)
          ;
        else {
          if (columnProps.pivotSummaryPath) {
            value = data2.pivotSummary ? getValueForPivotColumnSummary(data2, {
              pivotSummaryPath: columnProps.pivotSummaryPath,
              pivotGrandSummaryColumn: columnProps.pivotGrandSummaryColumn
            }) : value;
          }
        }
        var defaults2 = {};
        if (columnUserSelect !== void 0) {
          defaults2.userSelect = columnUserSelect;
        }
        var groupTitleCell = !groupColumn2 && groupProps2 && groupProps2.depth + 1 == computedVisibleIndex;
        var groupExpandCell = !groupColumn2 && groupProps2 && groupProps2.depth == computedVisibleIndex;
        var hidden = groupProps2 ? expandGroupTitle && !groupColumn2 ? computedVisibleIndex > groupProps2.depth + 1 : false : false;
        if (expandColumnIndex != null && computedVisibleIndex > expandColumnIndex) {
          hidden = true;
        }
        var cellProps = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults2), columnProps), {}, {
          remoteRowIndex: remoteRowIndex2,
          indexInColumns: theColumnIndex,
          depth,
          expandColumnIndex,
          expandColumn: expandColumnIndex === computedVisibleIndex,
          editStartEvent,
          onCellClick,
          computedRowspan: computedRowspans ? computedRowspans[column2.id] : 1,
          groupNestingSize: props3.groupNestingSize,
          treeNestingSize: props3.treeNestingSize,
          data: data2,
          naturalRowHeight: naturalRowHeight2,
          totalDataCount,
          onCellSelectionDraggerMouseDown,
          onCellMouseDown,
          onCellEnter,
          rtl: rtl2,
          computedPivot: computedPivot2,
          selectAll,
          deselectAll,
          selection,
          renderNodeTool: renderNodeTool2,
          onDragRowMouseDown,
          multiSelect,
          treeColumn: treeColumn !== void 0 ? treeColumn === columnProps.id : false,
          setRowSelected,
          setRowExpanded: computedRowExpandEnabled2 ? setRowExpanded : null,
          toggleRowExpand: computedRowExpandEnabled2 ? toggleRowExpand : null,
          toggleNodeExpand: computedTreeEnabled ? toggleNodeExpand : null,
          loadNodeAsync: computedTreeEnabled ? loadNodeAsync : null,
          rowActive: props3.active,
          rowSelected: props3.selected,
          rowExpanded,
          rowIndex,
          rowHeight: rowHeight2,
          groupColumnVisible: !!groupColumn2,
          minRowHeight,
          groupProps: groupProps2,
          summaryProps: summaryProps2,
          empty: empty3,
          computedGroupBy,
          nativeScroll: nativeScroll2,
          computedCellMultiSelectionEnabled,
          lastRowInGroup: lastInGroup2,
          columnIndex: computedVisibleIndex,
          first: computedVisibleIndex == 0,
          last: computedVisibleIndex == visibleColumnCount - 1,
          value,
          virtualizeColumns: virtualizeColumns2,
          hasLockedStart: hasLockedStart2,
          rowIndexInGroup: indexInGroup2,
          rowRenderIndex: renderIndex,
          hidden,
          groupTitleCell,
          groupExpandCell,
          isRowExpandable: computedRowExpandEnabled2 ? isRowExpandable : null,
          tryRowCellEdit,
          tryNextRowEdit,
          onGroupToggle,
          initialRowHeight: rowExpanded ? initialRowHeight2 : rowHeight2,
          theme: theme2,
          onContextMenu: onContextMenu2,
          setActiveIndex,
          renderTreeCollapseTool,
          renderTreeExpandTool,
          renderGroupCollapseTool,
          renderGroupExpandTool,
          renderTreeLoadingTool,
          onColumnMouseEnter,
          onColumnMouseLeave,
          columnIndexHovered,
          computedEnableColumnHover,
          columnHoverClassName,
          renderRowDetailsExpandIcon,
          renderRowDetailsCollapsedIcon,
          disabledRow: disabledRow2,
          dataSourceChange,
          columnsChange,
          onDoubleClick: onCellDoubleClick,
          onCellBulkUpdateMouseDown,
          onCellBulkUpdateMouseUp,
          bulkUpdateMouseDown
        });
        if (computedCellSelection && getCellSelectionKey) {
          cellProps.cellSelected = computedCellSelection[getCellSelectionKey(rowIndex, computedVisibleIndex)];
          if (cellProps.cellSelected) {
            cellProps.hasRightSelectedSibling = cellProps.last ? false : computedCellSelection[getCellSelectionKey(rowIndex, computedVisibleIndex + 1)];
            cellProps.hasLeftSelectedSibling = cellProps.first ? false : computedCellSelection[getCellSelectionKey(rowIndex, computedVisibleIndex - 1)];
            cellProps.hasTopSelectedSibling = computedCellSelection[getCellSelectionKey(rowIndex - 1, computedVisibleIndex)];
            cellProps.hasBottomSelectedSibling = computedCellSelection[getCellSelectionKey(rowIndex + 1, computedVisibleIndex)];
          }
        }
        if (getCellSelectionKey && (activeCell || lastInRange)) {
          var cellKey = getCellSelectionKey(rowIndex, computedVisibleIndex);
          if (activeCell && activeCell === cellKey) {
            cellProps.cellActive = true;
          }
          if (lastInRange && lastInRange === cellKey) {
            cellProps.lastInRange = true;
          }
        }
        if (cellProps.visibilityTransitionDuration || cellProps.showTransitionDuration || cellProps.hideTransitionDuration) {
          cellProps.onTransitionEnd = onTransitionEnd(cellProps, columnProps);
        }
        if (props3.editing && props3.editColumnIndex === cellProps.columnIndex) {
          cellProps.inEdit = true;
          cellProps.editValue = props3.editValue;
        }
        if (virtualizeColumns2 && !cellProps.computedLocked || enableColumnAutosize || props3.editable || cellProps.computedEditable) {
          cellProps.cellRef = cellRef;
          cellProps.onUnmount = onCellUnmount;
        }
        var computedLocked = cellProps.computedLocked, colspan = cellProps.colspan;
        var lockedStart = computedLocked === "start";
        var lockedEnd = computedLocked === "end";
        var unlocked = !computedLocked;
        var computedColspan = 1;
        if (typeof colspan === "function") {
          computedColspan = cellProps.computedColspan = Math.max(1, colspan({
            remoteRowIndex: remoteRowIndex2,
            dataSourceArray: dataSourceArray2,
            data: cellProps.data,
            value: cellProps.value,
            rowIndex: cellProps.rowIndex,
            column: column2,
            columns: columns2,
            empty: empty3
          }));
          if (lockedStart) {
            computedColspan = (0, _clamp.default)(computedColspan, 1, Math.max(lastLockedStartIndex - computedVisibleIndex + 1, 1));
          }
          if (lockedEnd) {
            computedColspan = (0, _clamp.default)(computedColspan, 1, Math.max(lastLockedEndIndex - computedVisibleIndex + 1, 1));
          }
          if (unlocked) {
            computedColspan = (0, _clamp.default)(computedColspan, 1, Math.max(lastUnlockedIndex - computedVisibleIndex + 1, 1));
          }
          if (computedColspan > 1) {
            cellProps.computedWidth = columns2.slice(theColumnIndex, theColumnIndex + computedColspan).reduce(function(sum, col) {
              if (col.id !== column2.id) {
                hiddenCells[col.id] = true;
                if (column2.computedLocked === col.computedLocked) {
                  belongsToColspan[col.id] = column2.id;
                  columnsTillColspanStart[col.id] = col.computedVisibleIndex - column2.computedVisibleIndex;
                }
              }
              return sum + col.computedWidth;
            }, 0);
          }
        }
        cellProps.lastInSection = lockedStart ? computedVisibleIndex + computedColspan - 1 === firstUnlockedIndex - 1 : lockedEnd ? computedVisibleIndex + computedColspan - 1 === visibleColumnCount - 1 : computedVisibleIndex + computedColspan - 1 === firstLockedEndIndex - 1;
        cellProps.firstInSection = lockedStart ? computedVisibleIndex === 0 : lockedEnd ? computedVisibleIndex === firstLockedEndIndex : computedVisibleIndex === firstUnlockedIndex;
        if (computedGroupBy && !groupColumn2 && !!cellProps.depth) {
          cellProps.noBackground = computedVisibleIndex < cellProps.depth;
        }
        if (hiddenCells[column2.id]) {
          cellProps.hidden = true;
        }
        if (belongsToColspan[column2.id]) {
          cellProps.computedColspanedBy = belongsToColspan[column2.id];
          cellProps.computedColspanToStart = columnsTillColspanStart[column2.id];
        }
        if (groupProps2 && !groupColumn2 || expandColumnIndex != null) {
          (0, _adjustCellProps.default)(cellProps, props3);
        }
        if (cellProps.hidden) {
          cellProps.last = false;
          cellProps.lastInSection = false;
        } else {
          cellProps.showBorderLeft = showVerticalCellBorders && computedVisibleIndex > 0;
          cellProps.showBorderBottom = showHorizontalCellBorders2;
          if (!showVerticalCellBorders && computedGroupBy) {
            cellProps.showBorderLeft = computedVisibleIndex > 0 && computedVisibleIndex <= computedGroupBy.length;
          }
          if (computedGroupBy) {
            if (!cellProps.groupProps) {
              cellProps.showBorderBottom = groupColumn2 ? showHorizontalCellBorders2 : computedVisibleIndex >= computedGroupBy.length && showHorizontalCellBorders2;
              var summaryBefore = indexInGroup2 === 0 && !groupColumn2 ? dataSourceArray2[rowIndex - indexInGroup2] : null;
              if (summaryBefore && summaryBefore.__summary && computedVisibleIndex >= computedGroupBy.length) {
                cellProps.showBorderBottom = false;
              }
            }
            if (!empty3) {
              if (!groupColumn2 && (computedVisibleIndex < computedGroupBy.length || lastInGroup2)) {
                cellProps.showBorderBottom = rowExpanded;
              }
              if (cellProps.groupProps) {
                cellProps.showBorderBottom = cellProps.groupProps.collapsed ? !!groupColumn2 : groupColumn2 ? true : computedVisibleIndex > cellProps.groupProps.depth && cellProps.groupProps.depth >= computedGroupBy.length;
                cellProps.showBorderTop = groupTitleCell || groupExpandCell || !expandGroupTitle && !groupColumn2;
              } else if (indexInGroup2 === 0 && !groupColumn2) {
                cellProps.showBorderTop = computedVisibleIndex >= computedGroupBy.length;
              }
              if (lastNonEmpty && !lastRow && showHorizontalCellBorders2) {
                cellProps.showBorderBottom = computedVisibleIndex >= (cellProps.groupProps ? cellProps.groupProps.depth : computedGroupBy.length);
              }
            } else if (rowIndex > 0 && showHorizontalCellBorders2) {
              if (rowIndex === totalDataCount) {
                cellProps.showBorderBottom = computedVisibleIndex >= computedGroupBy.length;
              } else {
                cellProps.showBorderBottom = computedGroupBy ? computedVisibleIndex >= computedGroupBy.length : true;
              }
            }
          }
          if (lastRow) {
            cellProps.showBorderBottom = rowIndex < maxVisibleRows - 1 || rowExpanded;
          }
          if (lockedStart && cellProps.lastInSection) {
            cellProps.showBorderRight = true;
          }
          if (lockedEnd && computedVisibleIndex === firstLockedEndIndex) {
            cellProps.showBorderLeft = true;
          }
          if (cellProps.groupProps && computedVisibleIndex >= cellProps.groupProps.depth + 1 && !groupColumn2 && props3.expandGroupTitle) {
            cellProps.showBorderLeft = false;
          }
          if (cellProps.summaryProps) {
            cellProps.showBorderBottom = lastRow;
            cellProps.showBorderTop = computedVisibleIndex > cellProps.summaryProps.depth;
            if (cellProps.summaryProps.position == "start") {
              cellProps.showBorderTop = computedVisibleIndex >= cellProps.summaryProps.depth;
              cellProps.showBorderBottom = false;
            }
            cellProps.showBorderLeft = showVerticalCellBorders ? true : computedVisibleIndex <= cellProps.summaryProps.depth;
            if (computedVisibleIndex > cellProps.summaryProps.depth && computedVisibleIndex <= computedGroupBy.length && !groupColumn2) {
              cellProps.showBorderLeft = false;
            }
            if (computedVisibleIndex === 0) {
              cellProps.showBorderLeft = false;
            }
            cellProps.noBackground = !groupColumn2;
          }
          if (firstUnlockedIndex === computedVisibleIndex && hasLockedStart2) {
            cellProps.showBorderLeft = false;
          }
          if (cellProps.groupSpacerColumn && rowExpanded) {
            cellProps.showBorderBottom = false;
          }
          if (cellProps.last) {
            cellProps.showBorderRight = true;
          }
          var prevColumn = columns2[theColumnIndex - 1];
          var nextColumn = columns2[theColumnIndex + 1];
          if (nextColumn && nextColumn.prevBorderRight !== void 0 && !(lockedStart && cellProps.lastInSection)) {
            cellProps.showBorderRight = nextColumn.prevBorderRight;
          }
          if (prevColumn && prevColumn.nextBorderLeft !== void 0) {
            cellProps.showBorderLeft = prevColumn.nextBorderLeft;
          }
          if (columnProps.showBorderRight !== void 0) {
            cellProps.showBorderRight = columnProps.showBorderRight;
          }
          if (columnProps.showBorderLeft !== void 0) {
            cellProps.showBorderLeft = columnProps.showBorderLeft;
          }
        }
        if (cellProps.computedEditable) {
          cellProps.onEditStopForRow = onCellStopEdit;
          cellProps.onEditStartForRow = onCellStartEdit;
          cellProps.onEditCancelForRow = onCellEditCancel;
          cellProps.onEditValueChangeForRow = onCellEditValueChange;
          cellProps.onEditCompleteForRow = onCellEditComplete;
        }
        hasBorderBottomVar = hasBorderBottomVar || cellProps.showBorderBottom;
        hasBorderTopVar = hasBorderTopVar || cellProps.showBorderTop;
        return cellProps;
      });
      maxRowspan.current = maxRowspanVar;
      if (props3.computedEnableRowspan) {
        props3.setRowSpan && props3.setRowSpan(maxRowspan.current);
      }
      hasBorderTop.current = hasBorderTopVar;
      hasBorderBottom.current = hasBorderBottomVar;
      return cellPropsArray;
    };
    var onCellStopEdit = (0, _react.useCallback)(function(value, cellProps) {
      if (props2.onEditStop) {
        props2.onEditStop({
          value,
          data: cellProps.data,
          rowId: props2.getItemId(cellProps.data),
          columnId: cellProps.id,
          columnIndex: cellProps.computedVisibleIndex,
          rowIndex: cellProps.rowIndex,
          cellProps
        });
      }
    }, [props2.onEditStop]);
    var onCellStartEdit = (0, _react.useCallback)(function(value, cellProps) {
      if (props2.onEditStart) {
        props2.onEditStart({
          data: cellProps.data,
          value,
          rowId: props2.getItemId(cellProps.data),
          columnId: cellProps.id,
          columnIndex: cellProps.computedVisibleIndex,
          rowIndex: cellProps.rowIndex,
          cellProps
        });
      }
    }, [props2.onEditStart]);
    var onCellEditCancel = (0, _react.useCallback)(function(cellProps) {
      if (props2.onEditCancel) {
        props2.onEditCancel({
          data: cellProps.data,
          rowId: props2.getItemId(cellProps.data),
          columnIndex: cellProps.computedVisibleIndex,
          columnId: cellProps.id,
          rowIndex: cellProps.rowIndex,
          cellProps
        });
      }
    }, [props2.onEditCancel]);
    var onCellEditValueChange = (0, _react.useCallback)(function(value, cellProps) {
      if (props2.onEditValueChange) {
        props2.onEditValueChange({
          value,
          data: cellProps.data,
          rowId: props2.getItemId(cellProps.data),
          columnId: cellProps.id,
          columnIndex: cellProps.computedVisibleIndex,
          rowIndex: cellProps.rowIndex,
          cellProps
        });
      }
    }, [props2.onEditValueChange]);
    var onCellEditComplete = (0, _react.useCallback)(function(value, cellProps) {
      if (props2.onEditComplete) {
        props2.onEditComplete({
          value,
          data: cellProps.data,
          rowId: props2.getItemId(cellProps.data),
          columnId: cellProps.id,
          columnIndex: cellProps.computedVisibleIndex,
          rowIndex: cellProps.rowIndex,
          cellProps
        });
      }
    }, [props2.onEditComplete]);
    var tryRowCellEdit = (0, _react.useCallback)(function(editIndex) {
      var dir = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var isEnterNavigation = arguments.length > 2 ? arguments[2] : void 0;
      var cols = props2.columns;
      var col;
      var colIndex;
      if (!dir) {
        dir = 1;
      }
      dir = dir == 1 ? 1 : -1;
      var currentIndex = dir == 1 ? 0 : cols.length - 1;
      var foundCols = [];
      while (cols[currentIndex]) {
        col = cols[currentIndex];
        if (col.editable || props2.editable && col.editable !== false) {
          colIndex = col.computedVisibleIndex;
          if (colIndex == editIndex) {
            foundCols.push(col);
          } else {
            if (dir < 0) {
              if (colIndex < editIndex) {
                foundCols.push(col);
              }
            } else if (dir > 0) {
              if (colIndex > editIndex) {
                foundCols.push(col);
              }
            }
          }
        }
        currentIndex += dir;
      }
      if (!foundCols.length) {
        tryNextRowEdit(dir, isEnterNavigation ? editIndex : dir > 0 ? 0 : props2.columns.length - 1);
        return Promise.reject(null);
      }
      foundCols.sort(function(a, b2) {
        return dir > 0 ? a - b2 : b2 - a;
      });
      return new Promise(function(resolve2, reject) {
        var startEdit = function startEdit2(cols2) {
          var index2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
          props2.currentEditCompletePromise.current.then(function() {
            var errBack = function errBack2() {
              isEnterNavigation ? tryNextRowEdit(dir, editIndex, true) : startEdit2(cols2, index2 + 1);
            };
            var col2 = cols2[index2];
            if (!col2) {
              tryNextRowEdit(dir, isEnterNavigation ? editIndex : dir > 0 ? 0 : props2.columns.length - 1);
              return reject("column not found");
            }
            var cell = getCellById(col2.id);
            if (!cell) {
              if (props2.scrollToColumn) {
                props2.scrollToColumn(col2.id, void 0, function() {
                  setTimeout(function() {
                    startEdit2(cols2, index2);
                  }, 20);
                });
              }
              return;
            }
            setTimeout(function() {
              return cell.startEdit && cell.startEdit(void 0, errBack).then(resolve2).catch(errBack);
            }, 0);
          }).catch(function(error) {
            return reject(error);
          });
          return;
        };
        startEdit(foundCols, 0);
      });
    }, [props2.columns, props2.editable, props2.currentEditCompletePromise, props2.rowIndex, props2.scrollToColumn]);
    var tryNextRowEdit = (0, _react.useCallback)(function(dir, columnIndex, isEnterNavigation) {
      if (props2.scrollToIndexIfNeeded) {
        props2.scrollToIndexIfNeeded(props2.rowIndex + 2 * dir, {
          direction: dir == -1 ? "top" : "bottom"
        }, function() {
          if (props2.tryNextRowEdit) {
            props2.tryNextRowEdit(props2.rowIndex + dir, dir, columnIndex, isEnterNavigation);
          }
        });
      }
    }, [props2.rowIndex, props2.scrollToIndexIfNeeded, props2.tryNextRowEdit]);
    var onTransitionEnd = (0, _react.useCallback)(function(cellProps, columnProps, e2) {
      e2.stopPropagation();
      if (columnProps.onTransitionEnd) {
        columnProps.onTransitionEnd(e2);
      }
      if (props2.onTransitionEnd) {
        props2.onTransitionEnd(e2, cellProps);
      }
    }, [props2.onTransitionEnd]);
    var getColumnRenderRange = (0, _react.useCallback)(function(cellProps) {
      var virtualizeColumns2 = getVirtualizeColumns();
      if (!virtualizeColumns2) {
        return null;
      }
      var minStartIndex = props2.lockedStartColumns.length ? props2.lockedStartColumns.length : props2.groupProps && !props2.groupColumn ? props2.groupProps.depth + 2 : 0;
      var maxEndIndex = props2.columns.length - props2.lockedEndColumns.length - 1;
      var columnStartIndex = columnRenderStartIndex.current == null ? props2.columnRenderStartIndex || 0 : columnRenderStartIndex.current;
      columnStartIndex = Math.max(columnStartIndex, minStartIndex);
      var fixStartIndexForColspan = function fixStartIndexForColspan2() {
        if (cellProps) {
          while (cellProps[columnStartIndex].computedColspanedBy) {
            columnStartIndex--;
          }
        }
      };
      if (props2.columnRenderCount != null) {
        var columnRenderEndIndex = columnStartIndex + props2.columnRenderCount;
        columnRenderEndIndex = Math.min(columnRenderEndIndex, maxEndIndex);
        if (columnRenderEndIndex - props2.columnRenderCount != columnStartIndex) {
          columnStartIndex = Math.max(columnRenderEndIndex - props2.columnRenderCount, minStartIndex);
        }
        if (columnRenderEndIndex < 0) {
          return {
            start: 0,
            end: 0
          };
        }
        fixStartIndexForColspan();
        return {
          start: columnStartIndex,
          end: columnRenderEndIndex
        };
      }
      return null;
    }, [props2.virtualizeColumns, props2.columnRenderCount, props2.lockedStartColumns, props2.lockedEndColumns, props2.groupColumn, props2.groupProps, props2.columnRenderStartIndex, props2.columns]);
    var expandRangeWithColspan = (0, _react.useCallback)(function(range2, cellProps) {
      var extraNeededColumns = cellProps.reduce(function(total, cellProps2) {
        return total + (cellProps2.computedColspan > 1 ? cellProps2.computedColspan - 1 : 0);
      }, 0);
      if (!extraNeededColumns) {
        return range2;
      }
      if (range2.start < props2.firstUnlockedIndex) {
        range2.start = props2.firstUnlockedIndex;
      }
      if (range2.start > extraNeededColumns) {
        range2.start -= extraNeededColumns;
        return range2;
      }
      extraNeededColumns -= range2.start;
      range2.start = 0;
      if (extraNeededColumns) {
        range2.end += extraNeededColumns;
      }
      return range2;
    }, []);
    var renderRowInstance = function renderRowInstance2(_, __, style2) {
      var scrollLeft2 = props2.scrollLeft, hasLockedStart2 = props2.hasLockedStart, hasLockedEnd2 = props2.hasLockedEnd, lockedStartColumns = props2.lockedStartColumns, lockedEndColumns = props2.lockedEndColumns, computedHasColSpan = props2.computedHasColSpan, groupProps2 = props2.groupProps, columns2 = props2.columns;
      var virtualizeColumns2 = getVirtualizeColumns();
      var cellProps;
      if (!virtualizeColumns2) {
        cellProps = getPropsForCells();
      } else {
        var lockedStartCellProps = [];
        var lockedEndCellProps = [];
        var groupCellProps = [];
        var renderRange;
        if (computedHasColSpan) {
          cellProps = getPropsForCells();
          if (hasLockedStart2) {
            lockedStartCellProps = cellProps.slice(0, lockedStartColumns.length);
          } else if (groupProps2) {
            groupCellProps = cellProps.slice(0, groupProps2.depth + 2);
          }
          if (hasLockedEnd2) {
            lockedEndCellProps = cellProps.slice(columns2.length - lockedEndColumns.length, columns2.length);
          }
          renderRange = getColumnRenderRange(cellProps);
          if (renderRange) {
            renderRange = expandRangeWithColspan(renderRange, cellProps);
            cellProps = cellProps.slice(renderRange.start, renderRange.end + 1);
          }
        } else {
          var _renderRange4, _renderRange5;
          renderRange = getColumnRenderRange();
          cellProps = getPropsForCells((_renderRange4 = renderRange) === null || _renderRange4 === void 0 ? void 0 : _renderRange4.start, ((_renderRange5 = renderRange) === null || _renderRange5 === void 0 ? void 0 : _renderRange5.end) || 0);
          if (hasLockedStart2) {
            lockedStartCellProps = getPropsForCells(0, lockedStartColumns.length - 1);
          } else if (groupProps2) {
            groupCellProps = getPropsForCells(0, groupProps2.depth + 2 - 1);
          }
          if (hasLockedEnd2) {
            lockedEndCellProps = getPropsForCells(lockedEndColumns[0].computedVisibleIndex, columns2.length - 1);
          }
        }
        if (hasLockedStart2) {
          cellProps = [].concat((0, _toConsumableArray2.default)(lockedStartCellProps), (0, _toConsumableArray2.default)(cellProps));
        } else if (groupProps2) {
          cellProps = [].concat((0, _toConsumableArray2.default)(groupCellProps), (0, _toConsumableArray2.default)(cellProps));
        }
        if (hasLockedEnd2) {
          var _cellProps2;
          (_cellProps2 = cellProps).push.apply(_cellProps2, (0, _toConsumableArray2.default)(lockedEndCellProps));
        }
      }
      var result = cellProps.map(function(cProps, index2) {
        var cell;
        var key = index2;
        if (!virtualizeColumns2) {
          key = cProps.id || index2;
        }
        if (props2.cellFactory) {
          cell = props2.cellFactory(cProps);
        }
        if (cell === void 0) {
          cell = _react.default.createElement(_Cell.default, _objectSpread2(_objectSpread2({}, cProps), {}, {
            timestamp: Date.now(),
            cellRef: cProps.cellRef ? cProps.cellRef : null,
            key
          }));
        }
        return cell;
      });
      return (0, _renderCellsMaybeLocked.default)(result, props2, scrollLeft2, void 0, style2);
    };
    var onClick = (0, _react.useCallback)(function(event2) {
      if (props2.computedTreeEnabled && props2.expandOnMouseDown) {
        toggleNodeExpand(props2.rowIndex);
      }
      if (props2.onClick) {
        props2.onClick(event2, props2);
      }
      if (props2.passedProps && props2.passedProps.onClick) {
        props2.passedProps.onClick(event2, props2);
      }
    }, [props2.passedProps, props2.computedTreeEnabled, props2.rowIndex, props2.expandOnMouseDown, props2.onClick]);
    var onDoubleClick = (0, _react.useCallback)(function(event2) {
      if (props2.onRowDoubleClick) {
        props2.onRowDoubleClick(event2, props2);
      }
    }, [props2.onRowDoubleClick]);
    var onMouseDown = (0, _react.useCallback)(function(event2) {
      if (props2.onMouseDown) {
        props2.onMouseDown(event2, props2);
      }
    }, [props2.onMouseDown]);
    var onMouseUp = (0, _react.useCallback)(function(event2) {
      if (props2.onMouseUp) {
        props2.onMouseUp(event2);
      }
    }, []);
    (0, _react.useImperativeHandle)(ref, function() {
      return {
        onCellUnmount,
        cleanupCells,
        getDOMNode,
        orderCells,
        updateEditCell,
        fixForColspan,
        setScrolling,
        renderRowDetails,
        onContextMenu,
        setCellIndex,
        getCellIndex,
        sortCells,
        getCellAt,
        getCellById,
        getCells,
        getSortedCells,
        getGaps,
        getVirtualizeColumns,
        toggleRowExpand,
        toggleNodeExpand,
        loadNodeAsync,
        isRowExpandable,
        setRowExpanded,
        setColumnRenderStartIndex,
        getPropsForCells,
        onCellStopEdit,
        onCellStartEdit,
        onCellEditCancel,
        onCellEditValueChange,
        onCellEditComplete,
        tryRowCellEdit,
        tryNextRowEdit,
        onTransitionEnd,
        getColumnRenderRange,
        expandRangeWithColspan,
        renderRow,
        onClick,
        onMouseDown,
        getCurrentGaps,
        totalDataCount: props2.totalDataCount,
        rowProps,
        domRef,
        props: props2
      };
    });
    var rowHeight = props2.rowHeight, initialRowHeight = props2.initialRowHeight, maxRowHeight = props2.maxRowHeight, groupNestingSize = props2.groupNestingSize, summaryProps = props2.summaryProps, data = props2.data, id2 = props2.id, columns = props2.columns, minWidth = props2.minWidth, maxWidth = props2.maxWidth, rowStyle = props2.rowStyle, scrollbars = props2.scrollbars, renderRow = props2.renderRow, computedRowExpandEnabled = props2.computedRowExpandEnabled, even = props2.even, odd = props2.odd, active = props2.active, selected = props2.selected, expanded = props2.expanded, passedProps = props2.passedProps, realIndex = props2.realIndex, remoteRowIndex = props2.remoteRowIndex, nativeScroll = props2.nativeScroll, indexInGroup = props2.indexInGroup, naturalRowHeight = props2.naturalRowHeight, rowDetailsStyle = props2.rowDetailsStyle, renderDetailsGrid = props2.renderDetailsGrid, last = props2.last, empty2 = props2.empty, computedPivot = props2.computedPivot, computedShowZebraRows = props2.computedShowZebraRows, rowDetailsWidth = props2.rowDetailsWidth, availableWidth = props2.availableWidth, groupProps = props2.groupProps, groupColumn = props2.groupColumn, dataSourceArray = props2.dataSourceArray, onRenderRow = props2.onRenderRow, shouldRenderCollapsedRowDetails = props2.shouldRenderCollapsedRowDetails, editing = props2.editing, rtl = props2.rtl, sticky = props2.sticky, hasLockedEnd = props2.hasLockedEnd, hasLockedStart = props2.hasLockedStart, showHorizontalCellBorders = props2.showHorizontalCellBorders, disabledRow = props2.disabledRow, rowspanZIndex = props2.rowspanZIndex, focusedRow = props2.focusedRow, rowFocusClassName = props2.rowFocusClassName;
    var rowClassName = props2.rowClassName;
    var virtualizeColumns = getVirtualizeColumns();
    var lastInGroup = indexInGroup == props2.groupCount - 1;
    var hasRowSpan = props2.computedRowspans && Object.keys(props2.computedRowspans).map(function(name) {
      var rowspan = props2.computedRowspans[name];
      return rowspan > 1;
    }).find(function(rowSpan) {
      return rowSpan === true;
    });
    var className = (0, _join.default)(props2.className, CLASS_NAME, scrollingInProgress.current && "".concat(CLASS_NAME, "--scrolling"), empty2 && "".concat(CLASS_NAME, "--empty"), editing && "".concat(CLASS_NAME, "--editing"), "".concat(CLASS_NAME, "--direction-").concat(rtl ? "rtl" : "ltr"), computedShowZebraRows && even && (!groupProps || computedPivot) && "".concat(CLASS_NAME, "--even"), computedShowZebraRows && odd && (!groupProps || computedPivot) && "".concat(CLASS_NAME, "--odd"), !computedShowZebraRows && !groupProps && "".concat(CLASS_NAME, "--no-zebra"), groupProps && "".concat(CLASS_NAME, "--group-row"), summaryProps && "".concat(CLASS_NAME, "--summary-row"), summaryProps && "".concat(CLASS_NAME, "--summary-position-").concat(summaryProps.position), groupProps && groupProps.collapsed && "".concat(CLASS_NAME, "--collapsed"), selected && "".concat(CLASS_NAME, "--selected"), expanded && "".concat(CLASS_NAME, "--expanded"), hasLockedStart ? "".concat(CLASS_NAME, "--has-locked-start") : "".concat(CLASS_NAME, "--no-locked-start"), hasLockedEnd ? "".concat(CLASS_NAME, "--has-locked-end") : "".concat(CLASS_NAME, "--no-locked-end"), showHorizontalCellBorders && "".concat(CLASS_NAME, "--show-horizontal-borders"), active && "".concat(CLASS_NAME, "--active"), virtualizeColumns && "".concat(CLASS_NAME, "--virtualize-columns"), rowHeight && "".concat(CLASS_NAME, "--rowheight"), naturalRowHeight && "".concat(CLASS_NAME, "--natural-rowheight"), realIndex == 0 && "".concat(CLASS_NAME, "--first"), last && "".concat(CLASS_NAME, "--last"), indexInGroup == 0 && "".concat(CLASS_NAME, "--first-in-group"), lastInGroup && "".concat(CLASS_NAME, "--last-in-group"), disabledRow ? "".concat(CLASS_NAME, "--disabled") : "", focusedRow ? (0, _join.default)("".concat(CLASS_NAME, "--focused"), rowFocusClassName ? rowFocusClassName : "") : "");
    if (passedProps) {
      className = (0, _join.default)(className, selected && passedProps.selectedClassName);
    }
    var style = _objectSpread2(_objectSpread2({}, props2.style), {}, {
      height: naturalRowHeight ? null : rowHeight,
      width: props2.width,
      minWidth,
      direction: "ltr"
    });
    if (hasRowSpan) {
      style.zIndex = rowspanZIndex;
    }
    if (maxWidth != null) {
      style.maxWidth = maxWidth;
    }
    if (maxRowHeight != null) {
      style.maxHeight = maxRowHeight;
    }
    if (rowStyle) {
      if (typeof rowStyle === "function") {
        var rowStyleResult = rowStyle({
          data,
          props: props2,
          style
        });
        if (rowStyleResult !== void 0) {
          style = _objectSpread2(_objectSpread2({}, style), rowStyleResult);
        }
      } else {
        style = _objectSpread2(_objectSpread2({}, style), rowStyle);
      }
    }
    if (rowClassName) {
      if (typeof rowClassName === "function") {
        rowClassName = rowClassName({
          data,
          props: props2,
          className
        });
      }
      if (rowClassName && typeof rowClassName == "string") {
        className = (0, _join.default)(className, rowClassName);
      }
    }
    var rowProps = _objectSpread2(_objectSpread2(_objectSpread2({}, props2), {}, {
      className,
      style,
      ref: domRef
    }, passedProps), {}, {
      onClick: !disabledRow ? onClick : null,
      onDoubleClick: !disabledRow ? onDoubleClick : null,
      onContextMenu: !disabledRow ? onContextMenu : null,
      onMouseUp: !disabledRow ? onMouseUp : null
    });
    rowProps.children = [_react.default.createElement("div", {
      key: "cellWrap",
      className: "InovuaReactDataGrid__row-cell-wrap InovuaReactDataGrid__row-hover-target",
      style: {
        width: props2.width,
        height: naturalRowHeight ? null : rowHeight,
        position: "absolute",
        top: 0,
        left: rtl ? -(props2.emptyScrollOffset || 0) : 0
      }
    }, renderRowInstance(data, columns, style))];
    var groupDepth = groupColumn ? 0 : data && data.__group ? data.depth - 1 : data && data.__summary ? rowProps.summaryProps.depth : props2.depth || 0;
    var activeBordersDiv = sticky ? _react.default.createElement("div", {
      key: "active-row-borders",
      className: (0, _join.default)("".concat(CLASS_NAME, "-active-borders"), hasBorderTop.current && "".concat(CLASS_NAME, "-active-borders--has-border-top"), hasBorderBottom.current && "".concat(CLASS_NAME, "-actived-borders--has-border-bottom"))
    }) : null;
    var shouldRender = expanded || shouldRenderCollapsedRowDetails;
    if (computedRowExpandEnabled && shouldRender && !data.__group) {
      var rowDetailsInfo = {
        data,
        rtl,
        isRowExpandable,
        rowIndex: realIndex,
        remoteRowIndex,
        rowId: props2.getItemId(data),
        rowExpanded: expanded,
        id: id2,
        rowSelected: selected,
        rowActive: active,
        toggleRowExpand,
        setRowExpanded,
        dataSource: dataSourceArray
      };
      var detailsStyle = {
        position: "absolute",
        height: rowHeight - initialRowHeight,
        overflow: renderDetailsGrid ? "visible" : "auto",
        top: initialRowHeight
      };
      if (rtl) {
        detailsStyle.direction = "rtl";
      }
      if (rowDetailsWidth == "max-viewport-width") {
        detailsStyle.width = Math.min(availableWidth, props2.width || maxWidth);
      }
      if (rowDetailsWidth === "min-viewport-width") {
        detailsStyle.width = Math.max(availableWidth, props2.width || maxWidth);
      }
      if (rowDetailsWidth === "viewport-width") {
        detailsStyle.width = availableWidth;
      }
      if (groupDepth) {
        detailsStyle[rtl ? "paddingRight" : "paddingLeft"] = (groupNestingSize || 0) * groupDepth;
      }
      detailsStyle[rtl ? "right" : "left"] = 0;
      if (isNaN(detailsStyle.width)) {
        delete detailsStyle.width;
      }
      if (!expanded) {
        detailsStyle.display = "none";
      }
      if (rowProps.memorizedScrollLeft && rowDetailsWidth !== "min-viewport-width") {
        var scrollLeftMax = rowProps.getScrollLeftMax && rowProps.getScrollLeftMax();
        var scrollLeft = !rtl ? rowProps.memorizedScrollLeft : -(scrollLeftMax - rowProps.memorizedScrollLeft);
        detailsStyle.transform = "translate3d(".concat(scrollLeft, "px, 0px, 0px)");
      }
      if (rowDetailsStyle) {
        if (typeof rowDetailsStyle === "function") {
          var styleResult = rowDetailsStyle(detailsStyle, rowDetailsInfo);
          if (styleResult !== void 0) {
            detailsStyle = styleResult;
          }
        } else {
          detailsStyle = _objectSpread2(_objectSpread2({}, detailsStyle), rowDetailsStyle);
        }
      }
      var showBorderBottom = !lastInGroup || last;
      if (nativeScroll && last && expanded) {
        showBorderBottom = false;
      }
      rowProps.children.push(_react.default.createElement("div", {
        key: "rowDetails",
        style: detailsStyle,
        onClick: skipSelect,
        className: (0, _join.default)("".concat(CLASS_NAME, "-details"), "".concat(CLASS_NAME, "-details--").concat(rowDetailsWidth), renderDetailsGrid ? "".concat(CLASS_NAME, "-details--details-grid") : null, !nativeScroll || nativeScroll && scrollbars && !scrollbars.vertical || availableWidth > minWidth ? "".concat(CLASS_NAME, "-details--show-border-right") : null, showBorderBottom ? "".concat(CLASS_NAME, "-details--show-border-bottom") : "")
      }, renderRowDetails(rowDetailsInfo)), _react.default.createElement("div", {
        className: "".concat(CLASS_NAME, "-details-special-bottom-border"),
        key: "row-details-special-bottom-border",
        style: (0, _defineProperty2.default)({}, rtl ? "right" : "left", (groupDepth || 0) * groupNestingSize)
      }), groupDepth ? (0, _toConsumableArray2.default)(new Array(groupDepth)).map(function(_, index2) {
        var _style2;
        return _react.default.createElement("div", {
          key: index2,
          className: "".concat(CLASS_NAME, "-details-border"),
          style: (_style2 = {
            height: "100%",
            position: "absolute"
          }, (0, _defineProperty2.default)(_style2, rtl ? "right" : "left", (index2 + 1) * groupNestingSize), (0, _defineProperty2.default)(_style2, "top", 0), _style2)
        });
      }) : null, rowDetailsWidth != "max-viewport-width" ? _react.default.createElement("div", {
        key: "rowDetailsBorder",
        style: (0, _defineProperty2.default)({
          top: initialRowHeight - 1,
          width: availableWidth
        }, rtl ? "right" : "left", (groupDepth || 0) * groupNestingSize),
        className: "".concat(CLASS_NAME, "-details-special-top-border")
      }) : null);
    }
    if (sticky) {
      if (activeBordersDiv) {
        var _style4;
        rowProps.children.push(_react.default.createElement("div", {
          key: "active-row-borders",
          className: "InovuaReactDataGrid__row-active-borders-wrapper",
          style: (_style4 = {
            height: "100%",
            position: "absolute",
            top: 0
          }, (0, _defineProperty2.default)(_style4, rtl ? "right" : "left", (groupNestingSize || 0) * groupDepth), (0, _defineProperty2.default)(_style4, "width", availableWidth - (groupNestingSize || 0) * groupDepth), (0, _defineProperty2.default)(_style4, "pointerEvents", "none"), _style4)
        }, activeBordersDiv));
      }
    }
    var row;
    if (renderRow) {
      row = renderRow(rowProps);
    }
    if (onRenderRow) {
      onRenderRow(rowProps);
    }
    if (row === void 0) {
      row = _react.default.createElement("div", _objectSpread2(_objectSpread2({}, (0, _reactCleanProps.default)(rowProps, DataGridRow.propTypes)), {}, {
        id: null,
        data: null,
        value: null
      }));
    }
    return row;
  });
  var emptyFn = function emptyFn2() {
  };
  DataGridRow.defaultProps = {
    onClick: emptyFn,
    onMouseEnter: emptyFn,
    onMouseLeave: emptyFn,
    onMouseDown: emptyFn,
    columnRenderStartIndex: 0,
    showAllGroupCells: false
  };
  DataGridRow.propTypes = {
    rowActive: _propTypes.default.bool,
    rowSelected: _propTypes.default.bool,
    availableWidth: _propTypes.default.number,
    computedGroupBy: _propTypes.default.array,
    expandGroupTitle: _propTypes.default.bool,
    expandColumn: _propTypes.default.any,
    getCellSelectionKey: _propTypes.default.func,
    depth: _propTypes.default.number,
    columns: _propTypes.default.array,
    columnsMap: _propTypes.default.shape({}),
    active: _propTypes.default.bool,
    computedActiveCell: _propTypes.default.any,
    cellFactory: _propTypes.default.func,
    computedCellMultiSelectionEnabled: _propTypes.default.bool,
    computedCellSelection: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
    columnRenderCount: _propTypes.default.number,
    columnRenderStartIndex: _propTypes.default.number,
    columnUserSelect: _propTypes.default.bool,
    deselectAll: _propTypes.default.func,
    empty: _propTypes.default.bool,
    even: _propTypes.default.bool,
    firstLockedEndIndex: _propTypes.default.number,
    firstLockedStartIndex: _propTypes.default.number,
    firstUnlockedIndex: _propTypes.default.number,
    flex: _propTypes.default.number,
    groupCount: _propTypes.default.number,
    groupNestingSize: _propTypes.default.number,
    treeNestingSize: _propTypes.default.number,
    groupProps: _propTypes.default.object,
    summaryProps: _propTypes.default.object,
    hasLockedEnd: _propTypes.default.bool,
    hasLockedStart: _propTypes.default.bool,
    indexInGroup: _propTypes.default.number,
    last: _propTypes.default.bool,
    lastCellInRange: _propTypes.default.any,
    lastNonEmpty: _propTypes.default.bool,
    lastRowInGroup: _propTypes.default.bool,
    lockedEndColumns: _propTypes.default.array,
    lockedStartColumns: _propTypes.default.array,
    maxRowHeight: _propTypes.default.number,
    minRowHeight: _propTypes.default.number,
    maxVisibleRows: _propTypes.default.number,
    minWidth: _propTypes.default.number,
    multiSelect: _propTypes.default.bool,
    odd: _propTypes.default.bool,
    onArrowDown: _propTypes.default.func,
    onArrowUp: _propTypes.default.func,
    onCellClick: _propTypes.default.func,
    onCellDoubleClick: _propTypes.default.func,
    onRowDoubleClick: _propTypes.default.func,
    onCellEnter: _propTypes.default.func,
    onCellMouseDown: _propTypes.default.func,
    onCellSelectionDraggerMouseDown: _propTypes.default.func,
    onRowContextMenu: _propTypes.default.func,
    passedProps: _propTypes.default.object,
    realIndex: _propTypes.default.number,
    renderIndex: _propTypes.default.number,
    renderRow: _propTypes.default.func,
    onRenderRow: _propTypes.default.func,
    rowHeight: _propTypes.default.number,
    rowExpandHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.func]),
    initialRowHeight: _propTypes.default.number,
    defaultRowHeight: _propTypes.default.number,
    emptyScrollOffset: _propTypes.default.number,
    rowIndex: _propTypes.default.number,
    remoteRowIndex: _propTypes.default.number,
    rowIndexInGroup: _propTypes.default.bool,
    rowStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),
    rowClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
    scrollLeft: _propTypes.default.number,
    selectAll: _propTypes.default.func,
    selected: _propTypes.default.bool,
    expanded: _propTypes.default.bool,
    selection: _propTypes.default.any,
    computedRowExpandEnabled: _propTypes.default.bool,
    computedTreeEnabled: _propTypes.default.bool,
    computedRenderRowDetails: _propTypes.default.func,
    isRowExpandableAt: _propTypes.default.func,
    setRowSelected: _propTypes.default.func,
    setRowExpanded: _propTypes.default.func,
    toggleRowExpand: _propTypes.default.func,
    toggleNodeExpand: _propTypes.default.func,
    expandOnMouseDown: _propTypes.default.bool,
    loadNodeAsync: _propTypes.default.func,
    showAllGroupCells: _propTypes.default.bool,
    computedShowCellBorders: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
    showHorizontalCellBorders: _propTypes.default.bool,
    showVerticalCellBorders: _propTypes.default.bool,
    totalColumnCount: _propTypes.default.number,
    totalComputedWidth: _propTypes.default.number,
    totalDataCount: _propTypes.default.number,
    totalLockedEndWidth: _propTypes.default.number,
    totalLockedStartWidth: _propTypes.default.number,
    totalUnlockedWidth: _propTypes.default.number,
    unlockedColumns: _propTypes.default.array,
    virtualizeColumns: _propTypes.default.bool,
    nativeScroll: _propTypes.default.bool,
    shouldRenderCollapsedRowDetails: _propTypes.default.bool,
    rowDetailsStyle: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    dataSourceArray: _propTypes.default.array,
    getItemId: _propTypes.default.func.isRequired,
    editable: _propTypes.default.bool,
    editing: _propTypes.default.bool,
    editValue: _propTypes.default.any,
    editRowIndex: _propTypes.default.number,
    editColumnIndex: _propTypes.default.number,
    editColumnId: _propTypes.default.any,
    naturalRowHeight: _propTypes.default.bool,
    renderDetailsGrid: _propTypes.default.func,
    scrollToColumn: _propTypes.default.func,
    scrollToIndexIfNeeded: _propTypes.default.func,
    renderNodeTool: _propTypes.default.func,
    computedEnableRowspan: _propTypes.default.bool,
    setRowSpan: _propTypes.default.func,
    treeColumn: _propTypes.default.string,
    scrollbars: _propTypes.default.shape({
      horizontal: _propTypes.default.bool,
      vertical: _propTypes.default.bool
    }),
    rtl: _propTypes.default.bool,
    computedPivot: _propTypes.default.array,
    groupColumnSummaries: _propTypes.default.any,
    groupSummary: _propTypes.default.any,
    groupColumn: _propTypes.default.any,
    lastUnlockedIndex: _propTypes.default.number,
    lastLockedEndIndex: _propTypes.default.number,
    lastLockedStartIndex: _propTypes.default.number,
    computedShowZebraRows: _propTypes.default.bool,
    computedRowspans: _propTypes.default.any,
    editStartEvent: _propTypes.default.string,
    onGroupToggle: _propTypes.default.func,
    onEditStop: _propTypes.default.func,
    onEditStart: _propTypes.default.func,
    onEditCancel: _propTypes.default.func,
    onEditValueChange: _propTypes.default.func,
    onEditComplete: _propTypes.default.func,
    onFilterValueChange: _propTypes.default.func,
    tryNextRowEdit: _propTypes.default.func,
    getScrollLeftMax: _propTypes.default.func,
    activeRowRef: _propTypes.default.any,
    sticky: _propTypes.default.bool,
    edition: _propTypes.default.string,
    computedLicenseValid: _propTypes.default.bool,
    parentGroupDataArray: _propTypes.default.any,
    rowDetailsWidth: _propTypes.default.oneOf(["max-viewport-width", "min-viewport-width", "viewport-width"]),
    memorizedScrollLeft: _propTypes.default.number,
    computedHasColSpan: _propTypes.default.bool,
    onRowReorder: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.bool]),
    onDragRowMouseDown: _propTypes.default.func,
    renderLockedStartCells: _propTypes.default.func,
    renderLockedEndCells: _propTypes.default.func,
    setActiveIndex: _propTypes.default.func,
    renderTreeCollapseTool: _propTypes.default.func,
    renderTreeExpandTool: _propTypes.default.func,
    renderTreeLoadingTool: _propTypes.default.func,
    currentEditCompletePromise: _propTypes.default.any,
    enableColumnAutosize: _propTypes.default.bool,
    columnHoverClassName: _propTypes.default.string,
    computedEnableColumnHover: _propTypes.default.bool,
    onColumnMouseEnter: _propTypes.default.func,
    onColumnMouseLeave: _propTypes.default.func,
    columnIndexHovered: _propTypes.default.number,
    renderRowDetailsExpandIcon: _propTypes.default.func,
    renderRowDetailsCollapsedIcon: _propTypes.default.func,
    renderGroupCollapseTool: _propTypes.default.func,
    renderGroupExpandTool: _propTypes.default.func,
    disabledRow: _propTypes.default.bool,
    rowspanZIndex: _propTypes.default.number,
    onRowFocus: _propTypes.default.func,
    onRowBlur: _propTypes.default.func,
    onRowKeyDown: _propTypes.default.func,
    focusedRow: _propTypes.default.bool,
    rowFocusClassName: _propTypes.default.string,
    onCellBulkUpdateMouseDown: _propTypes.default.func,
    onCellBulkUpdateMouseUp: _propTypes.default.func,
    bulkUpdateMouseDown: _propTypes.default.bool
  };
  var _default2 = _react.default.memo(DataGridRow, function(prevProps, nextProps) {
    var areEqual = (0, _shallowequal.equalReturnKey)(prevProps, nextProps, {
      computedActiveCell: 1,
      computedActiveIndex: 1,
      columnRenderStartIndex: 1,
      activeRowRef: 1,
      active: 1,
      onKeyDown: 1,
      onFocus: 1,
      setRowSpan: 1,
      passedProps: 1,
      computedRowspans: 1,
      lockedStartColumns: 1,
      selection: 1,
      lockedEndColumns: 1,
      unlockedColumns: 1,
      maxVisibleRows: 1,
      onClick: 1,
      style: 1,
      loadNodeAsync: 1,
      scrollToIndexIfNeeded: 1,
      onColumnMouseEnter: 1,
      onColumnMouseLeave: 1,
      getCellSelectionKey: 1
    });
    if (areEqual.result) {
      if (prevProps.computedActiveCell != nextProps.computedActiveCell) {
        var _ref2 = prevProps.computedActiveCell || [], _ref3 = (0, _slicedToArray2.default)(_ref2, 1), oldRowIndex = _ref3[0];
        var _ref4 = nextProps.computedActiveCell || [], _ref5 = (0, _slicedToArray2.default)(_ref4, 1), newRowIndex = _ref5[0];
        if (oldRowIndex === nextProps.rowIndex || newRowIndex === nextProps.rowIndex) {
          return false;
        }
      }
    }
    if (!areEqual.result) {
      return false;
    }
    if (prevProps.active !== nextProps.active) {
      return false;
    }
    if (JSON.stringify(prevProps.style) !== JSON.stringify(nextProps.style)) {
      return false;
    }
    var prevActiveCellRow, prevActiveColumn;
    var activeCellRow, activeColumn;
    if (prevProps.computedActiveCell) {
      var _prevProps$computedAc = (0, _slicedToArray2.default)(prevProps.computedActiveCell, 2);
      prevActiveCellRow = _prevProps$computedAc[0];
      prevActiveColumn = _prevProps$computedAc[1];
    }
    if (nextProps.computedActiveCell) {
      var _nextProps$computedAc = (0, _slicedToArray2.default)(nextProps.computedActiveCell, 2);
      activeCellRow = _nextProps$computedAc[0];
      activeColumn = _nextProps$computedAc[1];
    }
    if (activeCellRow !== prevActiveCellRow) {
      if (nextProps.rowIndex === activeCellRow || nextProps.rowIndex === prevActiveCellRow) {
        return false;
      }
    } else {
      if (nextProps.rowIndex === activeCellRow && activeColumn !== prevActiveColumn) {
        return false;
      }
    }
    return true;
  });
  Row.default = _default2;
  return Row;
}
var getRowSpans = {};
var hasRequiredGetRowSpans;
function requireGetRowSpans() {
  if (hasRequiredGetRowSpans)
    return getRowSpans;
  hasRequiredGetRowSpans = 1;
  Object.defineProperty(getRowSpans, "__esModule", {
    value: true
  });
  getRowSpans.default = void 0;
  var _default2 = function _default3(rowProps) {
    var rowSpans = {};
    var data = rowProps.data, rowIndex = rowProps.realIndex, remoteRowIndex = rowProps.remoteRowIndex, columns = rowProps.columns, empty2 = rowProps.empty, dataSourceArray = rowProps.dataSourceArray;
    columns === null || columns === void 0 ? void 0 : columns.forEach(function(column2) {
      var name = column2.name;
      var rowspan = column2.rowspan;
      var value = data && name ? data[name] : null;
      var computedRowspan = 1;
      if (typeof rowspan === "function") {
        computedRowspan = rowspan({
          dataSourceArray,
          data,
          value,
          remoteRowIndex,
          rowIndex,
          column: column2,
          columns,
          empty: empty2
        });
        rowSpans[column2.id] = computedRowspan;
      }
    });
    return rowSpans;
  };
  getRowSpans.default = _default2;
  return getRowSpans;
}
var hasRequiredRenderRows;
function requireRenderRows() {
  if (hasRequiredRenderRows)
    return renderRows;
  hasRequiredRenderRows = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderRows, "__esModule", {
    value: true
  });
  renderRows.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _react = _interopRequireDefault2(reactExports);
  var _Row = _interopRequireDefault2(requireRow());
  var _getRowSpans = _interopRequireDefault2(requireGetRowSpans());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var emptyObject = Object.freeze ? Object.freeze({}) : {};
  var renderRows$12 = function renderRows2(_ref2, _ref22) {
    var from2 = _ref2.from, to2 = _ref2.to, empty2 = _ref2.empty, renderIndex = _ref2.renderIndex, editRowIndex = _ref2.editRowIndex, editValue = _ref2.editValue, editColumnIndex = _ref2.editColumnIndex, editColumnId = _ref2.editColumnId, setRowSpan = _ref2.setRowSpan, sticky = _ref2.sticky, rowHeight = _ref2.rowHeight, tryNextRowEdit = _ref2.tryNextRowEdit, onEditStop = _ref2.onEditStop, onEditStart = _ref2.onEditStart, onEditValueChange = _ref2.onEditValueChange, scrollLeft = _ref2.scrollLeft, columnRenderCount = _ref2.columnRenderCount, columnRenderStartIndex = _ref2.columnRenderStartIndex, memorizedScrollLeft = _ref2.memorizedScrollLeft;
    var availableWidth = _ref22.availableWidth, data = _ref22.data, onTransitionEnd = _ref22.onTransitionEnd, columns = _ref22.columns, computedPivot = _ref22.computedPivot, groupColumn = _ref22.groupColumn, activeRowRef = _ref22.activeRowRef, columnsMap = _ref22.columnsMap, renderLockedStartCells = _ref22.renderLockedStartCells, renderLockedEndCells = _ref22.renderLockedEndCells, computedOnCellMouseDown = _ref22.computedOnCellMouseDown, computedEnableRowspan = _ref22.computedEnableRowspan, lockedStartColumns = _ref22.lockedStartColumns, lockedEndColumns = _ref22.lockedEndColumns, renderDetailsGrid = _ref22.renderDetailsGrid, editable = _ref22.editable, rowDetailsWidth = _ref22.rowDetailsWidth, scrollbars = _ref22.scrollbars, scrollToColumn = _ref22.scrollToColumn, scrollToIndexIfNeeded = _ref22.scrollToIndexIfNeeded, hasLockedStart = _ref22.hasLockedStart, hasLockedEnd = _ref22.hasLockedEnd, computedShowEmptyRows = _ref22.computedShowEmptyRows, setRowSelected = _ref22.setRowSelected, setRowExpanded = _ref22.setRowExpanded, toggleRowExpand = _ref22.toggleRowExpand, toggleNodeExpand = _ref22.toggleNodeExpand, expandOnMouseDown = _ref22.expandOnMouseDown, loadNodeAsync = _ref22.loadNodeAsync, computedTreeEnabled = _ref22.computedTreeEnabled, computedActiveCell = _ref22.computedActiveCell, rtl = _ref22.rtl, naturalRowHeight = _ref22.naturalRowHeight, lastCellInRange = _ref22.lastCellInRange, getCellSelectionKey = _ref22.getCellSelectionKey, onRowContextMenu = _ref22.onRowContextMenu, columnUserSelect = _ref22.columnUserSelect, selectAll = _ref22.selectAll, deselectAll = _ref22.deselectAll, expandGroupTitle = _ref22.expandGroupTitle, expandColumn = _ref22.expandColumn, computedCellSelection = _ref22.computedCellSelection, lastLockedStartIndex = _ref22.lastLockedStartIndex, lastLockedEndIndex = _ref22.lastLockedEndIndex, lastUnlockedIndex = _ref22.lastUnlockedIndex, computedGroupBy = _ref22.computedGroupBy, computedIndexesInGroups = _ref22.computedIndexesInGroups, edition = _ref22.edition, computedLicenseValid = _ref22.computedLicenseValid, computedGroupCounts = _ref22.computedGroupCounts, rowHeightManager = _ref22.rowHeightManager, maxRowHeight = _ref22.maxRowHeight, minRowHeight = _ref22.minRowHeight, editStartEvent = _ref22.editStartEvent, getItemId = _ref22.getItemId, firstUnlockedIndex = _ref22.firstUnlockedIndex, firstLockedStartIndex = _ref22.firstLockedStartIndex, firstLockedEndIndex = _ref22.firstLockedEndIndex, maxVisibleRows = _ref22.maxVisibleRows, onRowMouseEnter = _ref22.onRowMouseEnter, onRowMouseLeave = _ref22.onRowMouseLeave, computedOnRowClick = _ref22.computedOnRowClick, computedRowDoubleClick = _ref22.computedRowDoubleClick, onCellClick = _ref22.onCellClick, computedCellDoubleClick = _ref22.computedCellDoubleClick, onCellSelectionDraggerMouseDown = _ref22.onCellSelectionDraggerMouseDown, onCellEnter = _ref22.onCellEnter, onColumnMouseEnter = _ref22.onColumnMouseEnter, onColumnMouseLeave = _ref22.onColumnMouseLeave, columnIndexHovered = _ref22.columnIndexHovered, onEditCancel = _ref22.onEditCancel, onEditComplete = _ref22.onEditComplete, computedCellMultiSelectionEnabled = _ref22.computedCellMultiSelectionEnabled, nativeScroll = _ref22.nativeScroll, renderRow = _ref22.renderRow, onRenderRow = _ref22.onRenderRow, rowClassName = _ref22.rowClassName, rowStyle = _ref22.rowStyle, rowFactory = _ref22.rowFactory, _ref2$rowProps = _ref22.rowProps, passedProps = _ref2$rowProps === void 0 ? emptyObject : _ref2$rowProps, rowKey = _ref22.rowKey, cellFactory = _ref22.cellFactory, computedSelected = _ref22.computedSelected, computedUnselected = _ref22.computedUnselected, treeColumn = _ref22.treeColumn, renderNodeTool2 = _ref22.renderNodeTool, renderTreeCollapseTool = _ref22.renderTreeCollapseTool, renderTreeExpandTool = _ref22.renderTreeExpandTool, renderGroupCollapseTool = _ref22.renderGroupCollapseTool, renderGroupExpandTool = _ref22.renderGroupExpandTool, renderTreeLoadingTool = _ref22.renderTreeLoadingTool, rowExpandHeight = _ref22.rowExpandHeight, isRowExpandedById = _ref22.isRowExpandedById, computedRenderRowDetails = _ref22.computedRenderRowDetails, isRowExpandableAt = _ref22.isRowExpandableAt, computedRowExpandEnabled = _ref22.computedRowExpandEnabled, computedRowMultiSelectionEnabled = _ref22.computedRowMultiSelectionEnabled, computedRowSelectionEnabled = _ref22.computedRowSelectionEnabled, computedActiveIndex = _ref22.computedActiveIndex, computedSkip = _ref22.computedSkip, computedShowZebraRows = _ref22.computedShowZebraRows, computedHasColSpan = _ref22.computedHasColSpan, initialRowHeight = _ref22.rowHeight, totalColumnCount = _ref22.totalColumnCount, totalComputedWidth = _ref22.totalComputedWidth, totalLockedStartWidth = _ref22.totalLockedStartWidth, totalLockedEndWidth = _ref22.totalLockedEndWidth, totalUnlockedWidth = _ref22.totalUnlockedWidth, currentDataSourceCount = _ref22.currentDataSourceCount, computedShowCellBorders = _ref22.computedShowCellBorders, emptyScrollOffset = _ref22.emptyScrollOffset, showHorizontalCellBorders = _ref22.showHorizontalCellBorders, showVerticalCellBorders = _ref22.showVerticalCellBorders, getScrollLeftMax = _ref22.getScrollLeftMax, shouldRenderCollapsedRowDetails = _ref22.shouldRenderCollapsedRowDetails, rowDetailsStyle = _ref22.rowDetailsStyle, minRowWidth = _ref22.minRowWidth, maxWidth = _ref22.maxWidth, _ref2$startIndex = _ref22.startIndex, startIndex = _ref2$startIndex === void 0 ? 0 : _ref2$startIndex, groupNestingSize = _ref22.groupNestingSize, treeNestingSize = _ref22.treeNestingSize, onGroupToggle = _ref22.onGroupToggle, computedCollapsedGroups = _ref22.computedCollapsedGroups, computedExpandedGroups = _ref22.computedExpandedGroups, groupPathSeparator = _ref22.groupPathSeparator, renderGroupTitle2 = _ref22.renderGroupTitle, renderGroupTool2 = _ref22.renderGroupTool, renderLockedEndGroupTitle = _ref22.renderLockedEndGroupTitle, renderUnlockedGroupTitle = _ref22.renderUnlockedGroupTitle, virtualizeColumns = _ref22.virtualizeColumns, computedLivePagination = _ref22.computedLivePagination, onRowReorder = _ref22.onRowReorder, onDragRowMouseDown = _ref22.onDragRowMouseDown, theme2 = _ref22.theme, onContextMenu = _ref22.onContextMenu, setActiveIndex = _ref22.setActiveIndex, currentEditCompletePromise = _ref22.currentEditCompletePromise, enableColumnAutosize = _ref22.enableColumnAutosize, columnHoverClassName = _ref22.columnHoverClassName, computedEnableColumnHover = _ref22.computedEnableColumnHover, renderRowDetailsExpandIcon = _ref22.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = _ref22.renderRowDetailsCollapsedIcon, computedOnRowMouseDown = _ref22.computedOnRowMouseDown, disabledRows = _ref22.disabledRows, rowFocusClassName = _ref22.rowFocusClassName, computedCellBulkUpdateMouseDown = _ref22.computedCellBulkUpdateMouseDown, computedCellBulkUpdateMouseUp = _ref22.computedCellBulkUpdateMouseUp, bulkUpdateMouseDown = _ref22.bulkUpdateMouseDown;
    var remoteOffset = computedLivePagination ? 0 : computedSkip || 0;
    var totalCount = data.length;
    var dataArray = data.slice(from2, to2);
    var isGrouped = computedGroupBy && computedGroupBy.length;
    var defaultRowHeight = rowHeightManager.getDefaultRowHeight();
    if (computedShowEmptyRows && !dataArray.length) {
      dataArray = [null];
    }
    var depth = null;
    if (isGrouped) {
      depth = computedGroupBy.length;
    }
    return dataArray.map(function(rowData, i) {
      var index2 = i + startIndex;
      var id2 = rowData ? getItemId(rowData) : i;
      var realIndex = index2 + from2;
      var active = computedActiveIndex === realIndex;
      var focusedRow = computedActiveIndex === realIndex;
      var indexInGroup = isGrouped ? computedIndexesInGroups[realIndex] : null;
      if (empty2) {
        indexInGroup = realIndex + (totalCount % 2 - 1);
      }
      var keyIndex = rowKey === "realIndex" ? realIndex : index2;
      var key = "row-".concat(keyIndex);
      var isSelected2 = !empty2 && computedRowSelectionEnabled && (computedRowMultiSelectionEnabled ? computedSelected === true ? computedUnselected ? computedUnselected[id2] === void 0 : true : computedSelected.hasOwnProperty(id2) : computedSelected == id2);
      var rowExpanded = isRowExpandedById(id2);
      var rowProps = {
        rowspanZIndex: totalCount - realIndex,
        availableWidth,
        computedGroupBy,
        expandGroupTitle,
        expandColumn,
        getCellSelectionKey,
        id: id2,
        depth,
        columns,
        columnsMap,
        computedHasColSpan,
        lockedStartColumns,
        lockedEndColumns,
        hasLockedStart,
        rowDetailsWidth,
        hasLockedEnd,
        columnUserSelect,
        minWidth: minRowWidth,
        width: totalComputedWidth,
        active,
        activeRowRef,
        emptyScrollOffset,
        empty: empty2,
        editable,
        key,
        scrollLeft,
        getScrollLeftMax,
        groupColumn,
        renderRow,
        onRenderRow,
        cellFactory,
        computedActiveCell,
        computedShowZebraRows,
        lastCellInRange,
        groupNestingSize,
        treeNestingSize,
        columnRenderCount,
        rowStyle,
        rowClassName,
        onTransitionEnd,
        onRowContextMenu,
        renderNodeTool: renderNodeTool2,
        indexInGroup: isGrouped ? indexInGroup : null,
        groupCount: isGrouped && computedGroupCounts ? computedGroupCounts[realIndex] : 0,
        editStartEvent,
        virtualizeColumns,
        firstUnlockedIndex,
        firstLockedStartIndex,
        columnRenderStartIndex,
        firstLockedEndIndex,
        tryNextRowEdit,
        totalComputedWidth,
        totalLockedStartWidth,
        totalLockedEndWidth,
        totalUnlockedWidth,
        sticky,
        computedCellSelection,
        computedCellMultiSelectionEnabled,
        shouldRenderCollapsedRowDetails,
        rowDetailsStyle,
        renderDetailsGrid,
        renderIndex,
        realIndex,
        rowIndex: realIndex,
        remoteRowIndex: remoteOffset + realIndex,
        maxVisibleRows,
        last: !computedShowEmptyRows ? realIndex == totalCount - 1 : !!(maxVisibleRows && realIndex >= maxVisibleRows - 1 && realIndex == totalCount - 1),
        lastNonEmpty: realIndex === totalCount - 1,
        totalDataCount: totalCount,
        rowHeight,
        defaultRowHeight,
        rowExpandHeight,
        initialRowHeight,
        setRowSpan,
        maxRowHeight,
        minRowHeight,
        getItemId,
        computedShowCellBorders,
        showHorizontalCellBorders,
        showVerticalCellBorders,
        passedProps,
        setRowSelected,
        setRowExpanded,
        renderLockedStartCells,
        renderLockedEndCells,
        computedRowExpandEnabled,
        computedRenderRowDetails,
        isRowExpandableAt,
        treeColumn,
        rtl,
        toggleRowExpand,
        toggleNodeExpand,
        expandOnMouseDown,
        loadNodeAsync,
        edition,
        computedLicenseValid,
        computedEnableRowspan,
        computedTreeEnabled,
        naturalRowHeight,
        selectAll,
        deselectAll,
        totalColumnCount,
        computedPivot,
        multiSelect: computedRowMultiSelectionEnabled,
        selection: computedSelected,
        selected: isSelected2,
        expanded: rowExpanded,
        lastLockedStartIndex,
        lastLockedEndIndex,
        lastUnlockedIndex,
        data: rowData,
        dataSourceArray: data,
        onMouseEnter: !empty2 ? onRowMouseEnter : null,
        onMouseLeave: !empty2 ? onRowMouseLeave : null,
        onClick: !empty2 ? computedOnRowClick : null,
        onMouseDown: !empty2 ? computedOnRowMouseDown : null,
        onRowDoubleClick: !empty2 ? computedRowDoubleClick : null,
        scrollToColumn,
        scrollToIndexIfNeeded,
        onCellClick,
        onCellDoubleClick: computedCellDoubleClick,
        onCellSelectionDraggerMouseDown,
        onCellMouseDown: computedOnCellMouseDown,
        onColumnMouseEnter,
        onColumnMouseLeave,
        columnIndexHovered,
        onCellEnter,
        onEditStop,
        onEditStart,
        onEditCancel,
        onEditValueChange,
        onEditComplete,
        scrollbars,
        even: false,
        odd: false,
        nativeScroll,
        onRowReorder,
        onDragRowMouseDown,
        theme: theme2,
        onContextMenu,
        setActiveIndex,
        renderTreeCollapseTool,
        renderTreeExpandTool,
        renderGroupCollapseTool,
        renderGroupExpandTool,
        renderTreeLoadingTool,
        currentEditCompletePromise,
        enableColumnAutosize,
        columnHoverClassName,
        computedEnableColumnHover,
        renderRowDetailsExpandIcon,
        renderRowDetailsCollapsedIcon,
        memorizedScrollLeft,
        disabledRow: disabledRows ? disabledRows[realIndex] : null,
        focusedRow,
        rowFocusClassName,
        onCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,
        onMouseUp: computedCellBulkUpdateMouseUp,
        bulkUpdateMouseDown
      };
      if (rowProps.rowIndex === editRowIndex) {
        rowProps.editing = true;
        rowProps.editValue = editValue;
        rowProps.editColumnIndex = editColumnIndex;
        rowProps.editColumnId = editColumnId;
      }
      if (rowData && rowData.__group) {
        rowProps.indexInGroup = null;
        var rowGroupKey = "".concat(rowData.keyPath.join(groupPathSeparator));
        var collapsed;
        if (computedCollapsedGroups === true) {
          collapsed = true;
          if (computedExpandedGroups[rowGroupKey]) {
            collapsed = false;
          }
        } else if (computedExpandedGroups === true) {
          collapsed = false;
          if (computedCollapsedGroups[rowGroupKey]) {
            collapsed = true;
          }
        } else {
          collapsed = computedCollapsedGroups[rowGroupKey];
        }
        rowProps.groupProps = {
          renderGroupTitle: renderGroupTitle2,
          renderGroupTool: renderGroupTool2,
          renderLockedEndGroupTitle,
          renderUnlockedGroupTitle,
          onGroupToggle,
          collapsed,
          groupNestingSize,
          depth: rowData.depth - 1
        };
        rowProps.onGroupToggle = onGroupToggle;
        rowProps.groupSummary = rowData.groupSummary;
        rowProps.groupColumnSummaries = rowData.groupColumnSummaries;
      }
      if (isGrouped) {
        rowProps.parentGroupDataArray = [];
      }
      var even = !!((isGrouped && !computedPivot ? indexInGroup : realIndex) % 2);
      if (empty2 && isGrouped) {
        var tmpIndex = (computedIndexesInGroups[currentDataSourceCount - 1] || 0) + (realIndex - currentDataSourceCount - 1);
        even = !!(tmpIndex % 2);
      }
      if (rowData && rowData.__summary) {
        rowProps.summaryProps = {
          position: rowData.__summary,
          groupProps: rowData.__parentGroup,
          value: rowData.__parentGroup.groupColumnSummaries,
          depth: rowData.__parentGroup.depth - 1
        };
        even = true;
      }
      if (maxWidth != null) {
        rowProps.maxWidth = maxWidth;
      }
      rowProps.even = even;
      rowProps.odd = !even;
      var row;
      if (rowFactory) {
        row = rowFactory(rowProps);
      }
      if (computedEnableRowspan) {
        rowProps.computedRowspans = (0, _getRowSpans.default)(rowProps);
        setRowSpan(Math.max.apply(Math, (0, _toConsumableArray2.default)(Object.keys(rowProps.computedRowspans).map(function(key2) {
          return rowProps.computedRowspans[key2];
        }))));
      }
      if (row === void 0) {
        row = _react.default.createElement(_Row.default, _objectSpread2({}, rowProps));
      }
      return row;
    });
  };
  var _default2 = renderRows$12;
  renderRows.default = _default2;
  return renderRows;
}
var searchClosestSmallerValue = {};
var hasRequiredSearchClosestSmallerValue;
function requireSearchClosestSmallerValue() {
  if (hasRequiredSearchClosestSmallerValue)
    return searchClosestSmallerValue;
  hasRequiredSearchClosestSmallerValue = 1;
  Object.defineProperty(searchClosestSmallerValue, "__esModule", {
    value: true
  });
  searchClosestSmallerValue.default = void 0;
  var _default2 = function _default3(array, value) {
    var low = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var high = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : array.length - 1;
    var mid;
    var midValue;
    var midNextIndex;
    var midNextValue;
    while (low <= high) {
      mid = low + (high - low >> 1);
      midValue = array[mid];
      midNextIndex = mid + 1;
      midNextValue = array[midNextIndex];
      if (midValue <= value) {
        if (midNextValue === void 0 || midNextValue > value) {
          return mid;
        }
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return -1;
  };
  searchClosestSmallerValue.default = _default2;
  return searchClosestSmallerValue;
}
var renderEmptyContent = {};
var hasRequiredRenderEmptyContent;
function requireRenderEmptyContent() {
  if (hasRequiredRenderEmptyContent)
    return renderEmptyContent;
  hasRequiredRenderEmptyContent = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderEmptyContent, "__esModule", {
    value: true
  });
  renderEmptyContent.default = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var STYLE = {
    display: "inline-block"
  };
  var _default2 = function _default3(content) {
    var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "empty";
    var style = arguments.length > 2 ? arguments[2] : void 0;
    if (typeof content === "function") {
      content = content();
    }
    if (content == null || content == false || content == "") {
      return null;
    }
    if (typeof content === "string") {
      content = _react.default.createElement("div", {
        className: "InovuaReactDataGrid__".concat(name, "-text"),
        style: STYLE
      }, content);
    }
    return _react.default.createElement("div", {
      key: "emptyContentWrapper",
      className: "InovuaReactDataGrid__".concat(name, "-wrapper"),
      style
    }, content);
  };
  renderEmptyContent.default = _default2;
  return renderEmptyContent;
}
var detectUa = {};
var hasRequiredDetectUa;
function requireDetectUa() {
  if (hasRequiredDetectUa)
    return detectUa;
  hasRequiredDetectUa = 1;
  Object.defineProperty(detectUa, "__esModule", {
    value: true
  });
  detectUa.IS_MS_BROWSER = detectUa.IS_IE = detectUa.IS_EDGE = void 0;
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var ua2 = globalObject.navigator ? globalObject.navigator.userAgent || "" : "";
  var IS_EDGE = ua2.indexOf("Edge/") !== -1;
  detectUa.IS_EDGE = IS_EDGE;
  var IS_MS_BROWSER = IS_EDGE || ua2.indexOf("Trident") !== -1;
  detectUa.IS_MS_BROWSER = IS_MS_BROWSER;
  var IS_IE = IS_MS_BROWSER && !IS_EDGE;
  detectUa.IS_IE = IS_IE;
  return detectUa;
}
var hasRequiredList;
function requireList() {
  if (hasRequiredList)
    return List;
  hasRequiredList = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(List, "__esModule", {
    value: true
  });
  List.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _assignDefined = _interopRequireDefault2(requireAssignDefined());
  var _src = _interopRequireWildcard(requireSrc$2());
  var _shallowequal = _interopRequireDefault2(requireShallowequal$1());
  var _renderRows = _interopRequireDefault2(requireRenderRows());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$5());
  var _searchClosestSmallerValue = _interopRequireDefault2(requireSearchClosestSmallerValue());
  var _renderEmptyContent = _interopRequireDefault2(requireRenderEmptyContent());
  var _detectUa = requireDetectUa();
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
          o = it;
        var i = 0;
        var F2 = function F3() {
        };
        return { s: F2, n: function n2() {
          if (i >= o.length)
            return { done: true };
          return { done: false, value: o[i++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor)
      n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var EMPTY_OBJECT = {};
  var returnTrue = function returnTrue2() {
    return true;
  };
  var CHUNKS_SIZE = 1;
  var raf2 = globalObject.requestAnimationFrame;
  var DEFAULT_SCROLL_POS = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var initialSkip = 0;
  var timeout = false;
  var VirtualListClassName = "InovuaReactDataGrid__virtual-list";
  var InovuaDataGridList = function(_Component) {
    (0, _inherits2.default)(InovuaDataGridList2, _Component);
    var _super = _createSuper(InovuaDataGridList2);
    function InovuaDataGridList2(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaDataGridList2);
      _this = _super.call(this, _props);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollingDirection", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastScrollTimestamp", 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollLeft", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "virtualListRef", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function(index2) {
        return _this.getVirtualList().isRowVisible(index2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setValue", function() {
        var _this$props = _this.props, hasValueSetter = _this$props.hasValueSetter, data = _this$props.data, columns = _this$props.columns, idProperty = _this$props.idProperty, setItemsAt = _this$props.setItemsAt;
        if (!hasValueSetter) {
          return;
        }
        var newDataMap = data.reduce(function(acc, current) {
          var _iterator = _createForOfIteratorHelper(columns), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var column2 = _step.value;
              if (column2.setValue) {
                var columnName = column2.name || column2.id;
                var value = current[columnName];
                if (value) {
                  var result = column2.setValue(_objectSpread2({
                    value,
                    data: current
                  }, column2));
                  if (value !== result) {
                    var id2 = current[idProperty];
                    acc[id2] = _objectSpread2(_objectSpread2({}, acc[id2]), {}, (0, _defineProperty2.default)({}, columnName, result));
                  }
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return acc;
        }, {});
        var newData = Object.keys(newDataMap).map(function(key) {
          var id2 = isNaN(Number(key)) ? key : Number(key);
          return _objectSpread2({
            id: id2
          }, newDataMap[key]);
        });
        setItemsAt(newData, {
          replace: false
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeRows", function(props2) {
        var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : EMPTY_OBJECT, from2 = _ref2.from, to2 = _ref2.to, rowHeight = _ref2.rowHeight, renderIndex = _ref2.renderIndex, empty2 = _ref2.empty, setRowSpan = _ref2.setRowSpan, sticky = _ref2.sticky;
        var columnRenderCount = props2.columnRenderCount;
        return (0, _renderRows.default)({
          empty: empty2,
          renderIndex,
          setRowSpan,
          sticky,
          from: from2 || _this.startIndex || 0,
          to: to2 || _this.endIndex || CHUNKS_SIZE,
          rowHeight,
          columnRenderStartIndex: _this.columnRenderStartIndex,
          columnRenderCount,
          onEditStop: _this.onEditStop,
          onEditStart: _this.onEditStart,
          onEditValueChange: _this.onEditValueChange,
          getScrollLeftMax: _this.props.getScrollLeftMax,
          tryNextRowEdit: _this.tryRowEdit,
          editValue: _this.editValue,
          editRowIndex: _this.editRowIndex,
          editColumnIndex: _this.editColumnIndex,
          editColumnId: _this.editColumnId,
          memorizedScrollLeft: _this.scrollLeft.current
        }, props2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function() {
        var vl2 = _this.virtualListRef.current;
        return vl2;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tryRowEdit", function(nextEditRowIndex, dir, columnIndex, isEnterNavigation) {
        var columnEditIndex = columnIndex;
        var row = _this.getRowAt(nextEditRowIndex);
        if (!row) {
          return;
        }
        var setActiveIndex = function setActiveIndex2() {
          return _this.props.setActiveIndex(nextEditRowIndex);
        };
        if (_this.props.livePagination) {
          var skip2 = _this.props.computedSkip;
          if (skip2 !== initialSkip) {
            initialSkip = skip2;
            timeout = true;
          }
          timeout ? setTimeout(function() {
            return setActiveIndex();
          }, 50) : setActiveIndex();
        } else {
          setActiveIndex();
        }
        row.tryRowCellEdit(columnEditIndex, dir, isEnterNavigation);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isEditing", function() {
        return !!_this.editColumnId;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditStop", function(args) {
        if (_this.editColumnIndex !== args.columnIndex || _this.editRowIndex !== args.rowIndex) {
          return;
        }
        if (_this.props.onEditStop) {
          _this.props.onEditStop(args);
        }
        _this.updateEditing({
          value: void 0,
          rowIndex: void 0,
          columnIndex: void 0
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditValueChange", function(args) {
        if (_this.props.onEditValueChange) {
          _this.props.onEditValueChange(args);
        }
        _this.updateEditing(args);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onEditStart", function(args) {
        if (_this.props.onEditStart) {
          _this.props.onEditStart(args);
        }
        _this.updateEditing(args);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateEditing", function(_ref2) {
        var value = _ref2.value, rowIndex = _ref2.rowIndex, columnId = _ref2.columnId, columnIndex = _ref2.columnIndex;
        var oldEditRowIndex = _this.editRowIndex;
        var oldEditValue = _this.editValue;
        var oldEditColumnIndex = _this.editColumnIndex;
        _this.editValue = value;
        _this.editRowIndex = rowIndex;
        _this.editColumnIndex = columnIndex;
        _this.editColumnId = columnId;
        if (_this.editTimeoutId) {
          clearTimeout(_this.editTimeoutId);
        }
        _this.lazyEditColumnId = _this.editColumnId || _this.lazyEditColumnId;
        _this.editTimeoutId = setTimeout(function() {
          delete _this.editTimeoutId;
          _this.lazyEditColumnId = _this.editColumnId;
        }, 50);
        if (oldEditRowIndex === rowIndex && oldEditColumnIndex === columnIndex && oldEditValue !== value) {
          _this.getVirtualList().getRows().forEach(function(r2) {
            var row = r2.getInstance();
            if (row && row.props.rowIndex === rowIndex) {
              r2.update();
            }
          });
          return;
        }
        _this.forceUpdate();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollHorizontal", function(scrollLeft, _, __, scrollLeftMax) {
        _this.scrollLeft.current = scrollLeft;
        _this.onContainerScrollHorizontal(scrollLeft, void 0, scrollLeftMax);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRowContainer", function(props2) {
        return _react.default.createElement("div", _objectSpread2({}, props2), props2.children, _this.props.renderActiveRowIndicator && _this.props.renderActiveRowIndicator(_this.setupActiveRowIndicatorHandle));
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupActiveRowIndicatorHandle", function(activeRowHandle) {
        _this.activeRowIndicatorHandle = activeRowHandle;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onStickyRowUpdate", function() {
        _this.updateOnScrollLeft(void 0, true);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderEmptyContent", function() {
        var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
        var _this$props2 = _this.props, i18n = _this$props2.i18n, data = _this$props2.data, loading = _this$props2.computedLoading, nativeScroll = _this$props2.nativeScroll;
        var emptyText = _this.props.emptyText;
        var length2 = data.length;
        emptyText = i18n(emptyText, emptyText);
        if (!length2 && !loading) {
          return (0, _renderEmptyContent.default)(emptyText, "empty", {
            right: nativeScroll ? 0 : -SCROLLBAR_WIDTH,
            bottom: nativeScroll ? 0 : -SCROLLBAR_WIDTH
          });
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderView", function(viewProps) {
        var _this$props3 = _this.props, data = _this$props3.data, loading = _this$props3.loading;
        var scrollbarOffset = _this.getEmptyScrollOffset();
        var length2 = data.length;
        if (!length2 && !loading) {
          viewProps.children = _react.default.Children.toArray(viewProps.children);
          viewProps.children.push(_this.renderEmptyContent());
          if (_detectUa.IS_EDGE) {
            viewProps.style.minHeight = "99%";
          }
        }
        var hasScrollbars = _this.scrollbars && _this.scrollbars.vertical && _this.scrollbars.horizontal;
        if (!!_this.props.renderRowDetails || !!_this.props.renderDetailsGrid) {
          if (_this.props.rtl && !(0, _src.getScrollbarWidth)() && !_this.props.nativeScroll) {
            viewProps.style.transform = "translateX(".concat(-(hasScrollbars ? 2 : 1) * scrollbarOffset, "px)");
          }
        } else {
          if (_this.props.rtl && !(0, _src.getScrollbarWidth)() && !_this.props.nativeScroll) {
            viewProps.style.transform = "translateX(".concat(-scrollbarOffset, "px)");
          }
        }
        var result;
        if (_this.props.renderView) {
          result = _this.props.renderView(viewProps);
        }
        if (result === void 0) {
          result = _react.default.createElement("div", _objectSpread2({}, viewProps));
        }
        return result;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSizer", function(props2, scrollHeight) {
        if (!_this.props.nativeScroll) {
          return;
        }
        if (!_this.props.virtualized) {
          return null;
        }
        var minWidth = Math.max(_this.props.availableWidth || 0, _this.props.minRowWidth || 0) || 0;
        var SCROLLBAR_WIDTH = (0, _src.getScrollbarWidth)();
        var sizerStyle = _objectSpread2(_objectSpread2({}, props2.style), {}, {
          minWidth,
          minHeight: props2.style ? (props2.style.minHeight || 0) - (!SCROLLBAR_WIDTH ? _this.getEmptyScrollOffset() : 0) : 0
        });
        if (_this.props.naturalRowHeight) {
          sizerStyle.height = scrollHeight;
        }
        return _react.default.createElement("div", _objectSpread2(_objectSpread2({
          key: "grid-sizer",
          "data-name": "sizer"
        }, props2), {}, {
          style: sizerStyle
        }));
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollerSpacer", function(spacerProps) {
        if (!_this.props.totalFlexColumnCount) {
          spacerProps.style.width = _this.props.minRowWidth || 0;
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScroller", function(scrollerProps) {
        var _style;
        var _this$props4 = _this.props, data = _this$props4.data;
        _this$props4.loading;
        var virtualized = _this$props4.virtualized, maxVisibleRows = _this$props4.maxVisibleRows, nativeScroll = _this$props4.nativeScroll, availableWidth = _this$props4.availableWidth, minRowWidth = _this$props4.minRowWidth;
        var length2 = data.length;
        scrollerProps.children.push(_react.default.createElement("div", {
          key: "empty-spacer",
          "data-name": "empty-spacer",
          style: (_style = {
            position: _detectUa.IS_IE && nativeScroll ? "static" : "absolute",
            contain: "strict"
          }, (0, _defineProperty2.default)(_style, _this.props.rtl ? "right" : "left", 0), (0, _defineProperty2.default)(_style, "height", 1), (0, _defineProperty2.default)(_style, "top", 0), (0, _defineProperty2.default)(_style, "pointerEvents", "none"), (0, _defineProperty2.default)(_style, "minWidth", Math.max(availableWidth, minRowWidth) || 0), _style)
        }, _detectUa.IS_IE && nativeScroll ? _this.renderEmptyContent() : null));
        if (!virtualized && length2 < maxVisibleRows) {
          scrollerProps.style = scrollerProps.style || {};
          scrollerProps.style.overflow = "hidden";
        }
        var hasHorizontalScrollbar = _this.scrollbars && _this.scrollbars.horizontal;
        if (!_this.props.renderRowDetails || !_this.props.renderDetailsGrid) {
          if (!(0, _src.getScrollbarWidth)() && !nativeScroll && hasHorizontalScrollbar) {
            scrollerProps.style.right = 0;
          }
        }
        var result;
        if (_this.props.renderScroller) {
          result = _this.props.renderScroller(scrollerProps);
        }
        if (result === void 0) {
          result = _react.default.createElement("div", _objectSpread2({}, scrollerProps));
        }
        return result;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRowAt", function(index2) {
        return _this.getRows().filter(function(r2) {
          var _r$props;
          return (r2 === null || r2 === void 0 ? void 0 : (_r$props = r2.props) === null || _r$props === void 0 ? void 0 : _r$props.rowIndex) === index2;
        })[0];
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startEdit", function(_ref3) {
        var rowIndex = _ref3.rowIndex, columnIndex = _ref3.columnIndex, value = _ref3.value;
        var row = _this.getRowAt(rowIndex);
        if (row) {
          var cell = row.getCellAt(columnIndex);
          if (cell) {
            return cell.startEdit(value);
          }
        }
        return Promise.reject(null);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "completeEdit", function(_ref4) {
        var rowIndex = _ref4.rowIndex, columnIndex = _ref4.columnIndex, value = _ref4.value;
        var row = _this.getRowAt(rowIndex);
        if (row) {
          var cell = row.getCellAt(columnIndex);
          if (cell) {
            cell.completeEdit(value);
          }
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cancelEdit", function(_ref5) {
        var rowIndex = _ref5.rowIndex, columnIndex = _ref5.columnIndex;
        var row = _this.getRowAt(rowIndex);
        if (row) {
          var cell = row.getCellAt(columnIndex);
          if (cell) {
            cell.cancelEdit();
          }
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScroll", function(scrollPos) {
        var prevScrollPos = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_SCROLL_POS;
        if (_this.props.onContainerScroll) {
          _this.props.onContainerScroll(scrollPos, prevScrollPos);
        }
        var oldScrollingDirection = _this.scrollingDirection;
        if (scrollPos.scrollTop === prevScrollPos.scrollTop && scrollPos.scrollLeft === prevScrollPos.scrollLeft) {
          return;
        }
        _this.scrollingDirection = scrollPos.scrollLeft === prevScrollPos.scrollLeft ? "vertical" : "horizontal";
        if (_this.scrollingDirection === oldScrollingDirection) {
          return;
        }
        if (_this.props.virtualized) {
          var _this$getDOMNode, _this$getDOMNode$clas;
          (_this$getDOMNode = _this.getDOMNode()) === null || _this$getDOMNode === void 0 ? void 0 : (_this$getDOMNode$clas = _this$getDOMNode.classList) === null || _this$getDOMNode$clas === void 0 ? void 0 : _this$getDOMNode$clas.add("".concat(VirtualListClassName, "--scrolling"));
          requestAnimationFrame(function() {
            _this.getRows().forEach(function(r2) {
              return r2 ? r2.setScrolling(_this.scrollingDirection) : null;
            });
          });
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollStop", function() {
        _this.scrollingDirection = "none";
        if (_this.props.virtualized) {
          var _this$getDOMNode2, _this$getDOMNode2$cla;
          (_this$getDOMNode2 = _this.getDOMNode()) === null || _this$getDOMNode2 === void 0 ? void 0 : (_this$getDOMNode2$cla = _this$getDOMNode2.classList) === null || _this$getDOMNode2$cla === void 0 ? void 0 : _this$getDOMNode2$cla.remove("".concat(VirtualListClassName, "--scrolling"));
          _this.getRows().forEach(function(r2) {
            if (!r2) {
              return;
            }
            r2.setScrolling(false);
          });
        }
        if (_this.props.onScrollStop) {
          _this.props.onScrollStop();
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setColumnRenderStartIndex", function(columnRenderStartIndex, force) {
        if (_this.__willUnmount) {
          return;
        }
        if (_this.resizing && !force) {
          return;
        }
        if (columnRenderStartIndex === _this.columnRenderStartIndex && !force) {
          return;
        }
        if (!_this.getVirtualList()) {
          return;
        }
        if (_this.props.onColumnRenderStartIndexChange) {
          _this.props.onColumnRenderStartIndexChange(columnRenderStartIndex);
        }
        _this.columnRenderStartIndex = columnRenderStartIndex;
        var rows = _this.getVirtualList().getRows();
        rows.forEach(function(row) {
          var rowInstance = row.getInstance();
          if (rowInstance) {
            requestAnimationFrame(function() {
              rowInstance.setColumnRenderStartIndex(columnRenderStartIndex);
            });
          }
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRows", function() {
        var virtualList = _this.getVirtualList();
        if (!virtualList) {
          return [];
        }
        return virtualList.getRows().map(function(row) {
          return row.getInstance();
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollbarsChange", function(scrollbars) {
        _this.scrollbars = scrollbars;
        if (!scrollbars.horizontal) {
          raf2(function() {
            _this.onContainerScrollHorizontal(0);
          });
        }
        if (_this.props.onScrollbarsChange) {
          raf2(function() {
            _this.props.onScrollbarsChange(scrollbars);
          });
        }
        if (_this.props.scrollProps && _this.props.scrollProps.onScrollbarsChange) {
          _this.props.scrollProps.onScrollbarsChange(scrollbars);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function() {
        if (_this.props.onResize) {
          var _this$props5;
          (_this$props5 = _this.props).onResize.apply(_this$props5, arguments);
        }
        _this.visibleCount = _this.getVisibleCount();
        _this.resizing = true;
        raf2(function() {
          _this.resizing = false;
          _this.updateOnScrollLeft(void 0, true);
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollHorizontal", function(scrollLeft, force, scrollLeftMax) {
        if (scrollLeft < 0) {
          scrollLeft = 0;
        }
        scrollLeft = Math.round(scrollLeft);
        _this._scrollLeft = scrollLeft;
        if (_this.__willUnmount) {
          return;
        }
        if (_this.props.onContainerScrollHorizontal) {
          _this.props.onContainerScrollHorizontal(scrollLeft, scrollLeftMax);
        }
        if (_this.props.scrollProps && _this.props.scrollProps.onContainerScrollHorizontal) {
          _this.props.scrollProps.onContainerScrollHorizontal(scrollLeft);
        }
        scrollLeft = _this._scrollLeft;
        _this.updateOnScrollLeft(scrollLeft);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateOnScrollLeft", function() {
        var scrollLeft = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _this._scrollLeft;
        var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var props2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _this.props;
        if (_this.__willUnmount) {
          return;
        }
        var columnRenderStartIndex;
        if (props2.virtualizeColumns) {
          var lockedStartColumns = props2.lockedStartColumns, columnWidthPrefixSums = props2.columnWidthPrefixSums;
          if (!columnRenderStartIndex) {
            var lockedOffset = lockedStartColumns.length && columnWidthPrefixSums[lockedStartColumns.length] ? columnWidthPrefixSums[lockedStartColumns.length] : 0;
            columnRenderStartIndex = (0, _searchClosestSmallerValue.default)(props2.columnWidthPrefixSums, scrollLeft + lockedOffset);
          }
          _this.setColumnRenderStartIndex(columnRenderStartIndex, force);
        }
        if (_this.activeRowIndicatorHandle) {
          _this.activeRowIndicatorHandle.setScrollLeft(scrollLeft);
        }
        if (_this.props.updateLockedWrapperPositions) {
          _this.props.updateLockedWrapperPositions.call((0, _assertThisInitialized2.default)(_this), _this.props, scrollLeft);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
        return _this.node || (_this.node = _this.getVirtualList().getDOMNode());
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderRow", function(args) {
        var rowHeight = args.rowHeight, index2 = args.index, renderIndex = args.renderIndex, empty2 = args.empty, sticky = args.sticky;
        var setRowSpan = function setRowSpan2(rowSpan) {
          args.rowSpan = rowSpan;
        };
        var result = _this.computeRows(_this.props, {
          empty: empty2,
          from: index2,
          sticky,
          to: index2 + 1,
          renderIndex,
          rowHeight,
          setRowSpan
        })[0];
        return result;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVisibleCount", function() {
        return _this.getVirtualList() ? _this.getVirtualList().getVisibleCount() : -1;
      });
      _this.virtualListRef = (0, _react.createRef)();
      _this._scrollLeft = 0;
      _this._scrollTop = 0;
      _this.startIndex = 0;
      _this.endIndex = CHUNKS_SIZE;
      _this.state = {
        columnRenderCount: 0
      };
      _this.rows = [];
      _this.scrollbars = {};
      _this.scrollLeft = (0, _react.createRef)();
      return _this;
    }
    (0, _createClass2.default)(InovuaDataGridList2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        if (nextProps.shouldComponentUpdate) {
          return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
        }
        var equalProps = (0, _shallowequal.default)(this.props, nextProps);
        if (!equalProps) {
          return true;
        }
        return !(0, _shallowequal.default)(nextState, this.state);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        if (this.props.hasValueSetter) {
          setTimeout(function() {
            _this2.setValue();
          }, 100);
        }
        this.__willUnmount = false;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.__willUnmount = true;
      }
    }, {
      key: "isLazyEditing",
      value: function isLazyEditing() {
        return !!this.lazyEditColumnId;
      }
    }, {
      key: "render",
      value: function render() {
        var thisProps = this.props;
        var maybeProps = (0, _assignDefined.default)({}, {
          minRowHeight: thisProps.minRowHeight,
          rowHeight: thisProps.rowHeight
        });
        var pureRows = !!this.fromState;
        var shouldUpdate = returnTrue;
        var scrollProps = thisProps.scrollProps;
        if (scrollProps && scrollProps.onContainerScrollHorizontal) {
          scrollProps = _objectSpread2({}, scrollProps);
          scrollProps.onContainerScrollHorizontal = this.onScrollHorizontal;
        }
        var minRowWidth = Math.max(this.props.availableWidth, this.props.minRowWidth) || 0;
        var naturalRowHeight = thisProps.naturalRowHeight;
        var renderRow = this.renderRow;
        if (naturalRowHeight) {
          if (this.__data !== thisProps.data || !this.__minRowWidth) {
            renderRow = renderRow.bind(this);
          }
          this.__minRowWidth = minRowWidth;
          this.__data = thisProps.data;
        }
        return _react.default.createElement(_src.default, _objectSpread2(_objectSpread2({
          rowHeight: null,
          extraRows: naturalRowHeight ? 1 : 0,
          style: thisProps.style,
          theme: this.props.theme,
          checkResizeDelay: thisProps.checkResizeDelay,
          rowContain: thisProps.rowContain,
          contain: thisProps.contain,
          rtl: thisProps.rtl,
          stickyOffset: thisProps.rtlOffset,
          stickyRows: thisProps.computedStickyRows,
          onStickyRowUpdate: this.onStickyRowUpdate,
          enableRowSpan: thisProps.computedEnableRowspan,
          recycleCoveredRows: false,
          className: VirtualListClassName,
          renderRowContainer: this.renderRowContainer
        }, maybeProps), {}, {
          overscrollBehavior: "auto",
          rowHeightManager: thisProps.rowHeightManager,
          before: thisProps.before,
          after: thisProps.after,
          showEmptyRows: thisProps.computedShowEmptyRows,
          scrollProps,
          emptyScrollOffset: this.getEmptyScrollOffset(),
          nativeScroll: thisProps.nativeScroll,
          onResize: this.onResize,
          virtualized: thisProps.virtualized,
          minRowWidth,
          naturalRowHeight,
          renderScroller: this.renderScroller,
          renderScrollerSpacer: this.renderScrollerSpacer,
          renderSizer: this.renderSizer,
          renderView: this.renderView,
          useTransformRowPosition: this.props.useTransformRowPosition,
          useTransformPosition: this.props.useTransformPosition,
          shouldComponentUpdate: shouldUpdate,
          ref: this.virtualListRef,
          count: thisProps.data.length || 0,
          pureRows,
          renderRow,
          onContainerScrollHorizontal: this.onScrollHorizontal,
          onContainerScroll: this.onContainerScroll,
          onScrollbarsChange: this.onScrollbarsChange,
          onContainerScrollVertical: this.props.onContainerScrollVertical,
          onScrollStop: this.onScrollStop,
          shouldFocusNextRow: this.shouldFocusNextRow
        }));
      }
    }, {
      key: "shouldFocusNextRow",
      value: function shouldFocusNextRow(_ref6) {
        _ref6.index;
        _ref6.nextIndex;
        _ref6.dir;
        var shouldFocus = !this.isLazyEditing();
        return shouldFocus;
      }
    }, {
      key: "getEmptyScrollOffset",
      value: function getEmptyScrollOffset() {
        return this.props.emptyScrollOffset || (0, _src.getScrollbarWidth)() || 17;
      }
    }, {
      key: "tryStartEdit",
      value: function tryStartEdit(_ref7) {
        var rowIndex = _ref7.rowIndex, columnIndex = _ref7.columnIndex, dir = _ref7.dir;
        var row = this.getRowAt(rowIndex);
        if (row) {
          return row.tryRowCellEdit(columnIndex, dir);
        }
        return Promise.reject(null);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this3 = this;
        if (prevProps.columnRenderCount != this.props.columnRenderCount) {
          raf2(function() {
            _this3.updateOnScrollLeft(void 0, true, _this3.props);
          });
        }
        var _this$props6 = this.props, lockedStartColumns = _this$props6.lockedStartColumns, lockedEndColumns = _this$props6.lockedEndColumns;
        var hasLocked = lockedStartColumns && lockedStartColumns.length || lockedEndColumns && lockedEndColumns.length;
        if (hasLocked) {
          this.onContainerScrollHorizontal(this._scrollLeft);
        }
      }
    }, {
      key: "getScrollLeftMax",
      value: function getScrollLeftMax() {
        return this.getVirtualList() ? this.getVirtualList().scrollLeftMax : 0;
      }
    }]);
    return InovuaDataGridList2;
  }(_react.Component);
  List.default = InovuaDataGridList;
  var propTypes2 = Object.assign({}, _src.propTypes, {
    count: _propTypes.default.number,
    columns: _propTypes.default.arrayOf(_propTypes.default.shape({
      name: _propTypes.default.string,
      computedWidth: _propTypes.default.number,
      id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
      render: _propTypes.default.func
    })),
    data: _propTypes.default.any,
    from: _propTypes.default.number,
    updateLockedWrapperPositions: _propTypes.default.any,
    idProperty: _propTypes.default.string,
    maxWidth: _propTypes.default.number,
    minRowHeight: _propTypes.default.number,
    minWidth: _propTypes.default.number,
    onColumnRenderStartIndexChange: _propTypes.default.func,
    rowHeight: _propTypes.default.number,
    renderScroller: _propTypes.default.func,
    renderScrollerSpacer: _propTypes.default.func,
    renderActiveRowIndicator: _propTypes.default.func,
    showWarnings: _propTypes.default.bool,
    to: _propTypes.default.number,
    virtualizeColumns: _propTypes.default.bool,
    hasValueSetter: _propTypes.default.bool
  });
  delete propTypes2.renderRow;
  InovuaDataGridList.propTypes = propTypes2;
  InovuaDataGridList.defaultProps = {
    showWarnings: false
  };
  return List;
}
var hasRequiredContent;
function requireContent() {
  if (hasRequiredContent)
    return Content;
  hasRequiredContent = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(Content, "__esModule", {
    value: true
  });
  Content.default = void 0;
  var _List = _interopRequireDefault2(requireList());
  var _default2 = _List.default;
  Content.default = _default2;
  return Content;
}
var context = {};
var hasRequiredContext;
function requireContext() {
  if (hasRequiredContext)
    return context;
  hasRequiredContext = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(context, "__esModule", {
    value: true
  });
  context.default = context.Provider = context.Consumer = void 0;
  var _react = _interopRequireDefault2(reactExports);
  var DataGridContext = _react.default.createContext(null);
  var Provider = DataGridContext.Provider;
  context.Provider = Provider;
  var Consumer = DataGridContext.Consumer;
  context.Consumer = Consumer;
  var _default2 = DataGridContext;
  context.default = _default2;
  return context;
}
var hasRequiredColumnLayout;
function requireColumnLayout() {
  if (hasRequiredColumnLayout)
    return ColumnLayout;
  hasRequiredColumnLayout = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(ColumnLayout, "__esModule", {
    value: true
  });
  ColumnLayout.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _region = _interopRequireDefault2(requireRegion());
  var _ResizeOverlay = _interopRequireDefault2(requireResizeOverlay());
  var _setupColumnResize = _interopRequireDefault2(requireSetupColumnResize());
  var _join = _interopRequireDefault2(requireJoin());
  var _FakeFlex = _interopRequireDefault2(requireFakeFlex());
  var _HeaderLayout = _interopRequireDefault2(requireHeaderLayout());
  var _Content = _interopRequireDefault2(requireContent());
  var _context = requireContext();
  var _isMobile = _interopRequireDefault2(requireIsMobile$1());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var height100 = {
    height: "100%"
  };
  var InovuaDataGridColumnLayout = function(_React$Component) {
    (0, _inherits2.default)(InovuaDataGridColumnLayout2, _React$Component);
    var _super = _createSuper(InovuaDataGridColumnLayout2);
    function InovuaDataGridColumnLayout2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaDataGridColumnLayout2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollTop", 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastComputedProps", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "headerLayout", null);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
        return _this.columnLayoutRef.current;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollingTopRegion", function() {
        return null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollingBottomRegion", function() {
        return null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getContentRows", function() {
        return _this.content.getRows();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollTop", function() {
        return _this.scrollTop || 0;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderHeaderLayout", function(computedProps) {
        return _react.default.createElement(_HeaderLayout.default, _objectSpread2(_objectSpread2({}, computedProps), {}, {
          onResizeMouseDown: _this.onResizeMouseDown.bind((0, _assertThisInitialized2.default)(_this), computedProps),
          onResizeTouchStart: _this.onResizeTouchStart.bind((0, _assertThisInitialized2.default)(_this), computedProps),
          onFilterValueChange: computedProps.computedOnColumnFilterValueChange,
          ref: _this.refHeaderLayout,
          getScrollLeftMax: _this.getScrollLeftMax,
          setScrollLeft: _this.setScrollLeft
        }));
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderContent", function(computedProps) {
        var groupBy = computedProps.groupBy;
        var groupByValue = groupBy && groupBy.length ? groupBy : null;
        return _react.default.createElement(_Content.default, _objectSpread2(_objectSpread2({
          key: "content"
        }, computedProps), {}, {
          getScrollLeftMax: _this.getScrollLeftMax,
          groupBy: groupByValue,
          before: _this.renderLockedStartRows(computedProps),
          after: _this.renderLockedEndRows(computedProps),
          ref: _this.refContent,
          columns: computedProps.visibleColumns,
          minWidth: computedProps.minWidth,
          maxWidth: computedProps.maxWidth,
          onDragRowMouseDown: _this.onDragRowMouseDownHandle,
          onContainerScrollHorizontal: _this.onContainerScrollHorizontal.bind((0, _assertThisInitialized2.default)(_this), computedProps),
          onContainerScrollVertical: _this.onContainerScrollVertical.bind((0, _assertThisInitialized2.default)(_this), computedProps),
          onColumnRenderStartIndexChange: _this.onColumnRenderStartIndexChange
        }));
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragRowMouseDownHandle", function(ev, index2, cellNode) {
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedEndRows", function(computedProps) {
        return null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedStartRows", function(computedProps) {
        return null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedRows", function(rows, position2, computedProps) {
        return null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderResizeOverlay", function(computedProps) {
        return _react.default.createElement(_ResizeOverlay.default, {
          resizeProxyStyle: computedProps.resizeProxyStyle,
          columnResizeProxyWidth: computedProps.columnResizeProxyWidth,
          columnResizeHandleWidth: computedProps.columnResizeHandleWidth,
          rtl: computedProps.rtl,
          ref: _this.refResizeOverlay
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onColumnRenderStartIndexChange", function(columnRenderStartIndex) {
        if (_this.headerLayout) {
          _this.headerLayout.setColumnRenderStartIndex(columnRenderStartIndex);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollVertical", function(computedProps, scrollTop) {
        _this.scrollTop = scrollTop;
        var computedLockedRows = computedProps.computedLockedRows, rowHeight = computedProps.rowHeight, stickyHeaders = computedProps.stickyHeaders, groupBy = computedProps.groupBy;
        if (rowHeight && stickyHeaders && groupBy && groupBy.length) {
          _this.updateStickyHeader(scrollTop);
        }
        if (computedLockedRows && computedLockedRows.length) {
          _this.updateLockedRows(scrollTop);
        }
        if (computedProps.onScroll) {
          computedProps.onScroll();
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onContainerScrollHorizontal", function(computedProps, scrollLeft, scrollLeftMax) {
        _this.scrollLeft = scrollLeft;
        if (_this.headerLayout) {
          _this.headerLayout.onContainerScrollHorizontal(scrollLeft, scrollLeftMax);
        }
        if (computedProps.onScroll) {
          computedProps.onScroll();
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollLeft", function() {
        return _this.scrollLeft || 0;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollLeftMax", function() {
        var vl2 = _this.getVirtualList();
        if (!vl2) {
          return 0;
        }
        return vl2.scrollContainer.scrollLeftMax;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollTopMax", function() {
        var vl2 = _this.getVirtualList();
        if (!vl2) {
          return;
        }
        return vl2.scrollContainer.scrollTopMax;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function(scrollLeft) {
        var vl2 = _this.getVirtualList();
        if (!vl2) {
          return;
        }
        vl2.scrollLeft = scrollLeft;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollTop", function(scrollTop) {
        var vl2 = _this.getVirtualList();
        if (!vl2) {
          return;
        }
        vl2.scrollTop = scrollTop;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function() {
        return _this.content ? _this.content.getVirtualList() : null;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startEdit", function(args) {
        return _this.content.startEdit(args);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cancelEdit", function(args) {
        return _this.content.cancelEdit(args);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "completeEdit", function(args) {
        return _this.content.completeEdit(args);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRenderRange", function() {
        return _this.content.getRenderRange();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getHeaderLayout", function() {
        return _this.headerLayout;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getHeaderCells", function() {
        return _this.getHeaderLayout().getHeaderCells();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getHeader", function() {
        return _this.headerLayout.getHeader();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGroupToolbar", function() {
        return _this.headerLayout.getGroupToolbar();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMColumnHeaderAt", function(index2) {
        return _this.headerLayout.getCellDOMNodeAt(index2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeMouseDown", function() {
        var _this2;
        if (_isMobile.default) {
          return;
        }
        (_this2 = _this).onResizeDownAction.apply(_this2, arguments);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDownAction", function(computedProps, config2, _ref2) {
        var colHeaderNode = _ref2.colHeaderNode, event2 = _ref2.event, groupColumns = _ref2.groupColumns;
        var visibleIndex = config2.computedVisibleIndex;
        _this.setupColumnResize(computedProps, {
          groupColumns,
          visibleIndex: visibleIndex !== void 0 ? visibleIndex : config2.visibleIndex,
          colHeaderNode,
          headerNode: _this.getHeader().getDOMNode(),
          event: event2
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeTouchStart", function() {
        var _this3;
        (_this3 = _this).onResizeDownAction.apply(_this3, arguments);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupColumnResize", function(computedProps, _ref2) {
        var visibleIndex = _ref2.visibleIndex, groupColumns = _ref2.groupColumns, colHeaderNode = _ref2.colHeaderNode, event2 = _ref2.event;
        event2.stopPropagation();
        if (event2.ctrlKey) {
          return;
        }
        var rtl = computedProps.rtl;
        var region2 = _region.default.from(event2.currentTarget.firstChild || event2.currentTarget);
        var columns = computedProps.visibleColumns;
        var firstFlexIndex = columns.reduce(function(index3, col, i) {
          if (col.flex != null && index3 == -1) {
            return i;
          }
          return index3;
        }, -1);
        var index2 = visibleIndex;
        var headerRegion = _region.default.from(_this.getHeaderLayout().headerDomNode.current);
        var constrainTo = _region.default.from(headerRegion.get());
        constrainTo.set((0, _defineProperty2.default)({}, _this.props.rtl ? "left" : "right", (_this.props.rtl ? -1 : 1) * (globalObject.screen ? globalObject.screen.width * 3 : _region.default.from(document.documentElement).getRight() * 2)));
        var column2 = columns[index2];
        var columnRegion = _region.default.from(colHeaderNode);
        var extraOffset = column2.lastInGroup ? region2.width : region2.width / 2;
        var maxPos;
        if (groupColumns) {
          var columnsMap = computedProps.columnsMap;
          var groupCols = groupColumns.map(function(colId) {
            return columnsMap[colId];
          });
          var firstColumnRegion = _region.default.from(_this.getDOMColumnHeaderAt(groupCols[0].computedVisibleIndex));
          var minWidth = groupCols.reduce(function(acc, col) {
            return acc + col.computedMinWidth;
          }, 0);
          var maxWidth = groupCols.reduce(function(acc, col) {
            return acc + (col.computedMaxWidth || Infinity);
          }, 0);
          var pos = rtl ? firstColumnRegion.right - minWidth - extraOffset : minWidth + firstColumnRegion.left - extraOffset;
          constrainTo.set((0, _defineProperty2.default)({}, rtl ? "right" : "left", pos));
          if (maxWidth !== Infinity) {
            maxPos = rtl ? firstColumnRegion.right - maxWidth : firstColumnRegion.left + maxWidth + extraOffset;
          }
        } else {
          var _minWidth = column2.computedMinWidth;
          if (_this.props.rtl) {
            var right = columnRegion.right - _minWidth - extraOffset;
            constrainTo.set({
              right
            });
            if (column2.computedMaxWidth) {
              maxPos = columnRegion.right - column2.computedMaxWidth;
            }
          } else {
            var left = _minWidth + columnRegion.left - extraOffset;
            constrainTo.set({
              left
            });
            if (column2.computedMaxWidth) {
              maxPos = columnRegion.left + column2.computedMaxWidth;
            }
          }
        }
        var shareSpace = computedProps.shareSpaceOnResize;
        var nextCol = columns[index2 + 1];
        var nextColHeaderNode = _this.getDOMColumnHeaderAt(index2 + 1);
        var nextColumnRegion = nextCol ? _region.default.from(nextColHeaderNode) : null;
        if (column2 && column2.computedResizable === false || nextCol && nextCol.computedResizable === false) {
          shareSpace = false;
        }
        if (shareSpace && nextColHeaderNode) {
          if (_this.props.rtl) {
            var nextColLeft = nextColumnRegion.left + nextCol.computedMinWidth;
            if (!maxPos || nextColLeft > maxPos) {
              maxPos = nextColLeft;
            }
          } else {
            var nextColRight = nextColumnRegion.right - nextCol.computedMinWidth;
            if (!maxPos || nextColRight < maxPos) {
              maxPos = nextColRight;
            }
          }
        }
        if (maxPos != null) {
          constrainTo.set((0, _defineProperty2.default)({}, _this.props.rtl ? "left" : "right", maxPos));
        }
        if (_this.props.rtl) {
          if (nextCol) {
            constrainTo.set({
              left: constrainTo.left - computedProps.columnResizeHandleWidth / 2
            });
          }
          constrainTo.set({
            right: constrainTo.right + computedProps.columnResizeHandleWidth
          });
        }
        _this.props.coverHandleRef.current.setCursor("col-resize");
        (0, _setupColumnResize.default)({
          headerRegion,
          constrainTo,
          region: region2,
          columns,
          index: index2,
          rtl: _this.props.rtl,
          extraOffset: 0,
          firstFlexIndex,
          groupColumns,
          shareSpaceOnResize: computedProps.shareSpaceOnResize,
          shareSpace,
          nextColumnSize: nextColumnRegion ? nextColumnRegion.width : null,
          initialSize: columnRegion.width
        }, {
          onResizeDragInit: _this.onResizeDragInit.bind((0, _assertThisInitialized2.default)(_this), computedProps),
          onResizeDrag: _this.onResizeDrag.bind((0, _assertThisInitialized2.default)(_this), computedProps),
          onResizeDrop: _this.onResizeDrop.bind((0, _assertThisInitialized2.default)(_this), computedProps)
        }, event2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDragInit", function(computedProps, _ref3) {
        var offset = _ref3.offset, constrained = _ref3.constrained;
        var offsetTop = _this.getHeaderLayout().getHeader().domRef.current.offsetTop;
        _this.props.coverHandleRef.current.setActive(true);
        _this.resizeOverlay.setOffset(offset).setActive(true, {
          offsetTop
        }).setConstrained(constrained);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDrop", function(computedProps, _ref4) {
        var index2 = _ref4.index, offset = _ref4.offset, diff = _ref4.diff, groupColumns = _ref4.groupColumns, constrained = _ref4.constrained, size2 = _ref4.size, nextColumnSize = _ref4.nextColumnSize, firstFlexIndex = _ref4.firstFlexIndex, shareSpace = _ref4.shareSpace;
        _this.props.coverHandleRef.current.setActive(false);
        if (_this.resizeOverlay) {
          _this.resizeOverlay.setOffset(offset).setConstrained(constrained).setActive(false);
        }
        if (computedProps.virtualizeColumns) {
          setTimeout(function() {
            _this.headerLayout.header.updateColumns();
          }, 10);
        }
        computedProps.computedOnColumnResize({
          groupColumns,
          diff,
          index: index2,
          size: size2,
          nextColumnSize,
          firstFlexIndex,
          shareSpace
        });
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizeDrag", function(computedProps, _ref5) {
        var offset = _ref5.offset, constrained = _ref5.constrained;
        if (_this.resizeOverlay) {
          _this.resizeOverlay.setOffset(offset).setConstrained(constrained);
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function(index2) {
        return _this.content.isRowFullyVisible(index2);
      });
      _this.refResizeOverlay = function(r2) {
        _this.resizeOverlay = r2;
      };
      _this.refHeaderLayout = function(layout2) {
        _this.headerLayout = layout2;
      };
      _this.columnLayoutRef = (0, _react.createRef)();
      _this.refContent = function(c2) {
        _this.content = c2;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaDataGridColumnLayout2, [{
      key: "tryStartEdit",
      value: function tryStartEdit(args) {
        return this.content.tryStartEdit(args);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;
        var className = (0, _join.default)("InovuaReactDataGrid__column-layout");
        return _react.default.createElement(_context.Consumer, null, function(computedProps) {
          var flexIndex = 1;
          var useNativeFlex = computedProps.useNativeFlex;
          _this4.lastComputedProps = computedProps;
          return _react.default.createElement("div", {
            ref: _this4.columnLayoutRef,
            className,
            style: _objectSpread2(_objectSpread2({}, height100), _this4.props.style)
          }, _react.default.createElement(_FakeFlex.default, {
            useNativeFlex,
            flexIndex,
            getNode: _this4.getDOMNode
          }, _this4.renderHeaderLayout(computedProps), _this4.renderContent(computedProps)), computedProps && computedProps.rowReorderAutoScroll && _this4.renderScrollingTopRegion(), _this4.renderReorderRowProxy(computedProps), _this4.renderResizeOverlay(computedProps), _this4.renderDragRowArrow(computedProps), computedProps && computedProps.rowReorderAutoScroll && _this4.renderScrollingBottomRegion());
        });
      }
    }, {
      key: "renderReorderRowProxy",
      value: function renderReorderRowProxy() {
        return null;
      }
    }, {
      key: "renderDragRowArrow",
      value: function renderDragRowArrow() {
        return null;
      }
    }, {
      key: "updateLockedRows",
      value: function updateLockedRows(scrollTop) {
        return;
      }
    }, {
      key: "updateStickyHeader",
      value: function updateStickyHeader() {
      }
    }]);
    return InovuaDataGridColumnLayout2;
  }(_react.default.Component);
  ColumnLayout.default = InovuaDataGridColumnLayout;
  InovuaDataGridColumnLayout.defaultProps = {
    reorderProxySize: 3
  };
  InovuaDataGridColumnLayout.propTypes = {
    minRowWidth: _propTypes.default.number,
    onMount: _propTypes.default.func,
    onUnmount: _propTypes.default.func,
    onRowMouseEnter: _propTypes.default.func,
    onRowMouseLeave: _propTypes.default.func,
    reorderProxySize: _propTypes.default.number.isRequired
  };
  return ColumnLayout;
}
var hasRequiredLayout;
function requireLayout() {
  if (hasRequiredLayout)
    return Layout;
  hasRequiredLayout = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Layout, "__esModule", {
    value: true
  });
  Layout.default = void 0;
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _assertThisInitialized2 = _interopRequireDefault2(requireAssertThisInitialized());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _reactDom = reactDomExports;
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _PaginationToolbar = _interopRequireDefault2(requirePaginationToolbar());
  var _shouldComponentUpdate2 = _interopRequireDefault2(requireShouldComponentUpdate$5());
  var _ColumnLayout = _interopRequireDefault2(requireColumnLayout());
  var _FakeFlex = _interopRequireDefault2(requireFakeFlex());
  var _join = _interopRequireDefault2(requireJoin());
  var _context = requireContext();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var stopPropagation = function stopPropagation2(e2) {
    return e2.stopPropagation();
  };
  var InovuaDataGridLayout = function(_Component) {
    (0, _inherits2.default)(InovuaDataGridLayout2, _Component);
    var _super = _createSuper(InovuaDataGridLayout2);
    function InovuaDataGridLayout2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, InovuaDataGridLayout2);
      _this = _super.call(this, props2);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ref", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "domNode", null);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refColumnLayout", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "columnLayout", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragHeader", void 0);
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDOMNode", function() {
        return _this.domNode;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderPageList", function(list2) {
        if (!_reactDom.createPortal) {
          return list2;
        }
        return _this.props.renderInPortal(list2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowMouseEnter", function(event2, rowProps) {
        _this.props.onRowMouseEnter && _this.props.onRowMouseEnter(event2, rowProps);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowMouseLeave", function(event2, rowProps) {
        _this.props.onRowMouseLeave && _this.props.onRowMouseLeave(event2, rowProps);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getVirtualList", function() {
        return _this.columnLayout && _this.columnLayout.getVirtualList();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRenderRange", function() {
        return _this.columnLayout.getRenderRange();
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isRowFullyVisible", function(index2) {
        return _this.columnLayout.isRowFullyVisible(index2);
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollLeft", function() {
        return _this.columnLayout ? _this.columnLayout.scrollLeft || 0 : 0;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getColumnLayout", function() {
        return _this.columnLayout;
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollLeft", function(scrollLeft) {
        if (_this.columnLayout) {
          _this.columnLayout.setScrollLeft(scrollLeft);
          if (_this.dragHeader) {
            _this.dragHeader.setScrollLeft(scrollLeft);
          }
        }
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getScrollTop", function() {
        return _this.columnLayout ? _this.columnLayout.scrollTop || 0 : 0;
      });
      _this.ref = function(domNode) {
        _this.domNode = domNode;
      };
      _this.refColumnLayout = function(layout2) {
        _this.columnLayout = layout2;
      };
      return _this;
    }
    (0, _createClass2.default)(InovuaDataGridLayout2, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate2(nextProps, nextState) {
        return (0, _shouldComponentUpdate2.default)(this, nextProps, nextState);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        var Footer = this.props.Footer;
        return _react.default.createElement(_context.Consumer, null, function(computedProps) {
          var ColumnLayoutCmp = computedProps && computedProps.ColumnLayout || _ColumnLayout.default;
          return _react.default.createElement("div", {
            className: "InovuaReactDataGrid__body",
            ref: _this2.ref
          }, _react.default.createElement(_FakeFlex.default, {
            flexIndex: 0,
            getNode: _this2.getDOMNode,
            useNativeFlex: computedProps.useNativeFlex
          }, _react.default.createElement(ColumnLayoutCmp, {
            key: "collayout",
            ref: _this2.refColumnLayout,
            rtl: computedProps.rtl,
            coverHandleRef: computedProps.coverHandleRef
          }), _this2.renderPaginationToolbar(computedProps), computedProps.computedFooterRows && Footer ? _react.default.createElement(Footer, {
            key: "footer",
            rows: computedProps.computedFooterRows
          }) : null));
        });
      }
    }, {
      key: "renderPaginationToolbar",
      value: function renderPaginationToolbar(computedProps) {
        var pagination = computedProps.pagination, paginationProps = computedProps.paginationProps, i18n = computedProps.i18n, theme2 = computedProps.theme, pageSizes = computedProps.pageSizes;
        if (!pagination) {
          return null;
        }
        if (!paginationProps || paginationProps.livePagination) {
          return null;
        }
        var result;
        if (computedProps.renderPaginationToolbar) {
          result = computedProps.renderPaginationToolbar(paginationProps);
        }
        var paginationToolbarProps = _objectSpread2(_objectSpread2({
          perPageText: i18n("perPageText"),
          pageText: i18n("pageText"),
          ofText: i18n("ofText"),
          showingText: i18n("showingText"),
          rtl: computedProps.rtl
        }, paginationProps), {}, {
          pageSizes,
          onClick: stopPropagation,
          theme: theme2,
          className: (0, _join.default)(paginationProps.className, this.props.useNativeFlex ? "InovuaReactDataGrid-modifier--relative" : "")
        });
        paginationToolbarProps.bordered = false;
        delete paginationToolbarProps.livePagination;
        if (result === void 0) {
          result = _react.default.createElement(_PaginationToolbar.default, _objectSpread2(_objectSpread2({
            key: "paginationtoolbar"
          }, paginationToolbarProps), {}, {
            constrainTo: this.props.constrainTo,
            renderPageList: this.renderPageList
          }));
        }
        return result;
      }
    }]);
    return InovuaDataGridLayout2;
  }(_react.Component);
  (0, _defineProperty2.default)(InovuaDataGridLayout, "defaultProps", void 0);
  (0, _defineProperty2.default)(InovuaDataGridLayout, "propTypes", void 0);
  InovuaDataGridLayout.defaultProps = {
    defaultScrollTop: 0,
    onRowMouseEnter: function onRowMouseEnter() {
    },
    onRowMouseLeave: function onRowMouseLeave() {
    },
    rowPlaceholderDelay: 300
  };
  InovuaDataGridLayout.propTypes = {
    i18n: _propTypes.default.func,
    shouldComponentUpdate: _propTypes.default.func,
    constrainTo: _propTypes.default.any,
    Footer: _propTypes.default.any,
    loading: _propTypes.default.bool,
    onScroll: _propTypes.default.func,
    onRowMouseEnter: _propTypes.default.func,
    onRowMouseLeave: _propTypes.default.func
  };
  var _default2 = InovuaDataGridLayout;
  Layout.default = _default2;
  return Layout;
}
var LoadMask$1 = {};
var LoadMask = {};
var src$1 = {};
var SvgLoader = {};
var hasRequiredSvgLoader;
function requireSvgLoader() {
  if (hasRequiredSvgLoader)
    return SvgLoader;
  hasRequiredSvgLoader = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(SvgLoader, "__esModule", {
    value: true
  });
  SvgLoader.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _join = _interopRequireDefault2(requireJoin$3());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var DEFAULT_CLASS_NAME = "inovua-react-toolkit-load-mask__loader";
  var InovuaSvgLoader = function(_React$Component) {
    (0, _inherits2.default)(InovuaSvgLoader2, _React$Component);
    var _super = _createSuper(InovuaSvgLoader2);
    function InovuaSvgLoader2() {
      (0, _classCallCheck2.default)(this, InovuaSvgLoader2);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(InovuaSvgLoader2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var style = _objectSpread2(_objectSpread2({}, props2.style), {}, {
          width: props2.size,
          height: props2.size
        });
        if (props2.animationDuration) {
          style.animationDuration = props2.animationDuration;
        }
        var className = (0, _join.default)(props2.className, DEFAULT_CLASS_NAME, "".concat(DEFAULT_CLASS_NAME, "--svg"), props2.theme && "".concat(DEFAULT_CLASS_NAME, "--theme-").concat(props2.theme));
        return _react.default.createElement("div", {
          style,
          className
        }, _react.default.createElement("svg", {
          className: "".concat(DEFAULT_CLASS_NAME, "-spinner"),
          width: props2.size,
          height: props2.size,
          viewBox: "0 0 32 32"
        }, _react.default.createElement("path", {
          fillRule: "evenodd",
          d: "M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16zm0-4c6.627 0 12-5.373 12-12S22.627 4 16 4 4 9.373 4 16s5.373 12 12 12z"
        })));
      }
    }]);
    return InovuaSvgLoader2;
  }(_react.default.Component);
  SvgLoader.default = InovuaSvgLoader;
  InovuaSvgLoader.propTypes = {
    size: _propTypes.default.number,
    theme: _propTypes.default.string,
    animationDuration: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  };
  InovuaSvgLoader.defaultProps = {
    size: 40
  };
  return SvgLoader;
}
var SpinLoader = {};
var hasRequiredSpinLoader;
function requireSpinLoader() {
  if (hasRequiredSpinLoader)
    return SpinLoader;
  hasRequiredSpinLoader = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(SpinLoader, "__esModule", {
    value: true
  });
  SpinLoader.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireDefault2(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _join = _interopRequireDefault2(requireJoin$3());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var DEFAULT_CLASS_NAME = "inovua-react-toolkit-load-mask__loader";
  var LOADBAR_CLASSNAME = "".concat(DEFAULT_CLASS_NAME, "-loadbar");
  var getMeasureName = function getMeasureName2(duration) {
    if (typeof duration == "number" || duration * 1 == duration) {
      return "s";
    }
    var measure;
    duration.match(/[a-zA-Z]*$/, function(match2) {
      measure = match2;
    });
    return measure || "s";
  };
  var InovuaSpinLoader = function(_React$Component) {
    (0, _inherits2.default)(InovuaSpinLoader2, _React$Component);
    var _super = _createSuper(InovuaSpinLoader2);
    function InovuaSpinLoader2() {
      (0, _classCallCheck2.default)(this, InovuaSpinLoader2);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(InovuaSpinLoader2, [{
      key: "render",
      value: function render() {
        var props2 = this.props;
        var style = _objectSpread2(_objectSpread2({}, props2.style), {}, {
          width: props2.size,
          height: props2.size
        });
        var className = (0, _join.default)(props2.className, DEFAULT_CLASS_NAME, "".concat(DEFAULT_CLASS_NAME, "--spin"), props2.theme && "".concat(DEFAULT_CLASS_NAME, "--theme-").concat(props2.theme));
        var animationDuration = props2.animationDuration;
        animationDuration ? getMeasureName(animationDuration) : "";
        var bars = (0, _toConsumableArray2.default)(Array(12)).map(function(_, i) {
          var index2 = i + 1;
          return _react.default.createElement("div", {
            key: index2,
            className: "".concat(LOADBAR_CLASSNAME, " ").concat(LOADBAR_CLASSNAME, "--").concat(index2)
          });
        });
        return _react.default.createElement("div", {
          style,
          className
        }, bars);
      }
    }]);
    return InovuaSpinLoader2;
  }(_react.default.Component);
  InovuaSpinLoader.propTypes = {
    size: _propTypes.default.number,
    theme: _propTypes.default.string,
    animationDuration: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  };
  InovuaSpinLoader.defaultProps = {
    size: 40
  };
  var _default2 = InovuaSpinLoader;
  SpinLoader.default = _default2;
  return SpinLoader;
}
var hasRequiredSrc$1;
function requireSrc$1() {
  if (hasRequiredSrc$1)
    return src$1;
  hasRequiredSrc$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(src$1, "__esModule", {
    value: true
  });
  src$1.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _cleanProps = _interopRequireDefault2(requireCleanProps());
  var _join = _interopRequireDefault2(requireJoin$3());
  var _SvgLoader = _interopRequireDefault2(requireSvgLoader());
  var _SpinLoader = _interopRequireDefault2(requireSpinLoader());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var DEFAULT_CLASS_NAME = "inovua-react-toolkit-load-mask";
  var InovuaLoadMask = (0, _react.forwardRef)(function(props2, ref) {
    var visibleClassName = props2.visible ? "".concat(props2.rootClassName, "--visible") : "";
    var className = (0, _join.default)(props2.className, props2.rootClassName, visibleClassName, props2.theme && "".concat(props2.rootClassName, "--theme-").concat(props2.theme));
    var layerClassName = (0, _join.default)(props2.backgroundLayerClassName, "".concat(props2.rootClassName, "__background-layer"));
    var style = _objectSpread2({}, props2.style);
    var layerStyle = _objectSpread2({}, props2.backgroundLayerStyle);
    if (props2.zIndex != null) {
      style.zIndex = props2.zIndex;
    }
    if (props2.background !== true) {
      layerStyle.background = props2.background === false ? "transparent" : props2.background;
    }
    if (props2.backgroundOpacity != null) {
      layerStyle.opacity = props2.backgroundOpacity;
    }
    var pointerEvents = props2.pointerEvents;
    if (pointerEvents !== true) {
      style.pointerEvents = pointerEvents === false ? "none" : pointerEvents;
    }
    var Loader = props2.svgLoader ? _SvgLoader.default : _SpinLoader.default;
    return _react.default.createElement("div", _objectSpread2(_objectSpread2({
      ref
    }, (0, _cleanProps.default)(props2, InovuaLoadMask.propTypes)), {}, {
      className,
      style
    }), _react.default.createElement("div", {
      style: layerStyle,
      className: layerClassName
    }), _react.default.createElement("div", {
      className: "".concat(props2.rootClassName, "__loader-container")
    }, _react.default.createElement(Loader, {
      size: props2.size,
      theme: props2.theme,
      animationDuration: props2.animationDuration
    }), props2.children));
  });
  InovuaLoadMask.defaultProps = {
    visible: true,
    svgLoader: true,
    theme: "default-light",
    zIndex: 100,
    pointerEvents: true,
    backgroundOpacity: 0.6,
    background: true,
    backgroundLayerStyle: {},
    rootClassName: DEFAULT_CLASS_NAME
  };
  InovuaLoadMask.propTypes = {
    animationDuration: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    svgLoader: _propTypes.default.bool,
    zIndex: _propTypes.default.number,
    visible: _propTypes.default.bool,
    pointerEvents: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
    backgroundOpacity: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    background: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
    theme: _propTypes.default.string,
    backgroundLayerClassName: _propTypes.default.string,
    backgroundLayerStyle: _propTypes.default.object,
    rootClassName: _propTypes.default.string
  };
  var _default2 = InovuaLoadMask;
  src$1.default = _default2;
  return src$1;
}
var hasRequiredLoadMask$1;
function requireLoadMask$1() {
  if (hasRequiredLoadMask$1)
    return LoadMask;
  hasRequiredLoadMask$1 = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(LoadMask, "__esModule", {
    value: true
  });
  LoadMask.default = void 0;
  var _src = _interopRequireDefault2(requireSrc$1());
  var _default2 = _src.default;
  LoadMask.default = _default2;
  return LoadMask;
}
var hasRequiredLoadMask;
function requireLoadMask() {
  if (hasRequiredLoadMask)
    return LoadMask$1;
  hasRequiredLoadMask = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(LoadMask$1, "__esModule", {
    value: true
  });
  LoadMask$1.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _classCallCheck2 = _interopRequireDefault2(requireClassCallCheck());
  var _createClass2 = _interopRequireDefault2(requireCreateClass());
  var _inherits2 = _interopRequireDefault2(requireInherits$1());
  var _possibleConstructorReturn2 = _interopRequireDefault2(requirePossibleConstructorReturn());
  var _getPrototypeOf2 = _interopRequireDefault2(requireGetPrototypeOf());
  var _react = _interopRequireWildcard(reactExports);
  var _propTypes = _interopRequireDefault2(requirePropTypes());
  var _LoadMask = _interopRequireDefault2(requireLoadMask$1());
  var _reactCleanProps = _interopRequireDefault2(requireReactCleanProps());
  var _join = _interopRequireDefault2(requireJoin());
  var _renderEmptyContent = _interopRequireDefault2(requireRenderEmptyContent());
  var _getGlobal = requireGetGlobal();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = (0, _getPrototypeOf2.default)(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return (0, _possibleConstructorReturn2.default)(this, result);
    };
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var stop = function stop2(e2) {
    if (e2.cancelable === false) {
      return;
    }
    e2.preventDefault();
  };
  var DEFAULT_CLASSNAME = "InovuaReactDataGrid__load-mask";
  var DataGridLoadMask = function(_React$Component) {
    (0, _inherits2.default)(DataGridLoadMask2, _React$Component);
    var _super = _createSuper(DataGridLoadMask2);
    function DataGridLoadMask2(props2) {
      var _this;
      (0, _classCallCheck2.default)(this, DataGridLoadMask2);
      _this = _super.call(this, props2);
      _this.visible = props2.visible;
      _this.maskRef = (0, _react.createRef)();
      return _this;
    }
    (0, _createClass2.default)(DataGridLoadMask2, [{
      key: "setVisible",
      value: function setVisible(visible) {
        var _this2 = this;
        if (this.props.livePagination) {
          this.visible = visible;
          var fn = function fn2() {
            var node2 = _this2.maskRef.current;
            if (!node2 || !_this2.scroller) {
              return;
            }
            node2.style.visibility = visible ? "visible" : "hidden";
            if (visible === false) {
              _this2.scroller.scrollTop = 0;
            }
          };
          if (!visible) {
            globalObject.requestAnimationFrame(fn);
          } else {
            fn();
          }
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setVisible(this.props.visible);
      }
    }, {
      key: "render",
      value: function render() {
        var props2 = this.props;
        var livePagination = props2.livePagination, loadingText = props2.loadingText, visible = props2.visible;
        var style = props2.style;
        var cleanProps2 = (0, _reactCleanProps.default)(props2, DataGridLoadMask2.propTypes);
        var className = (0, _join.default)(DEFAULT_CLASSNAME, props2.className, livePagination && "".concat(DEFAULT_CLASSNAME, "--live-pagination"));
        return _react.default.createElement(_LoadMask.default, _objectSpread2(_objectSpread2({}, cleanProps2), {}, {
          ref: this.maskRef,
          style,
          visible,
          className,
          onWheel: livePagination ? stop : null
        }), (0, _renderEmptyContent.default)(loadingText, "loading"));
      }
    }]);
    return DataGridLoadMask2;
  }(_react.default.Component);
  LoadMask$1.default = DataGridLoadMask;
  DataGridLoadMask.defaultProps = {
    livePagination: false,
    visible: false
  };
  DataGridLoadMask.propTypes = {
    visible: _propTypes.default.bool,
    loadingText: _propTypes.default.node,
    livePagination: _propTypes.default.bool
  };
  return LoadMask$1;
}
var filterTypes = {};
var hasRequiredFilterTypes;
function requireFilterTypes() {
  if (hasRequiredFilterTypes)
    return filterTypes;
  hasRequiredFilterTypes = 1;
  Object.defineProperty(filterTypes, "__esModule", {
    value: true
  });
  filterTypes.stringTypes = filterTypes.string = filterTypes.selectTypes = filterTypes.select = filterTypes.numberTypes = filterTypes.number = filterTypes.default = filterTypes.dateTypes = filterTypes.date = filterTypes.booleanTypes = filterTypes.boolean = filterTypes.boolTypes = filterTypes.bool = void 0;
  var emptyObject = {};
  var stringTypes = {
    type: "string",
    emptyValue: "",
    operators: [{
      name: "contains",
      fn: function fn(_ref2) {
        var value = _ref2.value, filterValue = _ref2.filterValue;
        value = value || "";
        return !filterValue ? true : value.toLowerCase().indexOf(filterValue.toLowerCase()) != -1;
      }
    }, {
      name: "notContains",
      fn: function fn(_ref2) {
        var value = _ref2.value, filterValue = _ref2.filterValue;
        return !filterValue ? true : (value || "").toLowerCase().indexOf(filterValue.toLowerCase()) === -1;
      }
    }, {
      name: "eq",
      fn: function fn(_ref3) {
        var value = _ref3.value, filterValue = _ref3.filterValue;
        return !filterValue ? true : (value || "").toLowerCase() === filterValue.toLowerCase();
      }
    }, {
      name: "neq",
      fn: function fn(_ref4) {
        var value = _ref4.value, filterValue = _ref4.filterValue;
        return !filterValue ? true : (value || "").toLowerCase() !== filterValue.toLowerCase();
      }
    }, {
      name: "empty",
      fn: function fn(_ref5) {
        var value = _ref5.value;
        return value === "";
      },
      filterOnEmptyValue: true,
      valueOnOperatorSelect: "",
      disableFilterEditor: true
    }, {
      name: "notEmpty",
      fn: function fn(_ref6) {
        var value = _ref6.value;
        return value !== "";
      },
      filterOnEmptyValue: true,
      valueOnOperatorSelect: "",
      disableFilterEditor: true
    }, {
      name: "startsWith",
      fn: function fn(_ref7) {
        var value = _ref7.value, filterValue = _ref7.filterValue;
        return !filterValue ? true : (value || "").toLowerCase().startsWith(filterValue.toLowerCase());
      }
    }, {
      name: "endsWith",
      fn: function fn(_ref8) {
        var value = _ref8.value, filterValue = _ref8.filterValue;
        return !filterValue ? true : (value || "").toLowerCase().endsWith(filterValue.toLowerCase());
      }
    }]
  };
  filterTypes.string = filterTypes.stringTypes = stringTypes;
  var boolTypes = {
    type: "bool",
    emptyValue: null,
    operators: [{
      name: "eq",
      fn: function fn(_ref9) {
        var value = _ref9.value, filterValue = _ref9.filterValue;
        return filterValue != null ? filterValue === value : true;
      }
    }, {
      name: "neq",
      fn: function fn(_ref10) {
        var value = _ref10.value, filterValue = _ref10.filterValue;
        return filterValue != null ? filterValue !== value : true;
      }
    }]
  };
  filterTypes.boolean = filterTypes.bool = filterTypes.boolTypes = boolTypes;
  var selectTypes = {
    type: "select",
    emptyValue: null,
    operators: [{
      name: "inlist",
      fn: function fn(_ref11) {
        var value = _ref11.value, filterValue = _ref11.filterValue;
        return !filterValue || !filterValue.length ? true : filterValue.indexOf(value) !== -1;
      }
    }, {
      name: "notinlist",
      fn: function fn(_ref12) {
        var value = _ref12.value, filterValue = _ref12.filterValue;
        return !filterValue || !filterValue.length ? true : filterValue.indexOf(value) === -1;
      }
    }, {
      name: "eq",
      fn: function fn(_ref13) {
        var value = _ref13.value, filterValue = _ref13.filterValue, emptyValue = _ref13.emptyValue;
        return filterValue !== emptyValue ? filterValue === value : true;
      }
    }, {
      name: "neq",
      fn: function fn(_ref14) {
        var value = _ref14.value, filterValue = _ref14.filterValue, emptyValue = _ref14.emptyValue;
        return filterValue !== emptyValue ? filterValue !== value : true;
      }
    }]
  };
  filterTypes.select = filterTypes.selectTypes = selectTypes;
  var booleanTypes = {
    type: "boolean",
    emptyValue: null,
    operators: boolTypes.operators
  };
  filterTypes.booleanTypes = booleanTypes;
  var numberTypes = {
    type: "number",
    emptyValue: null,
    operators: [{
      name: "gt",
      fn: function fn(_ref15) {
        var value = _ref15.value, filterValue = _ref15.filterValue;
        return filterValue != null ? value > filterValue : true;
      }
    }, {
      name: "gte",
      fn: function fn(_ref16) {
        var value = _ref16.value, filterValue = _ref16.filterValue;
        return filterValue != null ? value >= filterValue : true;
      }
    }, {
      name: "lt",
      fn: function fn(_ref17) {
        var value = _ref17.value, filterValue = _ref17.filterValue;
        return filterValue != null ? value < filterValue : true;
      }
    }, {
      name: "lte",
      fn: function fn(_ref18) {
        var value = _ref18.value, filterValue = _ref18.filterValue;
        return filterValue != null ? value <= filterValue : true;
      }
    }, {
      name: "eq",
      fn: function fn(_ref19) {
        var value = _ref19.value, filterValue = _ref19.filterValue;
        return filterValue != null ? value === filterValue : true;
      }
    }, {
      name: "neq",
      fn: function fn(_ref20) {
        var value = _ref20.value, filterValue = _ref20.filterValue;
        return filterValue != null ? value !== filterValue : true;
      }
    }, {
      name: "inrange",
      fn: function fn(_ref21) {
        var value = _ref21.value, filterValue = _ref21.filterValue;
        var _ref22 = filterValue || emptyObject, start = _ref22.start, end = _ref22.end;
        if (start != null && end != null) {
          return value >= start && value <= end;
        }
        if (start != null) {
          return value >= start;
        }
        if (end != null) {
          return value <= end;
        }
        return true;
      }
    }, {
      name: "notinrange",
      fn: function fn(_ref23) {
        var value = _ref23.value, filterValue = _ref23.filterValue;
        var _ref24 = filterValue || emptyObject, start = _ref24.start, end = _ref24.end;
        if (start != null && end != null) {
          return value < start || value > end;
        }
        if (start != null) {
          return value < start;
        }
        if (end != null) {
          return value > end;
        }
        return true;
      }
    }]
  };
  filterTypes.number = filterTypes.numberTypes = numberTypes;
  var dateTypes = {
    type: "date",
    emptyValue: "",
    operators: [{
      name: "after",
      fn: function fn(_ref25) {
        var value = _ref25.value, filterValue = _ref25.filterValue, dateFormat = _ref25.column.dateFormat;
        return filterValue ? window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(filterValue, dateFormat)) : true;
      }
    }, {
      name: "afterOrOn",
      fn: function fn(_ref26) {
        var value = _ref26.value, filterValue = _ref26.filterValue, dateFormat = _ref26.column.dateFormat;
        return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(filterValue, dateFormat)) : true;
      }
    }, {
      name: "before",
      fn: function fn(_ref27) {
        var value = _ref27.value, filterValue = _ref27.filterValue, dateFormat = _ref27.column.dateFormat;
        return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(filterValue, dateFormat)) : true;
      }
    }, {
      name: "beforeOrOn",
      fn: function fn(_ref28) {
        var value = _ref28.value, filterValue = _ref28.filterValue, dateFormat = _ref28.column.dateFormat;
        return filterValue != null ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(filterValue, dateFormat)) : true;
      }
    }, {
      name: "eq",
      fn: function fn(_ref29) {
        var value = _ref29.value, filterValue = _ref29.filterValue, dateFormat = _ref29.column.dateFormat;
        return filterValue ? window.moment(window.moment(value).format(dateFormat), dateFormat).isSame(window.moment(filterValue, dateFormat)) : true;
      }
    }, {
      name: "neq",
      fn: function fn(_ref30) {
        var value = _ref30.value, filterValue = _ref30.filterValue, dateFormat = _ref30.column.dateFormat;
        return filterValue ? !window.moment(window.moment(value).format(dateFormat), dateFormat).isSame(window.moment(filterValue, dateFormat)) : true;
      }
    }, {
      name: "inrange",
      fn: function fn(_ref31) {
        var value = _ref31.value, filterValue = _ref31.filterValue, dateFormat = _ref31.column.dateFormat;
        var _ref32 = filterValue || emptyObject, start = _ref32.start, end = _ref32.end;
        if (start && end) {
          return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(start, dateFormat)) && window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(end, dateFormat));
        }
        if (start) {
          return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrAfter(window.moment(start, dateFormat));
        }
        if (end) {
          return window.moment(window.moment(value).format(dateFormat), dateFormat).isSameOrBefore(window.moment(end, dateFormat));
        }
        return true;
      }
    }, {
      name: "notinrange",
      fn: function fn(_ref33) {
        var value = _ref33.value, filterValue = _ref33.filterValue, dateFormat = _ref33.column.dateFormat;
        var _ref34 = filterValue || emptyObject, start = _ref34.start, end = _ref34.end;
        if (start && end) {
          return window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(start, dateFormat)) || window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(end, dateFormat));
        }
        if (start) {
          return window.moment(window.moment(value).format(dateFormat), dateFormat).isBefore(window.moment(start, dateFormat));
        }
        if (end) {
          return window.moment(window.moment(value).format(dateFormat), dateFormat).isAfter(window.moment(end, dateFormat));
        }
        return true;
      }
    }]
  };
  filterTypes.date = filterTypes.dateTypes = dateTypes;
  var defaultFilterTypes = {
    select: selectTypes,
    string: stringTypes,
    number: numberTypes,
    bool: boolTypes,
    boolean: booleanTypes,
    date: dateTypes
  };
  var _default2 = defaultFilterTypes;
  filterTypes.default = _default2;
  return filterTypes;
}
var useColumns = {};
var columnResize = {};
var hasRequiredColumnResize;
function requireColumnResize() {
  if (hasRequiredColumnResize)
    return columnResize;
  hasRequiredColumnResize = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(columnResize, "__esModule", {
    value: true
  });
  columnResize.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _clamp = _interopRequireDefault2(requireClamp$1());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var normalize3 = function normalize4(result) {
    var newColumnFlexes = result.newColumnFlexes, newColumnSizes = result.newColumnSizes, maxAvailableWidthForColumns = result.maxAvailableWidthForColumns;
    if (newColumnFlexes && !Object.keys(newColumnFlexes).length) {
      newColumnFlexes = void 0;
    }
    if (newColumnSizes && !Object.keys(newColumnSizes).length) {
      newColumnSizes = void 0;
    }
    return _objectSpread2(_objectSpread2({}, result), {}, {
      newColumnFlexes,
      newColumnSizes,
      maxAvailableWidthForColumns
    });
  };
  var assignFlexes = function assignFlexes2(columns) {
    return columns.reduce(function(flexes, col) {
      if (col.computedFlex) {
        flexes[col.id] = col.computedWidth;
      }
      return flexes;
    }, {});
  };
  var clampColSize = function clampColSize2(size2, col) {
    return (0, _clamp.default)(size2, col.computedMinWidth, col.computedMaxWidth);
  };
  var resizeGroupColumns = function resizeGroupColumns2(arg, config2) {
    var totalDiff = arg.diff;
    arg.maxAvailableWidthForColumns;
    arg.shareSpaceOnResize;
    arg.index;
    var groupColumns = arg.groupColumns, columns = arg.columns;
    columns = columns.map(function(c2) {
      return _objectSpread2({}, c2);
    });
    var newColumnSizes = config2.newColumnSizes || {};
    var columnsMap = columns.reduce(function(map2, col) {
      map2[col.id] = col;
      return map2;
    }, {});
    var newColumnFlexes = _objectSpread2(_objectSpread2({}, assignFlexes(groupColumns.map(function(colId) {
      return columnsMap[colId];
    }))), config2.newColumnFlexes);
    while (Math.abs(totalDiff) > 0) {
      groupColumns.forEach(function(colId, idx) {
        var col = columnsMap[colId];
        if (col.computedResizable === false) {
          return;
        }
        var totalGroupResizableWidth = groupColumns.slice(idx).reduce(function(total, colId2) {
          var col2 = columnsMap[colId2];
          if (col2.computedResizable === false) {
            return total;
          }
          if (totalDiff > 0 && col2.computedMaxWidth && col2.computedWidth >= col2.computedMaxWidth) {
            return total;
          }
          if (totalDiff < 0 && col2.computedMinWidth && col2.computedWidth <= col2.computedMinWidth) {
            return total;
          }
          return total + col2.computedWidth;
        }, 0);
        var diff = totalGroupResizableWidth ? Math.round(col.computedWidth / totalGroupResizableWidth * totalDiff) : 0;
        var adjustment = 0;
        if (!col.computedFlex) {
          newColumnSizes[col.id] = col.computedWidth = col.computedWidth + diff;
        } else {
          delete newColumnSizes[col.id];
          newColumnFlexes[col.id] = col.computedWidth = col.computedWidth + diff;
        }
        if (newColumnSizes[col.id] !== void 0) {
          var size2 = newColumnSizes[col.id];
          var clampedSize = (0, _clamp.default)(size2, col.computedMinWidth, col.computedMaxWidth);
          if (clampedSize !== size2) {
            adjustment = size2 - clampedSize;
            newColumnSizes[col.id] = clampedSize;
          }
        } else if (newColumnFlexes[col.id] !== void 0) {
          var _size = newColumnFlexes[col.id];
          var _clampedSize = (0, _clamp.default)(_size, col.computedMinWidth, col.computedMaxWidth);
          if (_clampedSize !== _size) {
            adjustment = _size - _clampedSize;
            newColumnFlexes[col.id] = col.computedWidth = _clampedSize;
          }
        }
        if (diff === 0) {
          totalDiff = 0;
        } else {
          totalDiff = totalDiff - diff + adjustment;
        }
      });
    }
    return normalize3(_objectSpread2(_objectSpread2({}, config2), {}, {
      newColumnSizes,
      newColumnFlexes
    }));
  };
  var _default2 = function _default3(arg) {
    var shareSpaceOnResize = arg.shareSpaceOnResize, groupColumns = arg.groupColumns;
    var result = shareSpaceOnResize ? resizeShareSpace(arg) : resizeNoShareSpace(arg);
    if (groupColumns) {
      return resizeGroupColumns(arg, result);
    }
    return result;
  };
  columnResize.default = _default2;
  var resizeShareSpace = function resizeShareSpace2(arg) {
    var columns = arg.columns, index2 = arg.index, diff = arg.diff;
    var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;
    var colLeft = columns[index2];
    var colsToRight = columns.slice(index2 + 1);
    var colRight = colsToRight[0];
    if (!colRight || colRight.computedResizable === false) {
      return resizeNoShareSpace(arg);
    }
    if (!colLeft.computedFlex && !colRight.computedFlex) {
      var _newColumnSizes;
      var newColLeftSize = colLeft.computedWidth + diff;
      var newColRightSize = clampColSize(colRight.computedWidth - diff, colRight);
      var remainingDiff = newColRightSize - (colRight.computedWidth - diff);
      var newColumnSizes = (_newColumnSizes = {}, (0, _defineProperty2.default)(_newColumnSizes, colLeft.id, newColLeftSize + remainingDiff), (0, _defineProperty2.default)(_newColumnSizes, colRight.id, newColRightSize), _newColumnSizes);
      return normalize3({
        newColumnSizes,
        maxAvailableWidthForColumns
      });
    }
    if (colLeft.computedFlex && colRight.computedFlex) {
      var newColumnFlexes = assignFlexes(columns);
      newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;
      newColumnFlexes[colRight.id] = colRight.computedWidth - diff;
      return normalize3({
        newColumnFlexes,
        maxAvailableWidthForColumns
      });
    }
    if (!colLeft.computedFlex) {
      var _newColumnFlexes = assignFlexes(columns);
      var _newColumnSizes2 = (0, _defineProperty2.default)({}, colLeft.id, colLeft.computedWidth + diff);
      _newColumnFlexes[colRight.id] = colRight.computedWidth - diff;
      return normalize3({
        newColumnFlexes: _newColumnFlexes,
        newColumnSizes: _newColumnSizes2,
        maxAvailableWidthForColumns
      });
    }
    if (!colRight.computedFlex) {
      var flexCount = columns.reduce(function(count, col) {
        return count + (col.computedFlex ? 1 : 0);
      }, 0);
      var _newColumnFlexes2 = assignFlexes(columns);
      var _newColumnSizes4 = (0, _defineProperty2.default)({}, colRight.id, colRight.computedWidth - diff);
      _newColumnFlexes2[colLeft.id] = colLeft.computedWidth + diff;
      if (flexCount === 1 && colLeft.computedFlex) {
        _newColumnFlexes2 = {};
      }
      return normalize3({
        newColumnFlexes: _newColumnFlexes2,
        newColumnSizes: _newColumnSizes4,
        maxAvailableWidthForColumns
      });
    }
  };
  var resizeNoShareSpace = function resizeNoShareSpace2(arg) {
    var columns = arg.columns, index2 = arg.index, diff = arg.diff, totalComputedWidth = arg.totalComputedWidth;
    var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;
    var colLeft = columns[index2];
    var colsToRight = columns.slice(index2 + 1);
    colsToRight[0];
    var newColumnSizes;
    var newColumnFlexes;
    var flexCount = columns.reduce(function(count, col) {
      return count + (col.computedFlex ? 1 : 0);
    }, 0);
    if (!colLeft.computedFlex) {
      if (!flexCount) {
        newColumnSizes = {};
        if (colLeft.computedResizable !== false) {
          newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
        }
        return normalize3({
          newColumnSizes,
          newColumnFlexes: void 0,
          maxAvailableWidthForColumns
        });
      }
      newColumnSizes = {};
      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
      return normalize3({
        newColumnSizes,
        newColumnFlexes: assignFlexes(columns),
        maxAvailableWidthForColumns: totalComputedWidth + diff
      });
    }
    newColumnFlexes = assignFlexes(columns);
    newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;
    if (flexCount === 1) {
      if (!colLeft.keepFlex) {
        delete newColumnFlexes[colLeft.id];
        newColumnSizes = {};
        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
      } else {
        newColumnFlexes = {};
        maxAvailableWidthForColumns = totalComputedWidth + diff;
      }
    } else {
      if (!colLeft.keepFlex) {
        delete newColumnFlexes[colLeft.id];
        newColumnSizes = {};
        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);
        maxAvailableWidthForColumns = totalComputedWidth + diff;
      } else {
        newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;
        maxAvailableWidthForColumns = totalComputedWidth + diff;
      }
    }
    return normalize3({
      newColumnFlexes,
      newColumnSizes,
      maxAvailableWidthForColumns
    });
  };
  return columnResize;
}
var useColumnInfo = {};
var normalizeColumns = {};
var setColumnId = {};
var hasRequiredSetColumnId;
function requireSetColumnId() {
  if (hasRequiredSetColumnId)
    return setColumnId;
  hasRequiredSetColumnId = 1;
  Object.defineProperty(setColumnId, "__esModule", {
    value: true
  });
  setColumnId.default = void 0;
  var random = function random2() {
    return Date.now ? "".concat(Date.now()).concat(Math.random()) : "".concat((/* @__PURE__ */ new Date()).getTime()) + Math.random();
  };
  var _default2 = function _default3(col) {
    col.id = col.id == null ? col.name || random() : col.id;
    return col;
  };
  setColumnId.default = _default2;
  return setColumnId;
}
var computeFlexWidths = {};
var hasRequiredComputeFlexWidths;
function requireComputeFlexWidths() {
  if (hasRequiredComputeFlexWidths)
    return computeFlexWidths;
  hasRequiredComputeFlexWidths = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(computeFlexWidths, "__esModule", {
    value: true
  });
  computeFlexWidths.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var sum = function sum2(a, b2) {
    return (a || 0) + (b2 || 0);
  };
  var EMPTY_ARRAY = [];
  var _default2 = function _default3(_ref2) {
    var flexes = _ref2.flexes, availableSize = _ref2.availableSize, _ref$maxWidths = _ref2.maxWidths, maxWidths = _ref$maxWidths === void 0 ? EMPTY_ARRAY : _ref$maxWidths, _ref$minWidths = _ref2.minWidths, minWidths = _ref$minWidths === void 0 ? EMPTY_ARRAY : _ref$minWidths;
    flexes = (0, _toConsumableArray2.default)(flexes);
    var sumOfAllFlexes = flexes.reduce(sum, 0);
    if (minWidths.length && minWidths.length != flexes.length) {
      throw "minWidths.length needs to be === flexes.length";
    }
    if (maxWidths.length && maxWidths.length != flexes.length) {
      throw "maxWidths.length needs to be === flexes.length";
    }
    var oneFlex = sumOfAllFlexes ? availableSize / sumOfAllFlexes : 0;
    var result = flexes.map(function(_) {
      return null;
    });
    flexes.forEach(function(flex, index2) {
      var minWidth = minWidths[index2];
      flex = flex || 0;
      if (flex === 0) {
        return;
      }
      var size2;
      var flexSize = Math.round(flex * oneFlex);
      var maxWidth = maxWidths[index2];
      if (minWidth != null && flexSize < minWidth) {
        availableSize -= minWidth;
        flexes[index2] = 0;
        size2 = minWidth;
        sumOfAllFlexes -= flex;
        oneFlex = sumOfAllFlexes ? availableSize / sumOfAllFlexes : 0;
      } else if (maxWidth != null && flexSize > maxWidth) {
        availableSize -= maxWidth;
        flexes[index2] = 0;
        size2 = maxWidth;
        sumOfAllFlexes -= flex;
        oneFlex = sumOfAllFlexes ? availableSize / sumOfAllFlexes : 0;
      }
      if (size2) {
        result[index2] = size2;
      }
    });
    var lastValidFlexIndex = flexes.reduce(function(acc, flex, index2) {
      return flex ? index2 : acc;
    }, -1);
    flexes.forEach(function(flex, index2) {
      if (!flex) {
        return;
      }
      var flexSize = Math.round(flex * oneFlex);
      if (index2 === lastValidFlexIndex) {
        flexSize = availableSize;
      }
      if (minWidths[index2] != null) {
        flexSize = Math.max(flexSize, minWidths[index2] || 0);
      }
      if (maxWidths[index2] != null) {
        flexSize = Math.min(flexSize, maxWidths[index2] || Infinity);
      }
      availableSize -= Math.max(flexSize, 0);
      result[index2] = flexSize;
    });
    return result;
  };
  computeFlexWidths.default = _default2;
  return computeFlexWidths;
}
var mapColumns = {};
var hasRequiredMapColumns;
function requireMapColumns() {
  if (hasRequiredMapColumns)
    return mapColumns;
  hasRequiredMapColumns = 1;
  Object.defineProperty(mapColumns, "__esModule", {
    value: true
  });
  mapColumns.default = void 0;
  var emptyObject = {};
  var _default2 = function _default3(columns) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, showWarnings = _ref2.showWarnings;
    return columns.reduce(function(acc, col) {
      if (col.id) {
        if (showWarnings && acc[col.id]) {
          console.error('Duplicate column with id "'.concat(col.id, '" found!'));
        }
        acc[col.id] = col;
      }
      if (col.name && col.name != col.id) {
        if (showWarnings && !col.id && acc[col.name]) {
          console.error('Duplicate column with name "'.concat(col.name, '" found!'));
        }
        if (!col.id) {
          acc[col.name] = col;
        }
      }
      if (typeof col.groupBy == "string" || col.groupByName) {
        var key = col.groupBy || col.groupByName;
        acc[key] = col;
      }
      return acc;
    }, {});
  };
  mapColumns.default = _default2;
  return mapColumns;
}
var defaultCheckColumnId = {};
var hasRequiredDefaultCheckColumnId;
function requireDefaultCheckColumnId() {
  if (hasRequiredDefaultCheckColumnId)
    return defaultCheckColumnId;
  hasRequiredDefaultCheckColumnId = 1;
  Object.defineProperty(defaultCheckColumnId, "__esModule", {
    value: true
  });
  defaultCheckColumnId.id = void 0;
  var id2 = "__checkbox-column";
  defaultCheckColumnId.id = id2;
  return defaultCheckColumnId;
}
var defaultRowExpandColumnId = {};
var hasRequiredDefaultRowExpandColumnId;
function requireDefaultRowExpandColumnId() {
  if (hasRequiredDefaultRowExpandColumnId)
    return defaultRowExpandColumnId;
  hasRequiredDefaultRowExpandColumnId = 1;
  Object.defineProperty(defaultRowExpandColumnId, "__esModule", {
    value: true
  });
  defaultRowExpandColumnId.id = void 0;
  var id2 = "__row-expand-column";
  defaultRowExpandColumnId.id = id2;
  return defaultRowExpandColumnId;
}
var defaultRowIndexColumnId = {};
var hasRequiredDefaultRowIndexColumnId;
function requireDefaultRowIndexColumnId() {
  if (hasRequiredDefaultRowIndexColumnId)
    return defaultRowIndexColumnId;
  hasRequiredDefaultRowIndexColumnId = 1;
  Object.defineProperty(defaultRowIndexColumnId, "__esModule", {
    value: true
  });
  defaultRowIndexColumnId.id = void 0;
  var id2 = "__row-index-column";
  defaultRowIndexColumnId.id = id2;
  return defaultRowIndexColumnId;
}
var defaultGroupColumnId = {};
var hasRequiredDefaultGroupColumnId;
function requireDefaultGroupColumnId() {
  if (hasRequiredDefaultGroupColumnId)
    return defaultGroupColumnId;
  hasRequiredDefaultGroupColumnId = 1;
  Object.defineProperty(defaultGroupColumnId, "__esModule", {
    value: true
  });
  defaultGroupColumnId.id = void 0;
  var id2 = "__group-column";
  defaultGroupColumnId.id = id2;
  return defaultGroupColumnId;
}
var setComputedColumnWidths = {};
var hasRequiredSetComputedColumnWidths;
function requireSetComputedColumnWidths() {
  if (hasRequiredSetComputedColumnWidths)
    return setComputedColumnWidths;
  hasRequiredSetComputedColumnWidths = 1;
  Object.defineProperty(setComputedColumnWidths, "__esModule", {
    value: true
  });
  setComputedColumnWidths.default = void 0;
  var emptyObject = Object.freeze ? Object.freeze({}) : {};
  var DEFAULT_WIDTH = 150;
  var computeColumnWidths = function computeColumnWidths2(col, _ref2) {
    var columnMinWidth = _ref2.columnMinWidth, columnWidth = _ref2.columnWidth, columnMaxWidth = _ref2.columnMaxWidth, _ref$columnDefaultWid = _ref2.columnDefaultWidth, columnDefaultWidth = _ref$columnDefaultWid === void 0 ? DEFAULT_WIDTH : _ref$columnDefaultWid, _ref$columnSizes = _ref2.columnSizes, columnSizes = _ref$columnSizes === void 0 ? emptyObject : _ref$columnSizes, _ref$columnFlexes = _ref2.columnFlexes, columnFlexes = _ref$columnFlexes === void 0 ? emptyObject : _ref$columnFlexes;
    if (columnMinWidth && columnMaxWidth && columnMinWidth > columnMaxWidth) {
      var _ref22 = [columnMaxWidth, columnMinWidth];
      columnMinWidth = _ref22[0];
      columnMaxWidth = _ref22[1];
    }
    var computedDefaultWidth = col.defaultWidth;
    var computedWidth = col.width;
    var computedFlex = col.defaultFlex;
    var computedMinWidth = col.minWidth;
    var computedMaxWidth = col.maxWidth;
    if (col.defaultWidth == null && columnDefaultWidth != null) {
      computedDefaultWidth = columnDefaultWidth;
    }
    if (columnFlexes[col.id]) {
      computedFlex = columnFlexes[col.id];
    }
    if (col.flex) {
      computedFlex = col.flex;
    }
    if (!computedFlex && computedWidth === void 0 && columnSizes[col.id] !== void 0) {
      computedFlex = null;
      computedWidth = columnSizes[col.id];
    }
    if (!computedFlex) {
      computedFlex = null;
    }
    if (computedFlex != null && computedWidth == null && columnWidth != null) {
      computedWidth = columnWidth;
    }
    if (computedMinWidth == null && columnMinWidth != null) {
      computedMinWidth = columnMinWidth;
    }
    if (computedMaxWidth == null && columnMaxWidth != null) {
      computedMaxWidth = columnMaxWidth;
    }
    if (computedDefaultWidth != null && computedMinWidth != null && computedDefaultWidth < computedMinWidth) {
      computedDefaultWidth = computedMinWidth;
    }
    if (computedDefaultWidth != null && computedMaxWidth != null && computedDefaultWidth > computedMaxWidth) {
      computedDefaultWidth = computedMaxWidth;
    }
    if (computedWidth != null && computedMinWidth != null && computedWidth < computedMinWidth) {
      computedWidth = computedMinWidth;
    }
    if (computedWidth != null && computedMaxWidth != null && computedWidth > computedMaxWidth) {
      computedWidth = computedMaxWidth;
    }
    if (computedFlex == null) {
      computedWidth = computedWidth || computedDefaultWidth || computedMinWidth;
    }
    col.computedMinWidth = computedMinWidth;
    col.computedMaxWidth = computedMaxWidth;
    col.computedWidth = computedWidth;
    col.computedFlex = computedFlex;
    return col;
  };
  var _default2 = computeColumnWidths;
  setComputedColumnWidths.default = _default2;
  return setComputedColumnWidths;
}
var hasRequiredNormalizeColumns;
function requireNormalizeColumns() {
  if (hasRequiredNormalizeColumns)
    return normalizeColumns;
  hasRequiredNormalizeColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(normalizeColumns, "__esModule", {
    value: true
  });
  normalizeColumns.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _setColumnId = _interopRequireDefault2(requireSetColumnId());
  var _computeFlexWidths = _interopRequireDefault2(requireComputeFlexWidths());
  var _mapColumns = _interopRequireDefault2(requireMapColumns());
  var _defaultCheckColumnId = requireDefaultCheckColumnId();
  var _defaultRowExpandColumnId = requireDefaultRowExpandColumnId();
  var _defaultRowIndexColumnId = requireDefaultRowIndexColumnId();
  var _defaultGroupColumnId = requireDefaultGroupColumnId();
  var _defaultRowReorderColumnId = requireDefaultRowReorderColumnId();
  var _setComputedColumnWidths = _interopRequireDefault2(requireSetComputedColumnWidths());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var DEFAULT_COLUMN_PROPS = {
    isColumn: true,
    keepFlex: true
  };
  var defaultPivotGrandSummaryColumn = {
    sortable: false,
    draggable: false,
    filterable: false
  };
  var defaultPivotSummaryColumn = defaultPivotGrandSummaryColumn;
  var emptyArray2 = [];
  var emptyObject = Object.freeze ? Object.freeze({}) : {};
  var _default2 = function _default3(_ref2) {
    var _ref$generatedColumns = _ref2.generatedColumnsLength, generatedColumnsLength = _ref$generatedColumns === void 0 ? 0 : _ref$generatedColumns, columns = _ref2.columns, columnMinWidth = _ref2.columnMinWidth, columnMaxWidth = _ref2.columnMaxWidth, columnDefaultWidth = _ref2.columnDefaultWidth, columnWidth = _ref2.columnWidth, _ref$columnSizes = _ref2.columnSizes, columnSizes = _ref$columnSizes === void 0 ? emptyObject : _ref$columnSizes, _ref$columnVisibility = _ref2.columnVisibilityMap, columnVisibilityMap = _ref$columnVisibility === void 0 ? emptyObject : _ref$columnVisibility, _ref$columnFlexes = _ref2.columnFlexes, columnFlexes = _ref$columnFlexes === void 0 ? emptyObject : _ref$columnFlexes, _ref$lockedColumnsSta = _ref2.lockedColumnsState, lockedColumnsState = _ref$lockedColumnsSta === void 0 ? emptyObject : _ref$lockedColumnsSta, columnOrder = _ref2.columnOrder, computedPivotUniqueValuesPerColumn = _ref2.computedPivotUniqueValuesPerColumn, editable = _ref2.editable, pivot = _ref2.pivot, sortable = _ref2.sortable, filterable = _ref2.filterable, resizable = _ref2.resizable, pivotGrandSummaryColumn = _ref2.pivotGrandSummaryColumn, lockable = _ref2.lockable, checkboxColumn = _ref2.checkboxColumn, rowIndexColumn = _ref2.rowIndexColumn, filter3 = _ref2.filter;
    _ref2.rtl;
    var filterValueMap = _ref2.filterValueMap, sortInfo = _ref2.sortInfo, showPivotSummaryColumns = _ref2.showPivotSummaryColumns, _ref$availableWidth = _ref2.availableWidth, availableWidth = _ref$availableWidth === void 0 ? 0 : _ref$availableWidth, onRowReorder = _ref2.onRowReorder, rowReorderColumn = _ref2.rowReorderColumn, computedGroupColumn = _ref2.groupColumn;
    if (columnVisibilityMap) {
      columnVisibilityMap = _objectSpread2({}, columnVisibilityMap);
    }
    var groupColumnSummaryReducers = {};
    var pivotColumnSummaryReducers = {};
    var addSortInfo = function addSortInfo2(col) {
      col.computedSortable = (typeof col.sortable === "boolean" ? col.sortable : sortable) || false;
      col.computedSortInfo = null;
      if (col.computedSortable && sortInfo) {
        col.computedSortInfo = Array.isArray(sortInfo) ? sortInfo.filter(function(info) {
          return info.name === col.id || info.id === col.id || info.name === col.sortName;
        })[0] : sortInfo.name === col.id || sortInfo.id === col.id || sortInfo.name === col.sortName ? sortInfo : null;
      }
    };
    var addFilterValue = function addFilterValue2(col) {
      col.computedFilterable = (typeof col.filterable === "boolean" ? col.filterable : filterable) || void 0;
      col.computedFilterValue = null;
      if (col.computedFilterable && filterValueMap) {
        col.computedFilterValue = filterValueMap[col.id];
      }
      if (col.computedFilterable === void 0 && col.computedFilterValue) {
        col.computedFilterable = true;
      }
      col.computedFilterable = !!col.computedFilterable;
    };
    var hasLockedStart = false;
    var hasLockedEnd = false;
    var hasValueSetter = false;
    var rowExpandColumn;
    var setComputedColumnWidthsParam = {
      columnFlexes,
      columnSizes,
      columnDefaultWidth,
      columnWidth,
      columnMinWidth,
      columnMaxWidth
    };
    var hasDedicatedGroupColumn = false;
    var normalizedColumns = columns.map(function(column2) {
      return _objectSpread2(_objectSpread2({}, DEFAULT_COLUMN_PROPS), column2);
    }).map(_setColumnId.default).map(function(col, i) {
      col.computedInitialIndex = i - generatedColumnsLength;
      (0, _setComputedColumnWidths.default)(col, setComputedColumnWidthsParam);
      col.computedVisible = col.visible !== void 0 ? !!col.visible : columnVisibilityMap[col.id] === false ? false : true;
      if (col.computedVisible && pivot && !col.groupSummaryReducer && col.id !== _defaultGroupColumnId.id) {
        col.computedVisible = false;
      }
      if (col.computedVisible === false) {
        columnVisibilityMap[col.id] = false;
      } else {
        delete columnVisibilityMap[col.id];
        if (col.id === _defaultGroupColumnId.id) {
          hasDedicatedGroupColumn = true;
        }
      }
      col.computedHeader = col.header === void 0 ? col.name || "" : col.header;
      col.computedLocked = col.locked;
      if (col.computedLocked === void 0 && lockedColumnsState[col.id] !== void 0) {
        col.computedLocked = lockedColumnsState[col.id];
      }
      if (col.computedLocked === void 0 && col.defaultLocked !== void 0) {
        col.computedLocked = col.defaultLocked;
      }
      if (!filter3 || filter3(col)) {
        if (col.computedLocked === true || col.computedLocked === "start") {
          col.computedLocked = "start";
          hasLockedStart = true;
        }
        if (col.computedLocked === "end") {
          hasLockedEnd = true;
        }
      }
      col.computedLocked = col.computedLocked || false;
      if (col.id === _defaultRowExpandColumnId.id) {
        rowExpandColumn = col;
      }
      if (col.enableColumnHover != null) {
        col.computedEnableColumnHover = col.enableColumnHover;
        delete col.enableColumnHover;
      }
      if (col.setValue) {
        hasValueSetter = true;
      }
      return col;
    });
    if (hasLockedStart) {
      if (rowExpandColumn != null) {
        rowExpandColumn.computedLocked = "start";
      }
      if (checkboxColumn) {
        var normalizedCheckboxColumn = normalizedColumns.filter(function(c2) {
          return c2.checkboxColumn && c2.id == _defaultCheckColumnId.id;
        })[0];
        if (normalizedCheckboxColumn) {
          normalizedCheckboxColumn.computedLocked = "start";
        }
      }
      if (hasDedicatedGroupColumn) {
        var normalizedGroupColumn = normalizedColumns.filter(function(c2) {
          return c2.groupColumn && c2.id == _defaultGroupColumnId.id;
        })[0];
        if (normalizedGroupColumn) {
          normalizedGroupColumn.computedLocked = "start";
        }
      }
      var autoLockColumns = normalizedColumns.filter(function(c2) {
        return !!c2.autoLock;
      });
      if (autoLockColumns.length) {
        autoLockColumns.forEach(function(c2) {
          c2.computedLocked = "start";
        });
      }
      if (rowReorderColumn || onRowReorder && (typeof onRowReorder === "function" || typeof onRowReorder === "boolean")) {
        var normalizedRowReorderColumn = normalizedColumns.filter(function(c2) {
          return c2.id === _defaultRowReorderColumnId.id;
        })[0];
        if (normalizedRowReorderColumn) {
          normalizedRowReorderColumn.computedLocked = "start";
        }
      }
    }
    var computedEnableRowspan = false;
    normalizedColumns.forEach(function(col, index2) {
      col.computedAbsoluteIndex = index2;
      addSortInfo(col);
      addFilterValue(col);
      if (typeof col.rowspan === "function") {
        computedEnableRowspan = true;
      }
      col.computedResizable = (typeof col.resizable !== "boolean" ? resizable : col.resizable) || false;
      col.computedLockable = (typeof col.lockable !== "boolean" ? lockable : col.lockable) || false;
    });
    var columnsMap = (0, _mapColumns.default)(normalizedColumns, {
      showWarnings: true
    });
    var visibleColumns = normalizedColumns.filter(function(c2) {
      return c2.computedVisible !== false;
    });
    if (columnOrder) {
      if (checkboxColumn) {
        var checkboxColumnIndex = columnOrder.indexOf(_defaultCheckColumnId.id);
        if (checkboxColumnIndex == -1) {
          columnOrder = [_defaultCheckColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder));
        }
      }
    }
    if (rowExpandColumn) {
      if (!columnOrder) {
        columnOrder = visibleColumns.map(function(c2) {
          return c2.id;
        });
      }
      var rowExpandColumnIndex = columnOrder.indexOf(_defaultRowExpandColumnId.id);
      if (rowExpandColumnIndex !== 0) {
        columnOrder = [_defaultRowExpandColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder.filter(function(id2) {
          return id2 != _defaultRowExpandColumnId.id;
        })));
      }
    }
    if (rowReorderColumn || onRowReorder && (typeof onRowReorder === "function" || typeof onRowReorder === "boolean")) {
      if (!columnOrder) {
        columnOrder = visibleColumns.map(function(c2) {
          return c2.id;
        });
      }
      var rowReorderColumnIndex = columnOrder.indexOf(_defaultRowReorderColumnId.id);
      if (rowReorderColumnIndex !== 0) {
        columnOrder = [_defaultRowReorderColumnId.id].concat((0, _toConsumableArray2.default)(columnOrder.filter(function(id2) {
          return id2 !== _defaultRowReorderColumnId.id;
        })));
      }
    }
    if (rowIndexColumn) {
      if (!columnOrder) {
        columnOrder = visibleColumns.map(function(c2) {
          return c2.id;
        });
      }
      var rowIndexColumnIndex = columnOrder.indexOf(_defaultRowIndexColumnId.id);
      if (rowIndexColumnIndex != 0) {
        columnOrder = [].concat((0, _toConsumableArray2.default)(columnOrder.filter(function(id2) {
          var col = columnsMap[id2];
          return col && col.groupSpacerColumn;
        })), [_defaultRowIndexColumnId.id], (0, _toConsumableArray2.default)(columnOrder.filter(function(id2) {
          var col = columnsMap[id2];
          if (!col) {
            return false;
          }
          return id2 != _defaultRowIndexColumnId.id && !col.groupSpacerColumn;
        })));
      }
    }
    if (generatedColumnsLength) {
      if (!columnOrder) {
        columnOrder = visibleColumns.map(function(c2) {
          return c2.id;
        });
      }
      var generatedColumns = visibleColumns.filter(function(c2) {
        return c2.groupSpacerColumn;
      });
      var generatedColumnIds = generatedColumns.reduce(function(acc, col) {
        acc[col.id] = true;
        return acc;
      }, {});
      columnOrder = [].concat((0, _toConsumableArray2.default)(generatedColumns.map(function(c2) {
        return c2.id;
      })), (0, _toConsumableArray2.default)(columnOrder.filter(function(id2) {
        return !generatedColumnIds[id2];
      })));
    }
    if (columnOrder) {
      var groupSpacerColumns = visibleColumns.filter(function(col) {
        return col.groupSpacerColumn;
      });
      var _checkboxColumn = visibleColumns.filter(function(col) {
        return col.checkboxColumn;
      });
      var groupColumns = visibleColumns.filter(function(col) {
        return col.groupColumn && !col.groupSpacerColumn;
      });
      var ungroupColumns = visibleColumns.filter(function(col) {
        if (computedGroupColumn) {
          return !col.groupColumn && !col.groupSpacerColumn && !col.checkboxColumn;
        } else {
          return !col.groupColumn && !col.groupSpacerColumn;
        }
      });
      visibleColumns = columnOrder.map(function(colId) {
        return ungroupColumns.find(function(col) {
          return col.id == colId;
        });
      }).filter(function(x2) {
        return !!x2;
      });
      if (computedGroupColumn) {
        visibleColumns = [].concat((0, _toConsumableArray2.default)(_checkboxColumn), (0, _toConsumableArray2.default)(groupSpacerColumns), (0, _toConsumableArray2.default)(groupColumns), (0, _toConsumableArray2.default)(visibleColumns));
      } else {
        visibleColumns = [].concat((0, _toConsumableArray2.default)(groupSpacerColumns), (0, _toConsumableArray2.default)(groupColumns), (0, _toConsumableArray2.default)(visibleColumns));
      }
    }
    if (typeof filter3 == "function") {
      visibleColumns = visibleColumns.filter(filter3);
    }
    normalizedColumns.forEach(function(col) {
      if (col.groupSummaryReducer) {
        groupColumnSummaryReducers[col.id] = col.groupSummaryReducer;
        if (!col.groupSummaryReducer.reducer && col.groupSummaryReducer.reduce) {
          groupColumnSummaryReducers[col.id].reducer = col.groupSummaryReducer.reduce;
        }
      }
    });
    var groupColumn = visibleColumns.filter(function(col) {
      return !!col.groupColumn;
    })[0];
    if (pivot && computedPivotUniqueValuesPerColumn && groupColumn) {
      var aggregateColumns = visibleColumns.filter(function(col) {
        return !!col.groupSummaryReducer;
      });
      var newColumns = [groupColumn].concat((0, _toConsumableArray2.default)(getPivotColumns(aggregateColumns, computedPivotUniqueValuesPerColumn, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns))).map(function(col) {
        (0, _setComputedColumnWidths.default)(col, setComputedColumnWidthsParam);
        col.computedResizable = (typeof col.resizable !== "boolean" ? resizable : col.resizable) || false;
        return col;
      });
      visibleColumns = newColumns;
      columnsMap = _objectSpread2(_objectSpread2({}, columnsMap), (0, _mapColumns.default)(newColumns, {
        showWarnings: true
      }));
    }
    var flexes = [];
    var maxWidths = [];
    var minWidths = [];
    var minColumnsSize = 0;
    var availableWidthForFlex = availableWidth;
    visibleColumns.forEach(function(col) {
      if (col.computedFlex == null) {
        availableWidthForFlex -= col.computedWidth || col.computedDefaultWidth || col.computedMinWidth || 0;
      }
      flexes.push(col.computedFlex || 0);
      maxWidths.push(col.computedMaxWidth || null);
      minWidths.push(col.computedMinWidth || null);
    });
    availableWidthForFlex = Math.max(availableWidthForFlex, 0);
    var flexWidths = (0, _computeFlexWidths.default)({
      flexes,
      availableSize: availableWidthForFlex,
      maxWidths,
      minWidths
    });
    var totalFlexColumnCount = 0;
    visibleColumns.forEach(function(col, index2) {
      if (col.computedFlex != null) {
        col.computedWidth = flexWidths[index2] || 0;
        totalFlexColumnCount++;
        minColumnsSize += col.minWidth || 0;
      } else {
        minColumnsSize += col.computedWidth || 0;
      }
    });
    var unlockedColumns = visibleColumns;
    var lockedStartColumns = [];
    var lockedEndColumns = [];
    if (hasLockedStart || hasLockedEnd) {
      unlockedColumns = groupColumn && hasLockedStart ? visibleColumns.filter(function(col) {
        return !col.computedLocked && !col.groupColumn;
      }) : visibleColumns.filter(function(col) {
        return !col.computedLocked;
      });
      lockedStartColumns = hasLockedStart ? visibleColumns.filter(function(col) {
        return col.computedLocked === "start" || col.groupColumn;
      }) : emptyArray2;
      lockedEndColumns = hasLockedEnd ? groupColumn && hasLockedStart ? visibleColumns.filter(function(col) {
        return col.computedLocked === "end" && !col.groupColumn;
      }) : visibleColumns.filter(function(col) {
        return col.computedLocked === "end";
      }) : emptyArray2;
      visibleColumns = [].concat((0, _toConsumableArray2.default)(lockedStartColumns), (0, _toConsumableArray2.default)(unlockedColumns), (0, _toConsumableArray2.default)(lockedEndColumns));
    }
    var visibleColumnsMap = (0, _mapColumns.default)(visibleColumns, {
      showWarnings: true
    });
    var sumPrefixWidth = 0;
    var totalLockedStartWidth = 0;
    var totalLockedEndWidth = 0;
    var totalUnlockedWidth = 0;
    var columnWidthPrefixSums = [];
    var computedHasColSpan = false;
    visibleColumns.forEach(function(col, index2, arr) {
      col.computedVisibleIndex = index2;
      col.computedVisibleCount = arr.length;
      if (col.colspan) {
        computedHasColSpan = true;
      }
      col.computedOffset = sumPrefixWidth;
      var computedLocked = col.computedLocked, computedWidth = col.computedWidth;
      if (computedLocked === "start") {
        totalLockedStartWidth += computedWidth || 0;
      } else if (computedLocked === "end") {
        totalLockedEndWidth += computedWidth || 0;
      } else {
        totalUnlockedWidth += computedWidth || 0;
      }
      addSortInfo(col);
      if (editable && col.editable === void 0) {
        col.computedEditable = true;
      }
      if (col.editable !== void 0) {
        col.computedEditable = col.editable;
      }
      columnWidthPrefixSums.push(col.computedOffset || 0);
      sumPrefixWidth += computedWidth || 0;
    });
    if (pivot) {
      pivot.forEach(function(pivotCol) {
        if (typeof pivotCol !== "string" && pivotCol.summaryReducer) {
          pivotColumnSummaryReducers[pivotCol.name] = pivotCol.summaryReducer;
        }
      });
    }
    return {
      pivotColumnSummaryReducers,
      minColumnsSize,
      totalFlexColumnCount,
      groupColumnSummaryReducers: Object.keys(groupColumnSummaryReducers).length ? groupColumnSummaryReducers : void 0,
      totalComputedWidth: sumPrefixWidth,
      totalLockedStartWidth,
      totalLockedEndWidth,
      totalUnlockedWidth,
      lockedStartColumns,
      lockedEndColumns,
      unlockedColumns,
      columnWidthPrefixSums,
      columnVisibilityMap,
      computedEnableRowspan,
      computedHasColSpan,
      visibleColumns,
      allColumns: normalizedColumns,
      columnsMap,
      visibleColumnsMap,
      hasValueSetter
    };
  };
  normalizeColumns.default = _default2;
  var getPivotGroupColumnForPath = function getPivotGroupColumnForPath2(columnConfig, _ref2) {
    var pivot = _ref2.pivot, pivotGrandSummaryColumn = _ref2.pivotGrandSummaryColumn;
    var pivotMap = pivot.reduce(function(acc, p2) {
      if (!p2.summaryReducer) {
        return acc;
      }
      var col2 = p2 ? p2.summaryColumn || {} : {};
      acc[p2.name || p2] = col2;
      return acc;
    }, {});
    if (pivotGrandSummaryColumn === true) {
      pivotGrandSummaryColumn = {};
    }
    if (pivotGrandSummaryColumn) {
      pivotGrandSummaryColumn.pivotGrandSummaryColumn = true;
      pivotGrandSummaryColumn = _objectSpread2(_objectSpread2({}, defaultPivotGrandSummaryColumn), pivotGrandSummaryColumn);
    }
    columnConfig = _objectSpread2(_objectSpread2({}, defaultPivotSummaryColumn), columnConfig);
    var _columnConfig = columnConfig, pivotSummaryPath = _columnConfig.pivotSummaryPath;
    var lastItem = pivotSummaryPath[pivotSummaryPath.length - 1];
    var name = lastItem ? lastItem.field : null;
    var col = !lastItem ? pivotGrandSummaryColumn : pivotMap[name] || {};
    var result = columnConfig;
    if (lastItem) {
      columnConfig.header = "Summary for ".concat(lastItem.field, " ").concat(lastItem.value);
    }
    if (!pivotGrandSummaryColumn && !pivotMap[name]) {
      return null;
    }
    if (col) {
      if (typeof col === "function") {
        result = _objectSpread2(_objectSpread2({}, columnConfig), col(columnConfig));
      } else {
        result = _objectSpread2(_objectSpread2({}, columnConfig), col);
      }
    }
    return result;
  };
  var getPivotColumns = function getPivotColumns2(aggregateColumns, uniqueValuesRoot, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns) {
    var parentGroups = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : [];
    var pivotColumnPath = arguments.length > 7 ? arguments[7] : void 0;
    var newColumns = [];
    var field = uniqueValuesRoot.field, values = uniqueValuesRoot.values;
    var parentGroup = parentGroups[parentGroups.length - 1];
    if (field && values) {
      Object.keys(values).forEach(function(value) {
        var groupId = "".concat(parentGroup ? parentGroup.name + "_" : "").concat(field, ":").concat(value);
        var group = {
          name: groupId,
          header: "".concat(field, "-").concat(value),
          pivotPath: [{
            value,
            field
          }]
        };
        if (parentGroup) {
          group.group = parentGroup.name;
          group.pivotPath = [].concat((0, _toConsumableArray2.default)(parentGroup.pivotPath || []), (0, _toConsumableArray2.default)(group.pivotPath));
        }
        var nextRoot = values[value];
        pivotColumnPath = pivotColumnPath || [];
        newColumns.push.apply(newColumns, (0, _toConsumableArray2.default)(getPivotColumns2(aggregateColumns, nextRoot, columnSizes, pivot, pivotGrandSummaryColumn, showPivotSummaryColumns, [].concat((0, _toConsumableArray2.default)(parentGroups), [{
          name: groupId,
          pivotPath: group.pivotPath,
          depth: parentGroup ? parentGroup.depth + 1 : 0
        }]), [].concat((0, _toConsumableArray2.default)(pivotColumnPath), [value]))));
        if (!parentGroup && showPivotSummaryColumns) {
          var summaryCol2 = getPivotGroupColumnForPath({
            header: "Summary for ".concat(group.header),
            id: "__summary_".concat(group.name),
            pivotSummaryColumn: true,
            pivotSummaryPath: group.pivotPath
          }, {
            pivot
          });
          if (summaryCol2) {
            newColumns.push(summaryCol2);
          }
        }
      });
    } else {
      newColumns.push.apply(newColumns, (0, _toConsumableArray2.default)(aggregateColumns.map(function(col) {
        var result = _objectSpread2(_objectSpread2({}, col), {}, {
          sortable: false,
          showInContextMenu: false,
          draggable: false,
          pivotColumn: true,
          pivotColumnPath: [].concat((0, _toConsumableArray2.default)(pivotColumnPath || []), [col.pivotName || col.name || col.id]),
          id: "".concat(parentGroup.name, "-").concat(col.id),
          group: parentGroup.name
        });
        if (columnSizes[result.id]) {
          result.computedWidth = columnSizes[result.id];
        }
        return result;
      })));
      var prevParentGroup = parentGroups[parentGroups.length - 2];
      if (showPivotSummaryColumns && prevParentGroup) {
        var summaryCol = getPivotGroupColumnForPath({
          group: prevParentGroup ? prevParentGroup.name : void 0,
          header: "Summary for ".concat(parentGroup.name, " - ").concat(prevParentGroup ? prevParentGroup.name : ""),
          id: "__summary__".concat(parentGroup.name),
          pivotSummaryPath: parentGroup.pivotPath,
          pivotSummaryColumn: true
        }, {
          pivot
        });
        if (summaryCol) {
          newColumns.push(summaryCol);
        }
      }
    }
    if (!parentGroup && pivotGrandSummaryColumn && showPivotSummaryColumns) {
      newColumns.push(getPivotGroupColumnForPath({
        header: "Grand summary",
        id: "__summary__grand",
        pivotSummaryColumn: true,
        pivotSummaryPath: []
      }, {
        pivot,
        pivotGrandSummaryColumn
      }));
    }
    return newColumns;
  };
  return normalizeColumns;
}
var useBuildColumns = {};
var maybeAddCheckboxColumn = {};
var defaultCheckColumn = {};
var renderCheckbox = {};
var hasRequiredRenderCheckbox;
function requireRenderCheckbox() {
  if (hasRequiredRenderCheckbox)
    return renderCheckbox;
  hasRequiredRenderCheckbox = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderCheckbox, "__esModule", {
    value: true
  });
  renderCheckbox.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _react = _interopRequireDefault2(reactExports);
  var _CheckBox = _interopRequireDefault2(requireCheckBox());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var stopPropagation = function stopPropagation2(e2) {
    e2.stopPropagation();
  };
  var emptyObject = {};
  var _default2 = function _default3(cellProps) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyObject, headerProps = _ref2.headerProps;
    var selectAll = cellProps.selectAll, deselectAll = cellProps.deselectAll, selectedCount = cellProps.selectedCount, unselectedCount = cellProps.unselectedCount, totalCount = cellProps.totalCount, headerCell = cellProps.headerCell, empty2 = cellProps.empty, rowIndex = cellProps.rowIndex, rowSelected = cellProps.rowSelected, setRowSelected = cellProps.setRowSelected, renderCheckbox2 = cellProps.renderCheckbox, hideIntermediateState = cellProps.hideIntermediateState;
    if (empty2 && !renderCheckbox2) {
      return null;
    }
    var checkboxProps = {
      disabled: empty2,
      tabIndex: cellProps.checkboxTabIndex,
      onClick: stopPropagation,
      supportIndeterminate: false,
      theme: cellProps.theme,
      className: "InovuaReactDataGrid__checkbox"
    };
    if (headerCell) {
      var selected = headerProps.selected, unselected = headerProps.unselected;
      checkboxProps.supportIndeterminate = !hideIntermediateState;
      var checked;
      if (selected === true) {
        checked = unselected && (0, _typeof2.default)(unselected) == "object" && Object.keys(unselected).length != 0 ? checkboxProps.supportIndeterminate ? null : false : true;
      } else {
        checked = selectedCount == 0 || !totalCount ? false : totalCount <= selectedCount && unselectedCount === 0 ? true : checkboxProps.supportIndeterminate ? null : false;
      }
      checkboxProps.checked = checked;
      checkboxProps.onChange = checked === false ? selectAll : deselectAll;
    } else {
      checkboxProps.onChange = setRowSelected ? setRowSelected.bind(null, rowIndex) : null;
      checkboxProps.checked = rowSelected;
    }
    if (renderCheckbox2) {
      if (checkboxProps.checked === null && checkboxProps.supportIndeterminate) {
        checkboxProps.isIndeterminate = true;
      }
      var result = renderCheckbox2(checkboxProps, cellProps);
      if (result !== void 0) {
        return result;
      }
    }
    delete checkboxProps.isIndeterminate;
    return _react.default.createElement(_CheckBox.default, _objectSpread2({}, checkboxProps));
  };
  renderCheckbox.default = _default2;
  return renderCheckbox;
}
var hasRequiredDefaultCheckColumn;
function requireDefaultCheckColumn() {
  if (hasRequiredDefaultCheckColumn)
    return defaultCheckColumn;
  hasRequiredDefaultCheckColumn = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "checkboxColumnId", {
      enumerable: true,
      get: function get2() {
        return _defaultCheckColumnId.id;
      }
    });
    exports.default = void 0;
    var _renderCheckbox = _interopRequireDefault2(requireRenderCheckbox());
    var _defaultCheckColumnId = requireDefaultCheckColumnId();
    var _default2 = {
      id: _defaultCheckColumnId.id,
      checkboxColumn: true,
      autoLock: true,
      cellSelectable: false,
      headerAlign: "center",
      textAlign: "center",
      render: function render(_ref2) {
        var cellProps = _ref2.cellProps;
        return (0, _renderCheckbox.default)(cellProps);
      },
      header: _renderCheckbox.default,
      showColumnMenuSortOptions: false,
      showColumnMenuGroupOptions: false,
      showColumnMenuTool: false,
      showInContextMenu: false,
      sortable: false,
      editable: false,
      draggable: false,
      groupBy: false,
      checkboxTabIndex: null,
      defaultWidth: 40,
      minWidth: 40,
      isCheckboxColumn: true
    };
    exports.default = _default2;
  })(defaultCheckColumn);
  return defaultCheckColumn;
}
var hasRequiredMaybeAddCheckboxColumn;
function requireMaybeAddCheckboxColumn() {
  if (hasRequiredMaybeAddCheckboxColumn)
    return maybeAddCheckboxColumn;
  hasRequiredMaybeAddCheckboxColumn = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(maybeAddCheckboxColumn, "__esModule", {
    value: true
  });
  maybeAddCheckboxColumn.default = _default2;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _defaultCheckColumn = _interopRequireDefault2(requireDefaultCheckColumn());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _default2(columns, props2) {
    var checkboxColumn = props2.checkboxColumn;
    if (checkboxColumn) {
      var checkCol = _objectSpread2(_objectSpread2(_objectSpread2({}, _defaultCheckColumn.default), checkboxColumn === true ? null : checkboxColumn), {}, {
        name: null,
        id: _defaultCheckColumn.default.id
      });
      if (checkCol.visible === false) {
        checkCol.visible = true;
      }
      if (columns[0] && columns[0].group && props2.groups && props2.groups.length) {
        delete checkCol.nextBorderLeft;
      }
      columns = [checkCol].concat(columns);
    }
    return columns;
  }
  return maybeAddCheckboxColumn;
}
var hasRequiredUseBuildColumns;
function requireUseBuildColumns() {
  if (hasRequiredUseBuildColumns)
    return useBuildColumns;
  hasRequiredUseBuildColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useBuildColumns, "__esModule", {
    value: true
  });
  useBuildColumns.default = _default2;
  var _maybeAddCheckboxColumn = _interopRequireDefault2(requireMaybeAddCheckboxColumn());
  function _default2(columns, props2) {
    if (props2.maybeAddColumns) {
      columns = props2.maybeAddColumns(columns, props2);
    }
    columns = (0, _maybeAddCheckboxColumn.default)(columns, props2);
    return columns;
  }
  return useBuildColumns;
}
var useMemoWithObject = {};
var hasRequiredUseMemoWithObject;
function requireUseMemoWithObject() {
  if (hasRequiredUseMemoWithObject)
    return useMemoWithObject;
  hasRequiredUseMemoWithObject = 1;
  Object.defineProperty(useMemoWithObject, "__esModule", {
    value: true
  });
  useMemoWithObject.default = void 0;
  var _react = reactExports;
  var _default2 = function _default3(fn, deps, equalityCheck) {
    var refId = (0, _react.useRef)(Number.MIN_SAFE_INTEGER);
    var depsRef = (0, _react.useRef)(deps);
    var prevDeps = depsRef.current;
    if (!equalityCheck(deps, prevDeps)) {
      refId.current++;
    }
    depsRef.current = deps;
    return (0, _react.useMemo)(fn, [refId.current]);
  };
  useMemoWithObject.default = _default2;
  return useMemoWithObject;
}
var hasRequiredUseColumnInfo;
function requireUseColumnInfo() {
  if (hasRequiredUseColumnInfo)
    return useColumnInfo;
  hasRequiredUseColumnInfo = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useColumnInfo, "__esModule", {
    value: true
  });
  useColumnInfo.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _2 = _interopRequireDefault2(requireNormalizeColumns());
  var _shallowequal = requireShallowequal$1();
  var _useBuildColumns = _interopRequireDefault2(requireUseBuildColumns());
  var _useMemoWithObject = _interopRequireDefault2(requireUseMemoWithObject());
  var includeAll = function includeAll2() {
    return true;
  };
  var useGroupByColumns = function useGroupByColumns2(args) {
    var generatedColumnsLength = 0;
    var columns = args.columns;
    var groupBy = args.groupBy, groupColumn = args.groupColumn, filter3 = args.filter, groupForGroupColumns = args.groupForGroupColumns, checkboxColumn = args.checkboxColumn, lockedColumnsState = args.lockedColumnsState, groupNestingSize = args.groupNestingSize, inTransition = args.inTransition;
    if (groupBy && groupBy.length && !groupColumn) {
      var lockedStartCount = 0;
      var groupColumnCount = 0;
      columns.filter(filter3 || includeAll).forEach(function(col) {
        if (col.groupSpacerColumn) {
          groupColumnCount++;
        }
        var locked = col.locked === void 0 ? col.defaultLocked : col.locked;
        var colInLocked = lockedColumnsState[col.id] || lockedColumnsState[col.name];
        if (colInLocked !== void 0) {
          locked = colInLocked;
        }
        if (locked === "start" || locked === true) {
          lockedStartCount++;
        }
      });
      if (lockedStartCount && checkboxColumn) {
        lockedStartCount++;
      }
      var generatedColumns = (0, _toConsumableArray2.default)(Array(groupBy.length - groupColumnCount)).map(function(_, i) {
        return {
          name: "__col_generated-groupBy-".concat(groupColumnCount + i),
          header: null,
          inTransition,
          visibilityTransitionDuration: !!inTransition,
          groupSpacerColumn: true,
          group: groupForGroupColumns,
          locked: !!lockedStartCount,
          defaultWidth: groupNestingSize,
          width: groupNestingSize,
          minWidth: groupNestingSize,
          maxWidth: groupNestingSize,
          showInContextMenu: false,
          cellSelectable: false,
          draggable: false,
          resizable: false,
          sortable: false
        };
      });
      generatedColumnsLength = generatedColumns.length;
      columns = generatedColumnsLength ? [].concat((0, _toConsumableArray2.default)(generatedColumns), (0, _toConsumableArray2.default)(columns)) : columns;
    }
    return {
      columns,
      generatedColumnsLength
    };
  };
  var useColumnInfo$1 = function useColumnInfo2(params) {
    return (0, _useMemoWithObject.default)(function() {
      var columns = params.columns, columnMinWidth = params.columnMinWidth, columnMaxWidth = params.columnMaxWidth, columnDefaultWidth = params.columnDefaultWidth, columnWidth = params.columnWidth, groupNestingSize = params.groupNestingSize, columnOrder = params.columnOrder, onRowReorder = params.onRowReorder, columnVisibilityMap = params.columnVisibilityMap, columnSizes = params.columnSizes, columnFlexes = params.columnFlexes, _params$lockedColumns = params.lockedColumnsState, lockedColumnsState = _params$lockedColumns === void 0 ? {} : _params$lockedColumns, groupBy = params.groupBy, maybeAddColumns = params.maybeAddColumns, editable = params.editable, computedPivotUniqueValuesPerColumn = params.computedPivotUniqueValuesPerColumn, checkboxColumn = params.checkboxColumn, rowIndexColumn = params.rowIndexColumn, groupColumn = params.groupColumn, pivot = params.pivot, groupForGroupColumns = params.groupForGroupColumns, inTransition = params.inTransition, rtl = params.rtl, hideGroupByColumns = params.hideGroupByColumns, availableWidth = params.availableWidth, sortInfo = params.sortInfo, filterValueMap = params.filterValueMap, sortable = params.sortable, filterable = params.filterable, resizable = params.resizable, pivotGrandSummaryColumn = params.pivotGrandSummaryColumn, lockable = params.lockable, groups = params.groups, enableRowExpand = params.enableRowExpand, showPivotSummaryColumns = params.showPivotSummaryColumns, expandedRows = params.expandedRows, defaultExpandedRows = params.defaultExpandedRows, renderRowDetails = params.renderRowDetails, renderDetailsGrid = params.renderDetailsGrid, rowExpandColumn = params.rowExpandColumn, rowReorderColumn = params.rowReorderColumn, renderRowDetailsExpandIcon = params.renderRowDetailsExpandIcon, renderRowDetailsCollapsedIcon = params.renderRowDetailsCollapsedIcon;
      if (pivot) {
        groupColumn = groupColumn || true;
      }
      columns = (0, _useBuildColumns.default)(columns, {
        groups,
        checkboxColumn,
        groupBy,
        groupColumn,
        rowIndexColumn,
        enableRowExpand,
        expandedRows,
        maybeAddColumns,
        defaultExpandedRows,
        renderRowDetails,
        renderDetailsGrid,
        rowExpandColumn,
        onRowReorder,
        rowReorderColumn,
        renderRowDetailsExpandIcon,
        renderRowDetailsCollapsedIcon
      });
      var filter3 = !hideGroupByColumns || !groupBy || !groupBy.length ? null : function(col) {
        return groupBy.indexOf(col.id || col.name) == -1;
      };
      var generatedColumnsLength;
      var res = useGroupByColumns({
        groupBy,
        groupColumn,
        columns,
        filter: filter3,
        groupForGroupColumns,
        checkboxColumn,
        lockedColumnsState,
        groupNestingSize,
        inTransition
      });
      columns = res.columns;
      generatedColumnsLength = res.generatedColumnsLength;
      return (0, _2.default)({
        pivotGrandSummaryColumn,
        generatedColumnsLength,
        columns,
        columnMinWidth,
        columnMaxWidth,
        columnDefaultWidth,
        columnWidth,
        columnSizes,
        columnFlexes,
        columnOrder,
        showPivotSummaryColumns,
        computedPivotUniqueValuesPerColumn,
        rtl,
        filterValueMap,
        pivot,
        checkboxColumn,
        rowIndexColumn,
        columnVisibilityMap,
        lockedColumnsState,
        sortable,
        filterable,
        resizable,
        lockable,
        filter: filter3,
        sortInfo,
        editable,
        availableWidth,
        onRowReorder,
        rowReorderColumn,
        groupColumn
      });
    }, params, function(a, b2) {
      var _equalReturnKey = (0, _shallowequal.equalReturnKey)(a, b2), result = _equalReturnKey.result;
      _equalReturnKey.key;
      return result;
    });
  };
  var _default2 = useColumnInfo$1;
  useColumnInfo.default = _default2;
  return useColumnInfo;
}
var getColumnRenderCount = {};
var hasRequiredGetColumnRenderCount;
function requireGetColumnRenderCount() {
  if (hasRequiredGetColumnRenderCount)
    return getColumnRenderCount;
  hasRequiredGetColumnRenderCount = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getColumnRenderCount, "__esModule", {
    value: true
  });
  getColumnRenderCount.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _default2 = function _default3(_ref2) {
    var visibleColumns = _ref2.visibleColumns, availableWidth = _ref2.availableWidth, lockedStartColumns = _ref2.lockedStartColumns, lockedEndColumns = _ref2.lockedEndColumns, virtualizeColumns = _ref2.virtualizeColumns;
    if (virtualizeColumns === false) {
      return visibleColumns.length;
    }
    var columns = (0, _toConsumableArray2.default)(visibleColumns).sort(function(a, b2) {
      return a.computedWidth - b2.computedWidth;
    });
    var widthSum = 0;
    var accumulateWidth = 0;
    var columnRenderCount = 0;
    columns.forEach(function(col) {
      widthSum += col.computedWidth;
      if (accumulateWidth <= availableWidth) {
        columnRenderCount++;
        accumulateWidth += col.computedWidth;
      }
    });
    columnRenderCount += 1;
    if (lockedStartColumns && lockedStartColumns.length) {
      columnRenderCount -= lockedStartColumns.length;
    }
    if (lockedEndColumns && lockedEndColumns.length) {
      columnRenderCount -= lockedEndColumns.length;
    }
    return columnRenderCount;
  };
  getColumnRenderCount.default = _default2;
  return getColumnRenderCount;
}
var batchUpdate = {};
var hasRequiredBatchUpdate;
function requireBatchUpdate() {
  if (hasRequiredBatchUpdate)
    return batchUpdate;
  hasRequiredBatchUpdate = 1;
  Object.defineProperty(batchUpdate, "__esModule", {
    value: true
  });
  batchUpdate.default = void 0;
  var _reactDom = reactDomExports;
  var _default2 = function _default3() {
    var commited = false;
    var fns = [];
    var queue = function queue2(fn) {
      fns.push(fn);
    };
    queue.commit = function(extraFn) {
      if (commited) {
        return Promise.resolve(true);
      }
      commited = true;
      return new Promise(function(resolve2) {
        (0, _reactDom.unstable_batchedUpdates)(function() {
          if (extraFn) {
            fns.push(extraFn);
          }
          fns.forEach(function(fn) {
            return fn();
          });
          fns = void 0;
          resolve2(true);
        });
      });
    };
    return queue;
  };
  batchUpdate.default = _default2;
  return batchUpdate;
}
var useNamedState = {};
var hasRequiredUseNamedState;
function requireUseNamedState() {
  if (hasRequiredUseNamedState)
    return useNamedState;
  hasRequiredUseNamedState = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useNamedState, "__esModule", {
    value: true
  });
  useNamedState.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var _default2 = function _default3(defaultValue, theContext, name) {
    var context2 = (0, _react.useContext)(theContext);
    if (context2.state[name] !== void 0) {
      defaultValue = context2.state[name];
    }
    var _useState = (0, _react.useState)(defaultValue), _useState2 = (0, _slicedToArray2.default)(_useState, 2), value = _useState2[0], setValue = _useState2[1];
    return [value, function(newValue) {
      if (typeof newValue === "function") {
        newValue = newValue(value);
      }
      context2.state[name] = newValue;
      setValue(newValue);
    }];
  };
  useNamedState.default = _default2;
  return useNamedState;
}
var hasRequiredUseColumns;
function requireUseColumns() {
  if (hasRequiredUseColumns)
    return useColumns;
  hasRequiredUseColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useColumns, "__esModule", {
    value: true
  });
  useColumns.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _columnResize = _interopRequireDefault2(requireColumnResize());
  var _useColumnInfo2 = _interopRequireDefault2(requireUseColumnInfo());
  var _getColumnRenderCount = _interopRequireDefault2(requireGetColumnRenderCount());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _useProperty3 = _interopRequireDefault2(requireUseProperty());
  var _useNamedState3 = _interopRequireDefault2(requireUseNamedState());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var setColumnSizes = function setColumnSizes2(newColumnSizes, columnFlexes, reservedViewportWidth, _ref2) {
    var columnSizes = _ref2.columnSizes, getColumnBy2 = _ref2.getColumnBy, setColumnFlexes = _ref2.setColumnFlexes, setColumnSizes3 = _ref2.setColumnSizes, onBatchColumnResize = _ref2.onBatchColumnResize, onColumnResize = _ref2.onColumnResize;
    var reservedViewportWidthWrapper = {
      reservedViewportWidth
    };
    var batchColumns = onBatchColumnResize ? [] : null;
    Object.keys(newColumnSizes).forEach(function(colId) {
      var size2 = newColumnSizes[colId];
      var column2 = getColumnBy2(colId, {
        initial: true
      });
      if (column2 != null) {
        if (batchColumns) {
          batchColumns.push({
            column: column2,
            width: size2,
            flex: void 0
          });
        }
        if (onColumnResize) {
          onColumnResize({
            column: column2,
            width: size2,
            flex: void 0
          }, reservedViewportWidthWrapper);
        }
      }
    });
    Object.keys(columnFlexes || {}).forEach(function(colId) {
      var size2 = columnFlexes[colId];
      var column2 = getColumnBy2(colId, {
        initial: true
      });
      if (column2) {
        if (batchColumns) {
          batchColumns.push({
            column: column2,
            size: size2,
            width: void 0,
            flex: size2
          });
        }
        if (onColumnResize) {
          onColumnResize({
            column: column2,
            size: size2,
            width: void 0,
            flex: size2
          }, reservedViewportWidthWrapper);
        }
      }
    });
    if (onBatchColumnResize) {
      onBatchColumnResize(batchColumns, reservedViewportWidthWrapper);
    }
    setColumnSizes3(Object.assign({}, columnSizes, newColumnSizes));
    setColumnFlexes(columnFlexes);
  };
  var getColumnBy = function getColumnBy2(propColumns, visibleColumns, columnsMap) {
    return function(idNameOrIndex, config2) {
      var column2;
      if ((0, _typeof2.default)(idNameOrIndex) === "object") {
        idNameOrIndex = idNameOrIndex.id == null ? idNameOrIndex.name : idNameOrIndex.id;
      }
      if (typeof idNameOrIndex === "number") {
        column2 = visibleColumns[idNameOrIndex];
      } else {
        column2 = columnsMap[idNameOrIndex];
      }
      if (!config2 || !config2.initial || column2 && column2.pivotColumn) {
        return column2;
      }
      return propColumns.filter(function(c2) {
        return c2.id === column2.id || c2.name === column2.id;
      })[0];
    };
  };
  var _default2 = function _default3(props2, _ref2, computedPropsRef) {
    var maxAvailableWidthForColumns = _ref2.maxAvailableWidthForColumns, lockedColumnsState = _ref2.lockedColumnsState, computedPivotUniqueValuesPerColumn = _ref2.computedPivotUniqueValuesPerColumn, computedGroups = _ref2.computedGroups, computedSortInfo = _ref2.computedSortInfo, computedFilterValueMap = _ref2.computedFilterValueMap, computedGroupBy = _ref2.computedGroupBy, computedFilterable = _ref2.computedFilterable, columnFlexes = _ref2.columnFlexes, columnSizes = _ref2.columnSizes, maybeAddColumns = _ref2.maybeAddColumns;
    var _useProperty = (0, _useProperty3.default)(props2, "columnOrder"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), columnOrder = _useProperty2[0], setColumnOrder = _useProperty2[1];
    var _useNamedState = (0, _useNamedState3.default)(props2.columns.reduce(function(acc, col) {
      if (col.defaultVisible === false || col.visible === false) {
        acc[col.id || col.name] = false;
      }
      return acc;
    }, {}), props2.context, "stateColumnVisibilityMap"), _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2), stateColumnVisibilityMap = _useNamedState2[0], setStateColumnVisibilityMap = _useNamedState2[1];
    var _useColumnInfo = (0, _useColumnInfo2.default)({
      showPivotSummaryColumns: props2.showPivotSummaryColumns,
      lockedColumnsState,
      columnOrder,
      columnFlexes,
      columnSizes,
      pivotGrandSummaryColumn: props2.pivotGrandSummaryColumn,
      columnVisibilityMap: stateColumnVisibilityMap,
      columnMinWidth: props2.columnMinWidth,
      columnMaxWidth: props2.columnMaxWidth,
      resizable: props2.resizable,
      pivot: props2.pivot,
      computedGroups,
      filterable: computedFilterable,
      filterValueMap: computedFilterValueMap,
      groupBy: computedGroupBy,
      groupColumn: props2.groupColumn,
      rowIndexColumn: props2.rowIndexColumn,
      checkboxColumn: props2.checkboxColumn,
      computedPivotUniqueValuesPerColumn,
      editable: props2.editable,
      sortable: props2.sortable,
      columns: props2.columns,
      rtl: props2.rtl,
      sortInfo: computedSortInfo,
      availableWidth: maxAvailableWidthForColumns,
      columnDefaultWidth: props2.columnDefaultWidth,
      inTransition: false,
      hideGroupByColumns: props2.hideGroupByColumns,
      groupNestingSize: props2.groupNestingSize,
      groupForGroupColumns: props2.groupForGroupColumns || "__",
      enableRowExpand: props2.enableRowExpand,
      expandedRows: props2.expandedRows,
      defaultExpandedRows: props2.defaultExpandedRows,
      renderRowDetails: props2.renderRowDetails,
      renderDetailsGrid: props2.renderDetailsGrid,
      maybeAddColumns,
      rowExpandColumn: props2.rowExpandColumn,
      onRowReorder: props2.onRowReorder,
      rowReorderColumn: props2.rowReorderColumn,
      renderRowDetailsExpandIcon: props2.renderRowDetailsExpandIcon,
      renderRowDetailsCollapsedIcon: props2.renderRowDetailsCollapsedIcon
    }), groupColumnSummaryReducers = _useColumnInfo.groupColumnSummaryReducers, pivotColumnSummaryReducers = _useColumnInfo.pivotColumnSummaryReducers, visibleColumns = _useColumnInfo.visibleColumns, lockedStartColumns = _useColumnInfo.lockedStartColumns, lockedEndColumns = _useColumnInfo.lockedEndColumns, unlockedColumns = _useColumnInfo.unlockedColumns, columnWidthPrefixSums = _useColumnInfo.columnWidthPrefixSums, columnsMap = _useColumnInfo.columnsMap, columnVisibilityMap = _useColumnInfo.columnVisibilityMap, allColumns = _useColumnInfo.allColumns, computedEnableRowspan = _useColumnInfo.computedEnableRowspan, totalComputedWidth = _useColumnInfo.totalComputedWidth, totalLockedStartWidth = _useColumnInfo.totalLockedStartWidth, totalFlexColumnCount = _useColumnInfo.totalFlexColumnCount, totalLockedEndWidth = _useColumnInfo.totalLockedEndWidth, totalUnlockedWidth = _useColumnInfo.totalUnlockedWidth, minColumnsSize = _useColumnInfo.minColumnsSize, computedHasColSpan = _useColumnInfo.computedHasColSpan, hasValueSetter = _useColumnInfo.hasValueSetter;
    var virtualizeColumns = props2.virtualizeColumns !== void 0 ? props2.virtualizeColumns : visibleColumns.length >= props2.virtualizeColumnsThreshold;
    if (typeof props2.rowHeight !== "number") {
      virtualizeColumns = false;
    }
    var columnRenderCount = (0, _getColumnRenderCount.default)({
      availableWidth: maxAvailableWidthForColumns,
      visibleColumns,
      lockedStartColumns,
      lockedEndColumns,
      virtualizeColumns
    });
    var hasLockedStart = !!lockedStartColumns.length;
    var hasLockedEnd = !!lockedEndColumns.length;
    var hasUnlocked = !!unlockedColumns.length;
    var firstUnlockedIndex = hasUnlocked ? unlockedColumns[0].computedVisibleIndex : -1;
    var firstLockedStartIndex = hasLockedStart ? lockedStartColumns[0].computedVisibleIndex : -1;
    var firstLockedEndIndex = hasLockedEnd ? lockedEndColumns[0].computedVisibleIndex : -1;
    var lastLockedEndIndex = hasLockedEnd ? lockedEndColumns[lockedEndColumns.length - 1].computedVisibleIndex : -1;
    var lastLockedStartIndex = hasLockedStart ? lockedStartColumns[lockedStartColumns.length - 1].computedVisibleIndex : -1;
    var lastUnlockedIndex = hasUnlocked ? unlockedColumns[unlockedColumns.length - 1].computedVisibleIndex : -1;
    var computedOnColumnResize = function computedOnColumnResize2(_ref3) {
      var index2 = _ref3.index, groupColumns = _ref3.groupColumns, diff = _ref3.diff;
      var computedProps = computedPropsRef.current;
      if (computedProps == null) {
        return;
      }
      var maxAvailableWidthForColumns2 = computedProps.maxAvailableWidthForColumns, shareSpaceOnResize = computedProps.shareSpaceOnResize, totalComputedWidth2 = computedProps.totalComputedWidth;
      var result = (0, _columnResize.default)({
        columns: computedProps.visibleColumns,
        groupColumns,
        maxAvailableWidthForColumns: maxAvailableWidthForColumns2,
        shareSpaceOnResize,
        totalComputedWidth: totalComputedWidth2,
        index: index2,
        diff
      });
      if (computedProps.rtl && diff) {
        var _totalComputedWidth = computedProps.totalComputedWidth;
        var oldScrollLeft = computedProps.getScrollLeft();
        computedProps.onNextRender(function() {
          var computedProps2 = computedPropsRef.current;
          if (computedProps2 == null) {
            return;
          }
          if (computedProps2.totalComputedWidth === _totalComputedWidth + diff) {
            var newScrollLeft = oldScrollLeft + diff;
            computedProps2.setScrollLeft(newScrollLeft);
          }
        });
      }
      (0, _batchUpdate.default)().commit(function() {
        var newReservedViewportWidth = computedProps.reservedViewportWidth;
        if (typeof result.maxAvailableWidthForColumns == "number" && result.maxAvailableWidthForColumns !== maxAvailableWidthForColumns2) {
          var widthDiff = result.maxAvailableWidthForColumns - maxAvailableWidthForColumns2;
          newReservedViewportWidth = computedProps.reservedViewportWidth - widthDiff;
          computedProps.setReservedViewportWidth(newReservedViewportWidth);
        }
        setColumnSizes(result.newColumnSizes || {}, result.newColumnFlexes, newReservedViewportWidth, {
          getColumnBy: computedProps.getColumnBy,
          onColumnResize: computedProps.initialProps.onColumnResize,
          onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
          columnSizes: computedProps.columnSizes,
          setColumnSizes: computedProps.setColumnSizes,
          setColumnFlexes: computedProps.setColumnFlexes
        });
      });
    };
    var getColumn = getColumnBy(props2.columns, visibleColumns, columnsMap);
    var setColumnVisible = function setColumnVisible2(indexOrColumn, visible) {
      var column2 = getColumn(indexOrColumn);
      if (!column2) {
        return;
      }
      if (isColumnVisible(column2) === visible) {
        return;
      }
      var col = getColumn(column2, {
        initial: true
      });
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (typeof computedProps.initialProps.onColumnVisibleChange === "function") {
        computedProps.initialProps.onColumnVisibleChange({
          column: col,
          visible
        });
      }
      if (col.visible === void 0) {
        setStateColumnVisibilityMap(_objectSpread2(_objectSpread2({}, stateColumnVisibilityMap), {}, (0, _defineProperty2.default)({}, column2.id, !!visible)));
      } else if (computedProps.showWarnings && !computedProps.initialProps.onColumnVisibleChange) {
        console.warn('Column "'.concat(column2.id, '" has controlled visible prop set to "').concat(column2.visible, '" but you have no "onColumnVisibleChange" callback prop to update column.visible prop. Use uncontrolled "defaultVisible" instead.'));
      }
    };
    var isColumnVisible = function isColumnVisible2(nameOrId) {
      var column2 = getColumn(nameOrId);
      if (!column2) {
        return false;
      }
      return column2.computedVisible === true;
    };
    var setColumnLocked = function setColumnLocked2(indexOrColumn, locked) {
      var column2 = getColumn(indexOrColumn);
      if (locked === null) {
        locked = false;
      }
      locked = locked === true ? "start" : locked;
      if (column2.lockable === false) {
        if (props2.showWarnings) {
          console.error('You are trying to lock the "'.concat(column2.id, '" column, but it is lockable===false, so it cannot be locked.'));
        }
        return;
      }
      var initialColumn = getColumn(column2, {
        initial: true
      });
      if (props2.onColumnLockedChange) {
        props2.onColumnLockedChange({
          column: initialColumn,
          locked
        });
      }
      if (initialColumn.locked !== void 0) {
        return;
      }
      var computedProps = computedPropsRef.current;
      if (computedProps == null) {
        return;
      }
      var setLockedColumnsState = computedProps.setLockedColumnsState;
      setLockedColumnsState(function(lockedColumnsState2) {
        return _objectSpread2(_objectSpread2({}, lockedColumnsState2), {}, (0, _defineProperty2.default)({}, column2.id, locked));
      });
    };
    var getColumnsInOrder = function getColumnsInOrder2() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return [];
      }
      var computedColumnOrder = computedProps.computedColumnOrder;
      if (!computedColumnOrder || !computedColumnOrder.length) {
        return computedProps.initialProps.columns.map(function(cId) {
          return computedProps.getColumnBy(cId);
        });
      }
      return computedColumnOrder.map(function(cId) {
        return computedProps.getColumnBy(cId);
      });
    };
    return {
      getColumnsInOrder,
      groupColumnSummaryReducers,
      pivotColumnSummaryReducers,
      groupColumn: props2.pivot ? props2.groupColumn || true : props2.groupColumn,
      firstLockedStartIndex,
      firstLockedEndIndex,
      firstUnlockedIndex,
      lastLockedStartIndex,
      lastUnlockedIndex,
      lastLockedEndIndex,
      visibleColumns,
      columnWidthPrefixSums,
      lockedStartColumns,
      lockedEndColumns,
      unlockedColumns,
      columnVisibilityMap,
      computedHasColSpan,
      setColumnLocked,
      computedColumnOrder: columnOrder,
      setColumnOrder,
      setColumnVisible,
      computeColumnSizes: setColumnSizes,
      computedPivot: props2.pivot,
      totalFlexColumnCount,
      showColumnMenuTool: props2.pivot ? false : props2.showColumnMenuTool,
      columnsMap,
      allColumns,
      totalComputedWidth,
      totalLockedStartWidth,
      totalLockedEndWidth,
      totalUnlockedWidth,
      minColumnsSize,
      hasLockedStart,
      hasLockedEnd,
      hasUnlocked,
      computedEnableRowspan,
      columnRenderCount,
      virtualizeColumns,
      computedOnColumnResize,
      getColumnBy: getColumn,
      isColumnVisible,
      hasValueSetter
    };
  };
  useColumns.default = _default2;
  return useColumns;
}
var useSize = {};
var hasRequiredUseSize;
function requireUseSize() {
  if (hasRequiredUseSize)
    return useSize;
  hasRequiredUseSize = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useSize, "__esModule", {
    value: true
  });
  useSize.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var _default2 = function _default3(defaultSize) {
    var size2;
    var setSize;
    var _useState = (0, _react.useState)(defaultSize);
    var _useState2 = (0, _slicedToArray2.default)(_useState, 2);
    size2 = _useState2[0];
    setSize = _useState2[1];
    return [size2, function(newSize) {
      setSize({
        width: Math.round(newSize.width || size2.width || 0),
        height: Math.round(newSize.height || size2.height || 0)
      });
    }];
  };
  useSize.default = _default2;
  return useSize;
}
var useHeader = {};
var hasRequiredUseHeader;
function requireUseHeader() {
  if (hasRequiredUseHeader)
    return useHeader;
  hasRequiredUseHeader = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useHeader, "__esModule", {
    value: true
  });
  useHeader.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _useProperty3 = _interopRequireDefault2(requireUseProperty());
  var _default2 = function _default3(props2, computedProps) {
    var _useProperty = (0, _useProperty3.default)(props2, "showHeader"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedShowHeader = _useProperty2[0], setShowHeader = _useProperty2[1];
    var result = {
      computedShowHeader,
      setShowHeader
    };
    if (computedShowHeader) {
      result.onHeaderSortClick = function(colProps) {
        if (computedProps.toggleColumnSort) {
          computedProps.toggleColumnSort(colProps.id, colProps.defaultSortingDirection);
        }
      };
    }
    return result;
  };
  useHeader.default = _default2;
  return useHeader;
}
var useEditable = {};
var hasRequiredUseEditable;
function requireUseEditable() {
  if (hasRequiredUseEditable)
    return useEditable;
  hasRequiredUseEditable = 1;
  Object.defineProperty(useEditable, "__esModule", {
    value: true
  });
  useEditable.default = void 0;
  var _react = reactExports;
  var useEditable$1 = function useEditable2(props2, computedProps, computedPropsRef) {
    var editInfoRef = (0, _react.useRef)(null);
    var isInEdit = (0, _react.useRef)(false);
    var currentEditCompletePromise = (0, _react.useRef)(Promise.resolve(true));
    var onEditStop = (0, _react.useCallback)(function(editProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.initialProps.onEditStop) {
        computedProps2.initialProps.onEditStop(editProps);
      }
      setTimeout(function() {
        editInfoRef.current = null;
      }, 0);
    }, []);
    var onEditCancel = (0, _react.useCallback)(function(editProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.initialProps.onEditCancel) {
        computedProps2.initialProps.onEditCancel(editProps);
      }
      setTimeout(function() {
        computedProps2.isInEdit.current = false;
      }, 50);
    }, []);
    var onEditComplete = (0, _react.useCallback)(function(editProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.autoFocusOnEditComplete) {
        computedProps2.focus();
      }
      if (computedProps2.initialProps.onEditComplete) {
        currentEditCompletePromise.current = Promise.resolve(computedProps2.initialProps.onEditComplete(editProps));
      }
      computedProps2.isInEdit.current = false;
    }, []);
    var onEditValueChange = (0, _react.useCallback)(function(editProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.initialProps.onEditValueChange) {
        computedProps2.initialProps.onEditValueChange(editProps);
      }
    }, []);
    var onEditStart = (0, _react.useCallback)(function(editProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var columnId = editProps.columnId;
      editInfoRef.current = {
        columnId,
        columnIndex: editProps.columnIndex,
        rowId: editProps.rowId,
        rowIndex: editProps.rowIndex
      };
      if (computedProps2.initialProps.onEditStart) {
        computedProps2.initialProps.onEditStart(editProps);
      }
      requestAnimationFrame(function() {
        var computedProps3 = computedPropsRef.current;
        if (!computedProps3) {
          return;
        }
        var col = computedProps3.getColumnBy(columnId);
        if (!col) {
          return;
        }
        computedProps3.scrollToColumn(col.computedVisibleIndex, {
          duration: 50
        });
      });
      computedProps2.isInEdit.current = true;
    }, []);
    var tryStartEdit = (0, _react.useCallback)(function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        rowIndex: void 0,
        rowId: void 0,
        columnId: "",
        dir: 1
      }, rowIndex = _ref2.rowIndex, rowId = _ref2.rowId, columnId = _ref2.columnId, dir = _ref2.dir;
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return Promise.reject(new Error("Grid was probably unmounted"));
      }
      var col = computedProps2.getColumnBy(columnId);
      if (!col) {
        return Promise.reject(new Error("No column found for columnId: ".concat(columnId)));
      }
      if (rowIndex === void 0) {
        rowIndex = computedProps2.getRowIndexById(rowId);
      }
      return new Promise(function(resolve2, reject) {
        computedProps2.scrollToIndex(rowIndex, void 0, function() {
          setTimeout(function() {
            computedProps2.getColumnLayout().tryStartEdit({
              rowIndex,
              rowId,
              columnIndex: col.computedVisibleIndex,
              columnId,
              dir
            }).then(resolve2, reject);
          }, 50);
        });
      });
    }, []);
    var startEdit = (0, _react.useCallback)(function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        columnId: "",
        rowIndex: -1,
        value: "",
        rowId: void 0
      }, columnId = _ref2.columnId, rowIndex = _ref2.rowIndex, value = _ref2.value, rowId = _ref2.rowId;
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return Promise.reject(new Error("Grid was probably unmounted"));
      }
      var col = computedProps2.getColumnBy(columnId);
      if (!col) {
        return Promise.reject(new Error("No column found for columnId: ".concat(columnId)));
      }
      if (rowIndex === void 0) {
        rowIndex = computedProps2.getRowIndexById(rowId);
      }
      return new Promise(function(resolve2, reject) {
        computedProps2.scrollToIndex(rowIndex, void 0, function() {
          setTimeout(function() {
            computedProps2.getColumnLayout().startEdit({
              rowIndex,
              rowId,
              columnIndex: col.computedVisibleIndex,
              columnId,
              value
            }).then(resolve2, reject);
          }, 50);
        });
      });
    }, []);
    var completeEdit = (0, _react.useCallback)(function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        rowIndex: void 0,
        rowId: void 0,
        columnId: "",
        dir: 1,
        value: ""
      }, rowId = _ref3.rowId, rowIndex = _ref3.rowIndex, columnId = _ref3.columnId, value = _ref3.value;
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return Promise.reject(new Error("Grid was probably unmounted"));
      }
      var col = computedProps2.getColumnBy(columnId);
      var editInfo = getCurrentEditInfo();
      if (!editInfo) {
        return;
      }
      if (!col && editInfo) {
        col = computedProps2.getColumnBy(editInfo.columnId);
        rowIndex = editInfo.rowIndex;
      }
      if (!col) {
        return;
      }
      if (rowIndex === void 0) {
        rowIndex = computedProps2.getRowIndexById(rowId);
      }
      computedProps2.scrollToIndex(rowIndex, void 0, function() {
        setTimeout(function() {
          computedProps2.getColumnLayout().completeEdit({
            rowIndex,
            columnIndex: col.computedVisibleIndex,
            value
          });
        }, 50);
      });
    }, []);
    var cancelEdit = (0, _react.useCallback)(function() {
      var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        rowIndex: void 0,
        columnId: void 0
      }, rowIndex = _ref4.rowIndex, columnId = _ref4.columnId;
      var editInfo = editInfoRef.current;
      if (!editInfo) {
        return;
      }
      var col = columnId ? computedProps.getColumnBy(columnId) : null;
      if (!col && editInfo) {
        col = computedProps.getColumnBy(editInfo.columnId);
        rowIndex = editInfo.rowIndex;
      }
      if (!col) {
        return;
      }
      computedProps.getColumnLayout().cancelEdit({
        rowIndex,
        columnIndex: col.computedVisibleIndex
      });
    }, []);
    var getCurrentEditInfo = (0, _react.useCallback)(function() {
      return editInfoRef.current;
    }, []);
    return {
      getCurrentEditInfo,
      startEdit,
      onEditStart,
      onEditStop,
      onEditCancel,
      onEditComplete,
      onEditValueChange,
      completeEdit,
      cancelEdit,
      tryStartEdit,
      isInEdit,
      currentEditCompletePromise
    };
  };
  var _default2 = useEditable$1;
  useEditable.default = _default2;
  return useEditable;
}
var useDataSource = {};
var getIndexBy = {};
var hasRequiredGetIndexBy;
function requireGetIndexBy() {
  if (hasRequiredGetIndexBy)
    return getIndexBy;
  hasRequiredGetIndexBy = 1;
  Object.defineProperty(getIndexBy, "__esModule", {
    value: true
  });
  getIndexBy.default = void 0;
  var getIndexBy$1 = function getIndexBy2(data, by, id2, getItemId, compoundIdProperty) {
    var index2 = -1;
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];
      var itemId = compoundIdProperty ? getItemId(item) : item[by];
      var parsedId = typeof itemId === "number" ? Number(id2) : id2;
      if (itemId === parsedId) {
        index2 = i;
        break;
      }
    }
    return index2;
  };
  var _default2 = getIndexBy$1;
  getIndexBy.default = _default2;
  return getIndexBy;
}
var fastDeepEqual;
var hasRequiredFastDeepEqual;
function requireFastDeepEqual() {
  if (hasRequiredFastDeepEqual)
    return fastDeepEqual;
  hasRequiredFastDeepEqual = 1;
  fastDeepEqual = function equal2(a, b2) {
    if (a === b2)
      return true;
    if (a && b2 && typeof a == "object" && typeof b2 == "object") {
      if (a.constructor !== b2.constructor)
        return false;
      var length2, i, keys2;
      if (Array.isArray(a)) {
        length2 = a.length;
        if (length2 != b2.length)
          return false;
        for (i = length2; i-- !== 0; )
          if (!equal2(a[i], b2[i]))
            return false;
        return true;
      }
      if (a.constructor === RegExp)
        return a.source === b2.source && a.flags === b2.flags;
      if (a.valueOf !== Object.prototype.valueOf)
        return a.valueOf() === b2.valueOf();
      if (a.toString !== Object.prototype.toString)
        return a.toString() === b2.toString();
      keys2 = Object.keys(a);
      length2 = keys2.length;
      if (length2 !== Object.keys(b2).length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b2, keys2[i]))
          return false;
      for (i = length2; i-- !== 0; ) {
        var key = keys2[i];
        if (!equal2(a[key], b2[key]))
          return false;
      }
      return true;
    }
    return a !== a && b2 !== b2;
  };
  return fastDeepEqual;
}
var useLoadDataEffect = {};
var hasRequiredUseLoadDataEffect;
function requireUseLoadDataEffect() {
  if (hasRequiredUseLoadDataEffect)
    return useLoadDataEffect;
  hasRequiredUseLoadDataEffect = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useLoadDataEffect, "__esModule", {
    value: true
  });
  useLoadDataEffect.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var diff = function diff2(a1, a2) {
    if (a1.length != a2.length) {
      return true;
    }
    for (var i = 0; i < a1.length; i++) {
      if (!Object.is(a1[i], a2[i])) {
        return true;
      }
    }
    return false;
  };
  var resolved = Promise.resolve(true);
  var useLoadDataEffect$1 = function useLoadDataEffect2(_ref2, fn, _ref22) {
    var getDataSource = _ref2.getDataSource;
    var reloadDeps = _ref22.reloadDeps, noReloadDeps = _ref22.noReloadDeps;
    var prevComputedDepsRef = (0, _react.useRef)([]);
    var reloadRef = (0, _react.useRef)();
    var noReloadRef = (0, _react.useRef)();
    var reloadDepsDifferent = !reloadRef.current || diff(reloadRef.current, reloadDeps);
    var noReloadDepsDifferent = !noReloadRef.current || diff(noReloadRef.current, noReloadDeps);
    var depsDifferent = reloadDepsDifferent || noReloadDepsDifferent;
    var shouldReload = reloadDepsDifferent;
    var shouldReloadRef = (0, _react.useRef)(false);
    var computedDeps = depsDifferent ? [{}] : prevComputedDepsRef.current;
    var resolveRef = (0, _react.useRef)(null);
    var promiseRef = (0, _react.useRef)(resolved);
    if (depsDifferent) {
      shouldReloadRef.current = shouldReload;
      promiseRef.current = new Promise(function(resolve2) {
        resolveRef.current = resolve2;
      });
    }
    var _useState = (0, _react.useState)(function() {
      return /* @__PURE__ */ new Set();
    }), _useState2 = (0, _slicedToArray2.default)(_useState, 1), pendingSet = _useState2[0];
    var intercept = (0, _react.useCallback)(function(promise, dataSource) {
      typeof dataSource === "function" || (dataSource === null || dataSource === void 0 ? void 0 : dataSource.then);
      pendingSet.clear();
      pendingSet.add(promise);
      return promise.then(function(r2) {
        if (pendingSet.has(promise)) {
          pendingSet.delete(promise);
          return r2;
        }
        return Promise.reject({
          message: "This request is discarded as it was still pending when a new request came in.",
          result: r2
        });
      });
    }, []);
    (0, _react.useLayoutEffect)(function() {
      var reload = shouldReloadRef.current;
      var dataSource = getDataSource({
        shouldReload: reload
      });
      fn(dataSource, {
        shouldReload: reload,
        intercept
      }).then(function() {
        if (resolveRef.current) {
          resolveRef.current();
        }
      });
      shouldReloadRef.current = shouldReload;
    }, computedDeps);
    reloadRef.current = reloadDeps;
    noReloadRef.current = noReloadDeps;
    prevComputedDepsRef.current = computedDeps;
    return promiseRef.current;
  };
  var _default2 = useLoadDataEffect$1;
  useLoadDataEffect.default = _default2;
  return useLoadDataEffect;
}
var computeData = {};
var filter2 = {};
var hasRequiredFilter;
function requireFilter() {
  if (hasRequiredFilter)
    return filter2;
  hasRequiredFilter = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(filter2, "__esModule", {
    value: true
  });
  filter2.validateFilters = filter2.hasTypeOperators = filter2.hasTypeOperator = filter2.default = filter2.checkForEmptyValue = filter2.buildTypeOperators = filter2.buildFilterParam = void 0;
  var _filterTypes = _interopRequireDefault2(requireFilterTypes());
  var buildTypeOperators = function buildTypeOperators2(filterTypes2) {
    return Object.keys(filterTypes2).reduce(function(acc, filterTypeName) {
      var filterType = filterTypes2[filterTypeName];
      if (!filterType || !filterType.operators) {
        return acc;
      }
      var operators = filterType.operators.reduce(function(operatorAccumulator, operator) {
        operatorAccumulator[operator.name] = operator;
        return operatorAccumulator;
      }, {});
      acc[filterTypeName] = operators;
      return acc;
    }, {});
  };
  filter2.buildTypeOperators = buildTypeOperators;
  var buildFilterParam = function buildFilterParam2(item, fv) {
    var filterTypes2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
    var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
    var filterParam = {};
    var name = fv.name, getFilterValue = fv.getFilterValue, filterValue = fv.value, type = fv.type;
    filterParam.emptyValue = fv.hasOwnProperty("emptyValue") ? fv.emptyValue : filterTypes2[type].emptyValue;
    filterParam.filterValue = filterValue;
    if (columnsMap) {
      filterParam.column = columnsMap[name];
    }
    filterParam.data = item;
    filterParam.value = typeof getFilterValue === "function" ? getFilterValue({
      data: item,
      value: item[name]
    }) : item[name];
    return filterParam;
  };
  filter2.buildFilterParam = buildFilterParam;
  var hasTypeOperators = function hasTypeOperators2(fn, currentTypeOperators, type) {
    if (!fn && !currentTypeOperators) {
      console.error('No filter of type "'.concat(type, '" found!'));
      return true;
    }
    return false;
  };
  filter2.hasTypeOperators = hasTypeOperators;
  var hasTypeOperator = function hasTypeOperator2(fn, currentTypeOperators, type, operator) {
    if (!fn && !currentTypeOperators[operator]) {
      console.error('No operator "'.concat(operator, '" found for filter type "').concat(type, '"!'));
      return true;
    }
    return false;
  };
  filter2.hasTypeOperator = hasTypeOperator;
  var checkForEmptyValue = function checkForEmptyValue2(filterValue, emptyValue, filterOnEmptyValue) {
    if (filterValue === emptyValue && !filterOnEmptyValue) {
      return true;
    }
    return false;
  };
  filter2.checkForEmptyValue = checkForEmptyValue;
  var validateFilters = function validateFilters2(fv) {
    var _currentTypeOperators;
    var filterTypes2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _filterTypes.default;
    var currentTypeOperators = arguments.length > 2 ? arguments[2] : void 0;
    var active = fv.active, fn = fv.fn, type = fv.type, operator = fv.operator;
    var emptyValue = fv.hasOwnProperty("emptyValue") ? fv.emptyValue : filterTypes2[type].emptyValue;
    var filterOnEmptyValue = currentTypeOperators ? (_currentTypeOperators = currentTypeOperators[operator]) === null || _currentTypeOperators === void 0 ? void 0 : _currentTypeOperators.filterOnEmptyValue : void 0;
    if (active === false) {
      return true;
    }
    if (!filterTypes2[type]) {
      return true;
    }
    if (hasTypeOperators(fn, currentTypeOperators, type)) {
      return true;
    }
    if (hasTypeOperator(fn, currentTypeOperators, type, operator)) {
      return true;
    }
    if (checkForEmptyValue(fv.value, emptyValue, filterOnEmptyValue)) {
      return true;
    }
    return false;
  };
  filter2.validateFilters = validateFilters;
  var doFilter = function doFilter2(item, filterValueArray) {
    var filterTypes2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
    var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
    var typeOperators = buildTypeOperators(filterTypes2);
    for (var i = 0, len = filterValueArray.length; i < len; i++) {
      var fv = filterValueArray[i];
      var type = fv.type, operator = fv.operator, fn = fv.fn;
      var currentTypeOperators = typeOperators[type];
      if (validateFilters(fv, filterTypes2, currentTypeOperators)) {
        continue;
      }
      var filterParam = buildFilterParam(item, fv, filterTypes2, columnsMap);
      var filterFn = fn || currentTypeOperators[operator].fn;
      if (filterFn(filterParam) !== true) {
        return false;
      }
    }
    return true;
  };
  var filter$12 = function filter3(data, filterValueArray, filterTypes2, columnsMap) {
    filterTypes2 = filterTypes2 || _filterTypes.default;
    var filterFn = function filterFn2(item) {
      var result = doFilter(item, filterValueArray, filterTypes2, columnsMap);
      return result;
    };
    if (data === void 0) {
      return filterFn;
    }
    return data.filter(filterFn);
  };
  var _default2 = filter$12;
  filter2.default = _default2;
  return filter2;
}
var treeFilter = {};
var hasRequiredTreeFilter;
function requireTreeFilter() {
  if (hasRequiredTreeFilter)
    return treeFilter;
  hasRequiredTreeFilter = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(treeFilter, "__esModule", {
    value: true
  });
  treeFilter.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _filterTypes = _interopRequireDefault2(requireFilterTypes());
  var _filter = requireFilter();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var doFilter = function doFilter2(item, filterValueArray) {
    var filterTypes2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
    var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
    var typeOperators = (0, _filter.buildTypeOperators)(filterTypes2);
    for (var i = 0, len = filterValueArray.length; i < len; i++) {
      var fv = filterValueArray[i];
      var type = fv.type, operator = fv.operator, fn = fv.fn;
      var currentTypeOperators = typeOperators[type];
      if ((0, _filter.validateFilters)(fv, filterTypes2, currentTypeOperators)) {
        continue;
      }
      var filterParam = (0, _filter.buildFilterParam)(item, fv, filterTypes2, columnsMap);
      var filterFn = fn || currentTypeOperators[operator].fn;
      if (filterFn(filterParam) !== true) {
        return false;
      }
    }
    return true;
  };
  var filterData = function filterData2(dataArray, filterFn, config2) {
    var nodesName = config2.nodesName;
    return dataArray.map(function(item) {
      return _objectSpread2({}, item);
    }).filter(function(item) {
      var itemNodes = item[nodesName];
      if (!itemNodes) {
        return filterFn(item);
      }
      var filteredItemNodes = filterData2(itemNodes, filterFn, config2);
      if (filteredItemNodes.length) {
        item[nodesName] = filteredItemNodes;
        return true;
      }
      return filterFn(item);
    });
  };
  var treeFilter$1 = function treeFilter2(data, filterValueArray) {
    var filterTypes2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _filterTypes.default;
    var columnsMap = arguments.length > 3 ? arguments[3] : void 0;
    var options = arguments.length > 4 ? arguments[4] : void 0;
    var computedProps = options && options.props || {};
    var nodesName = computedProps && computedProps.nodesProperty || "nodes";
    var config2 = {
      nodesName
    };
    var filterFn = function filterFn2(item) {
      var filterItem = doFilter(item, filterValueArray, filterTypes2, columnsMap);
      return filterItem;
    };
    return filterData(data, filterFn, config2) || [];
  };
  var _default2 = treeFilter$1;
  treeFilter.default = _default2;
  return treeFilter;
}
var paginate = {};
var hasRequiredPaginate;
function requirePaginate() {
  if (hasRequiredPaginate)
    return paginate;
  hasRequiredPaginate = 1;
  Object.defineProperty(paginate, "__esModule", {
    value: true
  });
  paginate.default = void 0;
  var _default2 = function _default3(array, _ref2) {
    var skip2 = _ref2.skip, limit = _ref2.limit;
    return array.slice(skip2, skip2 + limit);
  };
  paginate.default = _default2;
  return paginate;
}
var getFilterValueForColumns = {};
var hasRequiredGetFilterValueForColumns;
function requireGetFilterValueForColumns() {
  if (hasRequiredGetFilterValueForColumns)
    return getFilterValueForColumns;
  hasRequiredGetFilterValueForColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getFilterValueForColumns, "__esModule", {
    value: true
  });
  getFilterValueForColumns.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var getFilterValueForColumns$1 = function getFilterValueForColumns2(filterValue, columnsMap) {
    return (filterValue || []).map(function(filterValueObject) {
      if (filterValueObject) {
        var column2 = columnsMap[filterValueObject.name];
        if (column2) {
          if (column2.type && !filterValueObject.type) {
            filterValueObject = _objectSpread2(_objectSpread2({}, filterValueObject), {}, {
              type: column2.filterType || column2.type
            });
          }
          if (typeof column2.getFilterValue == "function") {
            filterValueObject = _objectSpread2(_objectSpread2({}, filterValueObject), {}, {
              getFilterValue: column2.getFilterValue
            });
          }
          if (typeof column2.filterName === "string") {
            filterValueObject = _objectSpread2(_objectSpread2({}, filterValueObject), {}, {
              name: column2.filterName
            });
          }
        }
      }
      return filterValueObject;
    });
  };
  var _default2 = getFilterValueForColumns$1;
  getFilterValueForColumns.default = _default2;
  return getFilterValueForColumns;
}
var getSortInfoForColumns = {};
var hasRequiredGetSortInfoForColumns;
function requireGetSortInfoForColumns() {
  if (hasRequiredGetSortInfoForColumns)
    return getSortInfoForColumns;
  hasRequiredGetSortInfoForColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(getSortInfoForColumns, "__esModule", {
    value: true
  });
  getSortInfoForColumns.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var getCol = function getCol2(name, columnsMap) {
    var col = columnsMap[name];
    if (!col) {
      Object.keys(columnsMap).forEach(function(colId) {
        if (col) {
          return;
        }
        var theCol = columnsMap[colId];
        if (theCol.sortName === name) {
          col = theCol;
        }
      });
    }
    return col;
  };
  var getSortInfoForColumns$1 = function getSortInfoForColumns2(sortInfo, columnsMap) {
    if (!columnsMap) {
      return sortInfo;
    }
    if (!Array.isArray(sortInfo)) {
      if (sortInfo && sortInfo.name) {
        var col = getCol(sortInfo.name, columnsMap);
        sortInfo = _objectSpread2({}, sortInfo);
        if (col) {
          if (typeof col.sortName === "string") {
            sortInfo.name = col.sortName;
          }
          if (col.type) {
            sortInfo.type = col.type;
          }
          if (col.sort) {
            sortInfo.fn = function(one, two, data1, data2, sortInfo2) {
              return col.sort ? col.sort(one, two, col, data1, data2, sortInfo2) : 0;
            };
          }
        }
      }
      return sortInfo;
    } else {
      return sortInfo.map(function(sortInfo2) {
        var col2 = getCol(sortInfo2.name, columnsMap);
        sortInfo2 = _objectSpread2({}, sortInfo2);
        if (col2 && typeof col2.sortName === "string") {
          sortInfo2.name = col2.sortName;
        }
        if (col2.type) {
          sortInfo2.type = col2.type;
        }
        if (col2.sort) {
          sortInfo2.fn = function(one, two, data1, data2, sortInfo3) {
            return col2.sort ? col2.sort(one, two, col2, data1, data2, sortInfo3) : 0;
          };
        }
        return sortInfo2;
      });
    }
  };
  var _default2 = getSortInfoForColumns$1;
  getSortInfoForColumns.default = _default2;
  return getSortInfoForColumns;
}
var hasRequiredComputeData;
function requireComputeData() {
  if (hasRequiredComputeData)
    return computeData;
  hasRequiredComputeData = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(computeData, "__esModule", {
    value: true
  });
  computeData.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _objectWithoutProperties2 = _interopRequireDefault2(requireObjectWithoutProperties());
  var _filter = _interopRequireDefault2(requireFilter());
  var _treeFilter = _interopRequireDefault2(requireTreeFilter());
  var _paginate = _interopRequireDefault2(requirePaginate());
  var _getFilterValueForColumns = _interopRequireDefault2(requireGetFilterValueForColumns());
  var _getSortInfoForColumns = _interopRequireDefault2(requireGetSortInfoForColumns());
  var _excluded2 = ["originalData"];
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var filterData = function filterData2(data, _ref2, config2) {
    var filterValue = _ref2.filterValue, remoteFilter = _ref2.remoteFilter, filterTypes2 = _ref2.filterTypes, columnsMap = _ref2.columnsMap;
    if (!Array.isArray(filterValue) || !filterValue.length) {
      return data;
    }
    if (remoteFilter) {
      return data;
    }
    var filterValueForColumns = (0, _getFilterValueForColumns.default)(filterValue, columnsMap);
    if (!filterValueForColumns.length) {
      return data;
    }
    if (config2.treeEnabled) {
      return (0, _treeFilter.default)(data, filterValueForColumns, filterTypes2, columnsMap, {
        props: config2.computedProps
      });
    }
    return (0, _filter.default)(data, filterValueForColumns, filterTypes2, columnsMap);
  };
  var flow = function flow2(_ref2) {
    var originalData = _ref2.originalData, rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
    var input = _objectSpread2(_objectSpread2({}, rest), {}, {
      data: originalData,
      originalData,
      previousData: []
    });
    for (var _len = arguments.length, transforms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      transforms[_key - 1] = arguments[_key];
    }
    return transforms.reduce(function(acc, transform2) {
      acc = transform2(acc);
      acc.previousData.push(acc.data);
      return acc;
    }, input);
  };
  var computeData$1 = function computeData2(config2, computedProps, batchUpdateQueue) {
    var columnsMap = computedProps.columnsMap;
    var originalData = config2.originalData || computedProps.originalData;
    var dataCountAfterFilter = void 0;
    config2.loading === void 0 ? computedProps.computedLoading : config2.loading;
    var filterValue = config2.filterValue === void 0 ? computedProps.computedFilterValue : config2.filterValue;
    var remoteFilter = config2.remoteFilter === void 0 ? computedProps.computedRemoteFilter : config2.remoteFilter;
    var dataSourceCache = config2.dataSourceCache === void 0 ? computedProps.computedDataSourceCache : config2.dataSourceCache;
    var filterTypes2 = computedProps.filterTypes;
    var localPagination = config2.localPagination === void 0 ? computedProps.computedLocalPagination : config2.localPagination;
    var remoteData = config2.remoteData === void 0 ? computedProps.computedRemoteData : config2.remoteData;
    var sortInfo = config2.sortInfo === void 0 ? computedProps.computedSortInfo : config2.sortInfo;
    var skip2 = config2.skip === void 0 ? computedProps.computedSkip : config2.skip;
    var limit = config2.limit === void 0 ? computedProps.computedLimit : config2.limit;
    var groupBy = config2.groupBy === void 0 ? computedProps.computedGroupBy : config2.groupBy;
    var treeEnabled = computedProps.computedTreeEnabled;
    computedProps.pivot;
    var computedSummary = !!computedProps.summaryReducer;
    if (remoteData) {
      return {
        data: void 0,
        dataCountAfterFilter
      };
    }
    var result = flow({
      originalData
    }, function(config3) {
      if (dataSourceCache && Object.keys(dataSourceCache).length) {
        config3.data = config3.data.map(function(item) {
          var id2 = computedProps.getItemId(item);
          if (dataSourceCache[id2]) {
            item = _objectSpread2(_objectSpread2({}, item), dataSourceCache[id2]);
          }
          return item;
        });
      }
      return config3;
    }, function(config3) {
      if (filterValue && !computedProps.filterValue) {
        filterValue = (0, _getFilterValueForColumns.default)(filterValue, columnsMap);
        config3.data = filterData(config3.data, {
          filterValue,
          filterTypes: filterTypes2,
          remoteFilter,
          columnsMap
        }, {
          treeEnabled,
          computedProps
        });
      }
      dataCountAfterFilter = config3.data.length;
      return config3;
    }, function(config3) {
      if (!computedProps.sortInfo) {
        sortInfo = (0, _getSortInfoForColumns.default)(sortInfo, columnsMap);
        if (sortInfo && computedProps.sorty) {
          config3.data = (0, _toConsumableArray2.default)(config3.data);
          computedProps.sorty(sortInfo, config3.data);
        }
      }
      return config3;
    }, function(config3) {
      if (treeEnabled && computedProps.computeTreeData) {
        var expandedNodes = computedProps.computedExpandedNodes;
        config3.data = computedProps.computeTreeData(config3.data, {
          expandedNodes,
          isNodeLeaf: computedProps.isNodeLeaf,
          isNodeAsync: computedProps.isNodeAsync,
          pathSeparator: computedProps.nodePathSeparator,
          loadingNodes: computedProps.computedLoadingNodes,
          nodesName: computedProps.nodesProperty,
          nodeCache: computedProps.computedNodeCache,
          dataSourceCache: computedProps.computedDataSourceCache,
          generateIdFromPath: computedProps.generateIdFromPath,
          collapsingNodes: computedProps.collapsingNodesRef.current,
          idProperty: !computedProps.compoundIdProperty ? computedProps.idProperty : "id"
        });
      }
      dataCountAfterFilter = config3.data.length;
      return config3;
    }, function(config3) {
      if (computedSummary) {
        var summary = computedProps.summaryReducer.initialValue;
        var reducerFn = computedProps.summaryReducer.reducer || computedProps.summaryReducer.reduce;
        if (summary && (0, _typeof2.default)(summary) === "object") {
          summary = _objectSpread2({}, summary);
        }
        var data = config3.data;
        var item;
        for (var i = 0, len = data.length; i < len; i++) {
          item = data[i];
          summary = reducerFn(summary, item, computedProps);
        }
        if (computedProps.summaryReducer.complete) {
          summary = computedProps.summaryReducer.complete(summary, data || [], computedProps);
        }
        batchUpdateQueue(function() {
          computedProps.setSummary(summary);
        });
      }
      return config3;
    }, function(config3) {
      if (localPagination && limit) {
        skip2 = skip2 || 0;
        config3.data = (0, _paginate.default)(config3.data, {
          skip: skip2,
          limit
        });
      }
      return config3;
    }, function(config3) {
      batchUpdateQueue(function() {
        computedProps.setUngroupedData(config3.data);
      });
      var length2 = config3.data.length;
      if (Array.isArray(groupBy) && groupBy.length && computedProps.computeDataStep && length2) {
        config3 = computedProps.computeDataStep({
          groupBy,
          batchUpdateQueue,
          columnsMap,
          computedProps,
          config: config3
        });
      }
      return config3;
    });
    return {
      data: result.data,
      dataCountAfterFilter: dataCountAfterFilter || 0
    };
  };
  var _default2 = computeData$1;
  computeData.default = _default2;
  return computeData;
}
var isControlledProperty = {};
var hasRequiredIsControlledProperty;
function requireIsControlledProperty() {
  if (hasRequiredIsControlledProperty)
    return isControlledProperty;
  hasRequiredIsControlledProperty = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(isControlledProperty, "__esModule", {
    value: true
  });
  isControlledProperty.default = void 0;
  var _isControlledValue = _interopRequireDefault2(requireIsControlledValue());
  var _default2 = function _default3(props2, propName) {
    if (!props2) {
      return false;
    }
    return (0, _isControlledValue.default)(props2[propName]);
  };
  isControlledProperty.default = _default2;
  return isControlledProperty;
}
var hasRequiredUseDataSource;
function requireUseDataSource() {
  if (hasRequiredUseDataSource)
    return useDataSource;
  hasRequiredUseDataSource = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useDataSource, "__esModule", {
    value: true
  });
  useDataSource.isLivePagination = useDataSource.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var _clamp = _interopRequireDefault2(requireClamp$1());
  var _getIndexBy = _interopRequireDefault2(requireGetIndexBy());
  var _fastDeepEqual = _interopRequireDefault2(requireFastDeepEqual());
  var _useLoadDataEffect = _interopRequireDefault2(requireUseLoadDataEffect());
  var _useProperty7 = _interopRequireDefault2(requireUseProperty());
  var _useNamedState9 = _interopRequireDefault2(requireUseNamedState());
  var _computeData = _interopRequireDefault2(requireComputeData());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  var _isControlledProperty = _interopRequireDefault2(requireIsControlledProperty());
  var _getGlobal = requireGetGlobal();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var globalObject = (0, _getGlobal.getGlobal)();
  var raf2 = globalObject.requestAnimationFrame;
  var isRemoteData = function isRemoteData2(props2) {
    if (props2.dataSource == null) {
      return false;
    }
    return typeof props2.dataSource.then === "function" || typeof props2.dataSource === "function";
  };
  var isRemoteSort = function isRemoteSort2(props2) {
    var remoteSort = props2.remoteSort;
    return remoteSort === true || remoteSort === void 0 && isRemoteData(props2);
  };
  var isRemoteFilter = function isRemoteFilter2(props2) {
    var remoteFilter = props2.remoteFilter;
    return remoteFilter === true || remoteFilter === void 0 && isRemoteData(props2);
  };
  var isPagination = function isPagination2(props2) {
    return !!props2.pagination;
  };
  var isLocalPagination = function isLocalPagination2(props2) {
    return isPagination(props2) && !isRemotePagination(props2);
  };
  var isLivePagination = function isLivePagination2(props2) {
    return !!props2.livePagination && isRemotePagination(props2);
  };
  useDataSource.isLivePagination = isLivePagination;
  var isRemotePagination = function isRemotePagination2(props2) {
    var remotePagination = props2.remotePagination, pagination = props2.pagination, livePagination = props2.livePagination;
    if (pagination === false || pagination === "local") {
      return false;
    }
    if (pagination === "remote" || isRemoteData(props2)) {
      return true;
    }
    if (remotePagination !== void 0) {
      return remotePagination;
    }
    return !!livePagination;
  };
  var loadDataSource = function loadDataSource2(dataSource, _ref2) {
    var skip2 = _ref2.skip, limit = _ref2.limit, currentData = _ref2.currentData, sortInfo = _ref2.sortInfo, filterValue = _ref2.filterValue, groupBy = _ref2.groupBy;
    if (typeof dataSource === "function") {
      dataSource = loadDataSource2(dataSource({
        skip: skip2,
        limit,
        sortInfo,
        currentData,
        filterValue,
        groupBy
      }), {
        skip: skip2,
        limit,
        sortInfo,
        groupBy,
        filterValue,
        currentData
      });
    }
    if (dataSource instanceof Promise) {
      return dataSource.then(function(result) {
        if (Array.isArray(result)) {
          return {
            data: result,
            count: result.length
          };
        }
        return {
          data: result.data,
          count: result.count
        };
      });
    }
    return Promise.resolve({
      data: dataSource,
      count: dataSource.length
    });
  };
  var useData = function useData2(_ref2, context2) {
    var dataSource = _ref2.dataSource;
    _ref2.skip;
    _ref2.limit;
    _ref2.localPagination;
    var data;
    var silentSetData;
    var _useNamedState = (0, _useNamedState9.default)([], context2, "data");
    var _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2);
    data = _useNamedState2[0];
    silentSetData = _useNamedState2[1];
    var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), dataMap = _useState2[0], setDataMap = _useState2[1];
    var _useState3 = (0, _react.useState)(null), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), dataIndexMap = _useState4[0], setDataIndexMap = _useState4[1];
    var originalData;
    var setOriginalData;
    var _useNamedState3 = (0, _useNamedState9.default)(Array.isArray(dataSource) ? dataSource : [], context2, "originalData");
    var _useNamedState4 = (0, _slicedToArray2.default)(_useNamedState3, 2);
    originalData = _useNamedState4[0];
    setOriginalData = _useNamedState4[1];
    var _useNamedState5 = (0, _useNamedState9.default)(data.length, context2, "count"), _useNamedState6 = (0, _slicedToArray2.default)(_useNamedState5, 2), count = _useNamedState6[0], setCount = _useNamedState6[1];
    var _useNamedState7 = (0, _useNamedState9.default)(0, context2, "dataCountAfterFilter"), _useNamedState8 = (0, _slicedToArray2.default)(_useNamedState7, 2), dataCountAfterFilter = _useNamedState8[0], setDataCountAfterFilter = _useNamedState8[1];
    return {
      setDataMap,
      dataMap,
      dataIndexMap,
      setDataIndexMap,
      originalData,
      setOriginalData,
      data,
      count,
      dataCountAfterFilter,
      silentSetData,
      setDataCountAfterFilter,
      setCount
    };
  };
  var getDataCountForPagination = function getDataCountForPagination2(props2) {
    var paginationCount = props2.remotePagination ? props2.count : props2.dataCountAfterFilter != null ? props2.dataCountAfterFilter : props2.originalData.length;
    return paginationCount;
  };
  var getCurrentPage = function getCurrentPage2(props2) {
    return Math.floor(props2.skip / props2.limit) + 1;
  };
  var getPageCount = function getPageCount2(_ref3) {
    var count = _ref3.count, limit = _ref3.limit;
    return Math.ceil(count / limit);
  };
  var getSkipForPage = function getSkipForPage2(_ref4) {
    var page = _ref4.page, limit = _ref4.limit;
    return Math.max(0, limit * (page - 1));
  };
  var hasNextPage = function hasNextPage2(_ref5) {
    var skip2 = _ref5.skip, limit = _ref5.limit, count = _ref5.count;
    return getCurrentPage({
      skip: skip2,
      limit
    }) < getPageCount({
      count,
      limit
    });
  };
  var hasPrevPage = function hasPrevPage2(_ref6) {
    var skip2 = _ref6.skip, limit = _ref6.limit, count = _ref6.count;
    var currentPage = getCurrentPage({
      skip: skip2,
      limit
    });
    return currentPage > 1 && currentPage - 1 < getPageCount({
      count,
      limit
    });
  };
  var usePagination = function usePagination2(_ref7, computedPropsRef) {
    _ref7.append;
    var reload = _ref7.reload, setAppend = _ref7.setAppend, skip2 = _ref7.skip, limit = _ref7.limit, count = _ref7.count, silentSetSkip = _ref7.setSkip, silentSetLimit = _ref7.setLimit, remotePagination = _ref7.remotePagination, localPagination = _ref7.localPagination, pagination = _ref7.pagination;
    _ref7.lastSkipRef;
    var lastLimitRef = _ref7.lastLimitRef, dataCountAfterFilter = _ref7.dataCountAfterFilter, livePagination = _ref7.livePagination, originalData = _ref7.originalData;
    _ref7.data;
    var paginationCount = getDataCountForPagination({
      originalData,
      remotePagination,
      count,
      dataCountAfterFilter
    });
    var setSkip = function setSkip2(skip3, config2) {
      var computedProps = computedPropsRef.current;
      var queue = (0, _batchUpdate.default)();
      var computedRemoteData = computedProps.computedRemoteData;
      queue.commit(function() {
        if (config2 && config2.append !== void 0) {
          setAppend(config2.append);
        }
        if (computedRemoteData) {
          computedProps.setLoadDataTrigger(function(loadDataTrigger) {
            return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["skip"]);
          });
        }
        silentSetSkip(skip3);
      });
    };
    var setLimit = function setLimit2(limit2) {
      var computedProps = computedPropsRef.current;
      var queue = (0, _batchUpdate.default)();
      var computedRemoteData = computedProps.computedRemoteData;
      queue.commit(function() {
        if (computedRemoteData) {
          computedProps.setLoadDataTrigger(function(loadDataTrigger) {
            return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["limit"]);
          });
        }
        silentSetLimit(limit2);
      });
    };
    var incrementSkip = function incrementSkip2(amount, config2) {
      setSkip(skip2 + amount, config2);
    };
    var gotoNextPage = function gotoNextPage2(config2) {
      if (hasNextPage({
        skip: skip2,
        limit: lastLimitRef.current,
        count: paginationCount
      })) {
        incrementSkip(lastLimitRef.current, config2);
      }
    };
    var gotoPrevPage = function gotoPrevPage2() {
      if (hasPrevPage({
        skip: skip2,
        limit,
        count: paginationCount
      })) {
        incrementSkip(-limit);
      }
    };
    var gotoPage = function gotoPage2(page, config2) {
      page = (0, _clamp.default)(page, 1, getPageCount({
        count: paginationCount,
        limit
      }));
      var force = config2 ? config2.force : false;
      if (page === getCurrentPage({
        skip: skip2,
        limit
      }) && !force) {
        return;
      }
      setSkip(getSkipForPage({
        page,
        limit
      }));
    };
    var hasNext = function hasNext2() {
      return hasNextPage({
        skip: skip2,
        limit,
        count: paginationCount
      });
    };
    var hasPrev = function hasPrev2() {
      return hasPrevPage({
        skip: skip2,
        limit,
        count: paginationCount
      });
    };
    var gotoFirstPage = function gotoFirstPage2() {
      return gotoPage(1);
    };
    var gotoLastPage = function gotoLastPage2() {
      return gotoPage(getPageCount({
        count: paginationCount,
        limit
      }));
    };
    var paginationProps;
    if ((localPagination || remotePagination) && !livePagination) {
      paginationProps = {
        onSkipChange: setSkip,
        onLimitChange: setLimit,
        reload,
        onRefresh: reload,
        totalCount: paginationCount,
        count,
        skip: skip2,
        limit,
        remotePagination,
        localPagination,
        livePagination,
        pagination,
        gotoPage,
        gotoNextPage,
        gotoFirstPage,
        gotoLastPage,
        gotoPrevPage,
        hasNextPage: hasNext,
        hasPrevPage: hasPrev
      };
    }
    return {
      count,
      paginationCount,
      reload,
      setSkip,
      setLimit,
      gotoNextPage,
      gotoPrevPage,
      hasNextPage: hasNext,
      hasPrevPage: hasPrev,
      gotoFirstPage,
      gotoLastPage,
      gotoPage,
      paginationProps
    };
  };
  var useDataSourceCache = function useDataSourceCache2(props2, computedProps, computedPropsRef) {
    var prevDataSource = (0, _usePrevious.default)(props2.dataSource, props2.dataSource);
    var _useProperty = (0, _useProperty7.default)(props2, "dataSourceCache", void 0, {
      onChange: function onChange(dataSourceCache2, info) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.initialProps.onDataSourceCacheChange) {
          computedProps2.initialProps.onDataSourceCacheChange(dataSourceCache2, info);
        }
      }
    }), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), dataSourceCache = _useProperty2[0], setDataSourceCache = _useProperty2[1];
    if (props2.clearDataSourceCacheOnChange && prevDataSource !== props2.dataSource) {
      dataSourceCache = void 0;
    }
    (0, _react.useLayoutEffect)(function() {
      if (props2.clearDataSourceCacheOnChange) {
        setDataSourceCache(void 0);
      }
    }, [props2.dataSource]);
    return [dataSourceCache, setDataSourceCache];
  };
  var _default2 = function _default3(props2, computedProps, computedPropsRef) {
    var computedRemoteData = isRemoteData(props2);
    var computedRemoteFilter = isRemoteFilter(props2);
    var computedRemoteSort = isRemoteSort(props2);
    var computedLivePagination = isLivePagination(props2);
    var computedRemotePagination = isRemotePagination(props2);
    var computedLocalPagination = isLocalPagination(props2);
    var computedPagination = computedRemotePagination || computedLocalPagination;
    var _useState5 = (0, _react.useState)([]), _useState6 = (0, _slicedToArray2.default)(_useState5, 2), ungroupedData = _useState6[0], setUngroupedData = _useState6[1];
    var _useState7 = (0, _react.useState)([]), _useState8 = (0, _slicedToArray2.default)(_useState7, 2), loadDataTrigger = _useState8[0], setLoadDataTrigger = _useState8[1];
    var _useState9 = (0, _react.useState)(false), _useState10 = (0, _slicedToArray2.default)(_useState9, 2), append3 = _useState10[0], setAppend = _useState10[1];
    var _useProperty3 = (0, _useProperty7.default)(props2, "skip", 0), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), computedSkip = _useProperty4[0], setSkip = _useProperty4[1];
    var _useProperty5 = (0, _useProperty7.default)(props2, "limit", 50), _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2), computedLimit = _useProperty6[0], setLimit = _useProperty6[1];
    var _useDataSourceCache = useDataSourceCache(props2, computedProps, computedPropsRef), _useDataSourceCache2 = (0, _slicedToArray2.default)(_useDataSourceCache, 2), computedDataSourceCache = _useDataSourceCache2[0], setDataSourceCache = _useDataSourceCache2[1];
    var _useState11 = (0, _react.useState)(props2.summaryReducer ? props2.summaryReducer.initialValue : null), _useState12 = (0, _slicedToArray2.default)(_useState11, 2), summary = _useState12[0], setSummary = _useState12[1];
    var setItemOnReorderingGroups = function setItemOnReorderingGroups2(index2, item, config2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      computedProps2.setItemAt(index2, item, config2);
      computedProps2.reload();
    };
    var setItemAt = function setItemAt2(index2, item, config2) {
      var replace2 = config2 && config2.replace;
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var newItem = computedProps2.getItemAt(index2);
      var oldId = computedProps2.getItemId(newItem);
      if (!newItem) {
        return;
      }
      if (replace2) {
        newItem = item;
      } else {
        if (config2 && config2.property) {
          newItem = _objectSpread2(_objectSpread2({}, newItem), {}, (0, _defineProperty2.default)({}, config2.property, config2.value));
        } else {
          if (config2 && config2.deepCloning && computedProps2.compoundIdProperty) {
            var parts = computedProps2.idProperty.split(computedProps2.idPropertySeparator);
            for (var i = 0; i < parts.length; i++) {
              var part = parts[i];
              if (newItem[part]) {
                Object.assign(newItem[part], _objectSpread2({}, item[part]));
              }
            }
          } else {
            newItem = _objectSpread2(_objectSpread2({}, newItem), item);
          }
        }
      }
      var newId = computedProps2.getItemId(newItem);
      if (newId !== oldId) {
        if (computedProps2.showWarnings) {
          console.error("Cannot replace the item with another one that has a different value for the idProperty!");
        }
        return;
      }
      setDataSourceCache(_objectSpread2(_objectSpread2({}, computedProps2.computedDataSourceCache), {}, (0, _defineProperty2.default)({}, newId, newItem)));
    };
    var setItemsAt = function setItemsAt2(items, config2) {
      var replace2 = config2 && config2.replace;
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var newIds = {};
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var oldId = computedProps2.getItemId(item);
        var index2 = computedProps2.getItemIndex(item);
        var newItem = computedProps2.getItemAt(index2);
        if (!newItem) {
          continue;
        }
        if (replace2) {
          newItem = item;
        } else {
          newItem = _objectSpread2(_objectSpread2({}, newItem), item);
        }
        var newId = computedProps2.getItemId(newItem);
        if (newId !== oldId) {
          continue;
        }
        newIds[newId] = newItem;
      }
      if (!items.length) {
        return;
      }
      setDataSourceCache(_objectSpread2(_objectSpread2({}, computedProps2.computedDataSourceCache), newIds));
    };
    var setItemPropertyAt = function setItemPropertyAt2(index2, property, value) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (property === computedProps2.idProperty) {
        if (computedProps2.showWarnings) {
          console.error('Cannot update the value of the "idProperty" property!');
        }
      }
      var item = computedProps2.getItemAt(index2);
      if (item) {
        item = _objectSpread2({}, item);
        item[property] = value;
        setItemAt(index2, item, {
          property,
          value
        });
      }
    };
    var setItemPropertyForId = function setItemPropertyForId2(id2, property, value) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var index2 = computedProps2.getRowIndexById(id2);
      setItemPropertyAt(index2, property, value);
    };
    var _useData = useData({
      dataSource: props2.dataSource,
      skip: computedSkip,
      limit: computedLimit,
      localPagination: computedLocalPagination
    }, props2.context), data = _useData.data, dataMap = _useData.dataMap, dataIndexMap = _useData.dataIndexMap, setDataIndexMap = _useData.setDataIndexMap, setDataMap = _useData.setDataMap, count = _useData.count, silentSetData = _useData.silentSetData, setCount = _useData.setCount, originalData = _useData.originalData, setOriginalData = _useData.setOriginalData, dataCountAfterFilter = _useData.dataCountAfterFilter, setDataCountAfterFilter = _useData.setDataCountAfterFilter;
    var _useState13 = (0, _react.useState)(Date.now), _useState14 = (0, _slicedToArray2.default)(_useState13, 2), reloadTimestamp = _useState14[0], setReloadTimestamp = _useState14[1];
    var reload = function reload2() {
      setReloadTimestamp(Date.now());
    };
    var getFilteredRows = (0, _react.useCallback)(function(dataCount) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var filteredRowsCount = computedProps2.filteredRowsCount;
      if (dataCount === void 0) {
        return;
      }
      if (filteredRowsCount) {
        filteredRowsCount(dataCount);
      }
    }, [dataCountAfterFilter]);
    if (computedProps.filteredRowsCount) {
      getFilteredRows(dataCountAfterFilter);
    }
    var lastSkipRef = (0, _react.useRef)(computedSkip);
    var lastFilterValueRef = (0, _react.useRef)(computedProps.computedFilterValue);
    var lastLimitRef = (0, _react.useRef)(computedLimit);
    var lastGroupBy = (0, _usePrevious.default)(computedProps.computedGroupBy, computedProps.computedGroupBy);
    var lastDataSource = (0, _usePrevious.default)(props2.dataSource, props2.dataSource);
    var dataPromiseRef = (0, _react.useRef)(null);
    dataPromiseRef.current = (0, _useLoadDataEffect.default)({
      getDataSource: function getDataSource(_ref8) {
        var shouldReload = _ref8.shouldReload;
        var computedProps2 = computedPropsRef.current;
        return shouldReload ? computedProps2.dataSource : computedProps2.originalData;
      }
    }, function(dataToLoad, _ref9) {
      var shouldReload = _ref9.shouldReload, intercept = _ref9.intercept;
      var _computedPropsRef$cur = computedPropsRef.current, computedSortInfo = _computedPropsRef$cur.computedSortInfo, computedRemoteData2 = _computedPropsRef$cur.computedRemoteData, computedFilterValue = _computedPropsRef$cur.computedFilterValue, computedGroupBy = _computedPropsRef$cur.computedGroupBy, prevOriginalData = _computedPropsRef$cur.originalData, skipLoadOnMount = _computedPropsRef$cur.skipLoadOnMount, wasMountedRef = _computedPropsRef$cur.wasMountedRef, initialState2 = _computedPropsRef$cur.initialState;
      if (!prevOriginalData.length && computedRemoteData2) {
        computedPropsRef.current.setLoading(true);
      }
      var initialCount;
      if (skipLoadOnMount && !wasMountedRef.current && initialState2 && initialState2.data) {
        dataToLoad = initialState2.data;
        initialCount = initialState2.count;
      }
      if (computedRemoteData2 && !Array.isArray(dataToLoad)) {
        computedPropsRef.current.setLoading(true);
      }
      var skipControlled = (0, _isControlledProperty.default)(computedProps.initialProps, "skip");
      var shouldResetSkip = shouldReload && typeof props2.dataSource === "function" && props2.dataSource !== lastDataSource && !skipControlled && computedPropsRef.current.computedSkip !== 0;
      if (!shouldResetSkip) {
        if (shouldReload && typeof props2.dataSource === "function" && computedPropsRef.current.computedSkip !== 0 && computedPropsRef.current.computedFilterable && (!(0, _fastDeepEqual.default)(computedPropsRef.current.computedFilterValue, lastFilterValueRef.current) || computedPropsRef.current.computedGroupBy !== lastGroupBy)) {
          shouldResetSkip = true;
        }
      }
      if (shouldResetSkip) {
        setSkip(0);
        return Promise.resolve(true);
      }
      return intercept(loadDataSource(dataToLoad, {
        sortInfo: computedSortInfo,
        currentData: computedPropsRef.current.data,
        skip: computedSkip,
        limit: computedLimit,
        filterValue: computedFilterValue,
        groupBy: computedGroupBy
      }), dataToLoad).then(function(_ref10) {
        var originalData2 = _ref10.data, count2 = _ref10.count;
        if (initialCount) {
          count2 = initialCount;
        }
        var computedProps2 = computedPropsRef.current;
        var queue = (0, _batchUpdate.default)();
        var data2 = originalData2;
        var shouldAppend = computedLivePagination && !shouldReload ? computedSkip > lastSkipRef.current : append3;
        if (shouldAppend) {
          originalData2 = prevOriginalData.concat(originalData2);
          data2 = originalData2;
        }
        var computeDataResult = (0, _computeData.default)({
          remoteData: false,
          originalData: originalData2
        }, computedProps2, queue);
        data2 = computeDataResult.data || originalData2;
        var dataCountAfterFilter2 = computeDataResult.dataCountAfterFilter;
        var prevComputedSkip = lastSkipRef.current;
        lastSkipRef.current = computedSkip;
        lastFilterValueRef.current = computedFilterValue;
        lastLimitRef.current = computedLimit;
        var shouldIndexData = computedProps2.computedRowSelectionEnabled || computedProps2.computedRowExpandEnabled || computedProps2.treeColumn || computedProps2.treeEnabled || computedProps2.rowIndexColumn || computedProps2.computedRowHeights || computedProps2.computedGroupBy && props2.stickyGroupRows;
        var dataIndexMap2 = shouldIndexData && Array.isArray(data2) ? {} : null;
        var stickyGroupsIndexes = props2.stickyGroupRows === true || props2.stickyTreeNodes === true ? {} : null;
        var dataMap2 = shouldIndexData && Array.isArray(data2) ? data2.reduce(function(acc, item, index2) {
          var id2 = computedProps2.getItemId(item);
          if (stickyGroupsIndexes) {
            if (item.__group) {
              stickyGroupsIndexes[index2] = item.depth;
            }
            if (item.__nodeProps && !item.__nodeProps.leafNode) {
              stickyGroupsIndexes[index2] = item.__nodeProps.depth + 1;
            }
          }
          acc[id2] = item;
          dataIndexMap2[id2] = index2;
          return acc;
        }, {}) : null;
        return queue.commit(function() {
          var computedProps3 = computedPropsRef.current;
          setOriginalData(originalData2);
          if (computedProps3.scrollTopOnSort === true && computedProps3.loadDataTrigger.find(function(s) {
            return s == "sortInfo";
          }) || computedProps3.scrollTopOnSort === "always") {
            raf2(function() {
              computedProps3.setScrollTop(0);
            });
          }
          if (computedSkip === 0 && prevComputedSkip > 0) {
            raf2(function() {
              computedProps3.setScrollTop(0);
            });
          }
          if (computedProps3.scrollTopOnFilter && computedProps3.loadDataTrigger.find(function(s) {
            return s == "filterValue";
          })) {
            raf2(function() {
              computedProps3.setScrollTop(0);
            });
          }
          setLoadDataTrigger([]);
          if (append3) {
            setAppend(false);
          }
          computedProps3.setDataMap(dataMap2);
          computedProps3.setDataIndexMap(dataIndexMap2);
          if (stickyGroupsIndexes && computedProps3.setStickyGroupsIndexes) {
            computedProps3.setStickyGroupsIndexes(stickyGroupsIndexes);
          }
          setDataCountAfterFilter(dataCountAfterFilter2);
          if (dataCountAfterFilter2 != null && computedSkip >= dataCountAfterFilter2 && !computedRemoteData2) {
            setSkip(0);
          }
          silentSetData(data2 || []);
          computedProps3.setLoading(false);
          if (shouldReload) {
            setCount(count2);
          }
        });
      }, function(_err) {
      });
    }, {
      reloadDeps: [props2.dataSource, computedRemoteData ? computedSkip : null, computedRemoteData && !computedLivePagination ? computedLimit : null, reloadTimestamp, props2.pagination, props2.remotePagination, props2.pivot, props2.livePagination, computedRemoteData || props2.groupBy ? computedProps.computedGroupBy : null, computedRemoteData ? JSON.stringify(computedProps.computedSortInfo) : null, computedRemoteData ? JSON.stringify(computedProps.computedFilterValue) : null, computedRemoteFilter ? JSON.stringify(computedProps.computedFilterValue) : null, JSON.stringify(computedProps.computedCollapsedGroups || ""), JSON.stringify(computedProps.computedExpandedGroups || "")],
      noReloadDeps: [originalData, computedProps.computedGroupBy, computedProps.groupColumn, computedProps.renderRowDetails, computedProps.treeColumn, computedProps.showGroupSummaryRow, !computedRemoteData ? computedSkip : null, !computedRemoteData ? computedLimit : null, !computedRemoteData ? JSON.stringify(computedProps.computedSortInfo) : null, !computedRemoteFilter ? JSON.stringify(computedProps.computedFilterValue) : null, computedProps.computedExpandedNodes ? JSON.stringify(computedProps.computedExpandedNodes) : null, computedProps.computedNodeCache ? JSON.stringify(computedProps.computedNodeCache) : null, computedProps.computedLoadingNodes ? JSON.stringify(computedProps.computedLoadingNodes) : null, computedDataSourceCache, computedProps.stickyGroupRows, computedProps.stickyTreeNodes]
    });
    var paginationProps = usePagination({
      append: append3,
      reload,
      setAppend,
      lastSkipRef,
      lastLimitRef,
      skip: computedSkip,
      limit: computedLimit,
      count,
      setSkip,
      setLimit,
      pagination: computedPagination,
      livePagination: computedLivePagination,
      localPagination: computedLocalPagination,
      remotePagination: computedRemotePagination,
      dataCountAfterFilter,
      originalData,
      data
    }, computedPropsRef);
    var getRowIndexById = (0, _react.useCallback)(function(rowId, data2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return -1;
      }
      var dataIndexMap2 = computedProps2.dataIndexMap;
      if (dataIndexMap2) {
        return dataIndexMap2[rowId];
      }
      data2 = data2 || computedProps2.data;
      return (0, _getIndexBy.default)(data2, computedProps2.idProperty, rowId, computedProps2.getItemId, computedProps2.compoundIdProperty);
    }, []);
    var getItemIndexById = (0, _react.useCallback)(function(id2, data2) {
      return getRowIndexById(id2, data2);
    }, []);
    var getData = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return [];
      }
      return computedProps2.data;
    }, []);
    return _objectSpread2({
      getData,
      getRowIndexById,
      getItemIndexById,
      data,
      dataMap,
      setDataMap,
      dataIndexMap,
      setDataIndexMap,
      loadDataTrigger,
      setLoadDataTrigger,
      originalData,
      setOriginalData,
      ungroupedData,
      setUngroupedData,
      computedSkip,
      computedPagination,
      computedLimit,
      computedSummary: summary,
      setSummary,
      dataPromiseRef,
      silentSetData,
      computedLivePagination,
      computedLocalPagination,
      computedRemotePagination,
      computedRemoteData,
      computedRemoteFilter,
      computedRemoteSort,
      computedDataSourceCache,
      setDataSourceCache,
      setItemPropertyAt,
      setItemPropertyForId,
      setItemAt,
      setItemsAt,
      setItemOnReorderingGroups
    }, paginationProps);
  };
  useDataSource.default = _default2;
  return useDataSource;
}
var useScrollProps = {};
var hasRequiredUseScrollProps;
function requireUseScrollProps() {
  if (hasRequiredUseScrollProps)
    return useScrollProps;
  hasRequiredUseScrollProps = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useScrollProps, "__esModule", {
    value: true
  });
  useScrollProps.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  var _react = reactExports;
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var _default2 = function _default3(props2, computedProps) {
    var SCROLLBAR_WIDTH = (0, _react.useMemo)(function() {
      return (0, _getScrollbarWidth.default)();
    }, []);
    var scrollProps = _objectSpread2({
      scrollMaxDelta: SCROLLBAR_WIDTH ? 1 : 1,
      scrollThreshold: computedProps.scrollThreshold,
      scrollDebounceDelay: 1
    }, props2.scrollProps);
    if (computedProps.livePagination) {
      var loadNextPage = function loadNextPage2() {
        if (!computedProps.computedLoading && computedProps.gotoNextPage) {
          computedProps.gotoNextPage({
            append: true
          });
        }
      };
      scrollProps.onContainerScrollVerticalMax = function() {
        if (props2.scrollProps && props2.scrollProps.onContainerScrollVerticalMax) {
          var _props$scrollProps;
          (_props$scrollProps = props2.scrollProps).onContainerScrollVerticalMax.apply(_props$scrollProps, arguments);
        }
        loadNextPage();
      };
    }
    return scrollProps;
  };
  useScrollProps.default = _default2;
  return useScrollProps;
}
var useColumnsSizing = {};
var hasRequiredUseColumnsSizing;
function requireUseColumnsSizing() {
  if (hasRequiredUseColumnsSizing)
    return useColumnsSizing;
  hasRequiredUseColumnsSizing = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useColumnsSizing, "__esModule", {
    value: true
  });
  useColumnsSizing.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  var _defaultCheckColumnId = requireDefaultCheckColumnId();
  var _defaultRowReorderColumnId = requireDefaultRowReorderColumnId();
  var _defaultRowIndexColumnId = requireDefaultRowIndexColumnId();
  var _defaultRowExpandColumnId = requireDefaultRowExpandColumnId();
  var EMPTY_OBJECT = {};
  var removeItemFromArray = function removeItemFromArray2(array, obj) {
    var index2 = array.indexOf(obj);
    if (index2 >= 0) {
      array.splice(index2, 1);
    }
  };
  var getColumnsWidths = function getColumnsWidths2(columns) {
    return columns.reduce(function(width, column2) {
      return width + column2.computedWidth;
    }, 0);
  };
  var checkForSpecialColumns = function checkForSpecialColumns2(id2) {
    var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];
    if (specialColumns.indexOf(id2) === -1) {
      return false;
    }
    return true;
  };
  var useColumnsSizing$1 = function useColumnsSizing2(_props, _computedProps, computedPropsRef) {
    var computeColumnSizesToFit = function computeColumnSizesToFit2(gridWidth) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var visibleColumns = computedProps.visibleColumns;
      if (gridWidth <= 0 || !visibleColumns.length) {
        return;
      }
      var columnsToSize = [];
      var columnsNotToSize = [];
      visibleColumns.forEach(function(column3) {
        if (column3.resizable === false) {
          columnsNotToSize.push(column3);
        } else {
          columnsToSize.push(column3);
        }
      });
      var columnsToResize = columnsToSize.slice(0);
      var finished = false;
      var updateColumnsNotToSize = function updateColumnsNotToSize2(column3) {
        removeItemFromArray(columnsToResize, column3);
        columnsNotToSize.push(column3);
      };
      var newColumnSizes = {};
      while (!finished) {
        finished = true;
        var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);
        var scale2 = availableSpace / getColumnsWidths(columnsToResize);
        var spaceForLastColumn = availableSpace;
        for (var i = columnsToResize.length - 1; i >= 0; i--) {
          var column2 = columnsToResize[i];
          var minWidth = column2.computedMinWidth;
          var maxWidth = column2.computedMaxWidth;
          var newWidth = Math.round(column2.computedWidth * scale2);
          if (minWidth && newWidth < minWidth) {
            newWidth = minWidth;
            updateColumnsNotToSize(column2);
            finished = false;
          } else if (maxWidth && newWidth > maxWidth) {
            newWidth = maxWidth;
            updateColumnsNotToSize(column2);
            finished = false;
          } else if (i === 0) {
            newWidth = spaceForLastColumn;
          }
          var columnId = column2.id;
          Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));
          spaceForLastColumn -= newWidth;
        }
      }
      if (computedProps.virtualizeColumns) {
        var bodyRef = computedProps.bodyRef.current;
        var columnLayout = bodyRef.columnLayout;
        var headerLayout = columnLayout.headerLayout;
        var header = headerLayout.header;
        setTimeout(function() {
          header.updateColumns();
        }, 10);
      }
      var newReservedViewportWidth = computedProps.reservedViewportWidth;
      var columnFlexes = computedProps.columnFlexes;
      computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {
        getColumnBy: computedProps.getColumnBy,
        onColumnResize: computedProps.initialProps.onColumnResize,
        onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
        columnSizes: computedProps.columnSizes,
        setColumnSizes: computedProps.setColumnSizes,
        setColumnFlexes: computedProps.setColumnFlexes
      });
    };
    var checkForAvaibleWidth = function checkForAvaibleWidth2() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var scrollbars = computedProps.scrollbars;
      var hasVerticalScrollbar = scrollbars.vertical;
      var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;
      var computedAvailableWidth = computedProps.availableWidth || 0;
      var availableWidth = computedAvailableWidth - scrollbarWidth;
      if (availableWidth > 0) {
        computeColumnSizesToFit(availableWidth);
      }
    };
    var computeColumnSizesAuto = function computeColumnSizesAuto2(columns, callback2) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (!columns.length) {
        return;
      }
      columns.forEach(function(column2) {
        if (column2.resizable === false || checkForSpecialColumns(column2.id))
          ;
        else {
          callback2(column2);
        }
      });
    };
    var getCellForColumn = function getCellForColumn2(column2, row) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var result;
      var columnId = column2.id;
      var cells = row.getCells();
      if (!cells.length) {
        return;
      }
      cells.forEach(function(cell) {
        var cellProps = cell.props;
        var cellId = cellProps.id;
        if (columnId === cellId) {
          result = cell.domRef ? cell.domRef.current : cell.getDOMNode ? cell.getDOMNode() : null;
        }
      });
      return result;
    };
    var getCellsForColumn = function getCellsForColumn2(column2) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var result = [];
      if (computedProps.getRows) {
        computedProps.getRows().forEach(function(rowInstance) {
          var row = rowInstance.row;
          var cell = getCellForColumn(column2, row);
          result.push(cell);
        });
      }
      return result;
    };
    var cloneIntoDummyContainer = function cloneIntoDummyContainer2(cell, dummyContainer, skipSortTool) {
      var cellClone = cell && cell.cloneNode(true);
      if (!cellClone) {
        return;
      }
      cellClone.style.width = "";
      cellClone.style.minWidth = "";
      cellClone.style.maxWidth = "";
      cellClone.style.position = "static";
      cellClone.style.left = "";
      var rowClassName = "InovuaReactDataGrid__row";
      var headerClassName = "InovuaReactDataGrid__header";
      var headerCellClassName = "InovuaReactDataGrid__column-header";
      var sortToolClassName = "InovuaReactDataGrid__sort-icon-wrapper";
      var isHeader = cellClone.classList.contains(headerCellClassName);
      var cellContent;
      cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function(cell2) {
        var className = isHeader ? "InovuaReactDataGrid__column-header__content" : "InovuaReactDataGrid__cell__content";
        return cell2.classList.contains(className);
      });
      if (isHeader && skipSortTool) {
        var sortTool = cellContent.querySelector(".".concat(sortToolClassName));
        if (sortTool) {
          cellContent = cellContent.removeChild(sortTool);
        }
      }
      if (cellContent) {
        cellContent.style.width = "fit-content";
      } else {
        cellClone.style.width = "fit-content";
      }
      var cloneRow = document.createElement("div");
      var cloneRowClassList = cloneRow.classList;
      if (isHeader) {
        cloneRowClassList.add(headerClassName);
        cloneRow.style.position = "static";
      } else {
        cloneRowClassList.add(rowClassName);
      }
      var rowElement = cell.parentElement;
      while (rowElement) {
        var isRow = [rowClassName, headerClassName].some(function(cls) {
          return rowElement.classList.contains(cls);
        });
        if (isRow) {
          for (var i = 0; i < rowElement.classList.length; i++) {
            var item = rowElement.classList[i];
            cloneRowClassList.add(item);
          }
          break;
        }
        rowElement = rowElement.parentElement;
      }
      cloneRow.appendChild(cellClone);
      dummyContainer.appendChild(cloneRow);
    };
    var computeOptimizedWidth = function computeOptimizedWidth2(column2, skipHeader, skipSortTool) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return -1;
      }
      var cells = getCellsForColumn(column2);
      if (!cells || !cells.length) {
        return -1;
      }
      if (!skipHeader) {
        var headerCell;
        var header = computedProps.getHeader();
        var headerCells = header.getCells();
        headerCells.find(function(cell) {
          var cellProps = cell.props;
          if (cellProps.id === column2.id) {
            headerCell = cell.getDOMNode();
          }
        });
        if (headerCell && headerCell.classList.contains("InovuaReactDataGrid__column-header__resize-wrapper")) {
          headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function(cell) {
            return cell.classList.contains("InovuaReactDataGrid__column-header");
          });
        }
        cells.push(headerCell);
      }
      return addCellsToContainer(cells, skipHeader, skipSortTool);
    };
    var addCellsToContainer = function addCellsToContainer2(cells, skipHeader, skipSortTool) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return -1;
      }
      var dummyContainer = document.createElement("span");
      dummyContainer.style.position = "fixed";
      var vl2 = computedProps.getVirtualList();
      var container2 = vl2.getContainerNode();
      container2.appendChild(dummyContainer);
      (0, _toConsumableArray2.default)(cells).map(function(cell) {
        return cloneIntoDummyContainer(cell, dummyContainer, skipSortTool);
      });
      var dummyContainerWidth = dummyContainer.offsetWidth;
      if (!skipHeader) {
        dummyContainerWidth += 3;
      } else {
        dummyContainerWidth += 1;
      }
      container2.removeChild(dummyContainer);
      return dummyContainerWidth;
    };
    var normaliseWidth = function normaliseWidth2(column2, width) {
      var minWidth = column2.minWidth;
      var maxWidth = column2.maxWidth;
      if (minWidth && width < minWidth) {
        width = minWidth;
      }
      if (maxWidth && width > maxWidth) {
        width = maxWidth;
      }
      return width;
    };
    var setColumnSizesToFit = function setColumnSizesToFit2() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var enableColumnAutosize = computedProps.enableColumnAutosize;
      if (!enableColumnAutosize) {
        showWarning("setColumnSizesToFit");
        return;
      }
      checkForAvaibleWidth();
    };
    var setColumnsSizesAuto = function setColumnsSizesAuto2() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : EMPTY_OBJECT, columnIds = _ref2.columnIds, skipHeader = _ref2.skipHeader, skipSortTool = _ref2.skipSortTool;
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var enableColumnAutosize = computedProps.enableColumnAutosize;
      if (!enableColumnAutosize) {
        showWarning("setColumnsSizesAuto");
        return;
      }
      var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;
      var shouldSkipSortTool = skipSortTool != null ? skipSortTool : false;
      var allIds = [];
      var columns = [];
      if (columnIds !== void 0) {
        if (Array.isArray(columnIds)) {
          allIds = columnIds;
        }
      }
      for (var i = 0; i < allIds.length; i++) {
        var id2 = allIds[i];
        var column2 = computedProps.getColumnBy(id2);
        columns.push(column2);
      }
      if (columns && columns.length === 0) {
        columns = computedProps.visibleColumns;
      }
      if (!columns || columns.length === 0) {
        return;
      }
      var columnsToSize = [];
      var counter2 = -1;
      var newColumnSizes = {};
      while (counter2 !== 0) {
        counter2 = 0;
        computeColumnSizesAuto(columns, function(column3) {
          if (columnsToSize.indexOf(column3) >= 0) {
            return false;
          }
          var optimizedWidth = computeOptimizedWidth(column3, shouldSkipHeader, shouldSkipSortTool);
          if (optimizedWidth > 0) {
            var newWidth = normaliseWidth(column3, optimizedWidth);
            var columnId = column3.id;
            columnsToSize.push(column3);
            Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));
            counter2++;
          }
          return true;
        });
      }
      if (computedProps.virtualizeColumns) {
        var bodyRef = computedProps.bodyRef.current;
        var columnLayout = bodyRef.columnLayout;
        var headerLayout = columnLayout.headerLayout;
        var header = headerLayout.header;
        setTimeout(function() {
          header.updateColumns();
        }, 10);
      }
      var newReservedViewportWidth = computedProps.reservedViewportWidth;
      var columnFlexes = computedProps.columnFlexes;
      computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {
        getColumnBy: computedProps.getColumnBy,
        onColumnResize: computedProps.initialProps.onColumnResize,
        onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,
        columnSizes: computedProps.columnSizes,
        setColumnSizes: computedProps.setColumnSizes,
        setColumnFlexes: computedProps.setColumnFlexes
      });
    };
    var setColumnSizeAuto = function setColumnSizeAuto2(id2, skipHeader) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var enableColumnAutosize = computedProps.enableColumnAutosize;
      if (!enableColumnAutosize) {
        showWarning("setColumnSizeAuto");
        return;
      }
      if (id2) {
        setColumnsSizesAuto({
          columnIds: [id2],
          skipHeader
        });
      }
      return;
    };
    var showWarning = function showWarning2(method) {
      return console.error("In order for ".concat(method, " to work, the 'enableColumnAutosize' prop should be 'true'."));
    };
    return {
      setColumnSizesToFit,
      setColumnsSizesAuto,
      setColumnSizeAuto
    };
  };
  var _default2 = useColumnsSizing$1;
  useColumnsSizing.default = _default2;
  return useColumnsSizing;
}
var useGroups = {};
var mapGroups = {};
var hasRequiredMapGroups;
function requireMapGroups() {
  if (hasRequiredMapGroups)
    return mapGroups;
  hasRequiredMapGroups = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(mapGroups, "__esModule", {
    value: true
  });
  mapGroups.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var _default2 = function _default3(groups, props2) {
    var map2 = groups.reduce(function(acc, group) {
      if (group.name) {
        acc[group.name] = _objectSpread2({}, group);
      }
      return acc;
    }, {});
    if (props2.showWarnings) {
      groups.forEach(function(group) {
        if (group.group && !map2[group.group]) {
          console.error('You have referred group "'.concat(group.group, '", but it is not defined in your groups prop.'));
        }
      });
    }
    Object.keys(map2).map(function(groupName) {
      var count = -1;
      var group;
      var itGroupName = groupName;
      while (group = map2[itGroupName]) {
        count++;
        itGroupName = group.group;
        if (!itGroupName) {
          break;
        }
      }
      map2[groupName].computedDepth = count;
    });
    return map2;
  };
  mapGroups.default = _default2;
  return mapGroups;
}
var hasRequiredUseGroups;
function requireUseGroups() {
  if (hasRequiredUseGroups)
    return useGroups;
  hasRequiredUseGroups = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useGroups, "__esModule", {
    value: true
  });
  useGroups.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _mapGroups = _interopRequireDefault2(requireMapGroups());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var getGroupsDepth = function getGroupsDepth2(groupsMap) {
    if (!groupsMap) {
      return 0;
    }
    return Math.max.apply(Math, (0, _toConsumableArray2.default)(Object.keys(groupsMap).map(function(groupName) {
      return groupsMap[groupName].computedDepth || 0;
    })));
  };
  var getPivotGroups = function getPivotGroups2(uniqueValuesRoot, parentGroup, pivotSummaryGroups) {
    var groups = [];
    var field = uniqueValuesRoot.field, values = uniqueValuesRoot.values;
    if (field && values) {
      Object.keys(values).forEach(function(value) {
        var groupId = "".concat(parentGroup ? parentGroup + "_" : "").concat(field, ":").concat(value);
        var defaultGroup = pivotSummaryGroups[field];
        var group = {
          name: groupId,
          header: value
        };
        if (defaultGroup) {
          if (typeof defaultGroup === "function") {
            group = _objectSpread2(_objectSpread2({}, defaultGroup(_objectSpread2(_objectSpread2({}, group), {}, {
              field,
              values
            }))), group);
          } else {
            group = _objectSpread2(_objectSpread2({}, defaultGroup), group);
          }
        }
        if (parentGroup) {
          group.group = parentGroup;
        }
        groups.push(group);
        var nextRoot = values[value];
        groups.push.apply(groups, (0, _toConsumableArray2.default)(getPivotGroups2(nextRoot, groupId, pivotSummaryGroups)));
      });
    }
    return groups;
  };
  var useGroups$1 = function useGroups2(props2, computedProps) {
    var computedPivotUniqueValuesPerColumn = computedProps.computedPivotUniqueValuesPerColumn;
    var groups = props2.groups;
    if (computedPivotUniqueValuesPerColumn && computedPivotUniqueValuesPerColumn.values) {
      var pivotSummaryGroups = computedProps.pivot ? computedProps.pivot.reduce(function(acc, pivot) {
        if (pivot && pivot.summaryGroup) {
          acc[pivot.name] = pivot.summaryGroup;
        }
        return acc;
      }, {}) : {};
      groups = getPivotGroups(computedPivotUniqueValuesPerColumn, void 0, pivotSummaryGroups);
    }
    var groupsMap = groups ? (0, _mapGroups.default)(groups, props2) : null;
    var computedGroupsDepth = getGroupsDepth(groupsMap);
    return {
      computedGroups: groups,
      computedGroupsMap: groupsMap,
      computedGroupsDepth
    };
  };
  var _default2 = useGroups$1;
  useGroups.default = _default2;
  return useGroups;
}
var useSelection = {};
var isSelectionEnabled = {};
var hasRequiredIsSelectionEnabled;
function requireIsSelectionEnabled() {
  if (hasRequiredIsSelectionEnabled)
    return isSelectionEnabled;
  hasRequiredIsSelectionEnabled = 1;
  Object.defineProperty(isSelectionEnabled, "__esModule", {
    value: true
  });
  isSelectionEnabled.default = void 0;
  var isSelectionEnabled$1 = function isSelectionEnabled2(props2) {
    var selected = props2.selected, defaultSelected = props2.defaultSelected, enableSelection = props2.enableSelection, cellSelection2 = props2.cellSelection, checkboxColumn = props2.checkboxColumn;
    if (enableSelection !== void 0) {
      return !!enableSelection;
    }
    return selected !== void 0 || defaultSelected !== void 0 && cellSelection2 === void 0 || !!checkboxColumn;
  };
  var _default2 = isSelectionEnabled$1;
  isSelectionEnabled.default = _default2;
  return isSelectionEnabled;
}
var isMultiSelect = {};
var isSelectionControlled = {};
var hasRequiredIsSelectionControlled;
function requireIsSelectionControlled() {
  if (hasRequiredIsSelectionControlled)
    return isSelectionControlled;
  hasRequiredIsSelectionControlled = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(isSelectionControlled, "__esModule", {
    value: true
  });
  isSelectionControlled.default = void 0;
  var _isControlledProperty = _interopRequireDefault2(requireIsControlledProperty());
  var isSelectionControlled$1 = function isSelectionControlled2(props2) {
    return (0, _isControlledProperty.default)(props2, "selected");
  };
  var _default2 = isSelectionControlled$1;
  isSelectionControlled.default = _default2;
  return isSelectionControlled;
}
var hasRequiredIsMultiSelect;
function requireIsMultiSelect() {
  if (hasRequiredIsMultiSelect)
    return isMultiSelect;
  hasRequiredIsMultiSelect = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(isMultiSelect, "__esModule", {
    value: true
  });
  isMultiSelect.default = void 0;
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _isSelectionEnabled = _interopRequireDefault2(requireIsSelectionEnabled());
  var _isSelectionControlled = _interopRequireDefault2(requireIsSelectionControlled());
  var isMultiSelect$1 = function isMultiSelect2(props2) {
    if (!(0, _isSelectionEnabled.default)(props2)) {
      return false;
    }
    if (props2.multiSelect !== void 0) {
      return !!props2.multiSelect;
    }
    var controlled = (0, _isSelectionControlled.default)(props2);
    var isMulti = controlled ? !!((0, _typeof2.default)(props2.selected) == "object" && props2.selected) || typeof props2.selected === "boolean" : !!((0, _typeof2.default)(props2.defaultSelected) == "object" && props2.defaultSelected) || typeof props2.defaultSelected === "boolean" || props2.checkboxColumn;
    return !!isMulti;
  };
  var _default2 = isMultiSelect$1;
  isMultiSelect.default = _default2;
  return isMultiSelect;
}
var handleSelection = {};
var hasRequiredHandleSelection;
function requireHandleSelection() {
  if (hasRequiredHandleSelection)
    return handleSelection;
  hasRequiredHandleSelection = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(handleSelection, "__esModule", {
    value: true
  });
  handleSelection.notifySelection = handleSelection.handleSingleSelection = handleSelection.handleSelection = handleSelection.handleMultiSelectionRowToggle = handleSelection.handleMultiSelection = handleSelection.findInitialSelectionIndex = void 0;
  var _isControlledProperty = _interopRequireDefault2(requireIsControlledProperty());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var ua2 = globalObject.navigator ? globalObject.navigator.userAgent : "";
  var isSafari2 = ua2.indexOf("Safari") !== -1 && ua2.indexOf("Chrome") === -1;
  var delay35 = function delay352(fn) {
    return function() {
      return setTimeout(fn, 35);
    };
  };
  var now2 = function now3(fn) {
    return function() {
      return fn();
    };
  };
  var findInitialSelectionIndex = function findInitialSelectionIndex2(computedProps) {
    var selected = computedProps.getSelectedMap();
    var index2 = null;
    if (!selected || !Object.keys(selected).length) {
      return index2;
    }
    var i = 0;
    var data = computedProps.data;
    var len = data.length;
    var id2;
    for (; i < len; i++) {
      id2 = computedProps.getItemId(data[i]);
      if (selected[id2]) {
        index2 = i;
      }
    }
    return index2;
  };
  handleSelection.findInitialSelectionIndex = findInitialSelectionIndex;
  var notifySelection = function notifySelection2(computedProps, selected, data, unselected, queue) {
    var queueDefined = !!queue;
    queue = queue || (0, _batchUpdate.default)();
    var onSelectionChange = (isSafari2 ? delay35 : now2)(function() {
      if (typeof computedProps.onSelectionChange == "function") {
        computedProps.onSelectionChange({
          selected,
          data,
          unselected,
          originalData: (computedProps === null || computedProps === void 0 ? void 0 : computedProps.originalData) || null
        });
      }
    });
    if (!(0, _isControlledProperty.default)(computedProps.initialProps, "unselected")) {
      queue(function() {
        computedProps.setUnselected(unselected);
      });
    }
    if (!(0, _isControlledProperty.default)(computedProps.initialProps, "selected")) {
      queue(function() {
        computedProps.setSelected(selected, {
          silent: true
        });
      });
    }
    onSelectionChange();
    if (!queueDefined) {
      queue.commit();
    }
  };
  handleSelection.notifySelection = notifySelection;
  var handleSingleSelection = function handleSingleSelection2(rowProps, computedProps, event2, queue) {
    var data = rowProps.data;
    var rowSelected = computedProps.isRowSelected(data);
    var newSelected = !rowSelected;
    var ctrlKey = event2.metaKey || event2.ctrlKey;
    if (!computedProps.toggleRowSelectOnClick && rowSelected && event2 && !ctrlKey) {
      newSelected = true;
    }
    var selectedId = newSelected ? computedProps.getItemId(data) : null;
    notifySelection(computedProps, selectedId, data, null, queue);
  };
  handleSelection.handleSingleSelection = handleSingleSelection;
  var handleMultiSelection = function handleMultiSelection2(computedProps, data, config2, queue) {
    var selIndex = config2.selIndex;
    var prevShiftKeyIndex = config2.prevShiftKeyIndex;
    var map2 = selIndex == null ? {} : Object.assign({}, computedProps.computedSelected);
    if (prevShiftKeyIndex != null && selIndex != null) {
      var min = Math.min(prevShiftKeyIndex, selIndex);
      var max = Math.max(prevShiftKeyIndex, selIndex);
      var removeArray = computedProps.data.slice(min, max + 1) || [];
      removeArray.forEach(function(item) {
        if (item) {
          var id2 = computedProps.getItemId(item);
          delete map2[id2];
        }
      });
    }
    data.forEach(function(item) {
      if (item) {
        var id2 = computedProps.getItemId(item);
        map2[id2] = item;
      }
    });
    notifySelection(computedProps, map2, data, null, queue);
  };
  handleSelection.handleMultiSelection = handleMultiSelection;
  var handleMultiSelectionRowToggle = function handleMultiSelectionRowToggle2(computedProps, data, queue) {
    var selected = computedProps.computedSelected;
    var isSelected2 = computedProps.isRowSelected(data);
    if (selected !== true) {
      var clone2 = Object.assign({}, selected);
      var id2 = computedProps.getItemId(data);
      if (isSelected2) {
        delete clone2[id2];
      } else {
        clone2[id2] = data;
      }
      notifySelection(computedProps, clone2, data, null, queue);
    } else {
      var _id = computedProps.getItemId(data);
      var unselected = Object.assign({}, computedProps.computedUnselected);
      if (isSelected2) {
        unselected[_id] = data;
      } else {
        delete unselected[_id];
      }
      notifySelection(computedProps, true, data, unselected, queue);
    }
    return isSelected2;
  };
  handleSelection.handleMultiSelectionRowToggle = handleMultiSelectionRowToggle;
  var handleSelection$1 = function handleSelection2(rowProps, computedProps, event2, queue) {
    var queueDefined = !!queue;
    if (!queue) {
      queue = (0, _batchUpdate.default)();
    }
    if (!computedProps.computedRowSelectionEnabled) {
      return;
    }
    if (!computedProps.computedRowMultiSelectionEnabled) {
      handleSingleSelection(rowProps, computedProps, event2, queue);
      if (!queueDefined) {
        queue.commit();
      }
      return;
    }
    var selIndex = computedProps.selectionIndexRef.current;
    if (selIndex === null) {
      selIndex = findInitialSelectionIndex(computedProps);
    }
    var index2 = rowProps.rowIndex;
    var prevShiftKeyIndex = computedProps.shiftKeyIndexRef.current;
    var start;
    var end;
    var data;
    if (event2.metaKey || event2.ctrlKey || computedProps.toggleRowSelectOnClick && computedProps.getSelectedCount() === 1 && computedProps.isRowSelected(computedProps.data[index2])) {
      computedProps.selectionIndexRef.current = index2;
      computedProps.shiftKeyIndexRef.current = null;
      var unselect = handleMultiSelectionRowToggle(computedProps, computedProps.data[index2], queue);
      if (!queueDefined) {
        queue.commit();
      }
      if (unselect) {
        computedProps.selectionIndexRef.current++;
        computedProps.shiftKeyIndexRef.current = prevShiftKeyIndex;
        return false;
      }
      return;
    }
    if (!event2.shiftKey) {
      computedProps.selectionIndexRef.current = index2;
      computedProps.shiftKeyIndexRef.current = null;
      selIndex = null;
    } else {
      computedProps.shiftKeyIndexRef.current = index2;
    }
    if (selIndex == null) {
      data = [computedProps.data[index2]];
    } else {
      start = Math.min(index2, selIndex);
      end = Math.max(index2, selIndex) + 1;
      data = computedProps.data.slice(start, end);
    }
    handleMultiSelection(computedProps, data, {
      selIndex,
      prevShiftKeyIndex
    }, queue);
    if (!queueDefined) {
      queue.commit();
    }
  };
  handleSelection.handleSelection = handleSelection$1;
  return handleSelection;
}
var hasRequiredUseSelection;
function requireUseSelection() {
  if (hasRequiredUseSelection)
    return useSelection;
  hasRequiredUseSelection = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useSelection, "__esModule", {
    value: true
  });
  useSelection.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var _useProperty5 = _interopRequireDefault2(requireUseProperty());
  var _isSelectionEnabled = _interopRequireDefault2(requireIsSelectionEnabled());
  var _isMultiSelect = _interopRequireDefault2(requireIsMultiSelect());
  var _isSelectionControlled = _interopRequireDefault2(requireIsSelectionControlled());
  var _handleSelection = requireHandleSelection();
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
          o = it;
        var i = 0;
        var F2 = function F3() {
        };
        return { s: F2, n: function n2() {
          if (i >= o.length)
            return { done: true };
          return { done: false, value: o[i++] };
        }, e: function e2(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function s() {
      it = it.call(o);
    }, n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e2(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f2() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    } };
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n2 = Object.prototype.toString.call(o).slice(8, -1);
    if (n2 === "Object" && o.constructor)
      n2 = o.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  var EMPTY_OBJECT = {};
  var getUnselectedFromProps = function getUnselectedFromProps2(computedProps) {
    if (!computedProps) {
      return null;
    }
    if (computedProps.computedUnselected === void 0) {
      return null;
    }
    return computedProps.computedUnselected;
  };
  var getUnselectedCountFromProps = function getUnselectedCountFromProps2(computedProps, unselected) {
    if (!computedProps) {
      return 0;
    }
    if (!computedProps.computedRowSelectionEnabled) {
      return 0;
    }
    if (!computedProps.computedRowMultiSelectionEnabled) {
      return 0;
    }
    unselected = unselected === void 0 ? getUnselectedFromProps(computedProps) : unselected;
    return unselected ? Object.keys(unselected).length : 0;
  };
  var getSelectedCountFromProps = function getSelectedCountFromProps2(computedProps, selected, unselected) {
    if (!computedProps) {
      return 0;
    }
    if (!computedProps.computedRowSelectionEnabled) {
      return 0;
    }
    var multiSelect = computedProps.computedRowMultiSelectionEnabled;
    selected = selected === void 0 ? computedProps.computedSelected : selected;
    if (multiSelect && selected === true) {
      var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);
      return computedProps.paginationCount - unselectedCount;
    }
    return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;
  };
  var useUnselected = function useUnselected2(props2, _ref2, _computedPropsRef) {
    var rowSelectionEnabled = _ref2.rowSelectionEnabled, rowMultiSelectionEnabled = _ref2.rowMultiSelectionEnabled;
    var _useProperty = (0, _useProperty5.default)(props2, "unselected"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), unselected = _useProperty2[0], setUnselected = _useProperty2[1];
    if (!rowSelectionEnabled) {
      return {
        unselected: null,
        setUnselected
      };
    }
    if (!rowMultiSelectionEnabled) {
      return {
        unselected: null,
        setUnselected
      };
    }
    return {
      unselected,
      setUnselected
    };
  };
  var useSelected = function useSelected2(props2, _computedProps, computedPropsRef) {
    var _useProperty3 = (0, _useProperty5.default)(props2, "selected", void 0, {
      onChange: function onChange(selected2) {
        var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, silent = _ref2.silent, unselected = _ref2.unselected, data = _ref2.data;
        var computedProps = computedPropsRef.current;
        if (props2.onSelectionChange && !silent) {
          props2.onSelectionChange({
            selected: selected2,
            data,
            unselected: unselected !== void 0 ? unselected : computedProps != null ? computedProps.computedUnselected : null
          });
        }
      }
    }), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), selected = _useProperty4[0], setSelected = _useProperty4[1];
    var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props2);
    var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props2);
    if (!rowSelectionEnabled) {
      return {
        selected: null,
        setSelected,
        rowSelectionEnabled,
        rowMultiSelectionEnabled
      };
    }
    if ((0, _isSelectionControlled.default)(props2)) {
      return {
        selected,
        setSelected,
        rowSelectionEnabled,
        rowMultiSelectionEnabled
      };
    }
    if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != "object" || !selected) && selected !== true) {
      selected = EMPTY_OBJECT;
    }
    return {
      selected,
      setSelected,
      rowSelectionEnabled,
      rowMultiSelectionEnabled
    };
  };
  var _default2 = function _default3(props2, computedProps, computedPropsRef) {
    var _useSelected = useSelected(props2, computedProps, computedPropsRef), computedSelected = _useSelected.selected, setSelected = _useSelected.setSelected, rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled, rowSelectionEnabled = _useSelected.rowSelectionEnabled;
    var previousRowMultiSelectionEnabled = (0, _usePrevious.default)(rowMultiSelectionEnabled, rowMultiSelectionEnabled);
    (0, _react.useEffect)(function() {
      if (previousRowMultiSelectionEnabled === true && rowMultiSelectionEnabled === false) {
        setSelected({});
      }
    }, [previousRowMultiSelectionEnabled, rowMultiSelectionEnabled]);
    var computedRowSelectionEnabled = rowSelectionEnabled;
    var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;
    var _useUnselected = useUnselected(props2, {
      rowSelectionEnabled,
      rowMultiSelectionEnabled
    }), computedUnselected = _useUnselected.unselected, setUnselected = _useUnselected.setUnselected;
    var computedSelectedCount = getSelectedCountFromProps({
      computedPagination: computedProps.computedPagination,
      computedRemoteData: computedProps.computedRemoteData,
      paginationCount: computedProps.paginationCount,
      computedRowMultiSelectionEnabled,
      computedRowSelectionEnabled
    }, computedSelected, computedUnselected);
    var computedUnselectedCount = getUnselectedCountFromProps({
      computedRowMultiSelectionEnabled,
      computedRowSelectionEnabled
    }, computedUnselected);
    var isSelectionEmpty = (0, _react.useCallback)(function() {
      var selected = computedSelected;
      var selectionEmpty = false;
      if (selected == null) {
        selectionEmpty = true;
      }
      if ((0, _typeof2.default)(selected) === "object" && selected !== null) {
        selectionEmpty = Object.keys(selected).length === 0;
      }
      return selectionEmpty;
    }, [computedSelected]);
    var getSelectedMap = (0, _react.useCallback)(function() {
      if (computedRowMultiSelectionEnabled) {
        return computedSelected;
      }
      return (0, _defineProperty2.default)({}, computedSelected, true);
    }, [computedRowMultiSelectionEnabled, computedSelected]);
    var getUnselected = (0, _react.useCallback)(function() {
      return getUnselectedFromProps(computedPropsRef.current);
    }, []);
    var getUnselectedMap = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return {};
      }
      var unselected = getUnselected();
      if (computedProps2.computedRowMultiSelectionEnabled) {
        return unselected || {};
      }
      return {};
    }, [getUnselected]);
    var getUnselectedCount = function getUnselectedCount2(unselected) {
      return getUnselectedCountFromProps(computedPropsRef.current, unselected);
    };
    var getSelectedCount = function getSelectedCount2(selected, unselected) {
      return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);
    };
    var isRowSelected = (0, _react.useCallback)(function(data) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return false;
      }
      if (typeof data == "number") {
        data = computedProps2.getItemAt(data);
      }
      var selectedMap = getSelectedMap();
      var id2 = computedProps2.getItemId(data);
      if (selectedMap === true) {
        var unselectedMap = getUnselectedMap();
        return !unselectedMap[id2];
      }
      return !!selectedMap[id2];
    }, [getSelectedMap, getUnselectedMap]);
    var cellSelectionTmp = props2.cellSelection || props2.defaultCellSelection;
    var activeCellDefined = props2.activeCell !== void 0 || props2.defaultActiveCell !== void 0;
    var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props2.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;
    if (props2.enableKeyboardNavigation === false) {
      computedHasRowNavigation = false;
    }
    var _computedProps$useCel = computedProps.useCellSelection(props2, {
      rowSelectionEnabled,
      listenOnCellEnter: computedProps.listenOnCellEnter,
      hasRowNavigation: computedHasRowNavigation
    }, computedPropsRef), computedCellSelection = _computedProps$useCel.computedCellSelection, setCellSelection = _computedProps$useCel.setCellSelection, computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled, computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled, computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled, computedActiveCell = _computedProps$useCel.computedActiveCell, incrementActiveCell = _computedProps$useCel.incrementActiveCell, getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey, getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween, toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection, onCellEnter = _computedProps$useCel.onCellEnter, setActiveCell = _computedProps$useCel.setActiveCell, getCellSelectionKey = _computedProps$useCel.getCellSelectionKey, cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex, setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex, onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown, computedCellBulkUpdateMouseDown = _computedProps$useCel.computedCellBulkUpdateMouseDown, bulkUpdateMouseDown = _computedProps$useCel.bulkUpdateMouseDown, computedCellBulkUpdateMouseUp = _computedProps$useCel.computedCellBulkUpdateMouseUp;
    var selectAll = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (!computedProps2.computedRowSelectionEnabled) {
        return;
      }
      var data = computedProps2.data;
      var dataMap = computedProps2.dataMap;
      if (computedProps2.computedGroupBy) {
        dataMap = {};
        data = data.map(function(d2) {
          var id2 = computedProps2.getItemId(d2);
          dataMap[id2] = id2;
        });
      }
      if (computedProps2.computedTreeEnabled && computedProps2.stickyTreeNodes) {
        var vl2 = computedProps2.getVirtualList();
        vl2.updateStickyRows(void 0, void 0, {
          force: true
        });
      }
      (0, _handleSelection.notifySelection)(computedProps2, computedProps2.computedRemoteData || computedProps2.computedPagination ? data.length === 0 ? false : true : dataMap, data, null);
    }, []);
    var deselectAll = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.computedTreeEnabled && computedProps2.stickyTreeNodes) {
        var vl2 = computedProps2.getVirtualList();
        vl2.updateStickyRows(void 0, void 0, {
          force: true
        });
      }
      (0, _handleSelection.notifySelection)(computedProps2, {}, [], null);
    }, []);
    var setRowSelected = (0, _react.useCallback)(function(index2, selected, event2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var queue = (0, _batchUpdate.default)();
      if (computedProps2.checkboxSelectEnableShiftKey && computedProps2.computedRowMultiSelectionEnabled) {
        if (event2 && event2.target) {
          var shiftKey = event2.shiftKey, metaKey = event2.metaKey, ctrlKey = event2.ctrlKey;
          if (shiftKey) {
            var rowProps = {
              data: computedProps2.getItemAt(index2),
              rowIndex: index2
            };
            (0, _handleSelection.handleSelection)(rowProps, computedProps2, {
              shiftKey,
              metaKey,
              ctrlKey
            }, queue);
            return;
          }
          computedProps2.shiftKeyIndexRef.current = index2;
          computedProps2.selectionIndexRef.current = index2;
        }
      }
      computedProps2.setSelectedAt(index2, selected, queue);
      queue.commit();
    }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);
    var setSelectedAt = (0, _react.useCallback)(function(index2, selected, queue) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var data = computedProps2.data[index2];
      if (!data) {
        return;
      }
      var id2 = computedProps2.getItemId(data);
      computedProps2.setSelectedById(id2, selected, queue);
    }, []);
    var treeGridChildrenSelection = function treeGridChildrenSelection2(dataArray, id2, selected, clone2, treeGridChildrenDeselectionEnabled, parentNode) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var idProperty = computedProps2.idProperty;
      var nodesName = computedProps2.nodesProperty;
      var pathSeparator = computedProps2.nodePathSeparator;
      var expandedNodes = computedProps2.computedExpandedNodes || EMPTY_OBJECT;
      var generateIdFromPath = computedProps2.generateIdFromPath;
      for (var i = 0; i < dataArray.length; i++) {
        var item = dataArray[i];
        if (item) {
          var _id$split;
          var itemId = item[idProperty];
          var itemNodes = item[nodesName];
          var parentNodeId = parentNode ? "".concat(parentNode[idProperty]) : void 0;
          var path = parentNode ? "".concat(parentNodeId).concat(pathSeparator).concat(itemId) : "".concat(itemId);
          if (generateIdFromPath) {
            item[idProperty] = path;
          }
          var idLength = (_id$split = id2.split(pathSeparator)) === null || _id$split === void 0 ? void 0 : _id$split.length;
          var idFromPath = path.split(pathSeparator).slice(0, idLength).join(pathSeparator);
          if (idFromPath === id2) {
            var treeData = computedProps2.dataMap ? computedProps2.dataMap[path] : null;
            if (!treeData) {
              continue;
            }
            if (selected) {
              clone2[path] = treeData;
            } else {
              if (treeGridChildrenDeselectionEnabled) {
                delete clone2[path];
              } else {
                delete clone2[id2];
              }
            }
          }
          if (expandedNodes && expandedNodes[idFromPath]) {
            if (Array.isArray(itemNodes)) {
              treeGridChildrenSelection2(itemNodes, id2, selected, clone2, treeGridChildrenDeselectionEnabled, item);
            }
          }
        }
      }
      return clone2;
    };
    var groupChildrenSelection = function groupChildrenSelection2(_ref4) {
      var clone2 = _ref4.clone, id2 = _ref4.id, selected = _ref4.selected, dataMap = _ref4.dataMap, idProperty = _ref4.idProperty;
      if (!dataMap) {
        return;
      }
      for (var key in dataMap) {
        if (!key) {
          break;
        }
        if (!key.includes(id2)) {
          continue;
        }
        var data = dataMap[key];
        if (data.__group) {
          if (selected) {
            if (!clone2[key]) {
              clone2[key] = data;
            }
          } else {
            delete clone2[key];
          }
          if (data.array && Array.isArray(data.array)) {
            var _iterator = _createForOfIteratorHelper(data.array), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var item = _step.value;
                var itemId = item[idProperty];
                if (selected) {
                  if (!clone2[itemId])
                    clone2[itemId] = item;
                } else {
                  delete clone2[itemId];
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        } else {
          var dataId = data[idProperty];
          if (dataId === id2) {
            if (selected) {
              if (!clone2[id2])
                clone2[id2] = data;
            } else {
              delete clone2[id2];
            }
          }
        }
      }
      return clone2;
    };
    var setSelectedById = (0, _react.useCallback)(function(id2, selected, queue) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var data = computedProps2.dataMap ? computedProps2.dataMap[id2] : null;
      if (!data) {
        return;
      }
      var isSelected2 = computedProps2.isRowSelected(data);
      var multiSelect = computedProps2.computedRowMultiSelectionEnabled;
      if (isSelected2 === selected) {
        return;
      }
      if (multiSelect) {
        var selectedMap = computedProps2.computedSelected;
        var unselectedMap = selectedMap === true ? computedProps2.computedUnselected || {} : null;
        var clone2 = selectedMap;
        if (selectedMap === true) {
          if (unselectedMap) {
            unselectedMap = Object.assign({}, unselectedMap);
          }
          if (!selected && unselectedMap) {
            unselectedMap[id2] = true;
            var totalCount = computedProps2.paginationCount;
            if (Object.keys(unselectedMap).length === totalCount) {
              computedProps2.deselectAll();
              return;
            }
          } else {
            if (unselectedMap) {
              delete unselectedMap[id2];
            }
            if (getUnselectedCountFromProps(computedProps2, unselectedMap) === 0) {
              unselectedMap = null;
            }
          }
        } else {
          clone2 = Object.assign({}, selectedMap);
          if (computedProps2.computedTreeEnabled && computedProps2.treeGridChildrenSelectionEnabled) {
            var originalData = JSON.stringify(computedProps2.originalData || []);
            var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));
            var treeGridChildrenDeselectionEnabled = computedProps2.treeGridChildrenDeselectionEnabled;
            treeGridChildrenSelection(cloneOriginalData, id2, selected, clone2, treeGridChildrenDeselectionEnabled);
          } else if (computedProps2.groupColumn) {
            groupChildrenSelection({
              clone: clone2,
              id: id2,
              selected,
              dataMap: computedProps2.dataMap,
              idProperty: computedProps2.idProperty
            });
          } else {
            if (selected) {
              clone2[id2] = data;
            } else {
              delete clone2[id2];
            }
          }
        }
        (0, _handleSelection.notifySelection)(computedProps2, clone2, data, unselectedMap, queue);
      } else {
        (0, _handleSelection.notifySelection)(computedProps2, selected ? id2 : null, data, null, queue);
      }
    }, []);
    return {
      selectAll,
      deselectAll,
      setRowSelected,
      setSelectedAt,
      setSelectedById,
      setCellSelection,
      computedCellSelection,
      computedCellSelectionEnabled,
      computedCellMultiSelectionEnabled,
      computedCellNavigationEnabled,
      computedActiveCell,
      getCellSelectionBetween,
      incrementActiveCell,
      cellDragStartRowIndex,
      setCellDragStartRowIndex,
      onCellEnter,
      onCellSelectionDraggerMouseDown,
      toggleActiveCellSelection,
      computedHasRowNavigation,
      computedRowSelectionEnabled,
      computedRowMultiSelectionEnabled,
      computedSelected,
      setSelected,
      computedUnselected,
      setUnselected,
      isSelectionEmpty,
      getSelectedMap,
      getUnselectedMap,
      isRowSelected,
      getUnselectedCount,
      getSelectedCount,
      computedUnselectedCount,
      computedSelectedCount,
      getCellSelectionIdKey,
      setActiveCell,
      getCellSelectionKey,
      computedCellBulkUpdateMouseDown,
      computedCellBulkUpdateMouseUp,
      bulkUpdateMouseDown
    };
  };
  useSelection.default = _default2;
  return useSelection;
}
var useRow = {};
var handleRowNavigation = {};
var hasRequiredHandleRowNavigation;
function requireHandleRowNavigation() {
  if (hasRequiredHandleRowNavigation)
    return handleRowNavigation;
  hasRequiredHandleRowNavigation = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(handleRowNavigation, "__esModule", {
    value: true
  });
  handleRowNavigation.default = void 0;
  var _contains = _interopRequireDefault2(requireContains());
  var handleRowNavigation$1 = function handleRowNavigation2(event2, computedProps) {
    var key = event2.key;
    var activeItem = computedProps.computedActiveItem;
    var isGroup = computedProps.isGroup(activeItem);
    var options = {
      ArrowUp: function ArrowUp() {
        return computedProps.incrementActiveIndex(-1);
      },
      ArrowDown: function ArrowDown() {
        return computedProps.incrementActiveIndex(1);
      },
      Home: function Home() {
        return computedProps.setActiveIndex(0);
      },
      Enter: function Enter(event3) {
        if (!activeItem) {
          return;
        }
        if (isGroup) {
          computedProps.toggleGroup(activeItem);
          return;
        }
        computedProps.toggleActiveRowSelection(event3);
      },
      End: function End() {
        return computedProps.setActiveIndex(computedProps.data.length - 1);
      },
      PageUp: function PageUp() {
        return computedProps.incrementActiveIndex(-computedProps.keyPageStep);
      },
      PageDown: function PageDown() {
        return computedProps.incrementActiveIndex(computedProps.keyPageStep);
      }
    };
    var fn = options[key];
    if (fn) {
      fn(event2);
      return true;
    }
    if (computedProps.allowRowTabNavigation) {
      if (key === "Tab") {
        var dir = event2.shiftKey ? -1 : 1;
        var rowNode = computedProps.getDOMNodeForRowIndex(computedProps.computedActiveIndex);
        if (document.activeElement && rowNode && (0, _contains.default)(rowNode, document.activeElement)) {
          return false;
        }
        var nextIndex = computedProps.computedActiveIndex + dir;
        var validNextIndex = nextIndex >= 0 && nextIndex < computedProps.count;
        if (validNextIndex) {
          computedProps.incrementActiveIndex(dir);
          return true;
        }
      }
    }
    return false;
  };
  var _default2 = handleRowNavigation$1;
  handleRowNavigation.default = _default2;
  return handleRowNavigation;
}
var handleCellNavigation = {};
var hasRequiredHandleCellNavigation;
function requireHandleCellNavigation() {
  if (hasRequiredHandleCellNavigation)
    return handleCellNavigation;
  hasRequiredHandleCellNavigation = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(handleCellNavigation, "__esModule", {
    value: true
  });
  handleCellNavigation.default = void 0;
  var _lodash = _interopRequireDefault2(requireLodash_throttle());
  var waitFn = _lodash.default;
  var WAIT_TIME = 36;
  var WAIT_PARAMS = {
    maxWait: 100,
    leading: true
  };
  var handleCellNavigation$1 = function handleCellNavigation2(event2, computedProps) {
    var key = event2.key;
    var cellNavigationRef = computedProps.cellNavigationRef;
    if (!cellNavigationRef.current) {
      cellNavigationRef.current = {
        onArrowUp: function onArrowUp() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.incrementActiveCell) {
            computedProps2.incrementActiveCell([-1, 0]);
          }
        },
        onArrowDown: function onArrowDown() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.incrementActiveCell) {
            computedProps2.incrementActiveCell([1, 0]);
          }
        },
        onArrowRight: function onArrowRight() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.incrementActiveCell) {
            computedProps2.incrementActiveCell([0, 1]);
          }
        },
        onArrowLeft: function onArrowLeft() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.incrementActiveCell) {
            computedProps2.incrementActiveCell([0, -1]);
          }
        },
        onHome: function onHome() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.setActiveCell && activeCell) {
            computedProps2.setActiveCell([0, activeCell[1]]);
          }
        },
        onEnd: function onEnd() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.setActiveCell && activeCell) {
            computedProps2.setActiveCell([computedProps2.data.length - 1, activeCell[1]]);
          }
        },
        onPageUp: function onPageUp() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.incrementActiveCell) {
            computedProps2.incrementActiveCell([-computedProps2.keyPageStep, 0]);
          }
        },
        onPageDown: function onPageDown() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.incrementActiveCell) {
            computedProps2.incrementActiveCell([computedProps2.keyPageStep, 0]);
          }
        },
        onEnter: function onEnter() {
          var computedProps2 = cellNavigationRef.current.computedProps;
          if (computedProps2.toggleActiveCellSelection) {
            computedProps2.toggleActiveCellSelection(event2);
          }
        }
      };
      Object.keys(cellNavigationRef.current).forEach(function(key2) {
        var fn2 = cellNavigationRef.current[key2];
        cellNavigationRef.current[key2] = waitFn(fn2, WAIT_TIME, WAIT_PARAMS);
      });
    }
    cellNavigationRef.current.computedProps = computedProps;
    var activeCell = computedProps.computedActiveCell;
    var options = {
      ArrowUp: cellNavigationRef.current.onArrowUp,
      ArrowDown: cellNavigationRef.current.onArrowDown,
      ArrowRight: cellNavigationRef.current.onArrowRight,
      ArrowLeft: cellNavigationRef.current.onArrowLeft,
      Home: cellNavigationRef.current.onHome,
      End: cellNavigationRef.current.onEnd,
      PageUp: cellNavigationRef.current.onPageUp,
      PageDown: cellNavigationRef.current.onPageDown,
      Enter: cellNavigationRef.current.onEnter
    };
    var fn = options[key];
    if (fn) {
      fn({
        shiftKey: event2.shiftKey,
        ctrlKey: event2.ctrlKey,
        metaKey: event2.metaKey
      });
      return true;
    }
    return false;
  };
  var _default2 = handleCellNavigation$1;
  handleCellNavigation.default = _default2;
  return handleCellNavigation;
}
var hasRequiredUseRow;
function requireUseRow() {
  if (hasRequiredUseRow)
    return useRow;
  hasRequiredUseRow = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useRow, "__esModule", {
    value: true
  });
  useRow.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = reactExports;
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _handleSelection = requireHandleSelection();
  var _handleRowNavigation = _interopRequireDefault2(requireHandleRowNavigation());
  var _handleCellNavigation = _interopRequireDefault2(requireHandleCellNavigation());
  var _containsNode = _interopRequireDefault2(requireContainsNode());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var _default2 = function _default3(props2, computedProps, computedPropsRef) {
    var computedOnKeyDown = function computedOnKeyDown2(event2) {
      if (props2.onKeyDown) {
        props2.onKeyDown(event2);
      }
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (event2.nativeEvent && event2.nativeEvent.__handled_in_details) {
        return;
      }
      var sameElement = event2.target === computedProps2.getScrollingElement();
      var handled = false;
      if (event2.key === "Escape" && !sameElement && computedProps2.autoFocusOnEditEscape) {
        handled = true;
        computedProps2.focus();
      }
      if (!sameElement) {
        return;
      }
      if (computedProps2.computedHasRowNavigation) {
        handled = (0, _handleRowNavigation.default)(event2, computedProps2);
      } else if (computedProps2.computedCellNavigationEnabled) {
        handled = (0, _handleCellNavigation.default)(event2, computedProps2);
      }
      var activeItem = computedProps2.computedActiveItem;
      var activeIndex = computedProps2.computedActiveIndex;
      var isGroup2 = computedProps2.isGroup(activeItem);
      var rowExpandEnabled = computedProps2.computedRowExpandEnabled;
      var rowExpandable = activeItem && computedProps2.isRowExpandableAt ? computedProps2.isRowExpandableAt(activeIndex) : false;
      var rowExpanded = rowExpandable && activeItem ? computedProps2.isRowExpanded(activeItem) : false;
      var treeEnabled = computedProps2.computedTreeEnabled;
      var nodeExpandable = treeEnabled && activeItem && computedProps2.isNodeExpandableAt ? computedProps2.isNodeExpandableAt(activeIndex) : false;
      var nodeExpanded = treeEnabled && activeItem && computedProps2.isNodeExpanded ? computedProps2.isNodeExpanded(activeItem) : false;
      var rowSelectionEnabled = computedProps2.computedRowSelectionEnabled;
      var keyShortcutArg = {
        event: event2,
        data: activeItem,
        index: activeIndex,
        activeItem,
        activeIndex,
        handle: computedPropsRef,
        isGroup: isGroup2,
        treeEnabled,
        rowSelectionEnabled,
        nodeExpandable,
        nodeExpanded,
        rowExpandEnabled,
        rowExpandable,
        rowExpanded
      };
      var editKeyPressed = !!computedProps2.isStartEditKeyPressed(keyShortcutArg);
      var expandKeyPressed = !!computedProps2.isExpandKeyPressed(keyShortcutArg);
      var collapseKeyPressed = !expandKeyPressed ? computedProps2.isCollapseKeyPressed(keyShortcutArg) : false;
      if (expandKeyPressed) {
        handled = true;
      }
      if (expandKeyPressed && activeItem) {
        if (rowExpandEnabled && rowExpandable && !rowExpanded) {
          computedProps2.setRowExpandedAt(activeIndex, true);
        } else {
          if (isGroup2) {
            computedProps2.expandGroup(activeItem);
          } else if (treeEnabled && nodeExpandable && !nodeExpanded) {
            computedProps2.setNodeExpandedAt(activeIndex, true);
          }
        }
      }
      if (collapseKeyPressed) {
        handled = true;
      }
      if (collapseKeyPressed && activeItem) {
        if (rowExpandEnabled && rowExpandable && rowExpanded) {
          computedProps2.setRowExpandedAt(activeIndex, false);
        } else {
          if (isGroup2) {
            computedProps2.collapseGroup(activeItem);
          } else if (treeEnabled && nodeExpandable && nodeExpanded) {
            computedProps2.setNodeExpandedAt(activeIndex, false);
          }
        }
      }
      if (editKeyPressed) {
        handled = true;
        if (computedProps2.visibleColumns && computedProps2.visibleColumns.length) {
          if (computedProps2.tryStartEdit) {
            computedProps2.tryStartEdit({
              rowIndex: activeItem ? activeIndex : 0,
              columnId: computedProps2.visibleColumns[0].id,
              dir: 1
            });
          }
        }
      }
      if (activeItem && event2.key === "Enter") {
        if (rowExpandEnabled && rowExpandable) {
          if (!rowSelectionEnabled) {
            computedProps2.toggleRowExpand(activeIndex);
            handled = true;
          }
        } else {
          if (isGroup2) {
            computedProps2.toggleGroup(activeItem);
            handled = true;
          } else if (nodeExpandable && !rowSelectionEnabled && computedProps2.computedTreeEnabled) {
            computedProps2.toggleNodeExpand(activeItem);
            handled = true;
          }
        }
      }
      if (handled) {
        event2.preventDefault();
        if (event2.nativeEvent) {
          event2.nativeEvent.__handled_in_details = true;
        }
      }
      if (computedProps2.enableClipboard) {
        var cellSelection2 = !!computedProps2.computedCellSelection;
        var checkboxColumn = !!computedProps2.checkboxColumn;
        var selected = !!computedProps2.computedSelected;
        if ((event2.ctrlKey || event2.metaKey) && event2.key == "c") {
          if (checkboxColumn || selected) {
            computedProps2.copySelectedRowsToClipboard && computedProps2.copySelectedRowsToClipboard();
          } else if (cellSelection2) {
            computedProps2.copySelectedCellsToClipboard && computedProps2.copySelectedCellsToClipboard();
          } else {
            computedProps2.copyActiveRowToClipboard && computedProps2.copyActiveRowToClipboard();
          }
        }
        if ((event2.ctrlKey || event2.metaKey) && event2.key == "v") {
          if (checkboxColumn || selected) {
            computedProps2.pasteSelectedRowsFromClipboard && computedProps2.pasteSelectedRowsFromClipboard();
          } else if (cellSelection2) {
            computedProps2.pasteSelectedCellsFromClipboard && computedProps2.pasteSelectedCellsFromClipboard();
          } else {
            computedProps2.pasteActiveRowFromClipboard && computedProps2.pasteActiveRowFromClipboard();
          }
        }
      }
    };
    var onFullBlur = (0, _react.useCallback)(function(_event) {
    }, []);
    var isGroup = (0, _react.useCallback)(function(item) {
      return !!item && !!item.__group;
    }, []);
    var computedOnFocus = (0, _react.useCallback)(function(event2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      event2.preventDefault();
      if (props2.onFocus) {
        props2.onFocus(event2);
      }
      if (event2.nativeEvent.preventParentFocus) {
        onFullBlur(event2);
        return;
      }
      event2.nativeEvent.preventParentFocus = true;
      if (computedProps2.computedWillReceiveFocusRef.current) {
        computedProps2.computedWillReceiveFocusRef.current = false;
        return;
      }
      if (!computedProps2.computedFocused) {
        computedProps2.computedSetFocused(true);
      }
    }, []);
    var computedOnBlur = (0, _react.useCallback)(function(event2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.isInEdit.current) {
        return;
      }
      event2.preventDefault();
      if (computedProps2.preventBlurOnContextMenuOpen && computedProps2.preventBlurOnContextMenuOpen.current) {
        return;
      }
      var domNode = computedProps2.getDOMNode();
      if (event2.relatedTarget && (0, _containsNode.default)(domNode, event2.relatedTarget)) {
        return;
      }
      if (props2.onBlur) {
        props2.onBlur(event2);
      }
      var computedActiveIndex2 = computedProps2.computedActiveIndex;
      if (computedActiveIndex2 >= 0) {
        computedProps2.doSetLastActiveIndex(computedActiveIndex2);
      }
      computedProps2.setActiveIndex(-1);
      computedProps2.computedSetFocused(false);
    }, []);
    var onGroupRowClick = (0, _react.useCallback)(function(rowProps, _ref2, queue) {
      var enableKeyboardNavigation = _ref2.enableKeyboardNavigation, setActiveIndex = _ref2.setActiveIndex;
      if (rowProps.groupProps || rowProps.data && rowProps.data.__group) {
        if (enableKeyboardNavigation) {
          queue(function() {
            setActiveIndex(rowProps.rowIndex);
          });
        }
        queue.commit();
        return true;
      }
      return false;
    }, []);
    var handleRowSelectionOnClick = function handleRowSelectionOnClick2(event2, rowProps, computedProps2, queue) {
      if (event2.nativeEvent.skipSelect) {
        if (computedProps2.enableKeyboardNavigation) {
          queue(function() {
            computedProps2.setActiveIndex(rowProps.rowIndex);
          });
        }
        queue.commit();
        return;
      }
      var shiftKey = event2.shiftKey, metaKey = event2.metaKey, ctrlKey = event2.ctrlKey;
      var multiSelectKey = shiftKey || metaKey || ctrlKey;
      var autoCheckboxColumn = props2.autoCheckboxColumn;
      if (autoCheckboxColumn && multiSelectKey) {
        return;
      }
      if ((0, _handleSelection.handleSelection)(rowProps, computedProps2, event2, queue) !== false) {
        queue(function() {
          computedProps2.setActiveIndex(rowProps.rowIndex);
        });
      }
    };
    var computedOnRowMouseDown = (0, _react.useCallback)(function() {
    }, []);
    var computedOnRowClick = (0, _react.useCallback)(function(event2, rowProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var preventRowSelectionOnClickWithMouseMove = computedProps2.preventRowSelectionOnClickWithMouseMove, initialProps = computedProps2.initialProps;
      if (initialProps.onRowClick) {
        initialProps.onRowClick({
          rowIndex: rowProps.rowIndex,
          remoteRowIndex: rowProps.remoteRowIndex,
          groupProps: rowProps.groupProps,
          empty: rowProps.empty,
          columns: rowProps.columns,
          dataSourceArray: rowProps.dataSourceArray,
          data: rowProps.data
        }, event2);
      }
      var queue = (0, _batchUpdate.default)();
      var lastMouseDownEventProps = computedProps2.lastMouseDownEventPropsRef.current;
      var mouseDidNotMove = event2.type !== "click";
      if (lastMouseDownEventProps && event2.type === "click") {
        var pageX = lastMouseDownEventProps.pageX, pageY = lastMouseDownEventProps.pageY, rowIndex = lastMouseDownEventProps.rowIndex;
        mouseDidNotMove = pageX === Math.floor(event2.pageX) && pageY === Math.floor(event2.pageY) && rowIndex === rowProps.rowIndex;
      }
      if (!computedProps2.computedFocused) {
        queue(function() {
          computedProps2.computedSetFocused(true);
        });
      }
      if (computedProps2.computedCellSelectionEnabled) {
        queue.commit();
        return;
      }
      if (onGroupRowClick(rowProps, computedProps2, queue)) {
        queue.commit();
        return;
      }
      var threshold = 20;
      var preventRowSelection = preventRowSelectionOnClickWithMouseMove ? mouseDidNotMove : true;
      if (preventRowSelection === false && Math.abs(lastMouseDownEventProps.pageX - event2.pageX) < threshold || Math.abs(lastMouseDownEventProps.pageY - event2.pageY) < threshold) {
        preventRowSelection = true;
      }
      if ((!props2.checkboxOnlyRowSelect || event2.type !== "click") && preventRowSelection) {
        handleRowSelectionOnClick(event2, rowProps, computedProps2, queue);
      } else {
        if (computedProps2.enableKeyboardNavigation && computedProps2.computedHasRowNavigation) {
          queue(function() {
            computedProps2.setActiveIndex(rowProps.rowIndex);
          });
        }
      }
      queue.commit();
    }, []);
    var computedRowDoubleClick = (0, _react.useCallback)(function(event2, rowProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.onRowDoubleClick) {
        computedProps2.onRowDoubleClick(event2, rowProps);
      }
    }, []);
    var computedCellDoubleClick = (0, _react.useCallback)(function(event2, cellProps) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.onCellDoubleClick) {
        computedProps2.onCellDoubleClick(event2, cellProps);
      }
    }, []);
    var onCellClickAction = (0, _react.useCallback)(function(event2, cellProps) {
      if (cellProps.groupProps || cellProps.cellSelectable === false) {
        return;
      }
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var hasCellSelection = computedProps2.computedCellSelectionEnabled;
      var cellMultiSelect = computedProps2.computedCellMultiSelectionEnabled;
      var queue = (0, _batchUpdate.default)();
      if (hasCellSelection) {
        var ctrlKey = event2.ctrlKey || event2.metaKey;
        var append3 = cellMultiSelect && ctrlKey;
        var cellCoords = [cellProps.rowIndex, cellProps.columnIndex];
        var key = computedProps2.getCellSelectionKey(cellProps);
        var shiftKey = event2.shiftKey && (computedProps2.computedActiveCell || computedProps2.lastSelectedCell);
        if (shiftKey && cellMultiSelect) {
          var cellSelection2 = computedProps2.getCellSelectionBetween(computedProps2.computedActiveCell || computedProps2.lastSelectedCell || void 0, cellCoords);
          queue(function() {
            computedProps2.setLastCellInRange(Object.keys(cellSelection2).pop() || "");
            computedProps2.setCellSelection(cellSelection2);
          });
        } else {
          var cellSelectionMap = computedProps2.computedCellSelection;
          var isSelected2 = !!cellSelectionMap[key];
          var newCellSelectionMap = append3 ? Object.assign({}, cellSelectionMap) : {};
          if (isSelected2 && (cellMultiSelect || computedProps2.initialProps.toggleCellSelectOnClick || ctrlKey)) {
            delete newCellSelectionMap[key];
          } else {
            if (!shiftKey) {
              queue(function() {
                computedProps2.setLastSelectedCell(cellCoords);
              });
            }
            newCellSelectionMap[key] = true;
          }
          queue(function() {
            computedProps2.setCellSelection(newCellSelectionMap);
          });
        }
      }
      var shouldSetActiveCell = computedProps2.computedCellNavigationEnabled && (!event2.shiftKey || !cellMultiSelect);
      queue(function() {
        if (shouldSetActiveCell) {
          computedProps2.setActiveCell([cellProps.rowIndex, cellProps.columnIndex]);
        }
      });
      queue.commit();
    }, []);
    var setItemAtAsSelected = (0, _react.useCallback)(function(index2, event2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var computedRowSelectionEnabled = computedProps2.computedRowSelectionEnabled, getItemAt = computedProps2.getItemAt, getItemId = computedProps2.getItemId;
      var item = getItemAt(index2);
      var itemId = item ? getItemId(item) : void 0;
      if (itemId === void 0) {
        return;
      }
      if (computedRowSelectionEnabled) {
        (0, _handleSelection.handleSelection)({
          rowIndex: index2,
          data: item
        }, computedProps2, event2 || {
          nativeEvent: null
        });
      }
    }, []);
    var selectionIndexRef = (0, _react.useRef)(null);
    var shiftKeyIndexRef = (0, _react.useRef)(null);
    var lastMouseDownEventPropsRef = (0, _react.useRef)({
      rowIndex: -1,
      pageX: -1,
      pageY: -1
    });
    var computedOnCellMouseDown = (0, _react.useCallback)(function(event2, cellProps) {
      lastMouseDownEventPropsRef.current = {
        rowIndex: cellProps.rowIndex,
        pageX: Math.floor(event2.pageX),
        pageY: Math.floor(event2.pageY)
      };
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (computedProps2.columnUserSelect && event2.shiftKey && computedProps2.preventDefaultTextSelectionOnShiftMouseDown) {
        event2.preventDefault();
      }
      computedProps2.onCellClickAction(event2, cellProps);
      if (computedProps2.onCellSelectionDraggerMouseDown) {
        computedProps2.onCellSelectionDraggerMouseDown(event2, cellProps);
      }
    }, []);
    var computedActiveIndex = computedProps.computedActiveIndex;
    return {
      selectionIndexRef,
      shiftKeyIndexRef,
      onCellClickAction,
      computedCellDoubleClick,
      computedOnKeyDown,
      computedOnFocus,
      computedOnBlur,
      computedOnRowClick,
      computedRowDoubleClick,
      computedOnRowMouseDown,
      computedOnCellMouseDown,
      isGroup,
      computedActiveItem: computedActiveIndex !== -1 && computedProps.data ? computedProps.data[computedActiveIndex] : null,
      lastMouseDownEventPropsRef,
      toggleActiveRowSelection: function toggleActiveRowSelection(event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var computedActiveIndex2 = computedProps2.computedActiveIndex;
        if (computedActiveIndex2 == -1) {
          return;
        }
        setItemAtAsSelected(computedActiveIndex2, event2);
      },
      rowProps: _objectSpread2(_objectSpread2({}, computedProps.initialProps.rowProps), {}, {
        onMouseDown: function onMouseDown(event2) {
          if (computedProps.initialProps.rowProps && computedProps.initialProps.rowProps.onMouseDown) {
            computedProps.initialProps.rowProps.onMouseDown(event2);
          }
          if (!computedProps.computedFocused && computedProps.enableKeyboardNavigation) {
            computedProps.computedWillReceiveFocusRef.current = true;
          }
        }
      })
    };
  };
  useRow.default = _default2;
  return useRow;
}
var prepareClassName = {};
var hasRequiredPrepareClassName;
function requirePrepareClassName() {
  if (hasRequiredPrepareClassName)
    return prepareClassName;
  hasRequiredPrepareClassName = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(prepareClassName, "__esModule", {
    value: true
  });
  prepareClassName.default = void 0;
  var _join = _interopRequireDefault2(requireJoin());
  var prepareClassName$12 = function prepareClassName2(computedProps) {
    var visibleColumns = computedProps.visibleColumns, computedShowCellBorders = computedProps.computedShowCellBorders, computedShowZebraRows = computedProps.computedShowZebraRows, theme2 = computedProps.theme, rtl = computedProps.rtl, viewportAvailableWidth = computedProps.viewportAvailableWidth, totalComputedWidth = computedProps.totalComputedWidth, computedFocused = computedProps.computedFocused, computedShowHoverRows = computedProps.computedShowHoverRows, nativeScroll = computedProps.nativeScroll, focusedClassName = computedProps.focusedClassName, computedFilterable = computedProps.computedFilterable, computedShowHeaderBorderRight = computedProps.computedShowHeaderBorderRight, virtualizeColumns = computedProps.virtualizeColumns, className = computedProps.className, stickyHeader = computedProps.stickyHeader;
    return (0, _join.default)("InovuaReactDataGrid", className, theme2 && "InovuaReactDataGrid--theme-".concat(theme2), virtualizeColumns && "InovuaReactDataGrid--virtualize-columns", nativeScroll && "InovuaReactDataGrid--native-scroll", visibleColumns.length && "InovuaReactDataGrid--columns-ready", computedShowZebraRows && "InovuaReactDataGrid--zebra-rows", computedFilterable && "InovuaReactDataGrid--filterable", computedFocused && "InovuaReactDataGrid--focused", computedShowHoverRows && "InovuaReactDataGrid--show-hover-rows", rtl ? "InovuaReactDataGrid--direction-rtl" : "InovuaReactDataGrid--direction-ltr", computedFocused && focusedClassName, computedShowHeaderBorderRight ? "InovuaReactDataGrid--show-header-border-right" : "InovuaReactDataGrid--no-header-border-right", viewportAvailableWidth > totalComputedWidth && "InovuaReactDataGrid--show-border-right", computedShowCellBorders && (computedShowCellBorders === true ? "InovuaReactDataGrid--cell-borders-horizontal InovuaReactDataGrid--cell-borders-vertical" : "InovuaReactDataGrid--cell-borders-".concat(computedShowCellBorders)), stickyHeader && "InovuaReactDataGrid--sticky-header");
  };
  var _default2 = prepareClassName$12;
  prepareClassName.default = _default2;
  return prepareClassName;
}
var Cover = {};
var hasRequiredCover;
function requireCover() {
  if (hasRequiredCover)
    return Cover;
  hasRequiredCover = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(Cover, "__esModule", {
    value: true
  });
  Cover.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = _interopRequireWildcard(reactExports);
  var _join = _interopRequireDefault2(requireJoin());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var _default2 = function _default3(_ref2) {
    var handle = _ref2.handle;
    var _useState = (0, _react.useState)(false), _useState2 = (0, _slicedToArray2.default)(_useState, 2), active = _useState2[0], setActive = _useState2[1];
    var _useState3 = (0, _react.useState)("inherit"), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), cursor2 = _useState4[0], setCursor = _useState4[1];
    (0, _react.useEffect)(function() {
      handle({
        setActive,
        setCursor
      });
    }, []);
    return _react.default.createElement("div", {
      style: {
        opacity: active ? 1 : 0,
        cursor: active ? cursor2 || "inherit" : "inherit"
      },
      className: (0, _join.default)("InovuaReactDataGrid__cover", active && "InovuaReactDataGrid__cover--active")
    });
  };
  Cover.default = _default2;
  return Cover;
}
var useActiveIndex = {};
var throttle = {};
var hasRequiredThrottle;
function requireThrottle() {
  if (hasRequiredThrottle)
    return throttle;
  hasRequiredThrottle = 1;
  Object.defineProperty(throttle, "__esModule", {
    value: true
  });
  throttle.default = void 0;
  function throttle$12(func, wait) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var context2;
    var args;
    var result;
    var timeout = null;
    var previous = 0;
    var later = function later2() {
      previous = options.leading === false ? 0 : Date.now();
      timeout = null;
      result = func.apply(context2, args);
      if (!timeout) {
        context2 = null;
        args = null;
      }
    };
    return function() {
      for (var _len = arguments.length, _rest = new Array(_len), _key = 0; _key < _len; _key++) {
        _rest[_key] = arguments[_key];
      }
      var now2 = Date.now();
      if (!previous && options.leading === false) {
        previous = now2;
      }
      var remaining = wait - (now2 - previous);
      context2 = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now2;
        result = func.apply(context2, args);
        if (!timeout)
          context2 = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    }.apply(this, [func, wait, options]);
  }
  var _default2 = throttle$12;
  throttle.default = _default2;
  return throttle;
}
var hasRequiredUseActiveIndex;
function requireUseActiveIndex() {
  if (hasRequiredUseActiveIndex)
    return useActiveIndex;
  hasRequiredUseActiveIndex = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useActiveIndex, "__esModule", {
    value: true
  });
  useActiveIndex.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _useProperty5 = _interopRequireDefault2(requireUseProperty());
  var _react = reactExports;
  var _clamp = _interopRequireDefault2(requireClamp$1());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  var _throttle = _interopRequireDefault2(requireThrottle());
  var _getGlobal = requireGetGlobal();
  var globalObject = (0, _getGlobal.getGlobal)();
  var useActiveIndex$1 = function useActiveIndex2(props2, computedProps, computedPropsRef) {
    var _useProperty = (0, _useProperty5.default)(props2, "activeIndex", -1), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedActiveIndex = _useProperty2[0], doSetActiveIndex = _useProperty2[1];
    var _useProperty3 = (0, _useProperty5.default)(props2, "lastActiveIndex", null), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), computedLastActiveIndex = _useProperty4[0], doSetLastActiveIndex = _useProperty4[1];
    if (!props2.enableKeyboardNavigation) {
      computedActiveIndex = -1;
    }
    var setActiveIndex = (0, _react.useCallback)(function(activeIndex) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2 || !computedProps2.computedHasRowNavigation || globalObject.isNaN(activeIndex)) {
        return;
      }
      var data = computedProps2.data;
      if (activeIndex >= 0) {
        activeIndex = (0, _clamp.default)(activeIndex, 0, data.length - 1);
      } else {
        activeIndex = -1;
      }
      if (activeIndex === computedProps2.computedActiveIndex) {
        return;
      }
      doSetActiveIndex(activeIndex);
    }, []);
    var incrementActiveIndex = (0, _react.useCallback)(function(inc) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var computedActiveIndex2 = computedProps2.computedActiveIndex;
      if (computedProps2.activeIndexThrottle) {
        (0, _throttle.default)(function() {
          return setActiveIndex(computedActiveIndex2 + inc);
        }, computedProps2.activeIndexThrottle, {
          trailing: true,
          leading: false
        });
      } else {
        setActiveIndex(computedActiveIndex2 + inc);
      }
    }, []);
    var getActiveItem = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      return computedProps2 ? computedProps2.data[computedProps2.computedActiveIndex] : null;
    }, []);
    var getFirstVisibleIndex = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return -1;
      }
      var scrollTop = computedProps2.getScrollTop();
      var rowHeight = props2.rowHeight;
      return Math.ceil(scrollTop / rowHeight);
    }, [props2.rowHeight]);
    var oldActiveIndex = (0, _usePrevious.default)(computedActiveIndex, -1);
    (0, _react.useEffect)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (!computedProps2.computedFocused) {
        return;
      }
      if (oldActiveIndex !== computedActiveIndex) {
        var top = computedActiveIndex < oldActiveIndex;
        computedProps2.scrollToIndexIfNeeded(computedActiveIndex, {
          top
        });
      }
    }, [computedActiveIndex, oldActiveIndex]);
    computedProps.activeRowRef = (0, _react.useRef)(null);
    return {
      computedActiveIndex,
      setActiveIndex,
      incrementActiveIndex,
      getActiveItem,
      getFirstVisibleIndex,
      computedLastActiveIndex,
      doSetLastActiveIndex
    };
  };
  var _default2 = useActiveIndex$1;
  useActiveIndex.default = _default2;
  return useActiveIndex;
}
var empty = {};
var warn = {};
var hasRequiredWarn;
function requireWarn() {
  if (hasRequiredWarn)
    return warn;
  hasRequiredWarn = 1;
  Object.defineProperty(warn, "__esModule", {
    value: true
  });
  warn.warnOnce = warn.warn = warn.communityFeatureWarn = void 0;
  var warn$1 = function warn2(msg) {
    console.warn("**************************************** INOVUA REACTDATAGRID COMMUNITY EDITION WARNING ****************************************\n\n                             ".concat(msg, "\n\n*********************************************************************************************************************************\n    "));
  };
  warn.warn = warn$1;
  var onceMessages = {};
  var warnOnce = function warnOnce2(msg) {
    if (onceMessages[msg]) {
      return;
    }
    onceMessages[msg] = true;
    console.warn("**************************************** INOVUA REACTDATAGRID COMMUNITY EDITION WARNING ****************************************\n\n                             ".concat(msg, "\n\n*********************************************************************************************************************************\n    "));
  };
  warn.warnOnce = warnOnce;
  var communityFeatureWarn = function communityFeatureWarn2(featureName, checkObj) {
    if (checkObj[featureName]) {
      return;
    }
    checkObj[featureName] = true;
    warn$1("".concat(featureName, " is only supported in ENTERPRISE Edition, but you're using the Community Edition!"));
  };
  warn.communityFeatureWarn = communityFeatureWarn;
  return warn;
}
var hasRequiredEmpty;
function requireEmpty() {
  if (hasRequiredEmpty)
    return empty;
  hasRequiredEmpty = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(empty, "__esModule", {
    value: true
  });
  empty.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _warn = requireWarn();
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var emptyPlugin = {
    name: "",
    hook: function hook(props2, computedProps, computedPropsRef) {
    }
  };
  var _default2 = [_objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "sortable-columns",
    defaultProps: function defaultProps2() {
      return {
        sortable: false
      };
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "license",
    defaultProps: function defaultProps2() {
      return {};
    },
    renderLicenseNotice: function renderLicenseNotice() {
      return null;
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "menus",
    defaultProps: function defaultProps2() {
      return {
        showColumnMenuTool: false
      };
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "group-and-pivot",
    hook: function hook() {
      return {
        computeDataStep: function computeDataStep(_ref2) {
          var config2 = _ref2.config;
          (0, _warn.warnOnce)("You are trying to use the grouping or pivot functionality, but are currently using the community edition. Please use the enterprise edition for this functionality to be available.");
          return config2;
        }
      };
    },
    defaultProps: function defaultProps2() {
      return {};
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "tree",
    hook: function hook() {
      return {
        computeTreeData: function computeTreeData(data, arg) {
          (0, _warn.warnOnce)("You are trying to use the tree functionality, but are currently using the community edition. Please use the enterprise edition for this functionality to be available.");
          return data;
        }
      };
    },
    defaultProps: function defaultProps2() {
      return {};
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "filters",
    defaultProps: function defaultProps2() {
      return {
        columnFilterContextMenuConstrainTo: true,
        columnFilterContextMenuPosition: "fixed"
      };
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "cell-selection",
    hook: function hook() {
      return {};
    },
    defaultProps: function defaultProps2() {
      return {};
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "live-pagination",
    hook: function hook() {
      return {};
    },
    defaultProps: function defaultProps2() {
      return {};
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "row-index-column",
    renderRowResizeIndicator: function renderRowResizeIndicator() {
      return null;
    },
    defaultProps: function defaultProps2() {
      return {};
    }
  }), _objectSpread2(_objectSpread2({}, emptyPlugin), {}, {
    name: "clipboard",
    hook: function hook() {
      return {};
    },
    defaultProps: function defaultProps2() {
      return {};
    }
  })];
  empty.default = _default2;
  return empty;
}
var ActiveRowIndicator = {};
var hasRequiredActiveRowIndicator;
function requireActiveRowIndicator() {
  if (hasRequiredActiveRowIndicator)
    return ActiveRowIndicator;
  hasRequiredActiveRowIndicator = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(ActiveRowIndicator, "__esModule", {
    value: true
  });
  ActiveRowIndicator.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = _interopRequireWildcard(reactExports);
  var _join = _interopRequireDefault2(requireJoin());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var CLASS_NAME = "InovuaReactDataGrid__row";
  var SCROLLBAR_WIDTH = (0, _getScrollbarWidth.default)();
  var RTL_OFFSET = SCROLLBAR_WIDTH || 17;
  var ActiveRowIndicator$1 = function ActiveRowIndicator2(props2) {
    var _style;
    var _useState = (0, _react.useState)(""), _useState2 = (0, _slicedToArray2.default)(_useState, 2), offset = _useState2[0], setOffset = _useState2[1];
    var _useState3 = (0, _react.useState)(0), _useState4 = (0, _slicedToArray2.default)(_useState3, 2);
    _useState4[0];
    var setScrollLeft = _useState4[1];
    var activeIndex = props2.activeIndex, rtl = props2.rtl, rtlOffset = props2.rtlOffset, activeRowIndicatorClassName = props2.activeRowIndicatorClassName;
    var oldActiveIndex = (0, _usePrevious.default)(activeIndex, -1);
    var _ref2 = props2.activeRowRef.current || {}, _ref$instance = _ref2.instance, row = _ref$instance === void 0 ? {} : _ref$instance;
    var hasBorderBottom = row.hasBorderBottom, hasBorderTop = row.hasBorderTop;
    var rowProps = row.props || {};
    var groupColumn = rowProps.groupColumn, data = rowProps.data, depth = rowProps.depth, groupNestingSize = rowProps.groupNestingSize;
    var deps = [activeIndex, rtlOffset, oldActiveIndex, props2.dataSourceCount, props2.computedExpandedRows, props2.computedExpandedNodes, props2.computedRowHeights, row];
    var updateLayout2 = function updateLayout3(config2) {
      var node2 = (props2.activeRowRef.current || {
        node: null
      }).node;
      var instance = (props2.activeRowRef.current || {
        instance: null
      }).instance;
      if (!node2 || !node2.parentNode || props2.dataSourceCount < activeIndex) {
        return setOffset("");
      }
      if (instance && instance.props.rowIndex !== props2.activeIndex && props2.activeIndex >= 0) {
        requestAnimationFrame(function() {
          return updateLayout3({
            raf: false
          });
        });
        return;
      }
      var doSetOffset = function doSetOffset2(left2, top) {
        top = Number.parseFloat(top) || 0;
        setOffset("translate3d(".concat(left2 || 0, "px, ").concat(top, "px, 0px)"));
      };
      if (config2 && config2.raf === false) {
        doSetOffset(rtl ? -RTL_OFFSET : 0, node2.style.top);
      } else {
        requestAnimationFrame(function() {
          if (node2 && node2.parentNode) {
            doSetOffset(rtl ? -RTL_OFFSET : 0, node2.style.top);
          }
        });
      }
    };
    (0, _react.useLayoutEffect)(updateLayout2, deps);
    (0, _react.useEffect)(function() {
      if (props2.handle) {
        props2.handle({
          setScrollLeft
        });
      }
      return function() {
        if (props2.handle) {
          props2.handle(null);
        }
      };
    }, [props2.handle]);
    var groupDepth = groupColumn ? 0 : data && data.__group ? data.depth - 1 : data && data.__summary ? rowProps.summaryProps.depth : depth || 0;
    var scrollbarOffset = props2.rtl ? RTL_OFFSET : 0;
    var left = (groupNestingSize || 0) * groupDepth;
    var style = (_style = {}, (0, _defineProperty2.default)(_style, rtl ? "right" : "left", left - scrollbarOffset), (0, _defineProperty2.default)(_style, "width", props2.width - left), _style);
    var transform2;
    if (!offset) {
      style.opacity = 0;
    } else {
      style.willChange = "transform";
      transform2 = offset;
      style.height = props2.activeRowHeight;
    }
    if (transform2) {
      style.transform = transform2;
    }
    var innerClassName = (0, _join.default)("".concat(CLASS_NAME, "-active-borders-inner"), activeRowIndicatorClassName ? activeRowIndicatorClassName : "");
    return _react.default.createElement("div", {
      key: "active-row-borders",
      className: (0, _join.default)("".concat(CLASS_NAME, "-active-borders"), offset != "" ? "".concat(CLASS_NAME, "-active-borders--active") : "", hasBorderTop && "".concat(CLASS_NAME, "-active-borders--has-border-top"), hasBorderBottom && "".concat(CLASS_NAME, "-active-borders--has-border-bottom")),
      style
    }, _react.default.createElement("div", {
      className: innerClassName
    }));
  };
  var _default2 = ActiveRowIndicator$1;
  ActiveRowIndicator.default = _default2;
  return ActiveRowIndicator;
}
var useColumnHover = {};
var hasRequiredUseColumnHover;
function requireUseColumnHover() {
  if (hasRequiredUseColumnHover)
    return useColumnHover;
  hasRequiredUseColumnHover = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useColumnHover, "__esModule", {
    value: true
  });
  useColumnHover.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var useColumnHover$1 = function useColumnHover2(_props, _computedProps, computedPropsRef) {
    var _useState = (0, _react.useState)(-1), _useState2 = (0, _slicedToArray2.default)(_useState, 2), columnIndexHovered = _useState2[0], setColumnIndexHovered = _useState2[1];
    var onColumnMouseEnter = (0, _react.useCallback)(function(cellProps) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (computedProps.computedEnableColumnHover || cellProps.computedEnableColumnHover) {
        var columnIndex = cellProps.columnIndex;
        if (columnIndex != null) {
          setColumnIndexHovered(columnIndex);
        }
      }
    }, []);
    var onColumnMouseLeave = (0, _react.useCallback)(function(cellProps) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (computedProps.computedEnableColumnHover || cellProps.computedEnableColumnHover) {
        setColumnIndexHovered(-1);
      }
    }, []);
    return {
      columnIndexHovered,
      onColumnMouseEnter,
      onColumnMouseLeave
    };
  };
  var _default2 = useColumnHover$1;
  useColumnHover.default = _default2;
  return useColumnHover;
}
var notifier = {};
var hasRequiredNotifier;
function requireNotifier() {
  if (hasRequiredNotifier)
    return notifier;
  hasRequiredNotifier = 1;
  Object.defineProperty(notifier, "__esModule", {
    value: true
  });
  notifier.notifier = notifier$1;
  function notifier$1(defaultValue) {
    var lastValue = defaultValue;
    var listeners = [];
    function fn(value) {
      lastValue = value;
      listeners.forEach(function(listener) {
        return listener(lastValue);
      });
    }
    fn.get = function() {
      return lastValue;
    };
    fn.onCalled = function(listener) {
      listeners.push(listener);
      return function() {
        listeners = listeners.filter(function(l2) {
          return l2 !== listener;
        });
      };
    };
    fn.destroy = function() {
      listeners.length = 0;
    };
    return fn;
  }
  return notifier;
}
var hasRequiredFactory;
function requireFactory() {
  if (hasRequiredFactory)
    return factory;
  hasRequiredFactory = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    var _typeof3 = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "filterTypes", {
      enumerable: true,
      get: function get2() {
        return _filterTypes.default;
      }
    });
    var _typeof2 = _interopRequireDefault2(require_typeof());
    var _objectWithoutProperties2 = _interopRequireDefault2(requireObjectWithoutProperties());
    var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
    var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
    var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
    var _react = _interopRequireWildcard(reactExports);
    var _reactDom = reactDomExports;
    var _src = _interopRequireDefault2(requireSrc$l());
    var _uglified = _interopRequireDefault2(requireUglified());
    var _useProperty13 = _interopRequireDefault2(requireUseProperty());
    var _getScrollbarWidth = _interopRequireDefault2(requireGetScrollbarWidth());
    var _clamp = _interopRequireDefault2(requireClamp$1());
    var _isMobile = _interopRequireDefault2(requireIsMobile$1());
    var _Layout = _interopRequireDefault2(requireLayout());
    var _LoadMask = _interopRequireDefault2(requireLoadMask());
    var _filterTypes = _interopRequireDefault2(requireFilterTypes());
    var _useColumns = _interopRequireDefault2(requireUseColumns());
    var _useSize3 = _interopRequireDefault2(requireUseSize());
    var _useNamedState5 = _interopRequireDefault2(requireUseNamedState());
    var _useHeader = _interopRequireDefault2(requireUseHeader());
    var _useEditable = _interopRequireDefault2(requireUseEditable());
    var _useDataSource = _interopRequireDefault2(requireUseDataSource());
    var _useScrollProps = _interopRequireDefault2(requireUseScrollProps());
    var _useColumnsSizing = _interopRequireDefault2(requireUseColumnsSizing());
    var _useGroups = _interopRequireDefault2(requireUseGroups());
    var _useSelection = _interopRequireDefault2(requireUseSelection());
    var _useRow2 = _interopRequireDefault2(requireUseRow());
    var _RowHeightManager = _interopRequireDefault2(requireRowHeightManager());
    var _ua = requireUa();
    var _prepareClassName = _interopRequireDefault2(requirePrepareClassName());
    var _context = requireContext();
    var _Cover = _interopRequireDefault2(requireCover());
    var _useActiveIndex = _interopRequireDefault2(requireUseActiveIndex());
    var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
    var _empty = _interopRequireDefault2(requireEmpty());
    var _ActiveRowIndicator = _interopRequireDefault2(requireActiveRowIndicator());
    var _warn = requireWarn();
    var _StickyRowsContainer = requireStickyRowsContainer();
    var _getGlobal = requireGetGlobal();
    var _useColumnHover = _interopRequireDefault2(requireUseColumnHover());
    var _notifier = requireNotifier();
    var _excluded2 = ["computedOnKeyDown", "computedOnFocus", "computedOnBlur"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var GRID_ID = 0;
    var globalObject = (0, _getGlobal.getGlobal)();
    var DEFAULT_I18N = {
      pageText: "Page ",
      ofText: " of ",
      perPageText: "Results per page",
      showingText: "Showing ",
      clearAll: "Clear all",
      clear: "Clear",
      showFilteringRow: "Show filtering row",
      hideFilteringRow: "Hide filtering row",
      enable: "Enable",
      disable: "Disable",
      sortAsc: "Sort ascending",
      sortDesc: "Sort descending",
      unsort: "Unsort",
      group: "Group",
      ungroup: "Ungroup",
      lockStart: "Lock start",
      lockEnd: "Lock end",
      unlock: "Unlock",
      columns: "Columns",
      autoresizeThisColumn: "Autoresize this column",
      autoresizeAllColumns: "Autoresize all columns",
      autoSizeToFit: "Autosize to fit",
      contains: "Contains",
      startsWith: "Starts with",
      endsWith: "Ends with",
      notContains: "Does not contain",
      inlist: "In list",
      notinlist: "Not in list",
      neq: "Does not equal",
      inrange: "In range",
      notinrange: "Not in range",
      eq: "Equals",
      notEmpty: "Not empty",
      empty: "Empty",
      lt: "Less than",
      lte: "Less than or equal",
      gt: "Greater than",
      gte: "Greater than or equal",
      before: "Before",
      beforeOrOn: "Before or on",
      afterOrOn: "After or on",
      after: "After",
      start: "Start",
      end: "End",
      dragHeaderToGroup: "Drag header to group",
      noRecords: "No records available",
      "calendar.todayButtonText": "Today",
      "calendar.clearButtonText": "Clear",
      "calendar.okButtonText": "OK",
      "calendar.cancelButtonText": "Cancel"
    };
    var renderLoadMask = function renderLoadMask2(props2) {
      var loadMaskProps = {
        visible: props2.computedLoading,
        livePagination: props2.computedLivePagination,
        loadingText: props2.loadingText || "Loading",
        zIndex: 1e4,
        theme: props2.theme
      };
      var loadMask;
      if (props2.renderLoadMask) {
        loadMask = props2.renderLoadMask(loadMaskProps);
      }
      if (loadMask !== void 0) {
        return loadMask;
      }
      return _react.default.createElement(_LoadMask.default, _objectSpread2({}, loadMaskProps));
    };
    var reducePlugins = function reducePlugins2(acc, plugin) {
      if (!plugin.name || typeof plugin.hook !== "function") {
        return acc;
      }
      acc[plugin.name] = plugin;
      return acc;
    };
    var GridFactory = function GridFactory2() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, plugins2 = _ref2.plugins;
      var edition = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "community";
      plugins2 = plugins2 || [];
      var maybeAddColumns;
      var defaultSize = {
        width: 0,
        height: 0
      };
      var emptyCoverHandle = {
        setActive: function setActive() {
        },
        setCursor: function setCursor() {
        }
      };
      plugins2 = [].concat((0, _toConsumableArray2.default)(_empty.default), (0, _toConsumableArray2.default)(plugins2));
      var pluginsMap = plugins2.reduce(reducePlugins, {});
      var Grid3 = _react.default.memo(function(props2) {
        var _useState = (0, _react.useState)(false), _useState2 = (0, _slicedToArray2.default)(_useState, 2), computedFocused = _useState2[0], computedSetFocused = _useState2[1];
        var computedPropsRef = (0, _react.useRef)(null);
        var warnRef = (0, _react.useMemo)(function() {
          return {};
        }, []);
        var context2 = (0, _react.useContext)(props2.context);
        (0, _react.useEffect)(function() {
          if (computedFocused && props2.activateRowOnFocus) {
            var _computedProps = computedPropsRef.current;
            if (!_computedProps) {
              return;
            }
            var count = _computedProps.count;
            if (!count) {
              return;
            }
            var _activeItem = _computedProps.getActiveItem();
            if (!_activeItem) {
              var index2 = _computedProps.computedLastActiveIndex || _computedProps.getFirstVisibleIndex();
              _computedProps.setActiveIndex(index2);
            }
          }
        }, [computedFocused]);
        var bodyRef = (0, _react.useRef)(null);
        var domRef = (0, _react.useRef)(null);
        var portalRef = (0, _react.useRef)(null);
        var getDOMNode = function getDOMNode2() {
          return domRef.current;
        };
        var getBodyDOMNode = function getBodyDOMNode2() {
          var _bodyRef$current;
          return bodyRef === null || bodyRef === void 0 ? void 0 : (_bodyRef$current = bodyRef.current) === null || _bodyRef$current === void 0 ? void 0 : _bodyRef$current.getDOMNode();
        };
        var getVirtualList = function getVirtualList2() {
          return bodyRef.current != null ? bodyRef.current.getVirtualList() : null;
        };
        var getColumnLayout = function getColumnLayout2() {
          return bodyRef.current != null ? bodyRef.current.columnLayout : null;
        };
        var getDefaultSize = function getDefaultSize2() {
          if (props2.viewportSize) {
            return props2.viewportSize;
          }
          return defaultSize;
        };
        var _useProperty = (0, _useProperty13.default)(props2, "loading"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedLoading = _useProperty2[0], doSetLoading = _useProperty2[1];
        var loadingTimeoutIdRef = (0, _react.useRef)();
        var setLoading = function setLoading2(loading) {
          var computedProps2 = computedPropsRef.current;
          var isLoading = loading instanceof Function ? loading(computedProps2 ? computedProps2.computedLoading : false) : loading;
          if (!computedProps2) {
            doSetLoading(isLoading);
            return;
          }
          if (loadingTimeoutIdRef.current) {
            clearTimeout(loadingTimeoutIdRef.current);
          }
          if (computedProps2.computedLivePagination && !isLoading && computedProps2.livePaginationLoadMaskHideDelay) {
            loadingTimeoutIdRef.current = setTimeout(function() {
              doSetLoading(isLoading);
              loadingTimeoutIdRef.current = null;
            }, computedProps2.livePaginationLoadMaskHideDelay);
          } else {
            doSetLoading(isLoading);
          }
        };
        var _useNamedState = (0, _useNamedState5.default)({}, props2.context, "columnSizes"), _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2), columnSizes = _useNamedState2[0], setColumnSizes = _useNamedState2[1];
        var _useNamedState3 = (0, _useNamedState5.default)({}, props2.context, "columnFlexes"), _useNamedState4 = (0, _slicedToArray2.default)(_useNamedState3, 2), columnFlexes = _useNamedState4[0], setColumnFlexes = _useNamedState4[1];
        var _useState3 = (0, _react.useState)({}), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), lockedColumnsState = _useState4[0], setLockedColumnsState = _useState4[1];
        var _useState5 = (0, _react.useState)({
          vertical: false,
          horizontal: false
        }), _useState6 = (0, _slicedToArray2.default)(_useState5, 2), scrollbars = _useState6[0], setScrollbars = _useState6[1];
        var _useProperty3 = (0, _useProperty13.default)(props2, "reservedViewportWidth", 0), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), reservedViewportWidth = _useProperty4[0], setReservedViewportWidth = _useProperty4[1];
        var _useSize = (0, _useSize3.default)(getDefaultSize()), _useSize2 = (0, _slicedToArray2.default)(_useSize, 2), size2 = _useSize2[0], setSize = _useSize2[1];
        var _useState7 = (0, _react.useState)(0), _useState8 = (0, _slicedToArray2.default)(_useState7, 2), viewportAvailableWidth = _useState8[0], setViewportAvailableWidth = _useState8[1];
        (0, _react.useEffect)(function() {
          if (props2.viewportSize) {
            setSize(props2.viewportSize);
          }
        }, [props2.viewportSize]);
        var onResize = function onResize2(size3) {
          (0, _batchUpdate.default)().commit(function() {
            if (_ua.IS_MS_BROWSER || _ua.IS_FF) {
              size3.width -= 2;
            }
            setSize(size3);
            updateViewportAvailableWidth(size3.width);
            var rowHeight = typeof props2.rowHeight !== "number" ? props2.minRowHeight : props2.rowHeight;
            if (rowHeight) {
              setMaxVisibleRows(Math.ceil(size3.height / rowHeight));
            }
          });
        };
        var updateViewportAvailableWidth = function updateViewportAvailableWidth2(newViewportAvailableWidth) {
          var scrolls = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : scrollbars;
          if (props2.nativeScroll && scrolls.vertical) {
            newViewportAvailableWidth -= (0, _getScrollbarWidth.default)();
          }
          setViewportAvailableWidth(Math.round(newViewportAvailableWidth));
        };
        var _useState9 = (0, _react.useState)({
          virtualListBorderLeft: 0,
          virtualListBorderRight: 0,
          virtualListExtraWidth: 0
        }), _useState10 = (0, _slicedToArray2.default)(_useState9, 2), _useState10$ = _useState10[0], virtualListBorderLeft = _useState10$.virtualListBorderLeft, virtualListBorderRight = _useState10$.virtualListBorderRight, virtualListExtraWidth = _useState10$.virtualListExtraWidth, setVirtualListState = _useState10[1];
        var onScrollbarsChange = function onScrollbarsChange2(scrollbars2) {
          var onChange = function onChange2() {
            var vl2 = getVirtualList();
            var computedStyle = vl2 && globalObject.getComputedStyle(vl2.getDOMNode());
            if (!computedStyle) {
              return;
            }
            var virtualListBorderLeft2 = parseInt(computedStyle.borderLeftWidth, 10);
            var virtualListBorderRight2 = parseInt(computedStyle.borderRightWidth, 10);
            var virtualListExtraWidth2 = virtualListBorderLeft2 + virtualListBorderRight2;
            (0, _batchUpdate.default)().commit(function() {
              setScrollbars(scrollbars2);
              if (size2.width) {
                updateViewportAvailableWidth(size2.width, scrollbars2);
              }
              setVirtualListState({
                virtualListBorderLeft: virtualListBorderLeft2,
                virtualListBorderRight: virtualListBorderRight2,
                virtualListExtraWidth: virtualListExtraWidth2
              });
            });
          };
          if (!bodyRef.current) {
            requestAnimationFrame(onChange);
          } else {
            onChange();
          }
        };
        var _useProperty5 = (0, _useProperty13.default)(props2, "showCellBorders"), _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2), computedShowCellBorders = _useProperty6[0], setShowCellBorders = _useProperty6[1];
        var showHorizontalCellBorders = computedShowCellBorders === true || computedShowCellBorders === "horizontal";
        var showVerticalCellBorders = computedShowCellBorders === true || computedShowCellBorders === "vertical";
        var _useState11 = (0, _react.useState)(false), _useState12 = (0, _slicedToArray2.default)(_useState11, 2), listenOnCellEnter = _useState12[0], updateListenOnCellEnter = _useState12[1];
        var _useState13 = (0, _react.useState)(null), _useState14 = (0, _slicedToArray2.default)(_useState13, 2), selectionFixedCell = _useState14[0], setSelectionFixedCell = _useState14[1];
        var setListenOnCellEnter = function setListenOnCellEnter2(value, callback2) {
          if (value) {
            globalObject.addEventListener("mouseup", callback2);
          } else {
            globalObject.removeEventListener("mouseup", callback2);
          }
          updateListenOnCellEnter(value);
        };
        var renderCallbacks = (0, _react.useRef)([]);
        var onNextRender = function onNextRender2(fn) {
          renderCallbacks.current.push(fn);
        };
        (0, _react.useEffect)(function() {
          renderCallbacks.current.forEach(function(fn) {
            return fn();
          });
          renderCallbacks.current.length = 0;
        });
        var _useState15 = (0, _react.useState)(""), _useState16 = (0, _slicedToArray2.default)(_useState15, 2), lastCellInRange = _useState16[0], setLastCellInRange = _useState16[1];
        var _useState17 = (0, _react.useState)(null), _useState18 = (0, _slicedToArray2.default)(_useState17, 2), lastSelectedCell = _useState18[0], setLastSelectedCell = _useState18[1];
        var renderInPortal = (0, _react.useMemo)(function() {
          return props2.renderInPortal || function(el2) {
            return portalRef.current ? (0, _reactDom.createPortal)(el2, portalRef.current) : null;
          };
        }, [props2.renderInPortal]);
        var cProps = _objectSpread2(_objectSpread2({}, props2), {}, {
          initialProps: props2,
          selectionFixedCell,
          setSelectionFixedCell,
          bodyRef,
          domRef,
          portalRef,
          renderInPortal,
          listenOnCellEnter,
          setListenOnCellEnter,
          lastCellInRange,
          setLastCellInRange,
          setLastSelectedCell,
          lastSelectedCell,
          onScrollbarsChange,
          virtualListBorderLeft,
          virtualListBorderRight,
          virtualListExtraWidth,
          scrollbars,
          reservedViewportWidth,
          setReservedViewportWidth,
          getColumnLayout,
          getDOMNode,
          computedLoading,
          computedFocused,
          computedSetFocused,
          columnFlexes,
          columnSizes,
          setColumnFlexes,
          setColumnSizes,
          lockedColumnsState,
          setLockedColumnsState,
          setLoading,
          isLoading: function isLoading() {
            return computedProps.computedLoading;
          },
          size: size2,
          setSize,
          viewportAvailableWidth,
          availableWidth: viewportAvailableWidth,
          maxAvailableWidthForColumns: viewportAvailableWidth - reservedViewportWidth,
          showHorizontalCellBorders,
          showVerticalCellBorders,
          shareSpaceOnResize: props2.shareSpaceOnResize || false,
          onNextRender,
          computedEnableColumnHover: props2.enableColumnHover || void 0
        });
        cProps.i18n = function(key, defaultLabel) {
          return props2.i18n[key] || DEFAULT_I18N[key] || defaultLabel;
        };
        Object.assign(cProps, (0, _useActiveIndex.default)(props2, cProps, computedPropsRef));
        Object.assign(cProps, pluginsMap["sortable-columns"].hook(props2, cProps, computedPropsRef));
        if (pluginsMap["group-and-pivot"] && pluginsMap["group-and-pivot"].hook) {
          Object.assign(cProps, pluginsMap["group-and-pivot"].hook(props2, cProps, computedPropsRef));
        }
        Object.assign(cProps, (0, _useGroups.default)(props2, cProps, computedPropsRef));
        if (pluginsMap.tree && pluginsMap.tree.hook) {
          Object.assign(cProps, pluginsMap.tree.hook(props2, cProps, computedPropsRef));
        }
        if (pluginsMap.filters && pluginsMap.filters.hook) {
          Object.assign(cProps, pluginsMap.filters.hook(props2, cProps, computedPropsRef));
        }
        Object.assign(cProps, (0, _useEditable.default)(props2, cProps, computedPropsRef));
        cProps.maybeAddColumns = maybeAddColumns;
        var columnInfo = (0, _useColumns.default)(props2, cProps, computedPropsRef);
        Object.assign(cProps, columnInfo);
        if (edition === "enterprise") {
          var columnsSizing = (0, _useColumnsSizing.default)(props2, cProps, computedPropsRef);
          Object.assign(cProps, columnsSizing);
        }
        Object.assign(cProps, (0, _useColumnHover.default)(props2, cProps, computedPropsRef));
        cProps.wasMountedRef = (0, _react.useRef)(false);
        cProps.wasUnmountedRef = (0, _react.useRef)(false);
        var dataInfo = (0, _useDataSource.default)(props2, cProps, computedPropsRef);
        Object.assign(cProps, pluginsMap["live-pagination"].hook(props2, cProps, computedPropsRef));
        var rowHeightManager = (0, _react.useMemo)(function() {
          return new _RowHeightManager.default({
            rowHeight: props2.rowHeight || props2.minRowHeight,
            minRowHeight: props2.minRowHeight
          }, {}, {
            cache: !!props2.rowHeight
          });
        }, []);
        var i18nFn = (0, _react.useCallback)(function(key, defaultLabel) {
          if (!props2.i18n) {
            return defaultLabel;
          }
          return props2.i18n[key] || DEFAULT_I18N[key] || defaultLabel;
        }, [props2.i18n]);
        var getItemId = (0, _react.useCallback)(function(item) {
          if (!item)
            return;
          if (item.__group && Array.isArray(item.keyPath)) {
            return item.keyPath.join(props2.groupPathSeparator);
          }
          var itemId = computeIdProperty() ? compoundItemId(item) : simpleItemId(item);
          return itemId;
        }, []);
        var simpleItemId = (0, _react.useCallback)(function(item) {
          return item[props2.idProperty];
        }, []);
        var compoundItemId = (0, _react.useCallback)(function(item) {
          var parts = props2.idProperty.split(props2.idPropertySeparator);
          return parts.reduce(function(itemObj, id2) {
            if (itemObj) {
              return itemObj[id2] ? itemObj[id2] : itemObj;
            }
          }, item);
        }, []);
        var getItemIndexBy = function getItemIndexBy2(fn) {
          var data = computedProps.data;
          if (!data || typeof fn != "function") {
            return -1;
          }
          if (data.findIndex) {
            return data.findIndex(fn);
          }
          for (var i = 0, len = data.length; i < len; i++) {
            if (fn(data[i]) === true) {
              return i;
            }
          }
          return -1;
        };
        var getItemAt = function getItemAt2(index2) {
          if (!computedPropsRef.current) {
            return void 0;
          }
          var item = computedPropsRef.current.data[index2];
          if (!item) {
            return;
          }
          return getItemWithCache(item);
        };
        var getItemWithCache = function getItemWithCache2(item) {
          if (item && computedPropsRef.current && computedPropsRef.current.computedDataSourceCache) {
            var itemId = getItemId(item);
            var cachedItem = computedPropsRef.current.computedDataSourceCache[itemId];
            if (cachedItem) {
              item = _objectSpread2(_objectSpread2({}, item), cachedItem);
            }
          }
          return item;
        };
        var getItemIndex = function getItemIndex2(item) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return -1;
          }
          var data = computedProps2.data;
          var itemId = getItemId(item);
          for (var i = 0; i < data.length; i++) {
            var dataItem = data[i];
            var dataItemId = getItemId(dataItem);
            if (dataItemId === itemId) {
              return i;
            }
          }
          return -1;
        };
        var getItemIdAt = function getItemIdAt2(index2) {
          if (index2 === -1)
            return;
          return getItemId(getItemAt(index2));
        };
        var isRowExpandedById = function isRowExpandedById2() {
          return false;
        };
        var isCellVisible = function isCellVisible2(_ref22) {
          var rowIndex = _ref22.rowIndex, columnIndex = _ref22.columnIndex;
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return false;
          }
          var column2 = computedProps2.visibleColumns[columnIndex];
          if (!computedProps2.rowHeightManager) {
            throw "You need fixed row height for this method to work";
          }
          var columnStart = column2.computedOffset;
          var columnEnd = columnStart + column2.computedWidth;
          var rowStart = computedProps2.rowHeightManager.getRowOffset(rowIndex);
          var rowEnd = rowStart + computedProps2.rowHeightManager.getRowHeight(rowIndex);
          var virtualList = getVirtualList();
          var visibleTop = virtualList.scrollTop;
          var visibleBottom = visibleTop + computedProps2.size.height;
          var visibleLeft = virtualList.scrollLeft;
          var visibleRight = visibleLeft + computedProps2.size.width;
          var leftDiff = columnStart - visibleLeft;
          var rightDiff = visibleRight - columnEnd;
          var topDiff = rowStart - visibleTop;
          var bottomDiff = visibleBottom - rowEnd;
          if (topDiff >= 0 && bottomDiff >= 0 && leftDiff >= 0 && rightDiff >= 0) {
            return true;
          }
          return {
            topDiff,
            bottomDiff,
            leftDiff,
            rightDiff
          };
        };
        var setScrollTop = function setScrollTop2(scrollTop) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollTop = scrollTop;
          }
        };
        var incrementScrollTop = function incrementScrollTop2(increment) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollTop += increment;
          }
        };
        var getScrollTop = function getScrollTop2() {
          var body = bodyRef.current;
          if (body && body.columnLayout) {
            return body.columnLayout.scrollTop || 0;
          }
          return 0;
        };
        var getScrollLeft = function getScrollLeft2() {
          var body = bodyRef.current;
          if (body && body.columnLayout) {
            return body.columnLayout.scrollLeft || 0;
          }
          return 0;
        };
        var getScrollLeftMax = function getScrollLeftMax2() {
          var virtualList = getVirtualList();
          if (virtualList) {
            return virtualList.scrollLeftMax || 0;
          }
          return 0;
        };
        var setScrollLeft = function setScrollLeft2(scrollLeft) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollLeft = scrollLeft;
          }
        };
        var incrementScrollLeft = function incrementScrollLeft2(increment) {
          var virtualList = getVirtualList();
          if (virtualList) {
            virtualList.scrollLeft += increment;
          }
        };
        var getRows = function getRows2() {
          var vl2 = getVirtualList();
          return vl2.getRows();
        };
        var getDOMNodeForRowIndex = function getDOMNodeForRowIndex2(index2) {
          var rows = getRows();
          var row = rows.find(function(row2) {
            return row2.index === index2;
          });
          var rowInstance = row.getInstance();
          return rowInstance.getDOMNode ? rowInstance.getDOMNode() : rowInstance.domRef ? rowInstance.domRef.current : null;
        };
        var getHeader = function getHeader2() {
          var body = bodyRef.current;
          var columnLayout = body && body.getColumnLayout();
          var header = columnLayout.getHeader();
          return header;
        };
        var scrollToId = function scrollToId2(id2, config2, callback2) {
          var index2 = computedProps.getRowIndexById(id2);
          scrollToIndex(index2, config2, callback2);
        };
        var scrollToIndex = function scrollToIndex2(index2, config2, callback2) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          index2 = (0, _clamp.default)(index2, 0, computedProps2.data.length - 1);
          config2 = config2 || {};
          var top = config2.top;
          var force = config2.force;
          var direction2 = config2.direction;
          var duration = config2.duration;
          var offset = config2.offset;
          top = !!top;
          force = !!force;
          direction2 = direction2 || (top ? "top" : "bottom");
          getVirtualList().scrollToIndex(index2, {
            direction: direction2,
            force,
            duration,
            offset
          }, callback2);
        };
        var scrollToCell = function scrollToCell2(_ref3) {
          var rowIndex = _ref3.rowIndex, columnIndex = _ref3.columnIndex;
          var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, offset = _ref4.offset, left = _ref4.left, right = _ref4.right, top = _ref4.top;
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (offset === void 0) {
            offset = (computedProps2.rowHeight || 50) / 2;
          }
          var columnDirection = left === true ? "left" : left === false || right === true ? "right" : void 0;
          var col = computedProps2.visibleColumns[columnIndex];
          var scrollToRow = function scrollToRow2() {
            var maxIndex = computedProps2.computedTreeEnabled ? computedProps2.data.length - 1 : computedProps2.count - 1;
            computedProps2.scrollToIndex((0, _clamp.default)(rowIndex + (top ? -0 : 0), 0, maxIndex), {
              top,
              offset: 0
            });
          };
          if (!col) {
            return;
          }
          if (col.computedLocked) {
            scrollToRow();
            return;
          }
          computedProps2.scrollToColumn(columnIndex, {
            offset,
            direction: columnDirection
          }, function() {
            scrollToRow();
          });
        };
        var smoothScrollTo2 = (0, _react.useCallback)(function(value, config2) {
          var virtualList = getVirtualList();
          virtualList.smoothScrollTo(value, config2);
        }, []);
        var scrollToColumn = (0, _react.useCallback)(function(index2, config2, callback2) {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          if (!computedProps2.size.width) {
            return requestAnimationFrame(function() {
              scrollToColumn(index2, config2, callback2);
            });
          }
          config2 = config2 || {};
          var _config = config2, direction2 = _config.direction, force = _config.force, duration = _config.duration, offset = _config.offset;
          if (offset === void 0) {
            offset = (computedProps2.rowHeight || 50) / 2;
          }
          var col = computedProps2.getColumnBy(index2);
          if (col.computedLocked) {
            if (callback2) {
              callback2();
            }
            return;
          }
          var virtualList = getVirtualList();
          var scrollLeft = virtualList.scrollLeft;
          var scrollWidth = computedProps2.size.width;
          if (direction2) {
            if (direction2 != "left" && direction2 != "right") {
              direction2 = null;
            }
          }
          if (force && !direction2) {
            force = false;
          }
          if (typeof callback2 != "function") {
            callback2 = function callback3() {
            };
          }
          var getColumnOffset = function getColumnOffset2() {
            return direction2 === "left" || !direction2 ? col.computedOffset : col.computedOffset + col.computedWidth;
          };
          var getLeftDiff = function getLeftDiff2() {
            return getColumnOffset() - scrollLeft - (computedProps2.totalLockedStartWidth || 0);
          };
          var getRightDiff = function getRightDiff2() {
            return scrollLeft + scrollWidth - getColumnOffset() - (computedProps2.totalLockedEndWidth || 0);
          };
          var leftDiff = getLeftDiff();
          var rightDiff = getRightDiff();
          var toLeft = leftDiff < 0;
          var toRight = rightDiff < 0;
          var visible = !toLeft && !toRight;
          if (!visible) {
            if (!direction2) {
              direction2 = leftDiff < 0 ? "left" : "right";
              force = true;
              leftDiff = getLeftDiff();
              rightDiff = getRightDiff();
            }
          }
          if (!visible || direction2 && force) {
            var newScrollLeft;
            if (direction2 == "left" || leftDiff < 0) {
              newScrollLeft = scrollLeft + leftDiff - offset;
            } else if (direction2 == "right" || rightDiff < 0) {
              newScrollLeft = scrollLeft - rightDiff + offset;
            }
            if (newScrollLeft != null) {
              if (duration) {
                virtualList.smoothScrollTo(newScrollLeft, {
                  duration,
                  orientation: "horizontal"
                }, callback2);
                return;
              }
              virtualList.scrollLeft = newScrollLeft;
            }
          }
          callback2();
        }, []);
        var getStickyContainerHeight = function getStickyContainerHeight2() {
          var _getDOMNode, _stickyContainer$scro;
          var stickyContainer = (_getDOMNode = getDOMNode()) === null || _getDOMNode === void 0 ? void 0 : _getDOMNode.querySelector(".".concat(_StickyRowsContainer.StickyRowsContainerClassName));
          var stickyContainerHeight = (_stickyContainer$scro = stickyContainer === null || stickyContainer === void 0 ? void 0 : stickyContainer.scrollHeight) !== null && _stickyContainer$scro !== void 0 ? _stickyContainer$scro : 0;
          return stickyContainerHeight;
        };
        var scrollToIndexIfNeeded = (0, _react.useCallback)(function(index2, config2, callback2) {
          var needed = !isRowFullyVisible(index2);
          if (!needed) {
            var _computedProps2 = computedPropsRef.current;
            if (_computedProps2 !== null && _computedProps2 !== void 0 && _computedProps2.computedStickyRows) {
              if (_computedProps2.computedStickyRows[index2]) {
                needed = false;
              } else {
                var stickyContainerHeight = getStickyContainerHeight();
                var scrollTop = getScrollTop();
                var relativeScrollTop = scrollTop + stickyContainerHeight;
                var rowOffset = _computedProps2.rowHeightManager.getRowOffset(index2);
                if (relativeScrollTop > rowOffset) {
                  needed = true;
                  config2 = config2 || {
                    direction: "top"
                  };
                  config2.offset = relativeScrollTop - rowOffset + rowHeightManager.getRowHeight(index2);
                }
              }
            }
          } else {
            if (computedProps !== null && computedProps !== void 0 && computedProps.computedStickyRows) {
              config2 = config2 || {
                direction: "top"
              };
              config2.offset = config2.offset || 0;
              if (config2.direction === "top" || config2.top) {
                config2.offset += getStickyContainerHeight();
              }
            }
          }
          if (needed) {
            scrollToIndex(index2, config2, callback2);
          } else {
            if (callback2) {
              callback2();
            }
          }
          return needed;
        }, []);
        var isRowFullyVisible = function isRowFullyVisible2(rowIndex) {
          var list2 = getVirtualList();
          if (!list2) {
            return false;
          }
          return list2.isRowVisible(rowIndex);
        };
        var getRenderRange = function getRenderRange2() {
          return bodyRef.current != null ? bodyRef.current.getRenderRange() : {
            from: 0,
            to: 0
          };
        };
        var isRowRendered = function isRowRendered2(index2) {
          var _getRenderRange = getRenderRange(), from2 = _getRenderRange.from, to2 = _getRenderRange.to;
          return index2 >= from2 && index2 < to2;
        };
        var focus = function focus2() {
          var virtualList = getVirtualList();
          if (!virtualList) {
            return;
          }
          var scrollContainer = virtualList.scrollContainer;
          if (!scrollContainer) {
            return;
          }
          scrollContainer.focus();
        };
        var blur2 = function blur3() {
          var virtualList = getVirtualList();
          if (!virtualList) {
            return;
          }
          var scrollContainer = virtualList.scrollContainer;
          if (!scrollContainer) {
            return;
          }
          scrollContainer.blur();
        };
        var computeIdProperty = (0, _react.useCallback)(function() {
          var idProperty = props2.idProperty;
          if (idProperty.includes(props2.idPropertySeparator)) {
            return true;
          }
          return false;
        }, []);
        var computedProps = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, cProps), {}, {
          gridId: (0, _react.useMemo)(function() {
            return ++GRID_ID;
          }, []),
          isRowFullyVisible,
          bodyRef,
          notifyColumnFilterVisibleStateChange: (0, _react.useMemo)(function() {
            return (0, _notifier.notifier)(false);
          }, []),
          getMenuPortalContainer: getDOMNode,
          scrollToIndexIfNeeded,
          scrollToIndex,
          scrollToId,
          scrollToColumn,
          scrollToCell,
          setScrollTop,
          setScrollLeft,
          smoothScrollTo: smoothScrollTo2,
          incrementScrollLeft,
          incrementScrollTop,
          getScrollTop,
          getScrollLeft,
          getScrollLeftMax,
          getHeader,
          isCellVisible,
          naturalRowHeight: typeof props2.rowHeight !== "number",
          isRowRendered,
          getRenderRange,
          computedShowCellBorders,
          setShowCellBorders,
          groupCounts: [],
          computedLoading,
          setLoading
        }, dataInfo), columnInfo), {}, {
          rowHeightManager,
          isRowExpandedById,
          getItemId,
          getRowId: getItemIdAt,
          getItemIndexBy,
          getItemIndex,
          getItemAt,
          getItemIdAt,
          getRows,
          focus,
          getDOMNodeForRowIndex,
          blur: blur2,
          computedShowHeaderBorderRight: columnInfo.totalComputedWidth < viewportAvailableWidth || props2.nativeScroll && (0, _getScrollbarWidth.default)() && scrollbars.vertical,
          i18n: i18nFn,
          totalColumnCount: columnInfo.allColumns.length,
          totalComputedWidth: columnInfo.totalComputedWidth,
          minRowWidth: columnInfo.totalComputedWidth,
          columnResizeHandleWidth: (0, _clamp.default)(props2.columnResizeHandleWidth, 2, 25),
          compoundIdProperty: computeIdProperty()
        });
        computedProps.rtlOffset = props2.rtl ? Math.min(computedProps.size.width - computedProps.totalComputedWidth, 0) : 0;
        computedPropsRef.current = computedProps;
        var menusRef = (0, _react.useRef)([]);
        computedProps.menusRef = menusRef;
        computedProps.updateMenuPositions = function() {
          menusRef.current.forEach(function(menu) {
            if (menu && menu.updatePosition) {
              menu.updatePosition();
            }
          });
        };
        computedProps.updateMainMenuPosition = function(alignTo) {
          menusRef.current.forEach(function(menu) {
            if (menu && menu.updatePosition && !menu.props.subMenu) {
              menu.updateAlignment(alignTo);
            }
          });
        };
        computedProps.onScroll = function() {
          if (computedProps.initialProps.onScroll) {
            computedProps.initialProps.onScroll();
          }
          if (computedProps.updateMenuPositionOnScroll) {
            computedProps.updateMenuPositions();
          }
        };
        if (pluginsMap["row-details"] && pluginsMap["row-details"].hook) {
          Object.assign(computedProps, pluginsMap["row-details"].hook(props2, computedProps, computedPropsRef));
        }
        computedProps.useCellSelection = pluginsMap["cell-selection"].hook;
        Object.assign(computedProps, (0, _useSelection.default)(props2, computedProps, computedPropsRef));
        Object.assign(computedProps, (0, _useHeader.default)(props2, computedProps));
        computedProps.scrollProps = (0, _useScrollProps.default)(props2, computedProps);
        var _useState19 = (0, _react.useState)(0), _useState20 = (0, _slicedToArray2.default)(_useState19, 2), maxVisibleRows = _useState20[0], setMaxVisibleRows = _useState20[1];
        var _useProperty7 = (0, _useProperty13.default)(props2, "showZebraRows"), _useProperty8 = (0, _slicedToArray2.default)(_useProperty7, 2), computedShowZebraRows = _useProperty8[0], setShowZebraRows = _useProperty8[1];
        var _useProperty9 = (0, _useProperty13.default)(props2, "showHoverRows"), _useProperty10 = (0, _slicedToArray2.default)(_useProperty9, 2), computedShowHoverRows = _useProperty10[0], setShowHoverRows = _useProperty10[1];
        var _useProperty11 = (0, _useProperty13.default)(props2, "showEmptyRows"), _useProperty12 = (0, _slicedToArray2.default)(_useProperty11, 2), computedShowEmptyRows = _useProperty12[0], setShowEmptyRows = _useProperty12[1];
        computedProps.getVirtualList = getVirtualList;
        computedProps.computedShowZebraRows = computedShowZebraRows;
        computedProps.computedShowHoverRows = computedShowHoverRows;
        computedProps.computedShowEmptyRows = computedShowEmptyRows;
        computedProps.setShowZebraRows = setShowZebraRows;
        computedProps.setShowHoverRows = setShowHoverRows;
        computedProps.setShowEmptyRows = setShowEmptyRows;
        computedProps.maxVisibleRows = maxVisibleRows;
        var className = (0, _prepareClassName.default)(computedProps);
        var _useRow = (0, _useRow2.default)(props2, computedProps, computedPropsRef), onKeyDown = _useRow.computedOnKeyDown, onFocus3 = _useRow.computedOnFocus, onBlur3 = _useRow.computedOnBlur, useRowProps = (0, _objectWithoutProperties2.default)(_useRow, _excluded2);
        if (pluginsMap["locked-rows"] && pluginsMap["locked-rows"].hook) {
          Object.assign(computedProps, pluginsMap["locked-rows"].hook(props2, computedProps, computedPropsRef));
        }
        if (pluginsMap["locked-columns"] && pluginsMap["locked-columns"].hook) {
          Object.assign(computedProps, pluginsMap["locked-columns"].hook(props2, computedProps, computedPropsRef));
        } else if (computedProps.lockedEndColumns && computedProps.lockedEndColumns.length || computedProps.lockedStartColumns && computedProps.lockedStartColumns.length) {
          (0, _warn.communityFeatureWarn)("Locked columns", warnRef);
        }
        if (pluginsMap["footer-rows"] && pluginsMap["footer-rows"].hook) {
          Object.assign(computedProps, pluginsMap["footer-rows"].hook(props2, computedProps, computedPropsRef));
        }
        if ((props2.renderRowDetails || props2.expandedRows || props2.defaultExpandedRows) && !pluginsMap["row-details"]) {
          (0, _warn.communityFeatureWarn)("Row Details and Master Details", warnRef);
        }
        if (props2.lockedRows && !pluginsMap["locked-rows"]) {
          (0, _warn.communityFeatureWarn)("Locked rows", warnRef);
        }
        if (props2.footerRows && !pluginsMap["footer-rows"]) {
          (0, _warn.communityFeatureWarn)("Footer rows", warnRef);
        }
        Object.assign(computedProps, useRowProps);
        Object.assign(computedProps, pluginsMap["menus"].hook(props2, computedProps, computedPropsRef));
        var computedWillReceiveFocusRef = (0, _react.useRef)(false);
        computedProps.getState = function() {
          return context2.state;
        };
        computedProps.setStateProperty = function(name, value) {
          context2.state[name] = value;
        };
        computedProps.computedWillReceiveFocusRef = computedWillReceiveFocusRef;
        delete computedProps.style;
        var getScrollingElement = function getScrollingElement2() {
          var scrollingElement = getVirtualList().getScrollingElement();
          if (!scrollingElement.scrollerNode) {
            scrollingElement = scrollingElement.scroller;
          }
          return scrollingElement.scrollerNode;
        };
        computedProps.getScrollingElement = getScrollingElement;
        var onGridScrollIntoView = function onGridScrollIntoView2(event2) {
          var gridNode = getBodyDOMNode();
          var eventTarget = event2.target;
          if (event2.target != gridNode) {
            return;
          }
          var scrollLeft = gridNode.scrollLeft, scrollTop = gridNode.scrollTop;
          if (scrollLeft) {
            gridNode.scrollLeft = computedProps.rtl ? getScrollLeftMax() : 0;
            requestAnimationFrame(function() {
              if (computedProps.wasUnmountedRef.current) {
                return;
              }
              incrementScrollLeft(scrollLeft);
            });
          }
          if (scrollTop && eventTarget) {
            eventTarget.scrollTop = 0;
            globalObject.requestAnimationFrame(function() {
              if (computedProps.wasUnmountedRef.current) {
                return;
              }
              incrementScrollTop(scrollTop);
            });
          }
        };
        var setupPassiveScrollListener = function setupPassiveScrollListener2(node2) {
          node2.addEventListener("scroll", onGridScrollIntoView, {
            passive: true
          });
        };
        var removePassiveScrollListener = function removePassiveScrollListener2(node2) {
          if (node2) {
            node2.removeEventListener("scroll", onGridScrollIntoView, {
              passive: true
            });
          }
        };
        (0, _react.useEffect)(function() {
          computedProps.wasMountedRef.current = true;
          if (props2.onDidMount) {
            props2.onDidMount(computedPropsRef);
          }
          var initialScrollLeft = props2.initialScrollLeft, initialScrollTop = props2.initialScrollTop;
          if (props2.skipLoadOnMount) {
            if (initialScrollTop) {
              setScrollTop(initialScrollTop);
            }
            if (initialScrollLeft) {
              setScrollLeft(initialScrollLeft);
            }
          }
          var bodyNode = getBodyDOMNode();
          setupPassiveScrollListener(bodyNode);
          return function() {
            removePassiveScrollListener(bodyNode);
            if (props2.onWillUnmount) {
              props2.onWillUnmount(computedPropsRef);
            }
            computedProps.wasUnmountedRef.current = true;
          };
        }, []);
        (0, _react.useEffect)(function() {
          if (props2.handle) {
            props2.handle(computedPropsRef);
          }
          return function() {
            if (props2.handle) {
              props2.handle(null);
            }
          };
        }, [props2.handle]);
        (0, _react.useEffect)(function() {
          if (props2.onReady && size2.width) {
            props2.onReady(computedPropsRef);
          }
        }, [size2.width !== 0]);
        computedProps.cellNavigationRef = (0, _react.useRef)(null);
        Object.assign(computedProps, pluginsMap["row-index-column"].hook(props2, computedProps, computedPropsRef));
        computedProps.coverHandleRef = (0, _react.useRef)(emptyCoverHandle);
        computedProps.rowResizeIndexRef = (0, _react.useRef)(null);
        var coverHandle = function coverHandle2(_ref5) {
          var setActive = _ref5.setActive, setCursor = _ref5.setCursor;
          computedPropsRef.current.coverHandleRef.current = {
            setActive,
            setCursor
          };
        };
        var activeItem = getItemAt(computedProps.computedActiveIndex);
        var activeRowHeight = computedProps.computedRowHeights && activeItem ? computedProps.computedRowHeights[getItemId(activeItem)] : computedProps.rowHeight == null ? rowHeightManager.getRowHeight(computedProps.computedActiveIndex) : computedPropsRef.rowHeight;
        computedProps.activeRowHeight = activeRowHeight || computedProps.rowHeight;
        var emptyData = computedProps.data && computedProps.data.length;
        if (computedFocused && computedProps.showActiveRowIndicator && emptyData) {
          computedProps.renderActiveRowIndicator = function(handle) {
            return _react.default.createElement(_ActiveRowIndicator.default, {
              handle,
              rtl: computedProps.rtl,
              rtlOffset: computedProps.rtlOffset,
              getDOMNode: computedProps.getDOMNode,
              dataSourceCount: computedProps.data.length,
              width: computedProps.minRowWidth || 0,
              computedRowHeights: computedProps.computedRowHeights,
              computedExpandedRows: computedProps.computedExpandedRows,
              computedExpandedNodes: computedProps.computedExpandedNodes,
              activeRowHeight: computedProps.activeRowHeight,
              activeIndex: computedProps.computedActiveIndex,
              activeRowRef: computedProps.activeRowRef,
              activeRowIndicatorClassName: computedProps.activeRowIndicatorClassName
            });
          };
        }
        computedProps.computedLicenseValid = false;
        if (pluginsMap.license && pluginsMap.license.hook) {
          Object.assign(computedProps, pluginsMap.license.hook(props2, computedProps, computedPropsRef));
        }
        Object.assign(computedProps, pluginsMap["clipboard"].hook(props2, computedProps, computedPropsRef));
        if (edition !== "enterprise") {
          if (props2.rowIndexColumn) {
            (0, _warn.communityFeatureWarn)("Row resize (row index column)", warnRef);
          }
          if (props2.livePagination) {
            (0, _warn.communityFeatureWarn)("Live pagination", warnRef);
          }
          if (props2.onRowReorder != null || props2.rowReorderColumn != null) {
            (0, _warn.communityFeatureWarn)("Row reorder", warnRef);
          }
          if (props2.enableClipboard) {
            (0, _warn.communityFeatureWarn)("Clipboard", warnRef);
          }
        }
        delete computedProps.renderLockedStartCells;
        delete computedProps.renderLockedEndCells;
        if (pluginsMap["locked-columns"]) {
          computedProps.renderLockedStartCells = pluginsMap["locked-columns"].renderLockedStartCells;
          computedProps.renderLockedEndCells = pluginsMap["locked-columns"].renderLockedEndCells;
        }
        Object.defineProperty(computedProps, "scrollTop", {
          get: function get2() {
            return getScrollTop();
          },
          set: function set2(newValue) {
            setScrollTop(newValue);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(computedProps, "scrollLeft", {
          get: function get2() {
            return getScrollLeft();
          },
          set: function set2(newValue) {
            setScrollLeft(newValue);
          },
          enumerable: true,
          configurable: true
        });
        computedProps.edition = edition;
        return _react.default.createElement("div", {
          style: props2.style,
          className,
          onKeyDown,
          onFocus: onFocus3,
          onBlur: onBlur3,
          ref: domRef
        }, _react.default.createElement(_context.Provider, {
          value: computedProps
        }, pluginsMap["row-index-column"].renderRowResizeIndicator(computedProps, computedPropsRef), _react.default.createElement(_Layout.default, {
          Footer: pluginsMap["footer-rows"] ? pluginsMap["footer-rows"].Footer : null,
          ref: bodyRef,
          renderInPortal
        }), _react.default.createElement(_Cover.default, {
          handle: coverHandle
        })), computedProps.computedLicenseValid === false && edition === "enterprise" ? pluginsMap["license"].renderLicenseNotice(computedProps, computedPropsRef) : null, _react.default.createElement(_src.default, {
          onResize,
          notifyOnMount: true
        }), renderLoadMask(computedProps), typeof pluginsMap["menus"].renderColumnContextMenu === "function" ? pluginsMap["menus"].renderColumnContextMenu(computedProps, computedPropsRef) : null, typeof pluginsMap["menus"].renderRowContextMenu === "function" ? pluginsMap["menus"].renderRowContextMenu(computedProps, computedPropsRef) : null, typeof pluginsMap["filters"].renderColumnFilterContextMenu === "function" ? pluginsMap["filters"].renderColumnFilterContextMenu(computedProps, computedPropsRef) : null, _react.default.createElement("div", {
          ref: portalRef,
          className: "InovuaReactDataGrid__portal-host"
        }));
      });
      var defaultProps2 = {
        idProperty: "id",
        rowHeight: 40,
        headerHeight: 40,
        filterRowHeight: 40,
        minRowHeight: 20,
        nativeScroll: false,
        autoCheckboxColumn: false,
        activateRowOnFocus: true,
        checkboxOnlyRowSelect: false,
        checkboxSelectEnableShiftKey: false,
        renderScroller: function renderScroller(domProps) {
          domProps.tabIndex = 0;
        },
        stickyHeader: false,
        enableCellBulkUpdate: false,
        enableKeyboardNavigation: true,
        scrollTopOnFilter: true,
        scrollTopOnSort: true,
        scrollTopOnGroupBy: true,
        defaultShowHeader: true,
        defaultShowEmptyRows: false,
        defaultShowHoverRows: true,
        defaultShowZebraRows: true,
        defaultShowCellBorders: true,
        allowRowTabNavigation: false,
        cellSelectionByIndex: false,
        columnResizeHandleWidth: _isMobile.default ? 15 : 5,
        columnResizeProxyWidth: 5,
        virtualizeColumnsThreshold: 15,
        shareSpaceOnResize: false,
        enableColumnFilterContextMenu: true,
        copySpreadsheetCompatibleString: false,
        clipboardSeparator: "	",
        resizable: true,
        virtualized: true,
        allowUnsort: true,
        rtl: false,
        theme: "default-light",
        filterTypes: _filterTypes.default,
        keyPageStep: 10,
        expandGroupTitle: true,
        allowGroupSplitOnReorder: true,
        defaultCollapsedGroups: {},
        groupPathSeparator: "/",
        nodePathSeparator: "/",
        idPropertySeparator: ".",
        groupNestingSize: 22,
        treeNestingSize: 22,
        columnMinWidth: 40,
        enableTreeRowReorderNestingChange: true,
        enableTreeRowReorderParentChange: true,
        columnReorderScrollByAmount: 20,
        rowReorderScrollByAmount: 20,
        rowReorderAutoScroll: false,
        rowReorderAutoScrollSpeed: 40,
        allowRowReorderBetweenGroups: false,
        reorderProxySize: 3,
        expandOnMouseDown: false,
        columnMaxWidth: null,
        editStartEvent: "dblclick",
        hideGroupByColumns: true,
        defaultColumnOrder: void 0,
        columnUserSelect: false,
        columnHeaderUserSelect: false,
        stickyGroupRows: false,
        showWarnings: !_uglified.default,
        toggleRowSelectOnClick: false,
        toggleCellSelectOnClick: true,
        clearNodeCacheOnDataSourceChange: true,
        clearDataSourceCacheOnChange: true,
        preventDefaultTextSelectionOnShiftMouseDown: true,
        preventRowSelectionOnClickWithMouseMove: true,
        showColumnMenuSortOptions: true,
        showColumnMenuLockOptions: true,
        showColumnMenuFilterOptions: true,
        showColumnMenuGroupOptions: true,
        autoFocusOnEditComplete: true,
        autoFocusOnEditEscape: true,
        showActiveRowIndicator: true,
        showPivotSummaryColumns: true,
        showColumnMenuToolOnHover: !_isMobile.default,
        columnFilterContextMenuConstrainTo: true,
        columnFilterContextMenuPosition: "absolute",
        generateIdFromPath: true,
        collapseChildrenOnAsyncNodeCollapse: true,
        collapseChildrenRecursive: true,
        selectNodesRecursive: true,
        isExpandKeyPressed: function isExpandKeyPressed(_ref6) {
          var event2 = _ref6.event;
          return event2.key === "ArrowRight" && event2.altKey;
        },
        isCollapseKeyPressed: function isCollapseKeyPressed(_ref7) {
          var event2 = _ref7.event;
          return event2.key === "ArrowLeft" && event2.altKey;
        },
        isStartEditKeyPressed: function isStartEditKeyPressed(_ref8) {
          var event2 = _ref8.event;
          return event2.key === "e" && event2.ctrlKey;
        },
        rowExpandHeight: 80,
        growExpandHeightWithDetails: true,
        livePaginationLoadNextDelay: true,
        livePaginationLoadMaskHideDelay: 50,
        checkResizeDelay: 0,
        multiRowExpand: true,
        useNativeFlex: false,
        disableGroupByToolbar: false,
        updateMenuPositionOnScroll: true,
        updateMenuPositionOnColumnsChange: true,
        useRowHeightForLockedRows: true,
        nodesProperty: "nodes",
        rowDetailsWidth: "max-viewport-width",
        contain: "style layout",
        rowContain: "style layout",
        groupToString: function groupToString(obj) {
          var type = (0, _typeof2.default)(obj);
          return type == "string" || type === "number" || type === "boolean" ? "".concat(obj) : JSON.stringify(obj);
        },
        scrollProps: {
          autoHide: true,
          scrollThumbMargin: 4,
          scrollThumbWidth: 6,
          scrollThumbOverWidth: 8
        },
        detailsGridCacheKey: true,
        sortFunctions: {
          date: function date(v1, v2, column2) {
            if (window.moment && column2.dateFormat) {
              return window.moment(v1, column2.dateFormat) - window.moment(v2, column2.dateFormat);
            }
            return v1 - v2;
          }
        },
        i18n: DEFAULT_I18N,
        emptyText: "noRecords",
        isBinaryOperator: function isBinaryOperator(operator) {
          return operator === "inrange" || operator === "notinrange";
        },
        skipHeaderOnAutoSize: false,
        enableColumnAutosize: true
      };
      var maybeAddCols = [];
      plugins2.forEach(function(plugin) {
        if (!plugin.name) {
          return;
        }
        if (typeof plugin.defaultProps === "function") {
          var result = plugin.defaultProps(Grid3.defaultProps);
          if (result != null) {
            Grid3.defaultProps = _objectSpread2(_objectSpread2({}, Grid3.defaultProps), result);
          }
        }
        if (typeof plugin.maybeAddColumns === "function") {
          maybeAddCols.push(plugin.maybeAddColumns);
        }
      });
      if (maybeAddCols.length) {
        maybeAddColumns = function maybeAddColumns2(columns, props2) {
          var result = columns;
          maybeAddCols.forEach(function(fn) {
            result = fn(result, props2);
          });
          return result;
        };
      }
      var TheGrid = function TheGrid2(props2) {
        var contextValue = (0, _react.useMemo)(function() {
          return {
            state: props2.initialState || {}
          };
        }, []);
        var Context = (0, _react.useMemo)(function() {
          return _react.default.createContext(contextValue);
        }, []);
        return _react.default.createElement(Context.Provider, {
          value: contextValue
        }, _react.default.createElement(Grid3, _objectSpread2(_objectSpread2({}, props2), {}, {
          context: Context
        })));
      };
      TheGrid.defaultProps = defaultProps2;
      return TheGrid;
    };
    var _default2 = GridFactory;
    exports.default = _default2;
  })(factory);
  return factory;
}
var sortableColumns = {};
var useSortInfo = {};
var hasRequiredUseSortInfo;
function requireUseSortInfo() {
  if (hasRequiredUseSortInfo)
    return useSortInfo;
  hasRequiredUseSortInfo = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useSortInfo, "__esModule", {
    value: true
  });
  useSortInfo.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _react = reactExports;
  var _isControlledProperty = _interopRequireDefault2(requireIsControlledProperty());
  var _useProperty3 = _interopRequireDefault2(requireUseProperty());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var getNextSortInfoForColumn = function getNextSortInfoForColumn2(currentDir, column2, _ref2) {
    var allowUnsort = _ref2.allowUnsort, multiSort = _ref2.multiSort, forceDir = _ref2.forceDir, defaultDir = _ref2.defaultDir, sortFunctions = _ref2.sortFunctions;
    var newSortInfo = {
      dir: 1,
      id: column2.id,
      name: column2.sortName || column2.name || "",
      columnName: column2.name || "",
      type: column2.type
    };
    var sortName = newSortInfo.name;
    if (!sortName && !column2.sort) {
      return null;
    }
    var sortFn = column2.sort;
    if (!sortFn && sortFunctions && sortFunctions[column2.type]) {
      sortFn = sortFunctions[column2.type];
    }
    if (sortFn) {
      newSortInfo.fn = function(one, two) {
        return sortFn(one, two, column2);
      };
    }
    if (forceDir !== void 0) {
      newSortInfo.dir = forceDir;
      return newSortInfo;
    }
    if (defaultDir === void 0) {
      defaultDir = 1;
    }
    if (defaultDir === 1) {
      if (!currentDir) {
        newSortInfo.dir = 1;
      } else if (currentDir === 1) {
        newSortInfo.dir = -1;
      } else if (currentDir === -1) {
        if (allowUnsort || multiSort) {
          return null;
        }
        newSortInfo.dir = 1;
      }
    } else if (defaultDir === -1) {
      if (!currentDir) {
        newSortInfo.dir = -1;
      } else if (currentDir === -1) {
        newSortInfo.dir = 1;
      } else if (currentDir === 1) {
        if (allowUnsort || multiSort) {
          return null;
        }
        newSortInfo.dir = 1;
      }
    }
    return newSortInfo;
  };
  var getNextSingleSortInfo = function getNextSingleSortInfo2(column2, currentSortInfo, _ref2) {
    var _ref2$allowUnsort = _ref2.allowUnsort, allowUnsort = _ref2$allowUnsort === void 0 ? false : _ref2$allowUnsort, multiSort = _ref2.multiSort, forceDir = _ref2.forceDir, defaultDir = _ref2.defaultDir, sortFunctions = _ref2.sortFunctions;
    if (Array.isArray(currentSortInfo)) {
      return null;
    }
    return getNextSortInfoForColumn(currentSortInfo && (currentSortInfo.name === column2.id || currentSortInfo.id === column2.id || currentSortInfo.name === column2.sortName) ? currentSortInfo.dir : 0, column2, {
      allowUnsort,
      multiSort,
      forceDir,
      defaultDir,
      sortFunctions
    });
  };
  var getNextMultipleSortInfo = function getNextMultipleSortInfo2(column2, currentSortInfo, _ref3) {
    var _ref3$allowUnsort = _ref3.allowUnsort, allowUnsort = _ref3$allowUnsort === void 0 ? false : _ref3$allowUnsort, forceDir = _ref3.forceDir, sortFunctions = _ref3.sortFunctions;
    var result;
    if (!Array.isArray(currentSortInfo)) {
      var info = getNextSingleSortInfo(column2, currentSortInfo, {
        allowUnsort,
        multiSort: true,
        forceDir,
        sortFunctions
      });
      result = [info].filter(function(x2) {
        return x2;
      });
    } else {
      var sortInfoIndex = currentSortInfo.findIndex(function(value) {
        return value.id ? value.id === column2.id : value.name === column2.name || value.name === column2.sortName;
      });
      var currentSortInfoForColumn = currentSortInfo[sortInfoIndex];
      var nextSortInfoForColumn = getNextSingleSortInfo(column2, currentSortInfo[sortInfoIndex], {
        allowUnsort,
        multiSort: true,
        forceDir,
        sortFunctions
      });
      if (nextSortInfoForColumn && forceDir !== void 0) {
        nextSortInfoForColumn.dir = forceDir;
      }
      result = (currentSortInfoForColumn ? [].concat((0, _toConsumableArray2.default)(currentSortInfo.slice(0, sortInfoIndex)), [nextSortInfoForColumn], (0, _toConsumableArray2.default)(currentSortInfo.slice(sortInfoIndex + 1))) : [].concat((0, _toConsumableArray2.default)(currentSortInfo), [nextSortInfoForColumn])).filter(function(x2) {
        return x2;
      });
    }
    return result;
  };
  var useSortInfo$1 = function useSortInfo2(props2, _, computedPropsRef) {
    (0, _isControlledProperty.default)(props2, "sortInfo");
    var _useProperty = (0, _useProperty3.default)(props2, "sortInfo"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), sortInfo = _useProperty2[0], silentSetSortInfo = _useProperty2[1];
    var setSortInfo = (0, _react.useCallback)(function(sortInfo2) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var queue = (0, _batchUpdate.default)();
      var computedRemoteData = computedProps.computedRemoteData;
      queue.commit(function() {
        if (computedProps.computedPagination && computedProps.setSkip && computedProps.computedSkip) {
          computedProps.setSkip(0);
        }
        silentSetSortInfo(sortInfo2);
        if (computedRemoteData) {
          computedProps.setLoadDataTrigger(function(loadDataTrigger) {
            return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["sortInfo"]);
          });
        }
      });
    }, [silentSetSortInfo]);
    var toggleColumnSort = (0, _react.useCallback)(function(colId, defaultSortingDirection) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var allowUnsort = computedProps.allowUnsort;
      var computedColumn = computedProps.getColumnBy(colId);
      if (!computedColumn) {
        return;
      }
      var sortInfo2 = computedProps.computedSortInfo === void 0 ? null : computedProps.computedSortInfo;
      var sortingDirection;
      if (computedProps.defaultSortingDirection) {
        sortingDirection = computedProps.defaultSortingDirection === "asc" ? 1 : -1;
      }
      if (defaultSortingDirection) {
        sortingDirection = defaultSortingDirection === "asc" ? 1 : -1;
      }
      var computedIsMultiSort = computedProps.computedIsMultiSort;
      var nextSortInfo = computedIsMultiSort ? getNextMultipleSortInfo(computedColumn, sortInfo2, {
        allowUnsort,
        sortFunctions: computedProps.sortFunctions
      }) : getNextSingleSortInfo(computedColumn, sortInfo2, {
        allowUnsort,
        multiSort: false,
        forceDir: void 0,
        defaultDir: sortingDirection,
        sortFunctions: computedProps.sortFunctions
      });
      setSortInfo(nextSortInfo);
    }, [setSortInfo]);
    var setColumnSortInfo = (0, _react.useCallback)(function(column2, dir) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var allowUnsort = computedProps.allowUnsort;
      var computedColumn = computedProps.getColumnBy(column2);
      if (!computedColumn) {
        return;
      }
      var computedIsMultiSort = computedProps.computedIsMultiSort;
      var nextSortInfo = computedIsMultiSort ? getNextMultipleSortInfo(computedColumn, sortInfo, {
        allowUnsort,
        forceDir: dir,
        sortFunctions: computedProps.sortFunctions
      }) : getNextSingleSortInfo(computedColumn, sortInfo, {
        allowUnsort,
        multiSort: false,
        forceDir: dir,
        sortFunctions: computedProps.sortFunctions
      });
      setSortInfo(nextSortInfo);
    }, [setSortInfo]);
    var unsortColumn = function unsortColumn2(column2) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var computedColumn = computedProps.getColumnBy(column2);
      if (!computedColumn) {
        return;
      }
      var columnSortInfo = computedColumn.computedSortInfo;
      if (!columnSortInfo) {
        return;
      }
      var sortInfo2 = computedProps.computedSortInfo;
      var newSortInfo = null;
      if (Array.isArray(sortInfo2)) {
        newSortInfo = sortInfo2.filter(function(sortInfo3) {
          if (sortInfo3 && (sortInfo3.id === columnSortInfo.id || sortInfo3.name === columnSortInfo.name)) {
            return false;
          }
          return true;
        });
      }
      setSortInfo(newSortInfo);
    };
    return {
      computedSortInfo: sortInfo,
      unsortColumn,
      setSortInfo,
      computedIsMultiSort: Array.isArray(sortInfo),
      toggleColumnSort,
      setColumnSortInfo
    };
  };
  var _default2 = useSortInfo$1;
  useSortInfo.default = _default2;
  return useSortInfo;
}
var sorty = {};
var src = {};
var deepGet = {};
var hasRequiredDeepGet;
function requireDeepGet() {
  if (hasRequiredDeepGet)
    return deepGet;
  hasRequiredDeepGet = 1;
  Object.defineProperty(deepGet, "__esModule", {
    value: true
  });
  deepGet.default = _default2;
  function _default2(obj, key, defaultValue, undef) {
    var keys2 = key.split ? key.split(".") : Array.isArray(key) ? key : [key];
    for (var propIndex = 0; propIndex < keys2.length; propIndex++) {
      obj = obj ? obj[keys2[propIndex]] : undef;
    }
    return obj === undef ? defaultValue : obj;
  }
  return deepGet;
}
var curry = {};
var hasRequiredCurry;
function requireCurry() {
  if (hasRequiredCurry)
    return curry;
  hasRequiredCurry = 1;
  Object.defineProperty(curry, "__esModule", {
    value: true
  });
  curry.default = void 0;
  function curry$1(fn, n2) {
    if (typeof n2 !== "number") {
      n2 = fn.length;
    }
    function getCurryClosure(prevArgs) {
      function curryClosure() {
        var len = arguments.length;
        var args = [].concat(prevArgs);
        if (len) {
          args.push.apply(args, arguments);
        }
        if (args.length < n2) {
          return getCurryClosure(args);
        }
        return fn.apply(this, args);
      }
      return curryClosure;
    }
    return getCurryClosure([]);
  }
  var _default2 = curry$1;
  curry.default = _default2;
  return curry;
}
var types = {};
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes)
    return types;
  hasRequiredTypes = 1;
  Object.defineProperty(types, "__esModule", {
    value: true
  });
  types.default = void 0;
  var _default2 = {
    string: function string(a, b2) {
      a += "";
      b2 += "";
      return a.localeCompare(b2);
    },
    number: function number2(a, b2) {
      if (isFinite(a - b2)) {
        return a - b2;
      } else {
        return isFinite(a) ? -1 : 1;
      }
    }
  };
  types.default = _default2;
  return types;
}
var hasRequiredSrc;
function requireSrc() {
  if (hasRequiredSrc)
    return src;
  hasRequiredSrc = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(src, "__esModule", {
    value: true
  });
  src.default = void 0;
  var _deepGet = _interopRequireDefault2(requireDeepGet());
  var _curry = _interopRequireDefault2(requireCurry());
  var _types = _interopRequireDefault2(requireTypes());
  function isFn(fn) {
    return typeof fn === "function";
  }
  var sorty2 = (0, _curry.default)(function(sortInfo, array) {
    return array.sort(getMultiSortFunction(sortInfo));
  });
  sorty2.types = _types.default;
  var getSingleSortFunction = function getSingleSortFunction2(info) {
    if (!info) {
      return;
    }
    var field = info.name;
    var dir = info.dir === "desc" || info.dir < 0 ? -1 : info.dir === "asc" || info.dir > 0 ? 1 : 0;
    if (!dir) {
      return;
    }
    if (!info.fn && info.type) {
      info.fn = sorty2.types[info.type];
    }
    if (!info.fn) {
      info.fn = sorty2.types.string || _types.default.string;
    }
    var fn = info.fn;
    return function(first, second) {
      var a = field ? (0, _deepGet.default)(first, field) : first;
      var b2 = field ? (0, _deepGet.default)(second, field) : second;
      return dir * fn(a, b2, first, second, info);
    };
  };
  var getSortFunctions = function getSortFunctions2(sortInfo) {
    if (!Array.isArray(sortInfo)) {
      sortInfo = [sortInfo];
    }
    return sortInfo.map(getSingleSortFunction).filter(isFn);
  };
  var getMultiSortFunction = function getMultiSortFunction2(sortInfo) {
    var fns = getSortFunctions(sortInfo);
    return function(first, second) {
      var result = 0;
      var i = 0;
      var len = fns.length;
      var fn;
      for (; i < len; i++) {
        fn = fns[i];
        if (!fn) {
          continue;
        }
        result = fn(first, second);
        if (result != 0) {
          return result;
        }
      }
      return result;
    };
  };
  sorty2._getSortFunctions = getSortFunctions;
  sorty2.getFunction = getMultiSortFunction;
  var _default2 = sorty2;
  src.default = _default2;
  return src;
}
var hasRequiredSorty;
function requireSorty() {
  if (hasRequiredSorty)
    return sorty;
  hasRequiredSorty = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(sorty, "__esModule", {
    value: true
  });
  sorty.default = void 0;
  var _src = _interopRequireDefault2(requireSrc());
  var _default2 = _src.default;
  sorty.default = _default2;
  return sorty;
}
var hasRequiredSortableColumns;
function requireSortableColumns() {
  if (hasRequiredSortableColumns)
    return sortableColumns;
  hasRequiredSortableColumns = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(sortableColumns, "__esModule", {
    value: true
  });
  sortableColumns.default = void 0;
  var _useSortInfo = _interopRequireDefault2(requireUseSortInfo());
  var _sorty = _interopRequireDefault2(requireSorty());
  var _default2 = {
    name: "sortable-columns",
    hook: _useSortInfo.default,
    defaultProps: function defaultProps2() {
      return {
        sorty: _sorty.default,
        sortable: true
      };
    }
  };
  sortableColumns.default = _default2;
  return sortableColumns;
}
var filters = {};
var useFilters = {};
var renderGridMenu = {};
var hasRequiredRenderGridMenu;
function requireRenderGridMenu() {
  if (hasRequiredRenderGridMenu)
    return renderGridMenu;
  hasRequiredRenderGridMenu = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderGridMenu, "__esModule", {
    value: true
  });
  renderGridMenu.default = void 0;
  var _reactDom = _interopRequireDefault2(reactDomExports);
  var _react = reactExports;
  var _default2 = function _default3(menu, computedProps, menusRef) {
    var menuPortalContainer = computedProps.menuPortalContainer;
    var didMount = menu ? menu.props.componentDidMount : null;
    var willUnmount = menu ? menu.props.componentWillUnmount : null;
    if (menu) {
      menu = (0, _react.cloneElement)(menu, {
        rtl: computedProps.rtl,
        componentDidMount: function componentDidMount() {
          if (didMount) {
            didMount.apply(void 0, arguments);
          }
          menusRef = menusRef || computedProps.menusRef;
          var menuInstance = arguments.length <= 0 ? void 0 : arguments[0];
          menusRef.current.push(menuInstance);
        },
        componentWillUnmount: function componentWillUnmount() {
          if (willUnmount) {
            willUnmount.apply(void 0, arguments);
          }
          var menuInstance = arguments.length <= 0 ? void 0 : arguments[0];
          menusRef = menusRef || computedProps.menusRef;
          menusRef.current = menusRef.current.filter(function(it) {
            return it !== menuInstance;
          });
        }
      });
    }
    if (menuPortalContainer && _reactDom.default.createPortal) {
      var container2 = menuPortalContainer;
      if (typeof container2 === "string") {
        container2 = document.querySelector(container2);
      }
      if (container2) {
        return _reactDom.default.createPortal(menu, container2);
      }
    }
    return menu;
  };
  renderGridMenu.default = _default2;
  return renderGridMenu;
}
var hasRequiredUseFilters;
function requireUseFilters() {
  if (hasRequiredUseFilters)
    return useFilters;
  hasRequiredUseFilters = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  var _typeof2 = require_typeof();
  Object.defineProperty(useFilters, "__esModule", {
    value: true
  });
  useFilters.renderColumnFilterContextMenu = useFilters.default = void 0;
  var _toConsumableArray2 = _interopRequireDefault2(requireToConsumableArray());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireWildcard(reactExports);
  var _useProperty5 = _interopRequireDefault2(requireUseProperty());
  var _getFilterValueForColumns = _interopRequireDefault2(requireGetFilterValueForColumns());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _mapColumns = _interopRequireDefault2(requireMapColumns());
  var _ua = requireUa();
  var _Menu = _interopRequireDefault2(requireMenu());
  var _renderGridMenu = _interopRequireDefault2(requireRenderGridMenu());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var emptyArray2 = [];
  var COLUMN_MENU_ALIGN_POSITIONS = ["tl-bl", "tr-br", "tl-tr", "tr-tl", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
  var COLUMN_MENU_ALIGN_POSITIONS_RTL = ["tr-br", "tl-bl", "tr-tl", "tl-tr", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
  var renderColumnFilterContextMenu = function renderColumnFilterContextMenu2(computedProps, computedPropsRef) {
    if (!computedProps) {
      return null;
    }
    var cellProps = computedProps.columnFilterContextMenuProps;
    if (!cellProps) {
      return null;
    }
    var filterValue = computedProps.computedFilterValueMap ? computedProps.computedFilterValueMap[cellProps.id] : null;
    if (!filterValue) {
      return null;
    }
    var columnOperators = computedProps.initialProps.filterTypes[filterValue.type].operators || emptyArray2;
    var selected = {
      operator: filterValue.operator
    };
    var showEnableButton = filterValue.active === false;
    var filterType = computedProps.initialProps.filterTypes[filterValue.type];
    var isFiltered = computedProps.computedFiltered;
    var items = function() {
      var activationItems = ["-", {
        label: computedProps.i18n("enable", "Enable"),
        itemId: "enableFilter",
        disabled: !showEnableButton,
        onClick: function onClick() {
          var newFilterValue = _objectSpread2(_objectSpread2({}, filterValue), {}, {
            active: true
          });
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.computedOnColumnFilterValueChange({
            columnId: cellProps.id,
            columnIndex: cellProps.computedVisibleIndex,
            cellProps,
            filterValue: newFilterValue
          });
          computedProps2.hideColumnFilterContextMenu();
        }
      }, {
        label: computedProps.i18n("disable", "Disable"),
        disabled: showEnableButton,
        itemId: "disableFilter",
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          var newFilterValue = _objectSpread2(_objectSpread2({}, filterValue), {}, {
            active: false
          });
          computedProps2.computedOnColumnFilterValueChange({
            columnId: cellProps.id,
            cellProps,
            columnIndex: cellProps.computedVisibleIndex,
            filterValue: newFilterValue
          });
          computedProps2.hideColumnFilterContextMenu();
        }
      }, "-", {
        label: computedProps.i18n("clear", "Clear"),
        itemId: "clearFilter",
        disabled: filterValue.value === filterType.emptyValue,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.clearColumnFilter(cellProps.id);
          computedProps2.hideColumnFilterContextMenu();
        }
      }, {
        label: computedProps.i18n("clearAll", "Clear All"),
        itemId: "clearAllFilters",
        disabled: !isFiltered,
        onClick: function onClick() {
          var computedProps2 = computedPropsRef.current;
          if (!computedProps2) {
            return;
          }
          computedProps2.clearAllFilters();
          computedProps2.hideColumnFilterContextMenu();
        }
      }];
      var items2 = columnOperators.map(function(operator) {
        return {
          label: computedProps.i18n(operator.label, operator.label) || computedProps.i18n(operator.name, operator.name),
          name: "operator",
          itemId: "operator-".concat(operator.name),
          value: operator.name
        };
      });
      items2.push.apply(items2, activationItems);
      return items2;
    }();
    var onSelectionChange = function onSelectionChange2(selected2) {
      var operator = selected2.operator;
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var filterTypes2 = computedProps2.initialProps.filterTypes;
      var filterTypeDescription = filterTypes2[filterType.type] || {
        operators: []
      };
      var operatorDescriptor = filterTypeDescription.operators.filter(function(op) {
        return op.name === operator;
      })[0];
      var newFilterValue = _objectSpread2(_objectSpread2({}, filterValue), {}, {
        operator
      });
      if (operatorDescriptor && operatorDescriptor.valueOnOperatorSelect !== void 0) {
        newFilterValue.value = operatorDescriptor.valueOnOperatorSelect;
      }
      computedProps2.computedOnColumnFilterValueChange({
        columnId: cellProps.id,
        cellProps,
        columnIndex: cellProps.computedVisibleIndex,
        filterValue: newFilterValue
      });
      computedProps2.hideColumnFilterContextMenu();
    };
    var rtl = computedProps.rtl;
    var menuProps = {
      autoFocus: true,
      dismissWithEscape: true,
      items,
      theme: computedProps.theme,
      updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
      nativeScroll: !_ua.IS_MS_BROWSER,
      enableSelection: true,
      maxHeight: computedProps.columnFilterContextMenuConstrainTo ? null : computedProps.getMenuAvailableHeight(),
      style: {
        zIndex: 1e4,
        position: computedProps.columnFilterContextMenuPosition || "absolute"
      },
      selected,
      onSelectionChange,
      onDismiss: computedProps.hideColumnFilterContextMenu,
      constrainTo: computedProps.columnFilterContextMenuConstrainTo,
      alignPositions: computedProps.columnFilterContextMenuAlignPositions || rtl ? COLUMN_MENU_ALIGN_POSITIONS_RTL : COLUMN_MENU_ALIGN_POSITIONS,
      alignTo: computedProps.columnFilterContextMenuAlignToRef.current
    };
    var result;
    if (computedProps.initialProps.renderColumnFilterContextMenu) {
      result = computedProps.initialProps.renderColumnFilterContextMenu(menuProps, {
        cellProps,
        grid: computedPropsRef,
        props: computedProps
      });
    }
    if (result === void 0) {
      result = _react.default.createElement(_Menu.default, _objectSpread2({}, menuProps));
    }
    if (computedProps.initialProps.renderGridMenu) {
      return computedProps.initialProps.renderGridMenu(result, computedProps);
    }
    return (0, _renderGridMenu.default)(result, computedProps);
  };
  useFilters.renderColumnFilterContextMenu = renderColumnFilterContextMenu;
  var useFilterValue = function useFilterValue2(props2, _ref2, computedPropsRef) {
    var columnsMap = _ref2.columnsMap;
    _ref2.enableFiltering;
    var _useProperty = (0, _useProperty5.default)(props2, "filterValue"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), filterValue = _useProperty2[0], doSetFilterValue = _useProperty2[1];
    filterValue = (0, _react.useMemo)(function() {
      return (0, _getFilterValueForColumns.default)(filterValue || [], columnsMap);
    }, [filterValue || [], columnsMap]);
    if (!filterValue.length) {
      filterValue = null;
    }
    var setFilterValue = (0, _react.useCallback)(function(filterValue2) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      filterValue2 = (0, _getFilterValueForColumns.default)(filterValue2, computedProps.columnsMap);
      var queue = (0, _batchUpdate.default)();
      queue.commit(function() {
        computedProps.setLoadDataTrigger(function(loadDataTrigger) {
          return [].concat((0, _toConsumableArray2.default)(loadDataTrigger), ["filterValue"]);
        });
        doSetFilterValue(filterValue2);
      });
    }, [doSetFilterValue]);
    return [filterValue, setFilterValue];
  };
  var isFilterable = function isFilterable2(_ref2) {
    var enableFiltering = _ref2.enableFiltering, filterValue = _ref2.filterValue;
    if (enableFiltering !== void 0) {
      return enableFiltering;
    }
    if (!Array.isArray(filterValue) || !filterValue.length) {
      return false;
    }
    return true;
  };
  var useFilters$1 = function useFilters2(props2, computedProps, computedPropsRef) {
    var _useProperty3 = (0, _useProperty5.default)(props2, "enableFiltering"), _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2), enableFiltering = _useProperty4[0], setEnableFiltering = _useProperty4[1];
    var isColumnFiltered = (0, _react.useCallback)(function(col) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return false;
      }
      var filterValue = computedProps2.getColumnFilterValue(col.id);
      if (!filterValue) {
        return false;
      }
      var filterType = computedProps2.initialProps.filterTypes[filterValue.type];
      return filterValue.value !== filterType.emptyValue;
    }, []);
    var columnsMap = (0, _react.useMemo)(function() {
      return (0, _mapColumns.default)(props2.columns, {
        showWarnings: false
      });
    }, [props2.columns]);
    var _useFilterValue = useFilterValue(props2, {
      enableFiltering,
      columnsMap
    }, computedPropsRef), _useFilterValue2 = (0, _slicedToArray2.default)(_useFilterValue, 2), computedFilterValue = _useFilterValue2[0], setFilterValue = _useFilterValue2[1];
    var getMenuAvailableHeight = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return void 0;
      }
      var filtersHeight = 0;
      if (computedProps2.computedFilterable) {
        var filterNode = computedProps2.getDOMNode().querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
        if (filterNode) {
          filtersHeight = filterNode.offsetHeight;
        }
      }
      return computedProps2.size ? computedProps2.size.height - 5 + filtersHeight : void 0;
    }, []);
    var clearAllFilters = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (!computedProps2.computedFilterValueMap) {
        return;
      }
      var allFiltersValue = [];
      var headerCells = computedProps2.getColumnLayout().getHeaderCells();
      computedProps2.allColumns.forEach(function(column2) {
        var filterValue = computedProps2.computedFilterValueMap[column2.id];
        if (!filterValue) {
          return;
        }
        var filterType = computedProps2.initialProps.filterTypes[filterValue.type];
        var headerCell = headerCells[column2.computedVisibleIndex];
        var newFilterValue = _objectSpread2(_objectSpread2({}, filterValue), {}, {
          value: filterType.emptyValue
        });
        if (headerCell && headerCell.filter) {
          headerCell.filter.setValue(newFilterValue.value);
        }
        allFiltersValue.push(newFilterValue);
      });
      setFilterValue(allFiltersValue);
    }, [setFilterValue]);
    var columnFilterContextMenuAlignToRef = (0, _react.useRef)(null);
    var columnFilterContextMenuConstrainToRef = (0, _react.useRef)(null);
    var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), columnFilterContextMenuProps = _useState2[0], setColumnFilterContextMenuProps = _useState2[1];
    var showColumnFilterContextMenu = (0, _react.useCallback)(function(alignTo, cellProps) {
      var computedProps2 = computedPropsRef.current;
      if (columnFilterContextMenuProps || !computedProps2) {
        return;
      }
      columnFilterContextMenuAlignToRef.current = alignTo;
      columnFilterContextMenuConstrainToRef.current = computedProps2.columnFilterContextMenuConstrainTo || computedProps2.getDOMNode();
      if (computedProps2.hideColumnContextMenu) {
        computedProps2.hideColumnContextMenu();
      }
      setColumnFilterContextMenuProps(cellProps);
      computedProps2.notifyColumnFilterVisibleStateChange(true);
    }, [setColumnFilterContextMenuProps]);
    var hideColumnFilterContextMenu = (0, _react.useCallback)(function(node2) {
      var computedProps2 = computedPropsRef.current;
      if (columnFilterContextMenuProps && computedProps2) {
        setColumnFilterContextMenuProps(null);
        computedProps2.notifyColumnFilterVisibleStateChange(false);
      }
      if (node2 && !node2.type) {
        var filterIcon = node2.querySelector(".InovuaReactDataGrid__column-header__filter-settings-icon");
        filterIcon.focus();
      }
    }, [columnFilterContextMenuProps]);
    var shouldShowFilteringMenuItems = (0, _react.useCallback)(function() {
      if (props2.showFilteringMenuItems) {
        return true;
      }
      if (computedFilterValue) {
        return true;
      }
      if (enableFiltering) {
        return true;
      }
      return false;
    }, [computedFilterValue, enableFiltering, props2.showFilteringMenuItems]);
    var computedFilterValueMap = (0, _react.useMemo)(function() {
      return computedFilterValue ? computedFilterValue.reduce(function(acc, columnFilterValue) {
        acc[columnFilterValue.name] = columnFilterValue;
        return acc;
      }, {}) : null;
    }, [computedFilterValue]);
    var computedOnColumnFilterValueChange = (0, _react.useCallback)(function(columnFilterValue) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var isBinaryOperator = computedProps2.isBinaryOperator;
      if (computedProps2.onColumnFilterValueChange) {
        computedProps2.onColumnFilterValueChange(columnFilterValue);
      }
      var computedFilterValue2 = computedProps2.computedFilterValue;
      var newFilterValue = (computedFilterValue2 || []).map(function(oldFilterValue) {
        if (oldFilterValue.name === columnFilterValue.columnId) {
          var emptyValue = getColumnFilterEmptyValue(columnFilterValue.columnId);
          if (columnFilterValue.filterValue.type === "date" || columnFilterValue.filterValue.type === "number") {
            if (isBinaryOperator(oldFilterValue.operator) && !isBinaryOperator(columnFilterValue.filterValue.operator)) {
              return _objectSpread2(_objectSpread2({}, columnFilterValue.filterValue), {}, {
                value: emptyValue
              });
            }
            if (!isBinaryOperator(oldFilterValue.operator) && isBinaryOperator(columnFilterValue.filterValue.operator)) {
              return _objectSpread2(_objectSpread2({}, columnFilterValue.filterValue), {}, {
                value: columnFilterValue.filterValue && columnFilterValue.filterValue.value != null && columnFilterValue.filterValue.value.start != null ? columnFilterValue.filterValue.value : {
                  start: emptyValue,
                  end: emptyValue
                }
              });
            }
          }
          return columnFilterValue.filterValue;
        }
        return oldFilterValue;
      }).filter(function(f2) {
        return !!f2;
      });
      setFilterValue(newFilterValue);
    }, [setFilterValue]);
    var getColumnFilterValue = (0, _react.useCallback)(function(column2) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return null;
      }
      var col = computedProps2.getColumnBy(column2);
      if (!col) {
        return null;
      }
      if (!computedProps2.computedFilterValueMap) {
        return null;
      }
      return computedProps2.computedFilterValueMap[col.id];
    }, []);
    var setColumnFilterValue = (0, _react.useCallback)(function(column2, value, operator) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return null;
      }
      var filterValue = getColumnFilterValue(column2);
      if (!filterValue) {
        return;
      }
      var newFilterValue = _objectSpread2(_objectSpread2({}, filterValue), {}, {
        value
      });
      if (operator) {
        newFilterValue.operator = operator;
      }
      var col = computedProps2.getColumnBy(column2);
      var headerCells = computedProps2.getColumnLayout().getHeaderCells();
      var headerCell = headerCells[col.computedVisibleIndex];
      if (!headerCell || !headerCell.filter) {
        return;
      }
      computedProps2.computedOnColumnFilterValueChange({
        columnId: col.id,
        columnIndex: col.computedVisibleIndex,
        filterValue: newFilterValue
      });
      headerCell.filter.setValue(value);
    }, []);
    var getColumnFilterEmptyValue = (0, _react.useCallback)(function(idNameOrIndex) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var col = computedProps2.getColumnBy(idNameOrIndex);
      if (!col) {
        return;
      }
      if (!computedProps2.computedFilterValueMap) {
        return;
      }
      var filterValue = computedProps2.computedFilterValueMap[col.id];
      if (!filterValue) {
        return;
      }
      var filterType = computedProps2.initialProps.filterTypes[filterValue.type];
      return filterType.emptyValue;
    }, []);
    var clearColumnFilter = (0, _react.useCallback)(function(idNameOrIndex) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      var col = computedProps2.getColumnBy(idNameOrIndex);
      if (!col) {
        return;
      }
      computedProps2.setColumnFilterValue(idNameOrIndex, getColumnFilterEmptyValue(idNameOrIndex));
    }, []);
    var isFiltered = (0, _react.useCallback)(function() {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return false;
      }
      return (computedProps2.computedFilterValue || []).reduce(function(result, filterValue) {
        if (result) {
          return true;
        }
        var col = computedProps2.getColumnBy(filterValue.name);
        if (col && isColumnFiltered(col)) {
          return true;
        }
        return false;
      }, false);
    }, []);
    var computedFiltered = isFiltered();
    return {
      clearColumnFilter,
      computedOnColumnFilterValueChange,
      computedFilterValueMap,
      computedFilterValue,
      computedFiltered,
      computedFilterable: isFilterable({
        enableFiltering,
        filterValue: computedFilterValue
      }),
      setEnableFiltering,
      setFilterValue,
      getMenuAvailableHeight,
      showColumnFilterContextMenu,
      hideColumnFilterContextMenu,
      shouldShowFilteringMenuItems,
      renderColumnFilterContextMenu,
      columnFilterContextMenuProps,
      columnFilterContextMenuAlignToRef,
      clearAllFilters,
      getColumnFilterValue,
      setColumnFilterValue,
      isColumnFiltered
    };
  };
  var _default2 = useFilters$1;
  useFilters.default = _default2;
  return useFilters;
}
var hasRequiredFilters;
function requireFilters() {
  if (hasRequiredFilters)
    return filters;
  hasRequiredFilters = 1;
  var _typeof2 = require_typeof();
  Object.defineProperty(filters, "__esModule", {
    value: true
  });
  filters.default = void 0;
  var _useFilters = _interopRequireWildcard(requireUseFilters());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var _default2 = {
    name: "filters",
    hook: _useFilters.default,
    renderColumnFilterContextMenu: _useFilters.renderColumnFilterContextMenu,
    defaultProps: function defaultProps2() {
      return {
        columnFilterContextMenuConstrainTo: true,
        columnFilterContextMenuPosition: "absolute"
      };
    }
  };
  filters.default = _default2;
  return filters;
}
var menus = {};
var useMenus = {};
var renderColumnContextMenu = {};
var hasRequiredRenderColumnContextMenu;
function requireRenderColumnContextMenu() {
  if (hasRequiredRenderColumnContextMenu)
    return renderColumnContextMenu;
  hasRequiredRenderColumnContextMenu = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderColumnContextMenu, "__esModule", {
    value: true
  });
  renderColumnContextMenu.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _detectUa = requireDetectUa();
  var _Header = requireHeader();
  var _Menu = _interopRequireDefault2(requireMenu());
  var _renderGridMenu = _interopRequireDefault2(requireRenderGridMenu());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var COLUMN_MENU_ALIGN_POSITIONS = ["tl-bl", "tr-br", "tl-tr", "tr-tl", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
  var COLUMN_MENU_ALIGN_POSITIONS_RTL = ["tr-br", "tl-bl", "tr-tl", "tl-tr", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
  var notEmpty = function notEmpty2(x2) {
    return !!x2;
  };
  var getTopComputedProps = function getTopComputedProps2(computedProps) {
    while (computedProps.initialProps.parentComputedProps) {
      computedProps = computedProps.initialProps.parentComputedProps;
    }
    return computedProps;
  };
  var getAlignTo = function getAlignTo2(selection, menuTools, index2) {
    var filteredTools = menuTools.filter(function(_, i) {
      return i !== Object.keys(selection).length;
    });
    var length2 = filteredTools.length;
    var alignTo;
    if (index2 > length2) {
      alignTo = filteredTools[length2 - 1];
    } else if (index2 <= length2) {
      alignTo = filteredTools[index2 - 1];
    }
    if (!alignTo) {
      alignTo = filteredTools[0];
    }
    return alignTo;
  };
  var _default2 = function _default3(computedProps, computedPropsRef) {
    var cellProps = computedProps.columnContextMenuProps;
    if (!cellProps) {
      return null;
    }
    var groupBy = computedProps.computedGroupBy;
    var visibleCountWithColumnMenu = 0;
    var visibleMap = computedProps.initialProps.columns.reduce(function(acc, col) {
      var column2 = computedProps.getColumnBy(col.name || col.id);
      if (column2 && computedProps.isColumnVisible(column2)) {
        var value = column2.id || column2.name;
        acc[value] = column2.id || column2.name;
        if (column2.showColumnMenuTool !== false) {
          visibleCountWithColumnMenu++;
        }
      }
      return acc;
    }, {});
    var onSelectionChange = function onSelectionChange2(selection) {
      var computedProps2 = computedPropsRef.current;
      if (!computedProps2) {
        return;
      }
      if (_detectUa.IS_IE) {
        computedProps2.preventIEMenuCloseRef.current = true;
        setTimeout(function() {
          computedProps2.preventIEMenuCloseRef.current = false;
        }, 100);
      }
      computedProps2.initialProps.columns.forEach(function(col) {
        var computedCol = computedProps2.getColumnBy(col);
        if (computedCol) {
          var visible = computedCol.id in selection;
          computedProps2.setColumnVisible(col, visible);
        }
      });
      if (computedProps2.updateMenuPositionOnColumnsChange) {
        requestAnimationFrame(function() {
          var menuTools = Array.prototype.slice.call(computedProps2.domRef.current.querySelectorAll(".InovuaReactDataGrid__column-header__menu-tool"));
          var mainMenu = computedProps2.domRef.current.querySelector(".InovuaReactDataGrid > .inovua-react-toolkit-menu");
          var cellInstance = computedProps2.columnContextMenuInstanceProps;
          var columnIndex = cellInstance.computedVisibleIndex;
          var alignTo = getAlignTo(selection, menuTools, columnIndex);
          if (alignTo) {
            computedProps2.updateMainMenuPosition(alignTo);
            if (mainMenu) {
              mainMenu.style.transition = "transform 200ms";
              setTimeout(function() {
                mainMenu.style.transition = "";
              }, 200);
            }
          }
        });
      }
    };
    var currentColumn = computedProps.getColumnBy(cellProps.id);
    var colSortInfo = currentColumn.computedSortInfo;
    var lockLimit = !cellProps.computedLocked && computedProps.unlockedColumns.length <= 1;
    var isAutoLock = cellProps.autoLock && computedProps.lockedStartColumns && !!computedProps.lockedStartColumns.filter(function(c2) {
      return !c2.autoLock;
    }).length;
    var showColumnMenuLockOptions = cellProps.showColumnMenuLockOptions !== void 0 ? cellProps.showColumnMenuLockOptions : computedProps.initialProps.showColumnMenuLockOptions;
    if (cellProps.lockable === false) {
      showColumnMenuLockOptions = false;
    }
    var showColumnMenuGroupOptions = cellProps.showColumnMenuGroupOptions !== void 0 ? cellProps.showColumnMenuGroupOptions : computedProps.initialProps.showColumnMenuGroupOptions;
    var showColumnMenuFilterOptions = cellProps.showColumnMenuFilterOptions !== void 0 ? cellProps.showColumnMenuFilterOptions : computedProps.initialProps.showColumnMenuFilterOptions;
    var showColumnMenuSortOptions = cellProps.showColumnMenuSortOptions !== void 0 ? cellProps.showColumnMenuSortOptions : computedProps.initialProps.showColumnMenuSortOptions;
    var enableColumnAutosize = computedProps.enableColumnAutosize ? computedProps.enableColumnAutosize : computedProps.initialProps.enableColumnAutosize;
    var columnsItem = {
      label: computedProps.i18n("columns"),
      itemId: "columns",
      menuProps: {
        dismissOnClick: false
      },
      items: computedProps.getColumnsInOrder().filter(function(c2) {
        return c2.showInContextMenu !== false;
      }).map(function(c2) {
        var value = c2.id || c2.name || "";
        return {
          label: (0, _Header.getCellHeader)(c2, c2, null, {
            currentColumn
          }),
          itemId: "column-".concat(c2.id),
          value,
          disabled: c2.hideable === false || visibleCountWithColumnMenu === 1 && visibleMap[value],
          name: value
        };
      })
    };
    if (computedProps.computedPivot) {
      columnsItem = null;
    }
    var items = [showColumnMenuSortOptions === false ? null : {
      label: computedProps.i18n("sortAsc"),
      itemId: "sortAsc",
      disabled: !cellProps.computedSortable || colSortInfo && colSortInfo.dir === 1,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.setColumnSortInfo(cellProps.id, 1);
        computedProps2.hideColumnContextMenu();
      }
    }, showColumnMenuSortOptions === false ? null : {
      label: computedProps.i18n("sortDesc"),
      itemId: "sortDesc",
      disabled: !cellProps.computedSortable || colSortInfo && colSortInfo.dir === -1,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.setColumnSortInfo(cellProps.id, -1);
        computedProps2.hideColumnContextMenu();
      }
    }, (computedProps.initialProps.allowUnsort || computedProps.computedIsMultiSort) && showColumnMenuSortOptions !== false ? {
      label: computedProps.i18n("unsort"),
      itemId: "unsort",
      disabled: !colSortInfo,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.unsortColumn(cellProps.id);
        computedProps2.hideColumnContextMenu();
      }
    } : null, showColumnMenuGroupOptions === false ? null : "-", showColumnMenuGroupOptions === false ? null : {
      label: computedProps.i18n("group"),
      itemId: "group",
      disabled: !groupBy || groupBy.indexOf(cellProps.id) !== -1 || currentColumn.groupBy === false,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.addGroupByColumn(cellProps.id);
        computedProps2.hideColumnContextMenu();
      }
    }, showColumnMenuGroupOptions === false ? null : {
      label: computedProps.i18n("ungroup"),
      itemId: "ungroup",
      disabled: !groupBy || groupBy.indexOf(cellProps.id) === -1 || currentColumn.groupBy === false,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.removeGroupByColumn(cellProps.id);
        computedProps2.hideColumnContextMenu();
      }
    }, showColumnMenuLockOptions === false ? null : "-", showColumnMenuLockOptions === false ? null : {
      label: computedProps.i18n("lockStart"),
      itemId: "lockStart",
      disabled: cellProps.computedLocked === "start" || lockLimit,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.setColumnLocked(cellProps.id, "start");
        computedProps2.hideColumnContextMenu();
      }
    }, showColumnMenuLockOptions === false ? null : {
      label: computedProps.i18n("lockEnd"),
      itemId: "lockEnd",
      disabled: cellProps.computedLocked === "end" || lockLimit || isAutoLock,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.setColumnLocked(cellProps.id, "end");
        computedProps2.hideColumnContextMenu();
      }
    }, showColumnMenuLockOptions === false ? null : {
      label: computedProps.i18n("unlock"),
      itemId: "unlock",
      disabled: !cellProps.computedLocked || isAutoLock,
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.setColumnLocked(cellProps.id, false);
        computedProps2.hideColumnContextMenu();
      }
    }, computedProps.enableColumnAutosize ? "-" : null, computedProps.enableColumnAutosize === false ? null : {
      label: computedProps.i18n("autoSizeToFit"),
      itemId: "autoSizeToFit",
      menuProps: {
        dismissOnClick: true
      },
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.setColumnSizesToFit) {
          computedProps2.setColumnSizesToFit();
          computedProps2.hideColumnContextMenu();
        }
      }
    }, computedProps.enableColumnAutosize === false ? null : {
      label: computedProps.i18n("autoresizeThisColumn"),
      itemId: "autoresizeThisColumn",
      menuProps: {
        dismissOnClick: true
      },
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var columnId = cellProps.id;
        if (computedProps2.setColumnSizeAuto) {
          computedProps2.setColumnSizeAuto(columnId);
          computedProps2.hideColumnContextMenu();
        }
      }
    }, enableColumnAutosize === false ? null : {
      label: computedProps.i18n("autoresizeAllColumns"),
      itemId: "autoresizeAllColumns",
      menuProps: {
        dismissOnClick: true
      },
      onClick: function onClick() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.setColumnsSizesAuto) {
          computedProps2.setColumnsSizesAuto();
          computedProps2.hideColumnContextMenu();
        }
      }
    }, columnsItem ? "-" : null, columnsItem].filter(notEmpty);
    if (items[0] === "-") {
      items = items.slice(1);
    }
    if (computedProps.initialProps.enableFiltering !== false && showColumnMenuFilterOptions !== false) {
      var isFilterable = computedProps.computedFilterable;
      var showFilteringMenuItems = computedProps.shouldShowFilteringMenuItems ? computedProps.shouldShowFilteringMenuItems() : false;
      if (showFilteringMenuItems) {
        items.push("-");
        items.push({
          label: computedProps.i18n("showFilteringRow", "Show Filtering Row"),
          itemId: "showFilteringRow",
          disabled: isFilterable,
          onClick: function onClick() {
            var computedProps2 = computedPropsRef.current;
            if (!computedProps2) {
              return;
            }
            computedProps2.setEnableFiltering(true);
            computedProps2.hideColumnContextMenu();
          }
        });
        items.push({
          label: computedProps.i18n("hideFilteringRow", "Hide Filtering Row"),
          itemId: "hideFilteringRow",
          disabled: !isFilterable,
          onClick: function onClick() {
            var computedProps2 = computedPropsRef.current;
            if (!computedProps2) {
              return;
            }
            computedProps2.setEnableFiltering(false);
            computedProps2.hideColumnContextMenu();
          }
        });
      }
    }
    items.forEach(function(item) {
      var onClick = item.onClick;
      if (onClick && _detectUa.IS_MS_BROWSER) {
        item.onClick = function() {
          requestAnimationFrame(onClick);
        };
      }
    });
    var constrainToComputedProps = getTopComputedProps(computedProps);
    var constrainTo = true;
    var menuProps = {
      updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
      stopBlurPropagation: false,
      maxHeight: constrainToComputedProps.initialProps.columnContextMenuConstrainTo ? null : null,
      nativeScroll: !_detectUa.IS_MS_BROWSER,
      autoFocus: true,
      enableSelection: true,
      defaultSelected: visibleMap,
      onDismiss: function onDismiss() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        computedProps2.hideColumnContextMenu();
      },
      onSelectionChange,
      style: {
        zIndex: 11e4,
        position: computedProps.initialProps.columnContextMenuPosition || "absolute"
      },
      items,
      theme: computedProps.theme,
      constrainTo,
      alignPositions: computedProps.initialProps.columnContextMenuAlignPositions || computedProps.rtl ? COLUMN_MENU_ALIGN_POSITIONS_RTL : COLUMN_MENU_ALIGN_POSITIONS,
      alignTo: computedProps.columnContextMenuInfoRef.current.menuAlignTo
    };
    var result;
    if (computedProps.initialProps.renderColumnContextMenu) {
      result = computedProps.initialProps.renderColumnContextMenu(menuProps, {
        cellProps,
        grid: computedProps.publicAPI,
        computedProps,
        computedPropsRef
      });
    }
    if (result === void 0) {
      result = _react.default.createElement(_Menu.default, _objectSpread2({}, menuProps));
    }
    if (computedProps.initialProps.renderGridMenu) {
      return computedProps.initialProps.renderGridMenu(result, computedProps);
    }
    return (0, _renderGridMenu.default)(result, computedProps);
  };
  renderColumnContextMenu.default = _default2;
  return renderColumnContextMenu;
}
var renderRowContextMenu = {};
var hasRequiredRenderRowContextMenu;
function requireRenderRowContextMenu() {
  if (hasRequiredRenderRowContextMenu)
    return renderRowContextMenu;
  hasRequiredRenderRowContextMenu = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(renderRowContextMenu, "__esModule", {
    value: true
  });
  renderRowContextMenu.default = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _react = _interopRequireDefault2(reactExports);
  var _detectUa = requireDetectUa();
  var _Menu = _interopRequireDefault2(requireMenu());
  var _renderGridMenu = _interopRequireDefault2(requireRenderGridMenu());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var ROW_MENU_ALIGN_POSITIONS = ["tl-bl", "tr-br", "tl-tr", "tr-tl", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
  var ROW_MENU_ALIGN_POSITIONS_RTL = ["tr-br", "tl-bl", "tr-tl", "tl-tr", "br-tr", "bl-tl", "br-tl", "bl-tr", "lc-tr", "rc-tl"];
  var getTopComputedProps = function getTopComputedProps2(computedProps) {
    while (computedProps.initialProps.parentComputedProps) {
      computedProps = computedProps.initialProps.parentComputedProps;
    }
    return computedProps;
  };
  var _default2 = function _default3(computedProps, computedPropsRef) {
    var rowProps = computedProps.rowContextMenuProps;
    if (!rowProps) {
      return null;
    }
    var rowContextMenuInfo = computedProps.rowContextMenuInfoRef;
    if (!rowProps || !rowContextMenuInfo.current) {
      return null;
    }
    var cellProps = rowContextMenuInfo.current.cellProps;
    var constrainToComputedProps = getTopComputedProps(computedProps);
    var items = [];
    var menuProps = {
      updatePositionOnScroll: computedProps.updateMenuPositionOnScroll,
      stopBlurPropagation: false,
      maxHeight: constrainToComputedProps.initialProps.columnContextMenuConstrainTo ? null : computedProps.getMenuAvailableHeight(),
      autoFocus: true,
      theme: computedProps.theme,
      onDismiss: computedProps.hideRowContextMenu,
      nativeScroll: !_detectUa.IS_MS_BROWSER,
      style: {
        zIndex: 11e4,
        position: computedProps.initialProps.rowContextMenuPosition || "absolute"
      },
      items,
      constrainTo: constrainToComputedProps.columnContextMenuInfoRef.current.getMenuConstrainTo(),
      alignPositions: computedProps.initialProps.rowContextMenuAlignPositions || computedProps.rtl ? ROW_MENU_ALIGN_POSITIONS_RTL : ROW_MENU_ALIGN_POSITIONS,
      alignTo: computedProps.rowContextMenuInfoRef.current.menuAlignTo
    };
    var result;
    if (computedProps.initialProps.renderRowContextMenu) {
      result = computedProps.initialProps.renderRowContextMenu(menuProps, {
        rowProps,
        cellProps,
        grid: computedProps.publicAPI,
        computedProps,
        computedPropsRef
      });
    }
    if (result === void 0) {
      result = _react.default.createElement(_Menu.default, _objectSpread2({}, menuProps));
    }
    if (computedProps.initialProps.renderGridMenu) {
      return computedProps.initialProps.renderGridMenu(result, computedProps);
    }
    return (0, _renderGridMenu.default)(result, computedProps);
  };
  renderRowContextMenu.default = _default2;
  return renderRowContextMenu;
}
var hasRequiredUseMenus;
function requireUseMenus() {
  if (hasRequiredUseMenus)
    return useMenus;
  hasRequiredUseMenus = 1;
  (function(exports) {
    var _interopRequireDefault2 = interopRequireDefaultExports;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    Object.defineProperty(exports, "renderColumnContextMenu", {
      enumerable: true,
      get: function get2() {
        return _renderColumnContextMenu.default;
      }
    });
    Object.defineProperty(exports, "renderRowContextMenu", {
      enumerable: true,
      get: function get2() {
        return _renderRowContextMenu.default;
      }
    });
    var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
    var _react = reactExports;
    var _detectUa = requireDetectUa();
    var _region = _interopRequireDefault2(requireRegion());
    var _getGlobal = requireGetGlobal();
    var _renderColumnContextMenu = _interopRequireDefault2(requireRenderColumnContextMenu());
    var _renderRowContextMenu = _interopRequireDefault2(requireRenderRowContextMenu());
    var globalObject = (0, _getGlobal.getGlobal)();
    var _default2 = function _default3(props2, computedProps, computedPropsRef) {
      var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), columnContextMenuProps = _useState2[0], setColumnContextMenuProps = _useState2[1];
      var _useState3 = (0, _react.useState)(null), _useState4 = (0, _slicedToArray2.default)(_useState3, 2), rowContextMenuProps = _useState4[0], setRowContextMenuProps = _useState4[1];
      var _useState5 = (0, _react.useState)(null), _useState6 = (0, _slicedToArray2.default)(_useState5, 2), columnContextMenuInstanceProps = _useState6[0], setColumnContextMenuInstanceProps = _useState6[1];
      var getConstrainRegion2 = function getConstrainRegion3(computedProps2) {
        if (!computedProps2.parentComputedProps) {
          return document.documentElement;
        }
        var node2 = computedProps2.getDOMNode();
        node2 = node2 ? node2.querySelector(".InovuaReactDataGrid__virtual-list") || node2 : node2;
        return node2;
      };
      var getColumnMenuConstrainTo = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        return computedProps2.initialProps.columnContextMenuConstrainTo || getConstrainRegion2(computedProps2);
      }, []);
      var getRowMenuConstrainTo = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        return computedProps2.initialProps.rowContextMenuConstrainTo || getConstrainRegion2(computedProps2);
      }, []);
      var columnContextMenuIndex = (0, _react.useRef)(-1);
      var preventIEMenuCloseRef = (0, _react.useRef)(false);
      var columnContextMenuInfoRef = (0, _react.useRef)({
        menuAlignTo: null,
        getMenuConstrainTo: getColumnMenuConstrainTo,
        menuOnHide: function menuOnHide() {
        }
      });
      var rowContextMenuInfoRef = (0, _react.useRef)({
        menuAlignTo: null,
        getMenuConstrainTo: getRowMenuConstrainTo,
        menuOnHide: function menuOnHide() {
        }
      });
      var hideColumnContextMenu = (0, _react.useCallback)(function() {
        if (_detectUa.IS_IE && preventIEMenuCloseRef.current) {
          return;
        }
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.columnContextMenuProps) {
          var columnContextMenuOnHide = columnContextMenuInfoRef.current.menuOnHide;
          if (typeof columnContextMenuOnHide == "function") {
            columnContextMenuOnHide();
          }
          computedProps2.setColumnContextMenuProps(null);
        }
      }, []);
      var hideRowContextMenu = (0, _react.useCallback)(function() {
        if (_detectUa.IS_IE && preventIEMenuCloseRef.current) {
          return;
        }
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.preventBlurOnContextMenuOpen && computedProps2.preventBlurOnContextMenuOpen.current) {
          computedProps2.preventBlurOnContextMenuOpen.current = false;
        }
        if (computedProps2.rowContextMenuProps) {
          var rowContextMenuOnHide = rowContextMenuInfoRef.current.menuOnHide;
          if (typeof rowContextMenuOnHide == "function") {
            rowContextMenuOnHide();
          }
          computedProps2.setRowContextMenuProps(null);
        }
      }, []);
      var showColumnContextMenu = (0, _react.useCallback)(function(alignTo, cellProps, _ref2, onHide) {
        var computedVisibleIndex = _ref2.computedVisibleIndex;
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.columnContextMenuProps) {
          computedProps2.hideColumnContextMenu();
          return;
        }
        columnContextMenuIndex.current = cellProps.columnIndex;
        columnContextMenuInfoRef.current = {
          menuAlignTo: alignTo,
          getMenuConstrainTo: getColumnMenuConstrainTo,
          menuOnHide: onHide
        };
        if (computedProps2.hideColumnFilterContextMenu) {
          computedProps2.hideColumnFilterContextMenu();
        }
        computedProps2.setColumnContextMenuProps(cellProps);
        if (computedProps2.setColumnContextMenuInstanceProps) {
          computedProps2.setColumnContextMenuInstanceProps({
            computedVisibleIndex
          });
        }
      }, []);
      var getMenuAvailableHeight = (0, _react.useCallback)(function() {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return 0;
        }
        var filtersHeight = 0;
        if (computedProps2.computedIsFilterable) {
          var filterNode = computedProps2.getDOMNode().querySelector(".InovuaReactDataGrid__column-header__filter-wrapper");
          if (filterNode) {
            filtersHeight = filterNode.offsetHeight;
          }
        }
        var size2 = computedProps2.initialProps.parentComputedProps ? computedProps2.initialProps.parentComputedProps.size : computedProps2.size;
        var result = size2 ? size2.height - 5 + filtersHeight : 0;
        return result;
      }, []);
      var onRowContextMenu = (0, _react.useCallback)(function(rowProps, event2) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        var initialProps = computedProps2.initialProps;
        if (initialProps.onRowContextMenu) {
          initialProps.onRowContextMenu(rowProps, event2);
        }
        if (!initialProps.renderRowContextMenu) {
          return;
        }
        if (computedProps2.preventBlurOnContextMenuOpen) {
          computedProps2.preventBlurOnContextMenuOpen.current = true;
        }
        event2.preventDefault();
        var cellProps = event2.nativeEvent ? event2.nativeEvent.__cellProps : void 0;
        var alignTo = _region.default.from(event2);
        alignTo.shift({
          top: -globalObject.scrollY,
          left: -globalObject.scrollX
        });
        showRowContextMenu(alignTo, rowProps, cellProps, function() {
        });
      }, []);
      var showRowContextMenu = (0, _react.useCallback)(function(alignTo, rowProps, cellProps, onHide) {
        var computedProps2 = computedPropsRef.current;
        if (!computedProps2) {
          return;
        }
        if (computedProps2.rowContextMenuProps) {
          computedProps2.hideRowContextMenu();
          return;
        }
        rowContextMenuInfoRef.current = {
          menuAlignTo: alignTo,
          getMenuConstrainTo: getRowMenuConstrainTo,
          cellProps,
          menuOnHide: onHide
        };
        if (computedProps2.hideRowFilterContextMenu) {
          computedProps2.hideRowFilterContextMenu();
        }
        computedProps2.setRowContextMenuProps(rowProps);
      }, []);
      return {
        onRowContextMenu,
        getMenuAvailableHeight,
        showRowContextMenu,
        showColumnContextMenu,
        hideColumnContextMenu,
        hideRowContextMenu,
        columnContextMenuProps,
        columnContextMenuInstanceProps,
        rowContextMenuProps,
        columnContextMenuInfoRef,
        rowContextMenuInfoRef,
        setColumnContextMenuProps,
        setColumnContextMenuInstanceProps,
        setRowContextMenuProps,
        preventIEMenuCloseRef,
        columnContextMenuIndex
      };
    };
    exports.default = _default2;
  })(useMenus);
  return useMenus;
}
var hasRequiredMenus;
function requireMenus() {
  if (hasRequiredMenus)
    return menus;
  hasRequiredMenus = 1;
  var _typeof2 = require_typeof();
  Object.defineProperty(menus, "__esModule", {
    value: true
  });
  menus.default = void 0;
  var _useMenus = _interopRequireWildcard(requireUseMenus());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
    var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var _default2 = {
    name: "menus",
    hook: _useMenus.default,
    renderColumnContextMenu: _useMenus.renderColumnContextMenu,
    renderRowContextMenu: _useMenus.renderRowContextMenu,
    defaultProps: function defaultProps2() {
      return {
        showColumnMenuTool: true
      };
    }
  };
  menus.default = _default2;
  return menus;
}
var cellSelection = {};
var useCellSelection = {};
var useActiveCell = {};
var hasRequiredUseActiveCell;
function requireUseActiveCell() {
  if (hasRequiredUseActiveCell)
    return useActiveCell;
  hasRequiredUseActiveCell = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useActiveCell, "__esModule", {
    value: true
  });
  useActiveCell.default = void 0;
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _useProperty3 = _interopRequireDefault2(requireUseProperty());
  var _react = reactExports;
  var _clamp = _interopRequireDefault2(requireClamp$1());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _throttle = _interopRequireDefault2(requireThrottle());
  var useActiveCell$1 = function useActiveCell2(props2, computedPropsRef) {
    var _useProperty = (0, _useProperty3.default)(props2, "activeCell"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), computedActiveCell = _useProperty2[0], doSetActiveCell = _useProperty2[1];
    if (!props2.enableKeyboardNavigation) {
      computedActiveCell = void 0;
    }
    var setActiveCell = (0, _react.useCallback)(function(activeCell, queue) {
      var computedProps = computedPropsRef.current;
      if (!computedProps || !computedProps.computedCellNavigationEnabled) {
        return;
      }
      var computedActiveCell2 = computedProps.computedActiveCell, data = computedProps.data, visibleColumns = computedProps.visibleColumns;
      var shouldCommit = !queue;
      queue = queue || (0, _batchUpdate.default)();
      if (activeCell) {
        var _activeCell = activeCell, _activeCell2 = (0, _slicedToArray2.default)(_activeCell, 2), activeCellRowIndex = _activeCell2[0], activeCellColumnIndex = _activeCell2[1];
        activeCellRowIndex = (0, _clamp.default)(activeCellRowIndex, 0, data.length - 1);
        activeCellColumnIndex = (0, _clamp.default)(activeCellColumnIndex, 0, visibleColumns.length - 1);
        var col = computedProps.getColumnBy(activeCellColumnIndex);
        if (col && col.cellSelectable === false) {
          return;
        }
        if (!data || data.__group || activeCellRowIndex == null || activeCellColumnIndex == null) {
          queue(function() {
            doSetActiveCell(null);
            computedProps.setLastCellInRange("");
          });
          if (shouldCommit) {
            queue.commit();
          }
          return;
        }
        activeCell = [activeCellRowIndex, activeCellColumnIndex];
        if (activeCell === computedActiveCell2 || computedActiveCell2 && activeCell && computedActiveCell2[0] === activeCell[0] && computedActiveCell2[1] === activeCell[1]) {
          return;
        }
      }
      queue(function() {
        doSetActiveCell(activeCell);
        computedProps.setLastCellInRange("");
      });
      if (shouldCommit) {
        queue.commit();
      }
    }, []);
    var oldActiveCell = (0, _usePrevious.default)(computedActiveCell, null);
    (0, _react.useLayoutEffect)(function() {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (oldActiveCell !== computedActiveCell && computedActiveCell) {
        var _computedActiveCell = computedActiveCell, _computedActiveCell2 = (0, _slicedToArray2.default)(_computedActiveCell, 2), rowIndex = _computedActiveCell2[0], columnIndex = _computedActiveCell2[1];
        if (rowIndex == null || columnIndex == null) {
          return;
        }
        var top = !oldActiveCell || rowIndex < oldActiveCell[0];
        var right = !oldActiveCell || columnIndex > oldActiveCell[1];
        var scrollToColumnIndex = (0, _clamp.default)(columnIndex + (right ? 0 : -0), 0, computedProps.visibleColumns.length - 1);
        computedProps.scrollToCell({
          rowIndex,
          columnIndex: scrollToColumnIndex
        }, {
          top,
          right
        });
      }
    }, [computedActiveCell, oldActiveCell]);
    var getCellSelectionBetween = (0, _react.useCallback)(function(start, end) {
      var computedProps = computedPropsRef.current;
      if (!start || !end || !computedProps) {
        return {};
      }
      var startRow = Math.min(start[0], end[0]);
      var startCol = Math.min(start[1], end[1]);
      var endRow = Math.max(start[0], end[0]);
      var endCol = Math.max(start[1], end[1]);
      var range2 = {};
      var groupBy = computedProps.computedGroupBy;
      var dataSource = groupBy ? computedProps.data : [];
      var current;
      for (var row = startRow; row <= endRow; row++) {
        if (groupBy) {
          current = dataSource[row];
          if (!current) {
            break;
          }
          if (current.__group) {
            continue;
          }
        }
        for (var col = startCol; col <= endCol; col++) {
          range2[getCellSelectionKey(row, col)] = true;
        }
      }
      return range2;
    }, []);
    var getCellSelectionKey = (0, _react.useCallback)(function(cellProps, col) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return -1;
      }
      var rowKey;
      var colKey;
      if (typeof cellProps === "string") {
        return cellProps;
      }
      if (typeof cellProps === "number" && typeof col === "number") {
        rowKey = cellProps;
        colKey = col;
      } else {
        if (cellProps) {
          rowKey = cellProps.rowIndex;
          colKey = cellProps.columnIndex;
        }
      }
      if (!computedProps.cellSelectionByIndex) {
        return computedProps.getCellSelectionIdKey(rowKey, colKey);
      }
      return "".concat([rowKey, colKey]);
    }, [computedPropsRef, props2.columns]);
    var getCellSelectionIdKey = (0, _react.useCallback)(function(rowIndex, columnIndex) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return -1;
      }
      var col = computedProps.getColumnBy(columnIndex);
      if (!col) {
        return -1;
      }
      var colId = col.id || col.name;
      var item = computedProps.getItemAt(rowIndex);
      if (!item) {
        return "";
      }
      var rowId = computedProps.getItemId(item);
      return "".concat([rowId, colId]);
    }, []);
    var incrementActiveCell = (0, _react.useCallback)(function(direction2) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var computedActiveCell2 = computedProps.computedActiveCell;
      if (!computedActiveCell2) {
        computedActiveCell2 = [0, 0];
      }
      var _direction = (0, _slicedToArray2.default)(direction2, 2), row = _direction[0], col = _direction[1];
      var data = computedProps.data, visibleColumns = computedProps.visibleColumns, computedGroupBy = computedProps.computedGroupBy, groupColumn = computedProps.groupColumn;
      var maxRow = data.length - 1;
      var columns = visibleColumns;
      var maxCol = columns.length - 1;
      var groupBy = computedGroupBy;
      var minCol = groupBy && !groupColumn ? groupBy.length : 0;
      var rowIndex = computedActiveCell2[0];
      var colIndex = computedActiveCell2[1];
      if (row) {
        var rowSign = row < 0 ? -1 : 1;
        var rowAdd = row;
        while (data[rowIndex + rowAdd] && data[rowIndex + rowAdd].__group) {
          rowIndex += rowAdd;
          rowAdd = rowSign;
        }
        rowIndex += rowAdd;
      }
      if (col) {
        var colSign = col < 0 ? -1 : 1;
        var colAdd = col;
        while (columns[colIndex + colAdd] && columns[colIndex + colAdd].cellSelectable === false) {
          colIndex += colSign;
          colAdd = colSign;
        }
        colIndex += colAdd;
      }
      rowIndex = (0, _clamp.default)(rowIndex, 0, maxRow);
      colIndex = (0, _clamp.default)(colIndex, minCol, maxCol);
      if (computedProps.activeCellThrottle) {
        (0, _throttle.default)(function() {
          return computedProps.setActiveCell([rowIndex, colIndex]);
        }, computedProps.activeCellThrottle, {
          trailing: true,
          leading: false
        });
      } else {
        computedProps.setActiveCell([rowIndex, colIndex]);
      }
    }, []);
    return {
      getCellSelectionBetween,
      getCellSelectionIdKey,
      computedActiveCell,
      setActiveCell,
      getCellSelectionKey,
      incrementActiveCell
    };
  };
  var _default2 = useActiveCell$1;
  useActiveCell.default = _default2;
  return useActiveCell;
}
var hasRequiredUseCellSelection;
function requireUseCellSelection() {
  if (hasRequiredUseCellSelection)
    return useCellSelection;
  hasRequiredUseCellSelection = 1;
  var _interopRequireDefault2 = interopRequireDefaultExports;
  Object.defineProperty(useCellSelection, "__esModule", {
    value: true
  });
  useCellSelection.useCellSelection = void 0;
  var _defineProperty2 = _interopRequireDefault2(requireDefineProperty());
  var _typeof2 = _interopRequireDefault2(require_typeof());
  var _slicedToArray2 = _interopRequireDefault2(requireSlicedToArray());
  var _react = reactExports;
  var _useProperty3 = _interopRequireDefault2(requireUseProperty());
  var _batchUpdate = _interopRequireDefault2(requireBatchUpdate());
  var _clamp = _interopRequireDefault2(requireClamp$1());
  var _useActiveCell2 = _interopRequireDefault2(requireUseActiveCell());
  var _usePrevious = _interopRequireDefault2(requireUsePrevious());
  var _useNamedState3 = _interopRequireDefault2(requireUseNamedState());
  function ownKeys2(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var getFirstSelectedCell = function getFirstSelectedCell2(cellSelection2) {
    return cellSelection2.sort(function(cell1, cell2) {
      if (cell1[0] < cell2[0]) {
        return -1;
      } else if (cell1[0] > cell2[0]) {
        return 1;
      }
      return cell1[1] < cell2[1] ? -1 : 1;
    })[0];
  };
  var useCellSelection$1 = function useCellSelection2(props2, _ref2, computedPropsRef) {
    var rowSelectionEnabled = _ref2.rowSelectionEnabled, hasRowNavigation = _ref2.hasRowNavigation, listenOnCellEnter = _ref2.listenOnCellEnter;
    var _useProperty = (0, _useProperty3.default)(props2, "cellSelection"), _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2), cellSelection2 = _useProperty2[0], setCellSelection = _useProperty2[1];
    var _useNamedState = (0, _useNamedState3.default)(false, props2.context, "bulkUpdateMouseDown"), _useNamedState2 = (0, _slicedToArray2.default)(_useNamedState, 2), bulkUpdateMouseDown = _useNamedState2[0], setBulkUpdateMouseDown = _useNamedState2[1];
    var _useActiveCell = (0, _useActiveCell2.default)(props2, computedPropsRef), computedActiveCell = _useActiveCell.computedActiveCell, getCellSelectionIdKey = _useActiveCell.getCellSelectionIdKey, getCellSelectionBetween = _useActiveCell.getCellSelectionBetween, setActiveCell = _useActiveCell.setActiveCell, getCellSelectionKey = _useActiveCell.getCellSelectionKey, incrementActiveCell = _useActiveCell.incrementActiveCell;
    var cellSelectionEnabled = !rowSelectionEnabled ? !!cellSelection2 : false;
    if (rowSelectionEnabled || hasRowNavigation) {
      computedActiveCell = void 0;
    }
    var cellNavigationEnabled = computedActiveCell !== void 0;
    if (cellSelection2) {
      cellNavigationEnabled = props2.enableKeyboardNavigation !== false && !hasRowNavigation ? true : computedActiveCell !== void 0 || !!cellSelection2;
    }
    if (props2.enableKeyboardNavigation === false) {
      cellNavigationEnabled = false;
    }
    var cellMultiSelectionEnabledRef = (0, _react.useRef)(false);
    cellMultiSelectionEnabledRef.current = cellSelectionEnabled && props2.multiSelect !== false;
    var cellMultiSelectionEnabled = cellMultiSelectionEnabledRef.current;
    var prevMultiSelectionEnabled = (0, _usePrevious.default)(cellMultiSelectionEnabled, cellMultiSelectionEnabled);
    (0, _react.useEffect)(function() {
      if (prevMultiSelectionEnabled && !cellMultiSelectionEnabled) {
        setCellSelection({});
      }
    }, [cellMultiSelectionEnabled, prevMultiSelectionEnabled]);
    var onCellEnter = (0, _react.useMemo)(function() {
      return listenOnCellEnter ? function(event2, _ref22) {
        var columnIndex = _ref22.columnIndex, rowIndex = _ref22.rowIndex;
        var computedProps = computedPropsRef.current;
        if (!computedProps) {
          return;
        }
        var data = computedProps.getItemAt(rowIndex);
        if (!data || data.__group) {
          return;
        }
        var col = computedProps.getColumnBy(columnIndex);
        if (col && col.cellSelectable === false) {
          return;
        }
        var groupBy = computedProps.computedGroupBy;
        var minCol = groupBy ? groupBy.length : 0;
        if (columnIndex < minCol) {
          return;
        }
        var range2 = computedProps.getCellSelectionBetween(computedProps.selectionFixedCell || computedProps.computedActiveCell || computedProps.lastSelectedCell, [rowIndex, columnIndex]);
        var queue = (0, _batchUpdate.default)();
        queue(function() {
          computedProps.setCellSelection(range2);
          computedProps.setLastCellInRange(Object.keys(range2).pop() || "");
        });
        var direction2 = computedProps.cellDragStartRowIndex != null ? rowIndex - computedProps.cellDragStartRowIndex : rowIndex;
        var sign2 = direction2 < 0 ? -1 : direction2 > 0 ? 1 : 0;
        var scrollToRowIndex = (0, _clamp.default)(rowIndex + sign2, 0, computedProps.count - 1);
        var visible = computedProps.isCellVisible({
          columnIndex,
          rowIndex: scrollToRowIndex
        });
        if (visible !== true) {
          visible = visible;
          var left = visible.leftDiff < 0;
          var top = visible.topDiff < 0;
          computedProps.scrollToCell({
            columnIndex,
            rowIndex: scrollToRowIndex
          }, {
            top,
            left
          });
        }
        queue.commit();
      } : null;
    }, [listenOnCellEnter]);
    var getContinuousSelectedRangeFor = function getContinuousSelectedRangeFor2(selectionMap, cell) {
      if (!cell) {
        return [];
      }
      selectionMap = selectionMap || {};
      var _cell = (0, _slicedToArray2.default)(cell, 2), row = _cell[0], col = _cell[1];
      var key = getCellSelectionKey(row, col);
      var range2 = [];
      while (selectionMap[key]) {
        range2.push([row, col]);
        key = getCellSelectionKey(row - 1, col - 1);
        if (selectionMap[key]) {
          row -= 1;
          col -= 1;
          continue;
        }
        if (!selectionMap[key]) {
          key = getCellSelectionKey(row - 1, col);
        }
        if (selectionMap[key]) {
          row -= 1;
          continue;
        }
        if (!selectionMap[key]) {
          key = getCellSelectionKey(row, col - 1);
          col -= 1;
        }
      }
      return range2;
    };
    var toggleActiveCellSelection = (0, _react.useCallback)(function(fakeEvent) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var computedActiveCell2 = computedProps.computedActiveCell;
      if (!computedActiveCell2) {
        return;
      }
      var _computedActiveCell = (0, _slicedToArray2.default)(computedActiveCell2, 2), rowIndex = _computedActiveCell[0], columnIndex = _computedActiveCell[1];
      var column2 = computedProps.getColumnBy(columnIndex);
      if (column2 && column2.cellSelectable === false) {
        return;
      }
      var selected = isCellSelected(rowIndex, columnIndex);
      var event2 = fakeEvent || {
        ctrlKey: selected
      };
      computedProps.onCellClickAction(event2, {
        rowIndex,
        columnIndex
      });
    }, []);
    var isCellSelected = (0, _react.useCallback)(function(row, col) {
      if (row && (0, _typeof2.default)(row) === "object") {
        col = row.columnIndex;
        row = row.rowIndex;
      }
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (computedProps.computedCellSelection) {
        var key = computedProps.getCellSelectionKey(row, col);
        return !!computedProps.computedCellSelection[key];
      }
      return false;
    }, []);
    var _useState = (0, _react.useState)(null), _useState2 = (0, _slicedToArray2.default)(_useState, 2), cellDragStartRowIndex = _useState2[0], setCellDragStartRowIndex = _useState2[1];
    var cellSelectionRef = (0, _react.useRef)(cellSelection2);
    cellSelectionRef.current = cellSelection2;
    var onCellSelectionDraggerMouseDown = (0, _react.useMemo)(function() {
      if (cellMultiSelectionEnabled && cellSelectionRef.current) {
        var _onCellSelectionDraggerMouseDown = function _onCellSelectionDraggerMouseDown2(event2, _ref3, selectionFixedCell) {
          var columnIndex = _ref3.columnIndex, rowIndex = _ref3.rowIndex;
          var computedProps = computedPropsRef.current;
          if (!computedProps) {
            return;
          }
          var column2 = computedProps.getColumnBy(columnIndex);
          if (column2 && column2.cellSelectable === false) {
            return;
          }
          if (!selectionFixedCell) {
            var currentCell = [rowIndex, columnIndex];
            var groupBy = computedProps.computedGroupBy;
            var hasGroupBy = groupBy && groupBy.length;
            var currentRange = !hasGroupBy ? getContinuousSelectedRangeFor(computedProps.computedCellSelection, currentCell) : [];
            selectionFixedCell = !hasGroupBy ? getFirstSelectedCell(currentRange.length ? currentRange : [currentCell]) : computedProps.computedActiveCell || computedProps.lastSelectedCell;
          }
          var fn = function fn2() {
            computedProps.setListenOnCellEnter(false, fn2);
            setCellDragStartRowIndex(null);
            computedProps.setSelectionFixedCell(null);
          };
          var queue = (0, _batchUpdate.default)();
          queue(function() {
            setCellDragStartRowIndex(rowIndex);
            if (selectionFixedCell === void 0) {
              selectionFixedCell = null;
            }
            computedProps.setSelectionFixedCell(selectionFixedCell);
            computedProps.setListenOnCellEnter(true, fn);
          });
          queue.commit();
        };
        return _onCellSelectionDraggerMouseDown;
      }
      return null;
    }, [cellMultiSelectionEnabled]);
    var cellContentRef = (0, _react.useRef)(null);
    var computedCellBulkUpdateMouseDown = (0, _react.useCallback)(function(_event, _cellProps) {
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      if (!computedProps.enableCellBulkUpdate) {
        return;
      }
      var computedActiveCell2 = computedProps.computedActiveCell, data = computedProps.data;
      if (!computedActiveCell2) {
        return;
      }
      setBulkUpdateMouseDown(true);
      var _computedActiveCell2 = (0, _slicedToArray2.default)(computedActiveCell2, 2), activeRow = _computedActiveCell2[0], activeColumn = _computedActiveCell2[1];
      var row = data[activeRow];
      var column2 = computedProps.getColumnBy(activeColumn);
      var columnName = column2.name;
      var cellContent = columnName ? row[columnName] : null;
      cellContentRef.current = cellContent;
    }, []);
    var computedCellBulkUpdateMouseUp = (0, _react.useCallback)(function(_event) {
      setBulkUpdateMouseDown(false);
      var computedProps = computedPropsRef.current;
      if (!computedProps) {
        return;
      }
      var cellContent = cellContentRef.current;
      if (!cellContent) {
        return;
      }
      if (!computedProps.enableCellBulkUpdate) {
        return;
      }
      var cellSelectionMap = computedProps.computedCellSelection;
      if (!cellSelectionMap) {
        return;
      }
      var dataMap = {};
      Object.keys(cellSelectionMap).map(function(key) {
        var _key$split = key.split(","), _key$split2 = (0, _slicedToArray2.default)(_key$split, 2), rowId = _key$split2[0], columnName = _key$split2[1];
        if (!dataMap[rowId]) {
          dataMap[rowId] = (0, _defineProperty2.default)({}, columnName, cellContent);
        }
        {
          dataMap[rowId] = _objectSpread2(_objectSpread2({}, dataMap[rowId]), {}, (0, _defineProperty2.default)({}, columnName, cellContent));
        }
      });
      var dataArray = Object.keys(dataMap).map(function(key) {
        var index2 = -1;
        index2 = computedProps.getItemIndexById(key);
        if (index2 === -1) {
          index2 = computedProps.getItemIndexById(Number(key));
        }
        if (index2 > -1) {
          var item = computedProps.getItemAt(index2);
          var itemId = computedProps.getItemId(item);
          return _objectSpread2({
            id: itemId
          }, dataMap[key]);
        }
      });
      computedProps.setItemsAt(dataArray, {
        replace: false
      });
      cellContentRef.current = null;
    }, []);
    return {
      onCellEnter,
      toggleActiveCellSelection,
      cellDragStartRowIndex,
      setCellDragStartRowIndex,
      onCellSelectionDraggerMouseDown,
      computedCellBulkUpdateMouseDown,
      bulkUpdateMouseDown,
      computedCellBulkUpdateMouseUp,
      getCellSelectionBetween,
      computedActiveCell,
      incrementActiveCell,
      getCellSelectionIdKey,
      setActiveCell,
      getCellSelectionKey,
      cellSelectionEnabled,
      cellNavigationEnabled,
      cellMultiSelectionEnabled,
      computedCellSelection: cellSelection2,
      setCellSelection
    };
  };
  useCellSelection.useCellSelection = useCellSelection$1;
  return useCellSelection;
}
var hasRequiredCellSelection;
function requireCellSelection() {
  if (hasRequiredCellSelection)
    return cellSelection;
  hasRequiredCellSelection = 1;
  Object.defineProperty(cellSelection, "__esModule", {
    value: true
  });
  cellSelection.default = void 0;
  var _useCellSelection = requireUseCellSelection();
  var _default2 = {
    name: "cell-selection",
    hook: _useCellSelection.useCellSelection,
    defaultProps: function defaultProps2() {
      return {};
    }
  };
  cellSelection.default = _default2;
  return cellSelection;
}
var _interopRequireDefault = interopRequireDefaultExports;
Object.defineProperty(reactdatagridCommunity, "__esModule", {
  value: true
});
reactdatagridCommunity.plugins = reactdatagridCommunity.default = void 0;
var _factory = _interopRequireDefault(requireFactory());
var _sortableColumns = _interopRequireDefault(requireSortableColumns());
var _filters = _interopRequireDefault(requireFilters());
var _menus = _interopRequireDefault(requireMenus());
var _cellSelection = _interopRequireDefault(requireCellSelection());
var plugins$1 = [_sortableColumns.default, _filters.default, _menus.default, _cellSelection.default];
reactdatagridCommunity.plugins = plugins$1;
var ReactDataGrid = (0, _factory.default)({
  plugins: plugins$1
}, "community");
var _default = ReactDataGrid;
reactdatagridCommunity.default = _default;
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = React.createContext && /* @__PURE__ */ React.createContext(DefaultContext);
var _excluded = ["attr", "size", "title"];
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function ownKeys(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o);
  }
  return t2;
}
function _objectSpread(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function Tree2Element(tree) {
  return tree && tree.map((node2, i) => /* @__PURE__ */ React.createElement(node2.tag, _objectSpread({
    key: i
  }, node2.attr), Tree2Element(node2.child)));
}
function GenIcon(data) {
  return (props2) => /* @__PURE__ */ React.createElement(IconBase, _extends({
    attr: _objectSpread({}, data.attr)
  }, props2), Tree2Element(data.child));
}
function IconBase(props2) {
  var elem = (conf) => {
    var {
      attr,
      size: size2,
      title
    } = props2, svgProps = _objectWithoutProperties(props2, _excluded);
    var computedSize = size2 || conf.size || "1em";
    var className;
    if (conf.className)
      className = conf.className;
    if (props2.className)
      className = (className ? className + " " : "") + props2.className;
    return /* @__PURE__ */ React.createElement("svg", _extends({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: _objectSpread(_objectSpread({
        color: props2.color || conf.color
      }, conf.style), props2.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && /* @__PURE__ */ React.createElement("title", null, title), props2.children);
  };
  return IconContext !== void 0 ? /* @__PURE__ */ React.createElement(IconContext.Consumer, null, (conf) => elem(conf)) : elem(DefaultContext);
}
function AiTwotoneHome(props2) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "fill": "#D9D9D9", "d": "M512.1 172.6l-370 369.7h96V868H392V640c0-22.1 17.9-40 40-40h160c22.1 0 40 17.9 40 40v228h153.9V542.3H882L535.2 195.7l-23.1-23.1zm434.5 422.9c-6 6-13.1 10.8-20.8 13.9 7.7-3.2 14.8-7.9 20.8-13.9zm-887-34.7c5 30.3 31.4 53.5 63.1 53.5h.9c-31.9 0-58.9-23-64-53.5zm-.9-10.5v-1.9 1.9zm.1-2.6c.1-3.1.5-6.1 1-9.1-.6 2.9-.9 6-1 9.1z" }, "child": [] }, { "tag": "path", "attr": { "d": "M951 510c0-.1-.1-.1-.1-.2l-1.8-2.1c-.1-.1-.2-.3-.4-.4-.7-.8-1.5-1.6-2.2-2.4L560.1 118.8l-25.9-25.9a31.5 31.5 0 0 0-44.4 0L77.5 505a63.6 63.6 0 0 0-16 26.6l-.6 2.1-.3 1.1-.3 1.2c-.2.7-.3 1.4-.4 2.1 0 .1 0 .3-.1.4-.6 3-.9 6-1 9.1v3.3c0 .5 0 1 .1 1.5 0 .5 0 .9.1 1.4 0 .5.1 1 .1 1.5 0 .6.1 1.2.2 1.8 0 .3.1.6.1.9l.3 2.5v.1c5.1 30.5 32.2 53.5 64 53.5h42.5V940h691.7V614.3h43.4c8.6 0 16.9-1.7 24.5-4.9s14.7-7.9 20.8-13.9a63.6 63.6 0 0 0 18.7-45.3c0-14.7-5-28.8-14.3-40.2zM568 868H456V664h112v204zm217.9-325.7V868H632V640c0-22.1-17.9-40-40-40H432c-22.1 0-40 17.9-40 40v228H238.1V542.3h-96l370-369.7 23.1 23.1L882 542.3h-96.1z" }, "child": [] }] })(props2);
}
function BiMenuAltRight(props2) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M4 6h16v2H4zm4 5h12v2H8zm5 5h7v2h-7z" }, "child": [] }] })(props2);
}
function RiLogoutCircleFill(props2) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM7 11V8L2 12L7 16V13H15V11H7Z" }, "child": [] }] })(props2);
}
const Sidebar = () => {
  const navigate = useNavigate();
  const [isOpen, setOpen] = reactExports.useState(false);
  const toggle = () => setOpen(!isOpen);
  const isLogout = () => {
    api.remove("loggedIn");
    localStorage.removeItem("loggedIn");
    navigate("/login", { replace: true });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(motion.div, { animate: { width: isOpen ? "200px" : "75px" }, style: { position: "fixed", top: 0, left: 0, zIndex: 100 }, className: "sidebar", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { className: "top-section", children: [
      isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "logo font-semibold", children: "MZCET" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(BiMenuAltRight, { cursor: "pointer", color: "#fff", size: 30, onClick: toggle })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: "middle-section", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Link, { to: "/home", className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AiTwotoneHome, { className: "icons", size: isOpen ? "18px" : "23px" }),
        isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Home" })
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { onClick: isLogout, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(RiLogoutCircleFill, { className: "icons", size: isOpen ? "18px" : "23px" }),
        isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Logout" })
      ] })
    ] }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: "bottom-section" })
  ] }) });
};
function HomeScreen() {
  const navigate = useNavigate();
  const [selectedOptionDepartment, setSelectedOptionDepartment] = reactExports.useState("");
  const [selectedOptionSemester, setSelectedOptionSemester] = reactExports.useState("");
  const [selectedOptionYear, setSelectedOptionYear] = reactExports.useState("");
  reactExports.useState("");
  const [selectedOptionSubject, setSelectedOptionSubject] = reactExports.useState("");
  const [selectedOptionExam, setSelectedOptionExam] = reactExports.useState("");
  localStorage.setItem("examtype", selectedOptionExam);
  const [courseDetail, setcourseDetail] = reactExports.useState([]);
  reactExports.useState([]);
  const handleChangeDepartment = (event2) => {
    setSelectedOptionDepartment(event2.target.value);
    console.log(event2.target.value);
  };
  const handleChangeSemester = (event2) => {
    setSelectedOptionSemester(event2.target.value);
    console.log(event2.target.value);
  };
  const handleChangeYear = (event2) => {
    setSelectedOptionYear(event2.target.value);
    console.log(event2.target.value);
  };
  const handleChangeSubject = (event2) => {
    setSelectedOptionSubject(event2.target.value);
    console.log(event2.target.value);
  };
  const handleChangeExam = (event2) => {
    setSelectedOptionExam(event2.target.value);
    console.log(event2.target.value);
  };
  reactExports.useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/", {
          params: {
            dep: selectedOptionDepartment,
            sem: selectedOptionSemester
          }
        });
        console.log(response.data);
        setcourseDetail(response.data);
      } catch (err) {
        console.log(err.toString());
      }
    };
    fetchData();
  }, [selectedOptionSemester]);
  const handlesubmit = async (e2) => {
    e2.preventDefault();
    localStorage.setItem("dept", selectedOptionDepartment);
    localStorage.setItem("year", selectedOptionYear);
    localStorage.setItem("sem", selectedOptionSemester);
    localStorage.setItem("subcode", selectedOptionSubject);
    navigate("/markentry");
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "home", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "homeContainer", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ml: "4.5rem", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Navbar, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "home-content", mt: 150, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { display: "flex", alignItems: "center", justifyContent: "center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack, { spacing: 4, width: "50%", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { width: "100%", id: "email", isRequired: true, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Select Department :" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Select,
              {
                value: selectedOptionDepartment,
                onChange: handleChangeDepartment,
                placeholder: "Select Department",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "CSE", children: "Computer Science and Engineering" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Mech", children: "Mechanical Engineering" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "EEE", children: "Electrical and Electronics Engineering" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "ECE", children: "Electronics and Communication Engineering" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Civil", children: "Civil Engineering" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { width: "100%", id: "email", isRequired: true, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Select Year :" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Select,
              {
                value: selectedOptionYear,
                onChange: handleChangeYear,
                placeholder: "Select Year",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "First Year" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "Second Year" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "Third Year" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "4", children: "Final Year" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { width: "100%", id: "email", isRequired: true, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Select Semester :" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Select,
              {
                value: selectedOptionSemester,
                onChange: handleChangeSemester,
                placeholder: "Select Semester",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "1", children: "Semester 1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "2", children: "Semester 2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "3", children: "Semester 3" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "4", children: "Semester 4" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "5", children: "Semester 5" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "6", children: "Semester 6" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "7", children: "Semester 7" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "8", children: "Semester 8" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { width: "100%", id: "email", isRequired: true, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Select Subject :" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Select,
              {
                value: selectedOptionSubject,
                onChange: handleChangeSubject,
                placeholder: "Select Subject",
                children: courseDetail.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: item.Course_id, children: item.Course_id + "-" + item.Course_name }, item.Course_id))
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(FormControl, { width: "100%", id: "email", isRequired: true, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Select Mark Entry :" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Select,
              {
                value: selectedOptionExam,
                onChange: handleChangeExam,
                placeholder: "Select Mark Entry",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Cycle Test 1", children: "Cycle Test 1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Cycle Test 2", children: "Cycle Test 2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Model", children: "Model" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "University", children: "University" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Assignment1", children: "Assignment 1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Assignment2", children: "Assignment 2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Assignment3", children: "Assignment 3" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Assignment4", children: "Assignment 4" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "Lab", children: "Lab" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { mt: 3, width: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { onClick: handlesubmit, width: "100%", colorScheme: "twitter", children: "Submit" }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Divider, { mt: 5 })
      ] })
    ] })
  ] }) });
}
var lib = { exports: {} };
(function(module, exports) {
  !function(e2, t2) {
    module.exports = t2(reactExports, reactDomExports);
  }("undefined" != typeof self ? self : commonjsGlobal, function(e2, t2) {
    return function() {
      var r2 = { 328: function(e3, t3, r3) {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.PrintContextConsumer = t3.PrintContext = void 0;
        var n3 = r3(496), o2 = Object.prototype.hasOwnProperty.call(n3, "createContext");
        t3.PrintContext = o2 ? n3.createContext({}) : null, t3.PrintContextConsumer = t3.PrintContext ? t3.PrintContext.Consumer : function() {
          return null;
        };
      }, 428: function(e3, t3, r3) {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.ReactToPrint = void 0;
        var n3 = r3(316), o2 = r3(496), i2 = r3(190), a = r3(328), c2 = r3(940), s = function(e4) {
          function t4() {
            var t5 = e4.apply(this, n3.__spreadArray([], n3.__read(arguments), false)) || this;
            return t5.startPrint = function(e5) {
              var r4 = t5.props, n4 = r4.onAfterPrint, o3 = r4.onPrintError, i3 = r4.print, a2 = r4.documentTitle;
              setTimeout(function() {
                var r5, c3;
                if (e5.contentWindow)
                  if (e5.contentWindow.focus(), i3)
                    i3(e5).then(function() {
                      return null == n4 ? void 0 : n4();
                    }).then(function() {
                      return t5.handleRemoveIframe();
                    }).catch(function(e6) {
                      o3 ? o3("print", e6) : t5.logMessages(["An error was thrown by the specified `print` function"]);
                    });
                  else {
                    if (e5.contentWindow.print) {
                      var s2 = null !== (c3 = null === (r5 = e5.contentDocument) || void 0 === r5 ? void 0 : r5.title) && void 0 !== c3 ? c3 : "", u2 = e5.ownerDocument.title;
                      a2 && (e5.ownerDocument.title = a2, e5.contentDocument && (e5.contentDocument.title = a2)), e5.contentWindow.print(), a2 && (e5.ownerDocument.title = u2, e5.contentDocument && (e5.contentDocument.title = s2));
                    } else
                      t5.logMessages(["Printing for this browser is not currently possible: the browser does not have a `print` method available for iframes."]);
                    null == n4 || n4(), t5.handleRemoveIframe();
                  }
                else
                  t5.logMessages(["Printing failed because the `contentWindow` of the print iframe did not load. This is possibly an error with `react-to-print`. Please file an issue: https://github.com/gregnb/react-to-print/issues/"]);
              }, 500);
            }, t5.triggerPrint = function(e5) {
              var r4 = t5.props, n4 = r4.onBeforePrint, o3 = r4.onPrintError;
              if (n4) {
                var i3 = n4();
                i3 && "function" == typeof i3.then ? i3.then(function() {
                  t5.startPrint(e5);
                }).catch(function(e6) {
                  o3 && o3("onBeforePrint", e6);
                }) : t5.startPrint(e5);
              } else
                t5.startPrint(e5);
            }, t5.handlePrint = function(e5) {
              var r4 = t5.props, o3 = r4.bodyClass, a2 = r4.content, c3 = r4.copyStyles, s2 = r4.fonts, u2 = r4.pageStyle, l2 = r4.nonce, f2 = "function" == typeof e5 ? e5() : null;
              if (f2 && "function" == typeof a2 && t5.logMessages(['"react-to-print" received a `content` prop and a content param passed the callback return by `useReactToPrint. The `content` prop will be ignored.'], "warning"), f2 || "function" != typeof a2 || (f2 = a2()), void 0 !== f2)
                if (null !== f2) {
                  var d2 = document.createElement("iframe");
                  d2.width = "".concat(document.documentElement.clientWidth, "px"), d2.height = "".concat(document.documentElement.clientHeight, "px"), d2.style.position = "absolute", d2.style.top = "-".concat(document.documentElement.clientHeight + 100, "px"), d2.style.left = "-".concat(document.documentElement.clientWidth + 100, "px"), d2.id = "printWindow", d2.srcdoc = "<!DOCTYPE html>";
                  var p2 = (0, i2.findDOMNode)(f2);
                  if (p2) {
                    var h3 = p2.cloneNode(true), y2 = h3 instanceof Text, b2 = document.querySelectorAll("link[rel~='stylesheet'], link[as='style']"), v2 = y2 ? [] : h3.querySelectorAll("img"), g2 = y2 ? [] : h3.querySelectorAll("video"), m2 = s2 ? s2.length : 0;
                    t5.numResourcesToLoad = b2.length + v2.length + g2.length + m2, t5.resourcesLoaded = [], t5.resourcesErrored = [];
                    var _ = function(e6, r5) {
                      t5.resourcesLoaded.includes(e6) ? t5.logMessages(["Tried to mark a resource that has already been handled", e6], "debug") : (r5 ? (t5.logMessages(n3.__spreadArray(['"react-to-print" was unable to load a resource but will continue attempting to print the page'], n3.__read(r5), false)), t5.resourcesErrored.push(e6)) : t5.resourcesLoaded.push(e6), t5.resourcesLoaded.length + t5.resourcesErrored.length === t5.numResourcesToLoad && t5.triggerPrint(d2));
                    };
                    d2.onload = function() {
                      var e6, r5, i3, a3;
                      d2.onload = null;
                      var f3 = d2.contentDocument || (null === (r5 = d2.contentWindow) || void 0 === r5 ? void 0 : r5.document);
                      if (f3) {
                        f3.body.appendChild(h3), s2 && ((null === (i3 = d2.contentDocument) || void 0 === i3 ? void 0 : i3.fonts) && (null === (a3 = d2.contentWindow) || void 0 === a3 ? void 0 : a3.FontFace) ? s2.forEach(function(e7) {
                          var t6 = new FontFace(e7.family, e7.source, { weight: e7.weight, style: e7.style });
                          d2.contentDocument.fonts.add(t6), t6.loaded.then(function() {
                            _(t6);
                          }).catch(function(e8) {
                            _(t6, ["Failed loading the font:", t6, "Load error:", e8]);
                          });
                        }) : (s2.forEach(function(e7) {
                          return _(e7);
                        }), t5.logMessages(['"react-to-print" is not able to load custom fonts because the browser does not support the FontFace API but will continue attempting to print the page'])));
                        var b3 = "function" == typeof u2 ? u2() : u2;
                        if ("string" != typeof b3)
                          t5.logMessages(['"react-to-print" expected a "string" from `pageStyle` but received "'.concat(typeof b3, '". Styles from `pageStyle` will not be applied.')]);
                        else {
                          var m3 = f3.createElement("style");
                          l2 && (m3.setAttribute("nonce", l2), f3.head.setAttribute("nonce", l2)), m3.appendChild(f3.createTextNode(b3)), f3.head.appendChild(m3);
                        }
                        if (o3 && (e6 = f3.body.classList).add.apply(e6, n3.__spreadArray([], n3.__read(o3.split(" ")), false)), !y2) {
                          for (var w2 = y2 ? [] : p2.querySelectorAll("canvas"), P2 = f3.querySelectorAll("canvas"), O2 = 0; O2 < w2.length; ++O2) {
                            var x2 = w2[O2], S2 = P2[O2].getContext("2d");
                            S2 && S2.drawImage(x2, 0, 0);
                          }
                          var E2 = function(e7) {
                            var t6 = v2[e7], r6 = t6.getAttribute("src");
                            if (r6) {
                              var n4 = new Image();
                              n4.onload = function() {
                                return _(t6);
                              }, n4.onerror = function(e8, r7, n5, o4, i4) {
                                return _(t6, ["Error loading <img>", t6, "Error", i4]);
                              }, n4.src = r6;
                            } else
                              _(t6, ['Found an <img> tag with an empty "src" attribute. This prevents pre-loading it. The <img> is:', t6]);
                          };
                          for (O2 = 0; O2 < v2.length; O2++)
                            E2(O2);
                          var T2 = function(e7) {
                            var t6 = g2[e7];
                            t6.preload = "auto";
                            var r6 = t6.getAttribute("poster");
                            if (r6) {
                              var n4 = new Image();
                              n4.onload = function() {
                                return _(t6);
                              }, n4.onerror = function(e8, n5, o4, i4, a4) {
                                return _(t6, ["Error loading video poster", r6, "for video", t6, "Error:", a4]);
                              }, n4.src = r6;
                            } else
                              t6.readyState >= 2 ? _(t6) : (t6.onloadeddata = function() {
                                return _(t6);
                              }, t6.onerror = function(e8, r7, n5, o4, i4) {
                                return _(t6, ["Error loading video", t6, "Error", i4]);
                              }, t6.onstalled = function() {
                                return _(t6, ["Loading video stalled, skipping", t6]);
                              });
                          };
                          for (O2 = 0; O2 < g2.length; O2++)
                            T2(O2);
                          var j = "input", C2 = p2.querySelectorAll(j), A2 = f3.querySelectorAll(j);
                          for (O2 = 0; O2 < C2.length; O2++)
                            A2[O2].value = C2[O2].value;
                          var k2 = "input[type=checkbox],input[type=radio]", R2 = p2.querySelectorAll(k2), M2 = f3.querySelectorAll(k2);
                          for (O2 = 0; O2 < R2.length; O2++)
                            M2[O2].checked = R2[O2].checked;
                          var D2 = "select", I2 = p2.querySelectorAll(D2), q2 = f3.querySelectorAll(D2);
                          for (O2 = 0; O2 < I2.length; O2++)
                            q2[O2].value = I2[O2].value;
                        }
                        if (c3)
                          for (var F2 = document.querySelectorAll("style, link[rel~='stylesheet'], link[as='style']"), W2 = function(e7, r6) {
                            var n4 = F2[e7];
                            if ("style" === n4.tagName.toLowerCase()) {
                              var o4 = f3.createElement(n4.tagName), i4 = n4.sheet;
                              if (i4) {
                                var a4 = "";
                                try {
                                  for (var c4 = i4.cssRules.length, s3 = 0; s3 < c4; ++s3)
                                    "string" == typeof i4.cssRules[s3].cssText && (a4 += "".concat(i4.cssRules[s3].cssText, "\r\n"));
                                } catch (e8) {
                                  t5.logMessages(["A stylesheet could not be accessed. This is likely due to the stylesheet having cross-origin imports, and many browsers block script access to cross-origin stylesheets. See https://github.com/gregnb/react-to-print/issues/429 for details. You may be able to load the sheet by both marking the stylesheet with the cross `crossorigin` attribute, and setting the `Access-Control-Allow-Origin` header on the server serving the stylesheet. Alternatively, host the stylesheet on your domain to avoid this issue entirely.", n4], "warning");
                                }
                                o4.setAttribute("id", "react-to-print-".concat(e7)), l2 && o4.setAttribute("nonce", l2), o4.appendChild(f3.createTextNode(a4)), f3.head.appendChild(o4);
                              }
                            } else if (n4.getAttribute("href"))
                              if (n4.hasAttribute("disabled"))
                                t5.logMessages(["`react-to-print` encountered a <link> tag with a `disabled` attribute and will ignore it. Note that the `disabled` attribute is deprecated, and some browsers ignore it. You should stop using it. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-disabled. The <link> is:", n4], "warning"), _(n4);
                              else {
                                for (var u3 = f3.createElement(n4.tagName), d3 = (s3 = 0, n4.attributes.length); s3 < d3; ++s3) {
                                  var p3 = n4.attributes[s3];
                                  p3 && u3.setAttribute(p3.nodeName, p3.nodeValue || "");
                                }
                                u3.onload = function() {
                                  return _(u3);
                                }, u3.onerror = function(e8, t6, r7, n5, o5) {
                                  return _(u3, ["Failed to load", u3, "Error:", o5]);
                                }, l2 && u3.setAttribute("nonce", l2), f3.head.appendChild(u3);
                              }
                            else
                              t5.logMessages(["`react-to-print` encountered a <link> tag with an empty `href` attribute. In addition to being invalid HTML, this can cause problems in many browsers, and so the <link> was not loaded. The <link> is:", n4], "warning"), _(n4);
                          }, L2 = (O2 = 0, F2.length); O2 < L2; ++O2)
                            W2(O2);
                      }
                      0 !== t5.numResourcesToLoad && c3 || t5.triggerPrint(d2);
                    }, t5.handleRemoveIframe(true), document.body.appendChild(d2);
                  } else
                    t5.logMessages(['"react-to-print" could not locate the DOM node corresponding with the `content` prop']);
                } else
                  t5.logMessages(['There is nothing to print because the "content" prop returned "null". Please ensure "content" is renderable before allowing "react-to-print" to be called.']);
              else
                t5.logMessages(["To print a functional component ensure it is wrapped with `React.forwardRef`, and ensure the forwarded ref is used. See the README for an example: https://github.com/gregnb/react-to-print#examples"]);
            }, t5.handleRemoveIframe = function(e5) {
              var r4 = t5.props.removeAfterPrint;
              if (e5 || r4) {
                var n4 = document.getElementById("printWindow");
                n4 && document.body.removeChild(n4);
              }
            }, t5.logMessages = function(e5, r4) {
              void 0 === r4 && (r4 = "error"), t5.props.suppressErrors || ("error" === r4 ? console.error(e5) : "warning" === r4 ? console.warn(e5) : "debug" === r4 && console.debug(e5));
            }, t5;
          }
          return n3.__extends(t4, e4), t4.prototype.handleClick = function(e5, t5) {
            var r4 = this, n4 = this.props, o3 = n4.onBeforeGetContent, i3 = n4.onPrintError;
            if (o3) {
              var a2 = o3();
              a2 && "function" == typeof a2.then ? a2.then(function() {
                return r4.handlePrint(t5);
              }).catch(function(e6) {
                i3 && i3("onBeforeGetContent", e6);
              }) : this.handlePrint(t5);
            } else
              this.handlePrint(t5);
          }, t4.prototype.render = function() {
            var e5 = this.props, t5 = e5.children, r4 = e5.trigger;
            if (r4)
              return o2.cloneElement(r4(), { onClick: this.handleClick.bind(this) });
            if (!a.PrintContext)
              return this.logMessages(['"react-to-print" requires React ^16.3.0 to be able to use "PrintContext"']), null;
            var n4 = { handlePrint: this.handleClick.bind(this) };
            return o2.createElement(a.PrintContext.Provider, { value: n4 }, t5);
          }, t4.defaultProps = c2.defaultProps, t4;
        }(o2.Component);
        t3.ReactToPrint = s;
      }, 940: function(e3, t3) {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.defaultProps = void 0, t3.defaultProps = { copyStyles: true, pageStyle: "\n        @page {\n            /* Remove browser default header (title) and footer (url) */\n            margin: 0;\n        }\n        @media print {\n            body {\n                /* Tell browsers to print background colors */\n                -webkit-print-color-adjust: exact; /* Chrome/Safari/Edge/Opera */\n                color-adjust: exact; /* Firefox */\n            }\n        }\n    ", removeAfterPrint: false, suppressErrors: false };
      }, 892: function(e3, t3, r3) {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.useReactToPrint = void 0;
        var n3 = r3(316), o2 = r3(496), i2 = r3(428), a = r3(940), c2 = r3(860), s = Object.prototype.hasOwnProperty.call(o2, "useMemo") && Object.prototype.hasOwnProperty.call(o2, "useCallback");
        t3.useReactToPrint = function(e4) {
          if (!s)
            return e4.suppressErrors || console.error('"react-to-print" requires React ^16.8.0 to be able to use "useReactToPrint"'), function() {
              throw new Error('"react-to-print" requires React ^16.8.0 to be able to use "useReactToPrint"');
            };
          var t4 = o2.useMemo(function() {
            return new i2.ReactToPrint(n3.__assign(n3.__assign({}, a.defaultProps), e4));
          }, [e4]);
          return o2.useCallback(function(e5, r4) {
            return (0, c2.wrapCallbackWithArgs)(t4, t4.handleClick, r4)(e5);
          }, [t4]);
        };
      }, 860: function(e3, t3, r3) {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.wrapCallbackWithArgs = void 0;
        var n3 = r3(316);
        t3.wrapCallbackWithArgs = function(e4, t4) {
          for (var r4 = [], o2 = 2; o2 < arguments.length; o2++)
            r4[o2 - 2] = arguments[o2];
          return function() {
            for (var o3 = [], i2 = 0; i2 < arguments.length; i2++)
              o3[i2] = arguments[i2];
            return t4.apply(e4, n3.__spreadArray(n3.__spreadArray([], n3.__read(o3), false), n3.__read(r4), false));
          };
        };
      }, 496: function(t3) {
        t3.exports = e2;
      }, 190: function(e3) {
        e3.exports = t2;
      }, 316: function(e3, t3, r3) {
        r3.r(t3), r3.d(t3, { __addDisposableResource: function() {
          return D2;
        }, __assign: function() {
          return i2;
        }, __asyncDelegator: function() {
          return S2;
        }, __asyncGenerator: function() {
          return x2;
        }, __asyncValues: function() {
          return E2;
        }, __await: function() {
          return O2;
        }, __awaiter: function() {
          return h3;
        }, __classPrivateFieldGet: function() {
          return k2;
        }, __classPrivateFieldIn: function() {
          return M2;
        }, __classPrivateFieldSet: function() {
          return R2;
        }, __createBinding: function() {
          return b2;
        }, __decorate: function() {
          return c2;
        }, __disposeResources: function() {
          return q2;
        }, __esDecorate: function() {
          return u2;
        }, __exportStar: function() {
          return v2;
        }, __extends: function() {
          return o2;
        }, __generator: function() {
          return y2;
        }, __importDefault: function() {
          return A2;
        }, __importStar: function() {
          return C2;
        }, __makeTemplateObject: function() {
          return T2;
        }, __metadata: function() {
          return p2;
        }, __param: function() {
          return s;
        }, __propKey: function() {
          return f2;
        }, __read: function() {
          return m2;
        }, __rest: function() {
          return a;
        }, __runInitializers: function() {
          return l2;
        }, __setFunctionName: function() {
          return d2;
        }, __spread: function() {
          return _;
        }, __spreadArray: function() {
          return P2;
        }, __spreadArrays: function() {
          return w2;
        }, __values: function() {
          return g2;
        } });
        var n3 = function(e4, t4) {
          return n3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e5, t5) {
            e5.__proto__ = t5;
          } || function(e5, t5) {
            for (var r4 in t5)
              Object.prototype.hasOwnProperty.call(t5, r4) && (e5[r4] = t5[r4]);
          }, n3(e4, t4);
        };
        function o2(e4, t4) {
          if ("function" != typeof t4 && null !== t4)
            throw new TypeError("Class extends value " + String(t4) + " is not a constructor or null");
          function r4() {
            this.constructor = e4;
          }
          n3(e4, t4), e4.prototype = null === t4 ? Object.create(t4) : (r4.prototype = t4.prototype, new r4());
        }
        var i2 = function() {
          return i2 = Object.assign || function(e4) {
            for (var t4, r4 = 1, n4 = arguments.length; r4 < n4; r4++)
              for (var o3 in t4 = arguments[r4])
                Object.prototype.hasOwnProperty.call(t4, o3) && (e4[o3] = t4[o3]);
            return e4;
          }, i2.apply(this, arguments);
        };
        function a(e4, t4) {
          var r4 = {};
          for (var n4 in e4)
            Object.prototype.hasOwnProperty.call(e4, n4) && t4.indexOf(n4) < 0 && (r4[n4] = e4[n4]);
          if (null != e4 && "function" == typeof Object.getOwnPropertySymbols) {
            var o3 = 0;
            for (n4 = Object.getOwnPropertySymbols(e4); o3 < n4.length; o3++)
              t4.indexOf(n4[o3]) < 0 && Object.prototype.propertyIsEnumerable.call(e4, n4[o3]) && (r4[n4[o3]] = e4[n4[o3]]);
          }
          return r4;
        }
        function c2(e4, t4, r4, n4) {
          var o3, i3 = arguments.length, a2 = i3 < 3 ? t4 : null === n4 ? n4 = Object.getOwnPropertyDescriptor(t4, r4) : n4;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
            a2 = Reflect.decorate(e4, t4, r4, n4);
          else
            for (var c3 = e4.length - 1; c3 >= 0; c3--)
              (o3 = e4[c3]) && (a2 = (i3 < 3 ? o3(a2) : i3 > 3 ? o3(t4, r4, a2) : o3(t4, r4)) || a2);
          return i3 > 3 && a2 && Object.defineProperty(t4, r4, a2), a2;
        }
        function s(e4, t4) {
          return function(r4, n4) {
            t4(r4, n4, e4);
          };
        }
        function u2(e4, t4, r4, n4, o3, i3) {
          function a2(e5) {
            if (void 0 !== e5 && "function" != typeof e5)
              throw new TypeError("Function expected");
            return e5;
          }
          for (var c3, s2 = n4.kind, u3 = "getter" === s2 ? "get" : "setter" === s2 ? "set" : "value", l3 = !t4 && e4 ? n4.static ? e4 : e4.prototype : null, f3 = t4 || (l3 ? Object.getOwnPropertyDescriptor(l3, n4.name) : {}), d3 = false, p3 = r4.length - 1; p3 >= 0; p3--) {
            var h4 = {};
            for (var y3 in n4)
              h4[y3] = "access" === y3 ? {} : n4[y3];
            for (var y3 in n4.access)
              h4.access[y3] = n4.access[y3];
            h4.addInitializer = function(e5) {
              if (d3)
                throw new TypeError("Cannot add initializers after decoration has completed");
              i3.push(a2(e5 || null));
            };
            var b3 = (0, r4[p3])("accessor" === s2 ? { get: f3.get, set: f3.set } : f3[u3], h4);
            if ("accessor" === s2) {
              if (void 0 === b3)
                continue;
              if (null === b3 || "object" != typeof b3)
                throw new TypeError("Object expected");
              (c3 = a2(b3.get)) && (f3.get = c3), (c3 = a2(b3.set)) && (f3.set = c3), (c3 = a2(b3.init)) && o3.unshift(c3);
            } else
              (c3 = a2(b3)) && ("field" === s2 ? o3.unshift(c3) : f3[u3] = c3);
          }
          l3 && Object.defineProperty(l3, n4.name, f3), d3 = true;
        }
        function l2(e4, t4, r4) {
          for (var n4 = arguments.length > 2, o3 = 0; o3 < t4.length; o3++)
            r4 = n4 ? t4[o3].call(e4, r4) : t4[o3].call(e4);
          return n4 ? r4 : void 0;
        }
        function f2(e4) {
          return "symbol" == typeof e4 ? e4 : "".concat(e4);
        }
        function d2(e4, t4, r4) {
          return "symbol" == typeof t4 && (t4 = t4.description ? "[".concat(t4.description, "]") : ""), Object.defineProperty(e4, "name", { configurable: true, value: r4 ? "".concat(r4, " ", t4) : t4 });
        }
        function p2(e4, t4) {
          if ("object" == typeof Reflect && "function" == typeof Reflect.metadata)
            return Reflect.metadata(e4, t4);
        }
        function h3(e4, t4, r4, n4) {
          return new (r4 || (r4 = Promise))(function(o3, i3) {
            function a2(e5) {
              try {
                s2(n4.next(e5));
              } catch (e6) {
                i3(e6);
              }
            }
            function c3(e5) {
              try {
                s2(n4.throw(e5));
              } catch (e6) {
                i3(e6);
              }
            }
            function s2(e5) {
              var t5;
              e5.done ? o3(e5.value) : (t5 = e5.value, t5 instanceof r4 ? t5 : new r4(function(e6) {
                e6(t5);
              })).then(a2, c3);
            }
            s2((n4 = n4.apply(e4, t4 || [])).next());
          });
        }
        function y2(e4, t4) {
          var r4, n4, o3, i3, a2 = { label: 0, sent: function() {
            if (1 & o3[0])
              throw o3[1];
            return o3[1];
          }, trys: [], ops: [] };
          return i3 = { next: c3(0), throw: c3(1), return: c3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
            return this;
          }), i3;
          function c3(c4) {
            return function(s2) {
              return function(c5) {
                if (r4)
                  throw new TypeError("Generator is already executing.");
                for (; i3 && (i3 = 0, c5[0] && (a2 = 0)), a2; )
                  try {
                    if (r4 = 1, n4 && (o3 = 2 & c5[0] ? n4.return : c5[0] ? n4.throw || ((o3 = n4.return) && o3.call(n4), 0) : n4.next) && !(o3 = o3.call(n4, c5[1])).done)
                      return o3;
                    switch (n4 = 0, o3 && (c5 = [2 & c5[0], o3.value]), c5[0]) {
                      case 0:
                      case 1:
                        o3 = c5;
                        break;
                      case 4:
                        return a2.label++, { value: c5[1], done: false };
                      case 5:
                        a2.label++, n4 = c5[1], c5 = [0];
                        continue;
                      case 7:
                        c5 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!((o3 = (o3 = a2.trys).length > 0 && o3[o3.length - 1]) || 6 !== c5[0] && 2 !== c5[0])) {
                          a2 = 0;
                          continue;
                        }
                        if (3 === c5[0] && (!o3 || c5[1] > o3[0] && c5[1] < o3[3])) {
                          a2.label = c5[1];
                          break;
                        }
                        if (6 === c5[0] && a2.label < o3[1]) {
                          a2.label = o3[1], o3 = c5;
                          break;
                        }
                        if (o3 && a2.label < o3[2]) {
                          a2.label = o3[2], a2.ops.push(c5);
                          break;
                        }
                        o3[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    c5 = t4.call(e4, a2);
                  } catch (e5) {
                    c5 = [6, e5], n4 = 0;
                  } finally {
                    r4 = o3 = 0;
                  }
                if (5 & c5[0])
                  throw c5[1];
                return { value: c5[0] ? c5[1] : void 0, done: true };
              }([c4, s2]);
            };
          }
        }
        var b2 = Object.create ? function(e4, t4, r4, n4) {
          void 0 === n4 && (n4 = r4);
          var o3 = Object.getOwnPropertyDescriptor(t4, r4);
          o3 && !("get" in o3 ? !t4.__esModule : o3.writable || o3.configurable) || (o3 = { enumerable: true, get: function() {
            return t4[r4];
          } }), Object.defineProperty(e4, n4, o3);
        } : function(e4, t4, r4, n4) {
          void 0 === n4 && (n4 = r4), e4[n4] = t4[r4];
        };
        function v2(e4, t4) {
          for (var r4 in e4)
            "default" === r4 || Object.prototype.hasOwnProperty.call(t4, r4) || b2(t4, e4, r4);
        }
        function g2(e4) {
          var t4 = "function" == typeof Symbol && Symbol.iterator, r4 = t4 && e4[t4], n4 = 0;
          if (r4)
            return r4.call(e4);
          if (e4 && "number" == typeof e4.length)
            return { next: function() {
              return e4 && n4 >= e4.length && (e4 = void 0), { value: e4 && e4[n4++], done: !e4 };
            } };
          throw new TypeError(t4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }
        function m2(e4, t4) {
          var r4 = "function" == typeof Symbol && e4[Symbol.iterator];
          if (!r4)
            return e4;
          var n4, o3, i3 = r4.call(e4), a2 = [];
          try {
            for (; (void 0 === t4 || t4-- > 0) && !(n4 = i3.next()).done; )
              a2.push(n4.value);
          } catch (e5) {
            o3 = { error: e5 };
          } finally {
            try {
              n4 && !n4.done && (r4 = i3.return) && r4.call(i3);
            } finally {
              if (o3)
                throw o3.error;
            }
          }
          return a2;
        }
        function _() {
          for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
            e4 = e4.concat(m2(arguments[t4]));
          return e4;
        }
        function w2() {
          for (var e4 = 0, t4 = 0, r4 = arguments.length; t4 < r4; t4++)
            e4 += arguments[t4].length;
          var n4 = Array(e4), o3 = 0;
          for (t4 = 0; t4 < r4; t4++)
            for (var i3 = arguments[t4], a2 = 0, c3 = i3.length; a2 < c3; a2++, o3++)
              n4[o3] = i3[a2];
          return n4;
        }
        function P2(e4, t4, r4) {
          if (r4 || 2 === arguments.length)
            for (var n4, o3 = 0, i3 = t4.length; o3 < i3; o3++)
              !n4 && o3 in t4 || (n4 || (n4 = Array.prototype.slice.call(t4, 0, o3)), n4[o3] = t4[o3]);
          return e4.concat(n4 || Array.prototype.slice.call(t4));
        }
        function O2(e4) {
          return this instanceof O2 ? (this.v = e4, this) : new O2(e4);
        }
        function x2(e4, t4, r4) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var n4, o3 = r4.apply(e4, t4 || []), i3 = [];
          return n4 = {}, a2("next"), a2("throw"), a2("return"), n4[Symbol.asyncIterator] = function() {
            return this;
          }, n4;
          function a2(e5) {
            o3[e5] && (n4[e5] = function(t5) {
              return new Promise(function(r5, n5) {
                i3.push([e5, t5, r5, n5]) > 1 || c3(e5, t5);
              });
            });
          }
          function c3(e5, t5) {
            try {
              (r5 = o3[e5](t5)).value instanceof O2 ? Promise.resolve(r5.value.v).then(s2, u3) : l3(i3[0][2], r5);
            } catch (e6) {
              l3(i3[0][3], e6);
            }
            var r5;
          }
          function s2(e5) {
            c3("next", e5);
          }
          function u3(e5) {
            c3("throw", e5);
          }
          function l3(e5, t5) {
            e5(t5), i3.shift(), i3.length && c3(i3[0][0], i3[0][1]);
          }
        }
        function S2(e4) {
          var t4, r4;
          return t4 = {}, n4("next"), n4("throw", function(e5) {
            throw e5;
          }), n4("return"), t4[Symbol.iterator] = function() {
            return this;
          }, t4;
          function n4(n5, o3) {
            t4[n5] = e4[n5] ? function(t5) {
              return (r4 = !r4) ? { value: O2(e4[n5](t5)), done: false } : o3 ? o3(t5) : t5;
            } : o3;
          }
        }
        function E2(e4) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var t4, r4 = e4[Symbol.asyncIterator];
          return r4 ? r4.call(e4) : (e4 = g2(e4), t4 = {}, n4("next"), n4("throw"), n4("return"), t4[Symbol.asyncIterator] = function() {
            return this;
          }, t4);
          function n4(r5) {
            t4[r5] = e4[r5] && function(t5) {
              return new Promise(function(n5, o3) {
                !function(e5, t6, r6, n6) {
                  Promise.resolve(n6).then(function(t7) {
                    e5({ value: t7, done: r6 });
                  }, t6);
                }(n5, o3, (t5 = e4[r5](t5)).done, t5.value);
              });
            };
          }
        }
        function T2(e4, t4) {
          return Object.defineProperty ? Object.defineProperty(e4, "raw", { value: t4 }) : e4.raw = t4, e4;
        }
        var j = Object.create ? function(e4, t4) {
          Object.defineProperty(e4, "default", { enumerable: true, value: t4 });
        } : function(e4, t4) {
          e4.default = t4;
        };
        function C2(e4) {
          if (e4 && e4.__esModule)
            return e4;
          var t4 = {};
          if (null != e4)
            for (var r4 in e4)
              "default" !== r4 && Object.prototype.hasOwnProperty.call(e4, r4) && b2(t4, e4, r4);
          return j(t4, e4), t4;
        }
        function A2(e4) {
          return e4 && e4.__esModule ? e4 : { default: e4 };
        }
        function k2(e4, t4, r4, n4) {
          if ("a" === r4 && !n4)
            throw new TypeError("Private accessor was defined without a getter");
          if ("function" == typeof t4 ? e4 !== t4 || !n4 : !t4.has(e4))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return "m" === r4 ? n4 : "a" === r4 ? n4.call(e4) : n4 ? n4.value : t4.get(e4);
        }
        function R2(e4, t4, r4, n4, o3) {
          if ("m" === n4)
            throw new TypeError("Private method is not writable");
          if ("a" === n4 && !o3)
            throw new TypeError("Private accessor was defined without a setter");
          if ("function" == typeof t4 ? e4 !== t4 || !o3 : !t4.has(e4))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return "a" === n4 ? o3.call(e4, r4) : o3 ? o3.value = r4 : t4.set(e4, r4), r4;
        }
        function M2(e4, t4) {
          if (null === t4 || "object" != typeof t4 && "function" != typeof t4)
            throw new TypeError("Cannot use 'in' operator on non-object");
          return "function" == typeof e4 ? t4 === e4 : e4.has(t4);
        }
        function D2(e4, t4, r4) {
          if (null != t4) {
            if ("object" != typeof t4 && "function" != typeof t4)
              throw new TypeError("Object expected.");
            var n4;
            if (r4) {
              if (!Symbol.asyncDispose)
                throw new TypeError("Symbol.asyncDispose is not defined.");
              n4 = t4[Symbol.asyncDispose];
            }
            if (void 0 === n4) {
              if (!Symbol.dispose)
                throw new TypeError("Symbol.dispose is not defined.");
              n4 = t4[Symbol.dispose];
            }
            if ("function" != typeof n4)
              throw new TypeError("Object not disposable.");
            e4.stack.push({ value: t4, dispose: n4, async: r4 });
          } else
            r4 && e4.stack.push({ async: true });
          return t4;
        }
        var I2 = "function" == typeof SuppressedError ? SuppressedError : function(e4, t4, r4) {
          var n4 = new Error(r4);
          return n4.name = "SuppressedError", n4.error = e4, n4.suppressed = t4, n4;
        };
        function q2(e4) {
          function t4(t5) {
            e4.error = e4.hasError ? new I2(t5, e4.error, "An error was suppressed during disposal.") : t5, e4.hasError = true;
          }
          return function r4() {
            for (; e4.stack.length; ) {
              var n4 = e4.stack.pop();
              try {
                var o3 = n4.dispose && n4.dispose.call(n4.value);
                if (n4.async)
                  return Promise.resolve(o3).then(r4, function(e5) {
                    return t4(e5), r4();
                  });
              } catch (e5) {
                t4(e5);
              }
            }
            if (e4.hasError)
              throw e4.error;
          }();
        }
        t3.default = { __extends: o2, __assign: i2, __rest: a, __decorate: c2, __param: s, __metadata: p2, __awaiter: h3, __generator: y2, __createBinding: b2, __exportStar: v2, __values: g2, __read: m2, __spread: _, __spreadArrays: w2, __spreadArray: P2, __await: O2, __asyncGenerator: x2, __asyncDelegator: S2, __asyncValues: E2, __makeTemplateObject: T2, __importStar: C2, __importDefault: A2, __classPrivateFieldGet: k2, __classPrivateFieldSet: R2, __classPrivateFieldIn: M2, __addDisposableResource: D2, __disposeResources: q2 };
      } }, n2 = {};
      function o(e3) {
        var t3 = n2[e3];
        if (void 0 !== t3)
          return t3.exports;
        var i2 = n2[e3] = { exports: {} };
        return r2[e3](i2, i2.exports, o), i2.exports;
      }
      o.d = function(e3, t3) {
        for (var r3 in t3)
          o.o(t3, r3) && !o.o(e3, r3) && Object.defineProperty(e3, r3, { enumerable: true, get: t3[r3] });
      }, o.o = function(e3, t3) {
        return Object.prototype.hasOwnProperty.call(e3, t3);
      }, o.r = function(e3) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
      };
      var i = {};
      return function() {
        var e3 = i;
        Object.defineProperty(e3, "__esModule", { value: true }), e3.useReactToPrint = e3.ReactToPrint = e3.PrintContextConsumer = void 0;
        var t3 = o(328);
        Object.defineProperty(e3, "PrintContextConsumer", { enumerable: true, get: function() {
          return t3.PrintContextConsumer;
        } });
        var r3 = o(428);
        Object.defineProperty(e3, "ReactToPrint", { enumerable: true, get: function() {
          return r3.ReactToPrint;
        } });
        var n3 = o(892);
        Object.defineProperty(e3, "useReactToPrint", { enumerable: true, get: function() {
          return n3.useReactToPrint;
        } });
        var a = o(428);
        e3.default = a.ReactToPrint;
      }(), i;
    }();
  });
})(lib);
var libExports = lib.exports;
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */
function round(v2) {
  return v2 + 0.5 | 0;
}
const lim = (v2, l2, h3) => Math.max(Math.min(v2, h3), l2);
function p2b(v2) {
  return lim(round(v2 * 2.55), 0, 255);
}
function n2b(v2) {
  return lim(round(v2 * 255), 0, 255);
}
function b2n(v2) {
  return lim(round(v2 / 2.55) / 100, 0, 1);
}
function n2p(v2) {
  return lim(round(v2 * 100), 0, 100);
}
const map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
const hex = [..."0123456789ABCDEF"];
const h1 = (b2) => hex[b2 & 15];
const h2 = (b2) => hex[(b2 & 240) >> 4] + hex[b2 & 15];
const eq = (b2) => (b2 & 240) >> 4 === (b2 & 15);
const isShort = (v2) => eq(v2.r) && eq(v2.g) && eq(v2.b) && eq(v2.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
const alpha = (a, f2) => a < 255 ? f2(a) : "";
function hexString(v2) {
  var f2 = isShort(v2) ? h1 : h2;
  return v2 ? "#" + f2(v2.r) + f2(v2.g) + f2(v2.b) + alpha(v2.a, f2) : void 0;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h3, s, l2) {
  const a = s * Math.min(l2, 1 - l2);
  const f2 = (n2, k2 = (n2 + h3 / 30) % 12) => l2 - a * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
  return [f2(0), f2(8), f2(4)];
}
function hsv2rgbn(h3, s, v2) {
  const f2 = (n2, k2 = (n2 + h3 / 60) % 6) => v2 - v2 * s * Math.max(Math.min(k2, 4 - k2, 1), 0);
  return [f2(5), f2(3), f2(1)];
}
function hwb2rgbn(h3, w2, b2) {
  const rgb = hsl2rgbn(h3, 1, 0.5);
  let i;
  if (w2 + b2 > 1) {
    i = 1 / (w2 + b2);
    w2 *= i;
    b2 *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w2 - b2;
    rgb[i] += w2;
  }
  return rgb;
}
function hueValue(r2, g2, b2, d2, max) {
  if (r2 === max) {
    return (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
  }
  if (g2 === max) {
    return (b2 - r2) / d2 + 2;
  }
  return (r2 - g2) / d2 + 4;
}
function rgb2hsl(v2) {
  const range2 = 255;
  const r2 = v2.r / range2;
  const g2 = v2.g / range2;
  const b2 = v2.b / range2;
  const max = Math.max(r2, g2, b2);
  const min = Math.min(r2, g2, b2);
  const l2 = (max + min) / 2;
  let h3, s, d2;
  if (max !== min) {
    d2 = max - min;
    s = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
    h3 = hueValue(r2, g2, b2, d2, max);
    h3 = h3 * 60 + 0.5;
  }
  return [h3 | 0, s || 0, l2];
}
function calln(f2, a, b2, c2) {
  return (Array.isArray(a) ? f2(a[0], a[1], a[2]) : f2(a, b2, c2)).map(n2b);
}
function hsl2rgb(h3, s, l2) {
  return calln(hsl2rgbn, h3, s, l2);
}
function hwb2rgb(h3, w2, b2) {
  return calln(hwb2rgbn, h3, w2, b2);
}
function hsv2rgb(h3, s, v2) {
  return calln(hsv2rgbn, h3, s, v2);
}
function hue(h3) {
  return (h3 % 360 + 360) % 360;
}
function hueParse(str) {
  const m2 = HUE_RE.exec(str);
  let a = 255;
  let v2;
  if (!m2) {
    return;
  }
  if (m2[5] !== v2) {
    a = m2[6] ? p2b(+m2[5]) : n2b(+m2[5]);
  }
  const h3 = hue(+m2[2]);
  const p1 = +m2[3] / 100;
  const p2 = +m2[4] / 100;
  if (m2[1] === "hwb") {
    v2 = hwb2rgb(h3, p1, p2);
  } else if (m2[1] === "hsv") {
    v2 = hsv2rgb(h3, p1, p2);
  } else {
    v2 = hsl2rgb(h3, p1, p2);
  }
  return {
    r: v2[0],
    g: v2[1],
    b: v2[2],
    a
  };
}
function rotate(v2, deg) {
  var h3 = rgb2hsl(v2);
  h3[0] = hue(h3[0] + deg);
  h3 = hsl2rgb(h3);
  v2.r = h3[0];
  v2.g = h3[1];
  v2.b = h3[2];
}
function hslString(v2) {
  if (!v2) {
    return;
  }
  const a = rgb2hsl(v2);
  const h3 = a[0];
  const s = n2p(a[1]);
  const l2 = n2p(a[2]);
  return v2.a < 255 ? `hsla(${h3}, ${s}%, ${l2}%, ${b2n(v2.a)})` : `hsl(${h3}, ${s}%, ${l2}%)`;
}
const map$2 = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
const names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys2 = Object.keys(names$1);
  const tkeys = Object.keys(map$2);
  let i, j, k2, ok2, nk2;
  for (i = 0; i < keys2.length; i++) {
    ok2 = nk2 = keys2[i];
    for (j = 0; j < tkeys.length; j++) {
      k2 = tkeys[j];
      nk2 = nk2.replace(k2, map$2[k2]);
    }
    k2 = parseInt(names$1[ok2], 16);
    unpacked[nk2] = [k2 >> 16 & 255, k2 >> 8 & 255, k2 & 255];
  }
  return unpacked;
}
let names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a = names[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m2 = RGB_RE.exec(str);
  let a = 255;
  let r2, g2, b2;
  if (!m2) {
    return;
  }
  if (m2[7] !== r2) {
    const v2 = +m2[7];
    a = m2[8] ? p2b(v2) : lim(v2 * 255, 0, 255);
  }
  r2 = +m2[1];
  g2 = +m2[3];
  b2 = +m2[5];
  r2 = 255 & (m2[2] ? p2b(r2) : lim(r2, 0, 255));
  g2 = 255 & (m2[4] ? p2b(g2) : lim(g2, 0, 255));
  b2 = 255 & (m2[6] ? p2b(b2) : lim(b2, 0, 255));
  return {
    r: r2,
    g: g2,
    b: b2,
    a
  };
}
function rgbString(v2) {
  return v2 && (v2.a < 255 ? `rgba(${v2.r}, ${v2.g}, ${v2.b}, ${b2n(v2.a)})` : `rgb(${v2.r}, ${v2.g}, ${v2.b})`);
}
const to = (v2) => v2 <= 31308e-7 ? v2 * 12.92 : Math.pow(v2, 1 / 2.4) * 1.055 - 0.055;
const from = (v2) => v2 <= 0.04045 ? v2 / 12.92 : Math.pow((v2 + 0.055) / 1.055, 2.4);
function interpolate$1(rgb1, rgb2, t2) {
  const r2 = from(b2n(rgb1.r));
  const g2 = from(b2n(rgb1.g));
  const b2 = from(b2n(rgb1.b));
  return {
    r: n2b(to(r2 + t2 * (from(b2n(rgb2.r)) - r2))),
    g: n2b(to(g2 + t2 * (from(b2n(rgb2.g)) - g2))),
    b: n2b(to(b2 + t2 * (from(b2n(rgb2.b)) - b2))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v2, i, ratio) {
  if (v2) {
    let tmp = rgb2hsl(v2);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v2.r = tmp[0];
    v2.g = tmp[1];
    v2.b = tmp[2];
  }
}
function clone$1(v2, proto) {
  return v2 ? Object.assign(proto || {}, v2) : v2;
}
function fromObject(input) {
  var v2 = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v2 = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v2.a = n2b(input[3]);
      }
    }
  } else {
    v2 = clone$1(input, { r: 0, g: 0, b: 0, a: 1 });
    v2.a = n2b(v2.a);
  }
  return v2;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
class Color {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v2;
    if (type === "object") {
      v2 = fromObject(input);
    } else if (type === "string") {
      v2 = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v2;
    this._valid = !!v2;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v2 = clone$1(this._rgb);
    if (v2) {
      v2.a = b2n(v2.a);
    }
    return v2;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p2 = weight === w2 ? 0.5 : weight;
      const w3 = 2 * p2 - 1;
      const a = c1.a - c2.a;
      const w1 = ((w3 * a === -1 ? w3 : (w3 + a) / (1 + w3 * a)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p2 * c1.a + (1 - p2) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate$1(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v2 = this._rgb;
    v2.r = 255 - v2.r;
    v2.g = 255 - v2.g;
    v2.b = 255 - v2.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
}
/*!
 * Chart.js v4.4.2
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */
function noop() {
}
const uid = /* @__PURE__ */ (() => {
  let id2 = 0;
  return () => id2++;
})();
function isNullOrUndef(value) {
  return value === null || typeof value === "undefined";
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i, len, keys2;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys2 = Object.keys(loopable);
    len = keys2.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys2[i]], keys2[i]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone(source) {
  if (isArray(source)) {
    return source.map(clone);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys2 = Object.keys(source);
    const klen = keys2.length;
    let k2 = 0;
    for (; k2 < klen; ++k2) {
      target[keys2[k2]] = clone(source[keys2[k2]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  let current;
  for (let i = 0; i < ilen; ++i) {
    current = sources[i];
    if (!isObject(current)) {
      continue;
    }
    const keys2 = Object.keys(current);
    for (let k2 = 0, klen = keys2.length; k2 < klen; ++k2) {
      merger(keys2[k2], target, current, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone(sval);
  }
}
const keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v2) => v2,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys2 = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys2.push(tmp);
      tmp = "";
    }
  }
  return keys2;
}
function _getKeyResolver(key) {
  const keys2 = _splitKey(key);
  return (obj) => {
    for (const k2 of keys2) {
      if (k2 === "") {
        break;
      }
      obj = obj && obj[k2];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== "undefined";
const isFunction = (value) => typeof value === "function";
const setsEqual = (a, b2) => {
  if (a.size !== b2.size) {
    return false;
  }
  for (const item of a) {
    if (!b2.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e2) {
  return e2.type === "mouseup" || e2.type === "click" || e2.type === "contextmenu";
}
const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x2, y2, epsilon) {
  return Math.abs(x2 - y2) < epsilon;
}
function niceNum(range2) {
  const roundedRange = Math.round(range2);
  range2 = almostEquals(range2, roundedRange, range2 / 1e3) ? roundedRange : range2;
  const niceRange = Math.pow(10, Math.floor(log10(range2)));
  const fraction = range2 / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a, b2) => a - b2).pop();
  return result;
}
function isNumber(n2) {
  return !isNaN(parseFloat(n2)) && isFinite(n2);
}
function almostWhole(x2, epsilon) {
  const rounded = Math.round(x2);
  return rounded - epsilon <= x2 && rounded + epsilon >= x2;
}
function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees2) {
  return degrees2 * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x2) {
  if (!isNumberFinite(x2)) {
    return;
  }
  let e2 = 1;
  let p2 = 0;
  while (Math.round(x2 * e2) / e2 !== x2) {
    e2 *= 10;
    p2++;
  }
  return p2;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b2) {
  return (a - b2 + PITAU) % TAU - PI;
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);
  const s = _normalizeAngle(start);
  const e2 = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s - a);
  const angleToEnd = _normalizeAngle(e2 - a);
  const startToAngle = _normalizeAngle(a - s);
  const endToAngle = _normalizeAngle(a - e2);
  return a === s || a === e2 || sameAngleIsFullCircle && s === e2 || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index2) => table[index2] < value);
  let hi2 = table.length - 1;
  let lo = 0;
  let mid;
  while (hi2 - lo > 1) {
    mid = lo + hi2 >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi2 = mid;
    }
  }
  return {
    lo,
    hi: hi2
  };
}
const _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index2) => {
  const ti2 = table[index2][key];
  return ti2 < value || ti2 === value && table[index2 + 1][key] === value;
} : (index2) => table[index2][key] < value);
const _rlookupByKey = (table, key, value) => _lookup(table, value, (index2) => table[index2][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index2 = listeners.indexOf(listener);
  if (index2 !== -1) {
    listeners.splice(index2, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = new Set(items);
  if (set2.size === items.length) {
    return items;
  }
  return Array.from(set2);
}
const requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay2) {
  let timeout;
  return function(...args) {
    if (delay2) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay2, args);
    } else {
      fn.apply(this, args);
    }
    return delay2;
  };
}
const _toLeftRightCenter = (align2) => align2 === "start" ? "left" : align2 === "end" ? "right" : "center";
const _alignStartEnd = (align2, start, end) => align2 === "start" ? start : align2 === "end" ? end : (start + end) / 2;
const _textX = (align2, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align2 === check ? right : align2 === "center" ? (left + right) / 2 : left;
};
function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const { iScale, _parsed } = meta;
    const axis = iScale.axis;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) {
      start = _limitValue(Math.min(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, axis, min).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo
      ), 0, pointCount - 1);
    }
    if (maxDefined) {
      count = _limitValue(Math.max(
        // @ts-expect-error Need to type _parsed
        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1
      ), start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {
    start,
    count
  };
}
function _scaleRangesChanged(meta) {
  const { xScale, yScale, _scaleRanges } = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}
const atEdge = (t2) => t2 === 0 || t2 === 1;
const elasticIn = (t2, s, p2) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s) * TAU / p2));
const elasticOut = (t2, s, p2) => Math.pow(2, -10 * t2) * Math.sin((t2 - s) * TAU / p2) + 1;
const effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s = 0.1125;
    const p2 = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s, p2) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s, p2);
  },
  easeInBack(t2) {
    const s = 1.70158;
    return t2 * t2 * ((s + 1) * t2 - s);
  },
  easeOutBack(t2) {
    const s = 1.70158;
    return (t2 -= 1) * t2 * ((s + 1) * t2 + s) + 1;
  },
  easeInOutBack(t2) {
    let s = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s *= 1.525) + 1) * t2 - s));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s *= 1.525) + 1) * t2 + s) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m2 = 7.5625;
    const d2 = 2.75;
    if (t2 < 1 / d2) {
      return m2 * t2 * t2;
    }
    if (t2 < 2 / d2) {
      return m2 * (t2 -= 1.5 / d2) * t2 + 0.75;
    }
    if (t2 < 2.5 / d2) {
      return m2 * (t2 -= 2.25 / d2) * t2 + 0.9375;
    }
    return m2 * (t2 -= 2.625 / d2) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
const colors = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name) => name !== "onProgress" && name !== "onComplete" && name !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v2) => v2 | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
const intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale, options) {
  options = options || {};
  const cacheKey = locale + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale, options) {
  return getNumberFormat(locale, options).format(num);
}
const formatters = {
  values(value) {
    return isArray(value) ? value : "" + value;
  },
  numeric(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return formatNumber(tickValue, locale, options);
  },
  logarithmic(tickValue, index2, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const remain = ticks[index2].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
    if ([
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(remain) || index2 > 0.8 * ticks.length) {
      return formatters.numeric.call(this, tickValue, index2, ticks);
    }
    return "";
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    clip: true,
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name) => !name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
    _indexable: (name) => name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name) => name !== "backdropPadding" && name !== "callback",
    _indexable: (name) => name !== "backdropPadding"
  });
}
const overrides = /* @__PURE__ */ Object.create(null);
const descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node2, key) {
  if (!key) {
    return node2;
  }
  const keys2 = key.split(".");
  for (let i = 0, n2 = keys2.length; i < n2; ++i) {
    const k2 = keys2[i];
    node2 = node2[k2] || (node2[k2] = /* @__PURE__ */ Object.create(null));
  }
  return node2;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
class Defaults {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context2) => context2.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
}
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name) => !name.startsWith("on"),
  _indexable: (name) => name !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc2, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc2.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc2 = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc2 = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i, j, jlen, thing, nestedThing;
  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];
    if (thing !== void 0 && thing !== null && !isArray(thing)) {
      longest = _measureText(ctx, data, gc2, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc2, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc2.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc2[i]];
    }
    gc2.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x2, y2) {
  drawPointLegend(ctx, options, x2, y2, null);
}
function drawPointLegend(ctx, options, x2, y2, w2) {
  let type, xOffset, yOffset, size2, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x2, y2);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w2) {
        ctx.ellipse(x2, y2, w2 / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x2, y2, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w2 ? w2 / 2 : radius;
      ctx.moveTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x2 + Math.sin(rad) * width, y2 - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size2 = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size2;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size2);
      yOffset = Math.sin(rad + QUARTER_PI) * size2;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w2 ? w2 / 2 - cornerRadius : size2);
      ctx.arc(x2 - xOffsetW, y2 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x2 + yOffsetW, y2 - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x2 + xOffsetW, y2 + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x2 - yOffsetW, y2 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size2 = Math.SQRT1_2 * radius;
        width = w2 ? w2 / 2 : size2;
        ctx.rect(x2 - width, y2 - size2, 2 * width, 2 * size2);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w2 ? w2 / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w2 ? w2 / 2 : radius);
      ctx.moveTo(x2 - xOffsetW, y2 - yOffset);
      ctx.lineTo(x2 + xOffsetW, y2 + yOffset);
      ctx.moveTo(x2 + yOffsetW, y2 - xOffset);
      ctx.lineTo(x2 - yOffsetW, y2 + xOffset);
      break;
    case "line":
      xOffset = w2 ? w2 / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x2 - xOffset, y2 - yOffset);
      ctx.lineTo(x2 + xOffset, y2 + yOffset);
      break;
    case "dash":
      ctx.moveTo(x2, y2);
      ctx.lineTo(x2 + Math.cos(rad) * (w2 ? w2 / 2 : radius), y2 + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode2) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode2 === "middle") {
    const midpoint = (previous.x + target.x) / 2;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode2 === "after" !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x2, y2, line2, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line2);
    const left = x2 - metrics.actualBoundingBoxLeft;
    const right = x2 + metrics.actualBoundingBoxRight;
    const top = y2 - metrics.actualBoundingBoxAscent;
    const bottom = y2 + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function renderText(ctx, text, x2, y2, font, opts = {}) {
  const lines = isArray(text) ? text : [
    text
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i, line2;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i = 0; i < lines.length; ++i) {
    line2 = lines[i];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line2, x2, y2, opts.maxWidth);
    }
    ctx.fillText(line2, x2, y2, opts.maxWidth);
    decorateText(ctx, x2, y2, line2, opts);
    y2 += Number(font.lineHeight);
  }
  ctx.restore();
}
function addRoundedRectPath(ctx, rect) {
  const { x: x2, y: y2, w: w2, h: h3, radius } = rect;
  ctx.arc(x2 + radius.topLeft, y2 + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
  ctx.lineTo(x2, y2 + h3 - radius.bottomLeft);
  ctx.arc(x2 + radius.bottomLeft, y2 + h3 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x2 + w2 - radius.bottomRight, y2 + h3);
  ctx.arc(x2 + w2 - radius.bottomRight, y2 + h3 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x2 + w2, y2 + radius.topRight);
  ctx.arc(x2 + w2 - radius.topRight, y2 + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x2 + radius.topLeft, y2);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size2) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size2 * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size2 * value;
}
const numberOrZero = (v2) => +v2 || 0;
function _readValueToProps(value, props2) {
  const ret = {};
  const objProps = isObject(props2);
  const keys2 = objProps ? Object.keys(props2) : props2;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props2[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys2) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size2 = valueOrDefault(options.size, fallback.size);
  if (typeof size2 === "string") {
    size2 = parseInt(size2, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size2),
    size: size2,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context2, index2, info) {
  let cacheable = true;
  let i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === void 0) {
      continue;
    }
    if (context2 !== void 0 && typeof value === "function") {
      value = value(context2);
      cacheable = false;
    }
    if (index2 !== void 0 && isArray(value)) {
      value = value[index2 % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min, max } = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add2) => beginAtZero && value === 0 ? 0 : value + add2;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context2) {
  return Object.assign(Object.create(parentContext), context2);
}
function _createResolver(scopes, prefixes = [
  ""
], rootScopes, fallback, getTarget = () => scopes[0]) {
  const finalRootScopes = rootScopes || scopes;
  if (typeof fallback === "undefined") {
    fallback = _resolve("_fallback", scopes);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: finalRootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes
    ], prefixes, finalRootScopes, fallback)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context2, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context2,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context2, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    /**
    * A trap for getting property values.
    */
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    /**
    * A trap for the in operator.
    */
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    /**
    * A trap for setting property values.
    */
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix2, name) => prefix2 ? prefix2 + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop)) {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  let value = getValue(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (typeof _context.index !== "undefined" && isIndexable(prop)) {
    return value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter((s) => s !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (typeof fallback !== "undefined" && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix2 of prefixes) {
    value = _resolve(readKey(prefix2, prop), scopes);
    if (typeof value !== "undefined") {
      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (typeof value !== "undefined") {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys2 = target._keys;
  if (!keys2) {
    keys2 = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys2;
}
function resolveKeysFromAllScopes(scopes) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter((k2) => !k2.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
  const { iScale } = meta;
  const { key = "r" } = this._parsing;
  const parsed = new Array(count);
  let i, ilen, index2, item;
  for (i = 0, ilen = count; i < ilen; ++i) {
    index2 = i + start;
    item = data[index2];
    parsed[i] = {
      r: iScale.parse(resolveObjectKey(item, key), index2)
    };
  }
  return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis) => indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t2) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next2 = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next2, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa2 = t2 * s01;
  const fb2 = t2 * s12;
  return {
    previous: {
      x: current.x - fa2 * (next2.x - previous.x),
      y: current.y - fa2 * (next2.y - previous.y)
    },
    next: {
      x: current.x + fb2 * (next2.x - previous.x),
      y: current.y + fb2 * (next2.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i], 0, EPSILON)) {
      mK[i] = mK[i + 1] = 0;
      continue;
    }
    alphaK = mK[i] / deltaK[i];
    betaK = mK[i + 1] / deltaK[i];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i] = alphaK * tauK * deltaK[i];
    mK[i + 1] = betaK * tauK * deltaK[i];
  }
}
function monotoneCompute(points, mK, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
    }
  }
}
function splineCurveMonotone(points, indexAxis = "x") {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i = 0, ilen = points.length; i < ilen; ++i) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === "monotone") {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev2 = loop ? points[points.length - 1] : points[0];
    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(prev2, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev2 = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node2, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node2.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle$1 = (element) => element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el2, property) {
  return getComputedStyle$1(el2).getPropertyValue(property);
}
const positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles2, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles2[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x2, y2, target) => (x2 > 0 || y2 > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e2, canvas) {
  const touches = e2.touches;
  const source = touches && touches.length ? touches[0] : e2;
  const { offsetX, offsetY } = source;
  let box = false;
  let x2, y2;
  if (useOffsetPos(offsetX, offsetY, e2.target)) {
    x2 = offsetX;
    y2 = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x2 = source.clientX - rect.left;
    y2 = source.clientY - rect.top;
    box = true;
  }
  return {
    x: x2,
    y: y2,
    box
  };
}
function getRelativePosition(event2, chart) {
  if ("native" in event2) {
    return event2;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle$1(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders2 = getPositionedStyle(style, "border", "width");
  const { x: x2, y: y2, box } = getCanvasPosition(event2, canvas);
  const xOffset = paddings.left + (box && borders2.left);
  const yOffset = paddings.top + (box && borders2.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders2.width;
    height -= paddings.height + borders2.height;
  }
  return {
    x: Math.round((x2 - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y2 - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container2 = _getParentNode(canvas);
    if (!container2) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container2.getBoundingClientRect();
      const containerStyle = getComputedStyle$1(container2);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container2, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container2, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = (v2) => Math.round(v2 * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio2) {
  const style = getComputedStyle$1(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders2 = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders2.width;
    height -= paddings.height + borders2.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio2 ? width / aspectRatio2 : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio2 && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio2));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = function() {
  let passiveSupported2 = false;
  try {
    const options = {
      get passive() {
        passiveSupported2 = true;
        return false;
      }
    };
    if (_isDomSupported()) {
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    }
  } catch (e2) {
  }
  return passiveSupported2;
}();
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
function _pointInLine(p1, p2, t2, mode2) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: p1.y + t2 * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t2, mode2) {
  return {
    x: p1.x + t2 * (p2.x - p1.x),
    y: mode2 === "middle" ? t2 < 0.5 ? p1.y : p2.y : mode2 === "after" ? t2 < 1 ? p1.y : p2.y : t2 > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t2, mode2) {
  const cp1 = {
    x: p1.cp2x,
    y: p1.cp2y
  };
  const cp2 = {
    x: p2.cp1x,
    y: p2.cp1y
  };
  const a = _pointInLine(p1, cp1, t2);
  const b2 = _pointInLine(cp1, cp2, t2);
  const c2 = _pointInLine(cp2, p2, t2);
  const d2 = _pointInLine(a, b2, t2);
  const e2 = _pointInLine(b2, c2, t2);
  return _pointInLine(d2, e2, t2);
}
const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x2) {
      return rectX + rectX + width - x2;
    },
    setWidth(w2) {
      width = w2;
    },
    textAlign(align2) {
      if (align2 === "center") {
        return align2;
      }
      return align2 === "right" ? "left" : "right";
    },
    xPlus(x2, value) {
      return x2 - value;
    },
    leftForLtr(x2, itemWidth) {
      return x2 - itemWidth;
    }
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x2) {
      return x2;
    },
    setWidth(w2) {
    },
    textAlign(align2) {
      return align2;
    },
    xPlus(x2, value) {
      return x2 + value;
    },
    leftForLtr(x2, _itemWidth) {
      return x2;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction2) {
  let style, original;
  if (direction2 === "ltr" || direction2 === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction2, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}
function propertyFn(property) {
  if (property === "angle") {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle
    };
  }
  return {
    between: _isBetween,
    compare: (a, b2) => a - b2,
    normalize: (x2) => x2
  };
}
function normalizeSegment({ start, end, count, loop, style }) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const { property, start: startBound, end: endBound } = bounds;
  const { between, normalize: normalize3 } = propertyFn(property);
  const count = points.length;
  let { start, end, loop } = segment;
  let i, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between(normalize3(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {
    start,
    end,
    loop,
    style: segment.style
  };
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [
      segment
    ];
  }
  const { property, start: startBound, end: endBound } = bounds;
  const count = points.length;
  const { compare, between, normalize: normalize3 } = propertyFn(property);
  const { start, end, loop, style } = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i = start, prev2 = start; i <= end; ++i) {
    point = points[i % count];
    if (point.skip) {
      continue;
    }
    value = normalize3(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i : prev2;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({
        start: subStart,
        end: i,
        loop,
        count,
        style
      }));
      subStart = null;
    }
    prev2 = i;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({
      start: subStart,
      end,
      loop,
      count,
      style
    }));
  }
  return result;
}
function _boundSegments(line2, bounds) {
  const result = [];
  const segments = line2.segments;
  for (let i = 0; i < segments.length; i++) {
    const sub = _boundSegment(segments[i], line2.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {
    start,
    end
  };
}
function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev2 = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev2.skip) {
        loop = false;
        result.push({
          start: start % count,
          end: (end - 1) % count,
          loop
        });
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev2.skip) {
        start = end;
      }
    }
    prev2 = cur;
  }
  if (last !== null) {
    result.push({
      start: start % count,
      end: last % count,
      loop
    });
  }
  return result;
}
function _computeSegments(line2, segmentOptions) {
  const points = line2.points;
  const spanGaps = line2.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line2._loop;
  const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line2, [
      {
        start,
        end,
        loop
      }
    ], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line2._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line2, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line2, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line2, segments, points, segmentOptions);
}
function doSplitByStyles(line2, segments, points, segmentOptions) {
  const chartContext = line2._chart.getContext();
  const baseStyle2 = readStyle(line2.options);
  const { _datasetIndex: datasetIndex, options: { spanGaps } } = line2;
  const count = points.length;
  const result = [];
  let prevStyle = baseStyle2;
  let start = segments[0].start;
  let i = start;
  function addStyle(s, e2, l2, st) {
    const dir = spanGaps ? -1 : 1;
    if (s === e2) {
      return;
    }
    s += count;
    while (points[s % count].skip) {
      s -= dir;
    }
    while (points[e2 % count].skip) {
      e2 += dir;
    }
    if (s % count !== e2 % count) {
      result.push({
        start: s % count,
        end: e2 % count,
        loop: l2,
        style: st
      });
      prevStyle = st;
      start = e2 % count;
    }
  }
  for (const segment of segments) {
    start = spanGaps ? start : segment.start;
    let prev2 = points[start % count];
    let style;
    for (i = start + 1; i <= segment.end; i++) {
      const pt = points[i % count];
      style = readStyle(segmentOptions.setContext(createContext(chartContext, {
        type: "segment",
        p0: prev2,
        p1: pt,
        p0DataIndex: (i - 1) % count,
        p1DataIndex: i % count,
        datasetIndex
      })));
      if (styleChanged(style, prevStyle)) {
        addStyle(start, i - 1, segment.loop, prevStyle);
      }
      prev2 = pt;
      prevStyle = style;
    }
    if (start < i - 1) {
      addStyle(start, i - 1, segment.loop, prevStyle);
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  if (!prevStyle) {
    return false;
  }
  const cache = [];
  const replacer = function(key, value) {
    if (!isPatternOrGradient(value)) {
      return value;
    }
    if (!cache.includes(value)) {
      cache.push(value);
    }
    return cache.indexOf(value);
  };
  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}
/*!
 * Chart.js v4.4.2
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */
class Animator {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i = items.length - 1;
      let draw2 = false;
      let item;
      for (; i >= 0; --i) {
        item = items[i];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw2 = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw2) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event2, cb2) {
    this._getAnims(chart).listeners[event2].push(cb2);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i = items.length - 1;
    for (; i >= 0; --i) {
      items[i].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = /* @__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }
}
class Animations {
  constructor(chart, config2) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config2);
  }
  configure(config2) {
    if (!isObject(config2)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config2).forEach((key) => {
      const cfg = config2[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations2 = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations2;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations2 = [];
    const running = target.$animations || (target.$animations = {});
    const props2 = Object.keys(values);
    const date = Date.now();
    let i;
    for (i = props2.length - 1; i >= 0; --i) {
      const prop = props2[i];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations2.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations2.push(animation);
    }
    return animations2;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations2 = this._createAnimations(target, values);
    if (animations2.length) {
      animator.add(this._chart, animations2);
      return true;
    }
  }
}
function awaitAll(animations2, properties) {
  const running = [];
  const keys2 = Object.keys(properties);
  for (let i = 0; i < keys2.length; i++) {
    const anim = animations2[keys2[i]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }
  return options;
}
function scaleClip(scale2, allowedOverflow) {
  const opts = scale2 && scale2.options || {};
  const reverse = opts.reverse;
  const min = opts.min === void 0 ? allowedOverflow : 0;
  const max = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x2 = scaleClip(xScale, allowedOverflow);
  const y2 = scaleClip(yScale, allowedOverflow);
  return {
    top: y2.end,
    right: x2.end,
    bottom: y2.start,
    left: x2.start
  };
}
function toClip(value) {
  let t2, r2, b2, l2;
  if (isObject(value)) {
    t2 = value.top;
    r2 = value.right;
    b2 = value.bottom;
    l2 = value.left;
  } else {
    t2 = r2 = b2 = l2 = value;
  }
  return {
    top: t2,
    right: r2,
    bottom: b2,
    left: l2,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys2 = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys2.push(metasets[i].index);
  }
  return keys2;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys2 = stack.keys;
  const singleMode = options.mode === "single";
  let i, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i = 0, ilen = keys2.length; i < ilen; ++i) {
    datasetIndex = +keys2[i];
    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys2 = Object.keys(data);
  const adata = new Array(keys2.length);
  let i, ilen, key;
  for (i = 0, ilen = keys2.length; i < ilen; ++i) {
    key = keys2[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale2, meta) {
  const stacked = scale2 && scale2.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale2) {
  const { min, max, minDefined, maxDefined } = scale2.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i = 0; i < ilen; ++i) {
    const item = parsed[i];
    const { [iAxis]: index2, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index2);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales2 = chart.scales;
  return Object.keys(scales2).filter((key) => scales2[key].axis === axis).shift();
}
function createDatasetContext(parent, index2) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index2,
    index: index2,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index2, element) {
  return createContext(parent, {
    active: false,
    dataIndex: index2,
    parsed: void 0,
    raw: void 0,
    element,
    index: index2,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
const isDirectUpdateMode = (mode2) => mode2 === "reset" || mode2 === "none";
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
class DatasetController {
  static defaults = {};
  static datasetElementType = null;
  static dataElementType = null;
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x2, y2, r2) => axis === "x" ? x2 : axis === "r" ? r2 : y2;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale2) {
    const meta = this._cachedMeta;
    return scale2 === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      this._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
    }
  }
  configure() {
    const config2 = this.chart.config;
    const scopeKeys = config2.datasetScopeKeys(this._type);
    const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config2.createResolver(scopes, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev2 = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev2 && cur[iAxis] < prev2[iAxis];
      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev2 = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index2;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index2], index2),
        [vAxis]: vScale.parse(data[index2], index2)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i, ilen, index2, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      item = data[index2];
      parsed[i] = {
        x: xScale.parse(item[0], index2),
        y: yScale.parse(item[1], index2)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index2, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index2 = i + start;
      item = data[index2];
      parsed[i] = {
        x: xScale.parse(resolveObjectKey(item, xAxisKey), index2),
        y: yScale.parse(resolveObjectKey(item, yAxisKey), index2)
      };
    }
    return parsed;
  }
  getParsed(index2) {
    return this._cachedMeta._parsed[index2];
  }
  getDataElement(index2) {
    return this._cachedMeta.data[index2];
  }
  applyStack(scale2, parsed, mode2) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale2.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale2.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode: mode2
    });
  }
  updateRangeFromParsed(range2, scale2, parsed, stack) {
    const parsedValue = parsed[scale2.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale2.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range2.min = Math.min(range2.min, value);
    range2.max = Math.max(range2.max, value);
  }
  getMinMax(scale2, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale2 === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale2);
    const stack = createStack(canStack, meta, this.chart);
    const range2 = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i, parsed;
    function _skip() {
      parsed = _parsed[i];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale2.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range2, scale2, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range2, scale2, parsed, stack);
        break;
      }
    }
    return range2;
  }
  getAllParsedValues(scale2) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;
    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale2.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode2) {
    const meta = this._cachedMeta;
    this.update(mode2 || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode2) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements2 = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements2.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i = start; i < start + count; ++i) {
      const element = elements2[i];
      if (element.hidden) {
        continue;
      }
      if (element.active && drawActiveElementsOnTop) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }
    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }
  getStyle(index2, active) {
    const mode2 = active ? "active" : "default";
    return index2 === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode2) : this.resolveDataElementOptions(index2 || 0, mode2);
  }
  getContext(index2, active, mode2) {
    const dataset = this.getDataset();
    let context2;
    if (index2 >= 0 && index2 < this._cachedMeta.data.length) {
      const element = this._cachedMeta.data[index2];
      context2 = element.$context || (element.$context = createDataContext(this.getContext(), index2, element));
      context2.parsed = this.getParsed(index2);
      context2.raw = dataset.data[index2];
      context2.index = context2.dataIndex = index2;
    } else {
      context2 = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context2.dataset = dataset;
      context2.index = context2.datasetIndex = this.index;
    }
    context2.active = !!active;
    context2.mode = mode2;
    return context2;
  }
  resolveDatasetElementOptions(mode2) {
    return this._resolveElementOptions(this.datasetElementType.id, mode2);
  }
  resolveDataElementOptions(index2, mode2) {
    return this._resolveElementOptions(this.dataElementType.id, mode2, index2);
  }
  _resolveElementOptions(elementType, mode2 = "default", index2) {
    const active = mode2 === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode2;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index2);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config2 = this.chart.config;
    const scopeKeys = config2.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context2 = () => this.getContext(index2, active, mode2);
    const values = config2.resolveNamedOptions(scopes, names2, context2, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index2, transition2, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition2}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config2 = this.chart.config;
      const scopeKeys = config2.datasetAnimationScopeKeys(this._type, transition2);
      const scopes = config2.getOptionScopes(this.getDataset(), scopeKeys);
      options = config2.createResolver(scopes, this.getContext(index2, active, transition2));
    }
    const animations2 = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations2);
    }
    return animations2;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode2, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode2) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode2) {
    const firstOpts = this.resolveDataElementOptions(start, mode2);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode2, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode2, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element, index2, properties, mode2) {
    if (isDirectUpdateMode(mode2)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index2, mode2).update(element, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode2, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode2)) {
      this._resolveAnimations(void 0, mode2).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element, index2, mode2, active) {
    element.active = active;
    const options = this.getStyle(index2, active);
    this._resolveAnimations(index2, mode2, active).update(element, {
      options: !active && this.getSharedOptions(options) || options
    });
  }
  removeHoverStyle(element, datasetIndex, index2) {
    this._setStyle(element, index2, "active", false);
  }
  setHoverStyle(element, datasetIndex, index2) {
    this._setStyle(element, index2, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements2 = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements2.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;
    const move = (arr) => {
      arr.length += count;
      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };
    move(data);
    for (i = start; i < end; ++i) {
      data[i] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element, start, count, mode2) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
function getAllScaleValues(scale2, type) {
  if (!scale2._cache.$bar) {
    const visibleMetas = scale2.getMatchingVisibleMetas(type);
    let values = [];
    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {
      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale2));
    }
    scale2._cache.$bar = _arrayUnique(values.sort((a, b2) => a - b2));
  }
  return scale2._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale2 = meta.iScale;
  const values = getAllScaleValues(scale2, meta.type);
  let min = scale2._length;
  let i, ilen, curr, prev2;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if (defined(prev2)) {
      min = Math.min(min, Math.abs(curr - prev2) || min);
    }
    prev2 = curr;
  };
  for (i = 0, ilen = values.length; i < ilen; ++i) {
    curr = scale2.getPixelForValue(values[i]);
    updateMinAndPrev();
  }
  prev2 = void 0;
  for (i = 0, ilen = scale2.ticks.length; i < ilen; ++i) {
    curr = scale2.getPixelForTick(i);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index2, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size2, ratio;
  if (isNullOrUndef(thickness)) {
    size2 = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size2 = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size2 / stackCount,
    ratio,
    start: ruler.pixels[index2] - size2 / 2
  };
}
function computeFlexCategoryTraits(index2, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index2];
  let prev2 = index2 > 0 ? pixels[index2 - 1] : null;
  let next2 = index2 < pixels.length - 1 ? pixels[index2 + 1] : null;
  const percent2 = options.categoryPercentage;
  if (prev2 === null) {
    prev2 = curr - (next2 === null ? ruler.end - ruler.start : next2 - curr);
  }
  if (next2 === null) {
    next2 = curr + curr - prev2;
  }
  const start = curr - (curr - Math.min(prev2, next2)) / 2 * percent2;
  const size2 = Math.abs(next2 - prev2) / 2 * percent2;
  return {
    chunk: size2 / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i) {
  const startValue = vScale.parse(entry[0], i);
  const endValue = vScale.parse(entry[1], i);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i) {
  if (isArray(entry)) {
    parseFloatBar(entry, item, vScale, i);
  } else {
    item[vScale.axis] = vScale.parse(entry, i);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i, ilen, item, entry;
  for (i = start, ilen = start + count; i < ilen; ++i) {
    entry = data[i];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
    parsed.push(parseValue(entry, item, vScale, i));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== void 0 && custom.barEnd !== void 0;
}
function barSign(size2, vScale, actualBase) {
  if (size2 !== 0) {
    return sign(size2);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = "left";
    end = "right";
  } else {
    reverse = properties.base < properties.y;
    start = "bottom";
    end = "top";
  }
  if (reverse) {
    top = "end";
    bottom = "start";
  } else {
    top = "start";
    bottom = "end";
  }
  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}
function setBorderSkipped(properties, options, stack, index2) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start, end, reverse, top, bottom } = borderProps(properties);
  if (edge === "middle" && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index2) {
      edge = top;
    } else if ((stack._bottom || 0) === index2) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a, b2, reverse) {
  if (reverse) {
    edge = swap(edge, a, b2);
    edge = startEnd(edge, b2, a);
  } else {
    edge = startEnd(edge, a, b2);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v2, start, end) {
  return v2 === "start" ? start : v2 === "end" ? end : v2;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
  properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
  static id = "bar";
  static defaults = {
    datasetElementType: false,
    dataElementType: "bar",
    categoryPercentage: 0.8,
    barPercentage: 0.9,
    grouped: true,
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "base",
          "width",
          "height"
        ]
      }
    }
  };
  static overrides = {
    scales: {
      _index_: {
        type: "category",
        offset: true,
        grid: {
          offset: true
        }
      },
      _value_: {
        type: "linear",
        beginAtZero: true
      }
    }
  };
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
    const parsed = [];
    let i, ilen, item, obj;
    for (i = start, ilen = start + count; i < ilen; ++i) {
      obj = data[i];
      item = {};
      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
    }
    return parsed;
  }
  updateRangeFromParsed(range2, scale2, parsed, stack) {
    super.updateRangeFromParsed(range2, scale2, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale2 === this._cachedMeta.vScale) {
      range2.min = Math.min(range2.min, custom.min);
      range2.max = Math.max(range2.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const { iScale, vScale } = meta;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
    const meta = this._cachedMeta;
    meta.stack = this.getDataset().stack;
  }
  update(mode2) {
    const meta = this._cachedMeta;
    this.updateElements(meta.data, 0, meta.data.length, mode2);
  }
  updateElements(bars, start, count, mode2) {
    const reset = mode2 === "reset";
    const { index: index2, _cachedMeta: { vScale } } = this;
    const base = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = this._getRuler();
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode2);
    for (let i = start; i < start + count; i++) {
      const parsed = this.getParsed(i);
      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
        base,
        head: base
      } : this._calculateBarValuePixels(i);
      const ipixels = this._calculateBarIndexPixels(i, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index2 === stack._top || index2 === stack._bottom,
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode2);
      }
      const options = properties.options || bars[i].options;
      setBorderSkipped(properties, options, stack, index2);
      setInflateAmount(properties, options, ruler.ratio);
      this.updateElement(bars[i], i, properties, mode2);
    }
  }
  _getStacks(last, dataIndex) {
    const { iScale } = this._cachedMeta;
    const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
    const stacked = iScale.options.stacked;
    const stacks = [];
    const skipNull = (meta) => {
      const parsed = meta.controller.getParsed(dataIndex);
      const val = parsed && parsed[meta.vScale.axis];
      if (isNullOrUndef(val) || isNaN(val)) {
        return true;
      }
    };
    for (const meta of metasets) {
      if (dataIndex !== void 0 && skipNull(meta)) {
        continue;
      }
      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
        stacks.push(meta.stack);
      }
      if (meta.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(void 0);
    }
    return stacks;
  }
  _getStackCount(index2) {
    return this._getStacks(void 0, index2).length;
  }
  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index2 = name !== void 0 ? stacks.indexOf(name) : -1;
    return index2 === -1 ? stacks.length - 1 : index2;
  }
  _getRuler() {
    const opts = this.options;
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i, ilen;
    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(meta);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: this._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index2) {
    const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
    const actualBase = baseValue || 0;
    const parsed = this.getParsed(index2);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length2 = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
    let head, size2;
    if (length2 !== value) {
      start = length2 - value;
      length2 = value;
    }
    if (floating) {
      value = custom.barStart;
      length2 = custom.barEnd - custom.barStart;
      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
    let base = vScale.getPixelForValue(startValue);
    if (this.chart.getDataVisibility(index2)) {
      head = vScale.getPixelForValue(start + length2);
    } else {
      head = base;
    }
    size2 = head - base;
    if (Math.abs(size2) < minBarLength) {
      size2 = barSign(size2, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base -= size2 / 2;
      }
      const startPixel = vScale.getPixelForDecimal(0);
      const endPixel = vScale.getPixelForDecimal(1);
      const min = Math.min(startPixel, endPixel);
      const max = Math.max(startPixel, endPixel);
      base = Math.max(Math.min(base, max), min);
      head = base + size2;
      if (_stacked && !floating) {
        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
      }
    }
    if (base === vScale.getPixelForValue(actualBase)) {
      const halfGrid = sign(size2) * vScale.getLineWidthForValue(actualBase) / 2;
      base += halfGrid;
      size2 -= halfGrid;
    }
    return {
      size: size2,
      base,
      head,
      center: head + size2 / 2
    };
  }
  _calculateBarIndexPixels(index2, ruler) {
    const scale2 = ruler.scale;
    const options = this.options;
    const skipNull = options.skipNull;
    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
    let center, size2;
    if (ruler.grouped) {
      const stackCount = skipNull ? this._getStackCount(index2) : ruler.stackCount;
      const range2 = options.barThickness === "flex" ? computeFlexCategoryTraits(index2, ruler, options, stackCount) : computeFitCategoryTraits(index2, ruler, options, stackCount);
      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index2 : void 0);
      center = range2.start + range2.chunk * stackIndex + range2.chunk / 2;
      size2 = Math.min(maxBarThickness, range2.chunk * range2.ratio);
    } else {
      center = scale2.getPixelForValue(this.getParsed(index2)[scale2.axis], index2);
      size2 = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size2 / 2,
      head: center + size2 / 2,
      center,
      size: size2
    };
  }
  draw() {
    const meta = this._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i = 0;
    for (; i < ilen; ++i) {
      if (this.getParsed(i)[vScale.axis] !== null) {
        rects[i].draw(this._ctx);
      }
    }
  }
}
class BubbleController extends DatasetController {
  static id = "bubble";
  static defaults = {
    datasetElementType: false,
    dataElementType: "point",
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "borderWidth",
          "radius"
        ]
      }
    }
  };
  static overrides = {
    scales: {
      x: {
        type: "linear"
      },
      y: {
        type: "linear"
      }
    }
  };
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  parsePrimitiveData(meta, data, start, count) {
    const parsed = super.parsePrimitiveData(meta, data, start, count);
    for (let i = 0; i < parsed.length; i++) {
      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const parsed = super.parseArrayData(meta, data, start, count);
    for (let i = 0; i < parsed.length; i++) {
      const item = data[start + i];
      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const parsed = super.parseObjectData(meta, data, start, count);
    for (let i = 0; i < parsed.length; i++) {
      const item = data[start + i];
      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
    }
    return parsed;
  }
  getMaxOverflow() {
    const data = this._cachedMeta.data;
    let max = 0;
    for (let i = data.length - 1; i >= 0; --i) {
      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
    }
    return max > 0 && max;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y2 = yScale.getLabelForValue(parsed.y);
    const r2 = parsed._custom;
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y2 + (r2 ? ", " + r2 : "") + ")"
    };
  }
  update(mode2) {
    const points = this._cachedMeta.data;
    this.updateElements(points, 0, points.length, mode2);
  }
  updateElements(points, start, count, mode2) {
    const reset = mode2 === "reset";
    const { iScale, vScale } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode2);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const parsed = !reset && this.getParsed(i);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode2);
        if (reset) {
          properties.options.radius = 0;
        }
      }
      this.updateElement(point, i, properties, mode2);
    }
  }
  resolveDataElementOptions(index2, mode2) {
    const parsed = this.getParsed(index2);
    let values = super.resolveDataElementOptions(index2, mode2);
    if (values.$shared) {
      values = Object.assign({}, values, {
        $shared: false
      });
    }
    const radius = values.radius;
    if (mode2 !== "active") {
      values.radius = 0;
    }
    values.radius += valueOrDefault(parsed && parsed._custom, radius);
    return values;
  }
}
function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < TAU) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a, b2) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b2, b2 * cutout);
    const calcMin = (angle, a, b2) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b2, b2 * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(HALF_PI, startY, endY);
    const minX = calcMin(PI, startX, endX);
    const minY = calcMin(PI + HALF_PI, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}
class DoughnutController extends DatasetController {
  static id = "doughnut";
  static defaults = {
    datasetElementType: false,
    dataElementType: "arc",
    animation: {
      animateRotate: true,
      animateScale: false
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "circumference",
          "endAngle",
          "innerRadius",
          "outerRadius",
          "startAngle",
          "x",
          "y",
          "offset",
          "borderWidth",
          "spacing"
        ]
      }
    },
    cutout: "50%",
    rotation: 0,
    circumference: 360,
    radius: "100%",
    spacing: 0,
    indexAxis: "r"
  };
  static descriptors = {
    _scriptable: (name) => name !== "spacing",
    _indexable: (name) => name !== "spacing" && !name.startsWith("borderDash") && !name.startsWith("hoverBorderDash")
  };
  static overrides = {
    aspectRatio: 1,
    plugins: {
      legend: {
        labels: {
          generateLabels(chart) {
            const data = chart.data;
            if (data.labels.length && data.datasets.length) {
              const { labels: { pointStyle, color: color2 } } = chart.legend.options;
              return data.labels.map((label, i) => {
                const meta = chart.getDatasetMeta(0);
                const style = meta.controller.getStyle(i);
                return {
                  text: label,
                  fillStyle: style.backgroundColor,
                  strokeStyle: style.borderColor,
                  fontColor: color2,
                  lineWidth: style.borderWidth,
                  pointStyle,
                  hidden: !chart.getDataVisibility(i),
                  index: i
                };
              });
            }
            return [];
          }
        },
        onClick(e2, legendItem, legend) {
          legend.chart.toggleDataVisibility(legendItem.index);
          legend.chart.update();
        }
      }
    }
  };
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.offsetX = void 0;
    this.offsetY = void 0;
  }
  linkScales() {
  }
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    if (this._parsing === false) {
      meta._parsed = data;
    } else {
      let getter = (i2) => +data[i2];
      if (isObject(data[start])) {
        const { key = "value" } = this._parsing;
        getter = (i2) => +resolveObjectKey(data[i2], key);
      }
      let i, ilen;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        meta._parsed[i] = getter(i);
      }
    }
  }
  _getRotation() {
    return toRadians(this.options.rotation - 90);
  }
  _getCircumference() {
    return toRadians(this.options.circumference);
  }
  _getRotationExtents() {
    let min = TAU;
    let max = -TAU;
    for (let i = 0; i < this.chart.data.datasets.length; ++i) {
      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
        const controller = this.chart.getDatasetMeta(i).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min
    };
  }
  update(mode2) {
    const chart = this.chart;
    const { chartArea } = chart;
    const meta = this._cachedMeta;
    const arcs = meta.data;
    const spacing2 = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing2) / 2, 0);
    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
    const chartWeight = this._getRingWeight(this.index);
    const { circumference, rotation } = this._getRotationExtents();
    const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing2) / ratioX;
    const maxHeight = (chartArea.height - spacing2) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = toDimension(this.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
    this.offsetX = offsetX * outerRadius;
    this.offsetY = offsetY * outerRadius;
    meta.total = this.calculateTotal();
    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
    this.updateElements(arcs, 0, arcs.length, mode2);
  }
  _circumference(i, reset) {
    const opts = this.options;
    const meta = this._cachedMeta;
    const circumference = this._getCircumference();
    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
      return 0;
    }
    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);
  }
  updateElements(arcs, start, count, mode2) {
    const reset = mode2 === "reset";
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : this.innerRadius;
    const outerRadius = animateScale ? 0 : this.outerRadius;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode2);
    let startAngle = this._getRotation();
    let i;
    for (i = 0; i < start; ++i) {
      startAngle += this._circumference(i, reset);
    }
    for (i = start; i < start + count; ++i) {
      const circumference = this._circumference(i, reset);
      const arc = arcs[i];
      const properties = {
        x: centerX + this.offsetX,
        y: centerY + this.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode2);
      }
      startAngle += circumference;
      this.updateElement(arc, i, properties, mode2);
    }
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i;
    for (i = 0; i < metaData.length; i++) {
      const value = meta._parsed[i];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return TAU * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2], chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  getMaxBorderWidth(arcs) {
    let max = 0;
    const chart = this.chart;
    let i, ilen, meta, controller, options;
    if (!arcs) {
      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
        if (chart.isDatasetVisible(i)) {
          meta = chart.getDatasetMeta(i);
          arcs = meta.data;
          controller = meta.controller;
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i = 0, ilen = arcs.length; i < ilen; ++i) {
      options = controller.resolveDataElementOptions(i);
      if (options.borderAlign !== "inner") {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
      const options = this.resolveDataElementOptions(i);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i = 0; i < datasetIndex; ++i) {
      if (this.chart.isDatasetVisible(i)) {
        ringWeightOffset += this._getRingWeight(i);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
class LineController extends DatasetController {
  static id = "line";
  static defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    showLine: true,
    spanGaps: false
  };
  static overrides = {
    scales: {
      _index_: {
        type: "category"
      },
      _value_: {
        type: "linear"
      }
    }
  };
  initialize() {
    this.enableOptionSharing = true;
    this.supportsDecimation = true;
    super.initialize();
  }
  update(mode2) {
    const meta = this._cachedMeta;
    const { dataset: line2, data: points = [], _dataset } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line2._chart = this.chart;
    line2._datasetIndex = this.index;
    line2._decimated = !!_dataset._decimated;
    line2.points = points;
    const options = this.resolveDatasetElementOptions(mode2);
    if (!this.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = this.options.segment;
    this.updateElement(line2, void 0, {
      animated: !animationsDisabled,
      options
    }, mode2);
    this.updateElements(points, start, count, mode2);
  }
  updateElements(points, start, count, mode2) {
    const reset = mode2 === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode2);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode2 === "none";
    const end = start + count;
    const pointsCount = points.length;
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i = 0; i < pointsCount; ++i) {
      const point = points[i];
      const properties = directUpdate ? point : {};
      if (i < start || i >= end) {
        properties.skip = true;
        continue;
      }
      const parsed = this.getParsed(i);
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode2);
      }
      if (!directUpdate) {
        this.updateElement(point, i, properties, mode2);
      }
      prevParsed = parsed;
    }
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const dataset = meta.dataset;
    const border2 = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border2;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border2, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
class PolarAreaController extends DatasetController {
  static id = "polarArea";
  static defaults = {
    dataElementType: "arc",
    animation: {
      animateRotate: true,
      animateScale: true
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "startAngle",
          "endAngle",
          "innerRadius",
          "outerRadius"
        ]
      }
    },
    indexAxis: "r",
    startAngle: 0
  };
  static overrides = {
    aspectRatio: 1,
    plugins: {
      legend: {
        labels: {
          generateLabels(chart) {
            const data = chart.data;
            if (data.labels.length && data.datasets.length) {
              const { labels: { pointStyle, color: color2 } } = chart.legend.options;
              return data.labels.map((label, i) => {
                const meta = chart.getDatasetMeta(0);
                const style = meta.controller.getStyle(i);
                return {
                  text: label,
                  fillStyle: style.backgroundColor,
                  strokeStyle: style.borderColor,
                  fontColor: color2,
                  lineWidth: style.borderWidth,
                  pointStyle,
                  hidden: !chart.getDataVisibility(i),
                  index: i
                };
              });
            }
            return [];
          }
        },
        onClick(e2, legendItem, legend) {
          legend.chart.toggleDataVisibility(legendItem.index);
          legend.chart.update();
        }
      }
    },
    scales: {
      r: {
        type: "radialLinear",
        angleLines: {
          display: false
        },
        beginAtZero: true,
        grid: {
          circular: true
        },
        pointLabels: {
          display: false
        },
        startAngle: 0
      }
    }
  };
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = void 0;
    this.outerRadius = void 0;
  }
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index2].r, chart.options.locale);
    return {
      label: labels[index2] || "",
      value
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode2) {
    const arcs = this._cachedMeta.data;
    this._updateRadius();
    this.updateElements(arcs, 0, arcs.length, mode2);
  }
  getMinMax() {
    const meta = this._cachedMeta;
    const range2 = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    meta.data.forEach((element, index2) => {
      const parsed = this.getParsed(index2).r;
      if (!isNaN(parsed) && this.chart.getDataVisibility(index2)) {
        if (parsed < range2.min) {
          range2.min = parsed;
        }
        if (parsed > range2.max) {
          range2.max = parsed;
        }
      }
    });
    return range2;
  }
  _updateRadius() {
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    this.outerRadius = outerRadius - radiusLength * this.index;
    this.innerRadius = this.outerRadius - radiusLength;
  }
  updateElements(arcs, start, count, mode2) {
    const reset = mode2 === "reset";
    const chart = this.chart;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale2 = this._cachedMeta.rScale;
    const centerX = scale2.xCenter;
    const centerY = scale2.yCenter;
    const datasetStartAngle = scale2.getIndexAngle(0) - 0.5 * PI;
    let angle = datasetStartAngle;
    let i;
    const defaultAngle = 360 / this.countVisibleElements();
    for (i = 0; i < start; ++i) {
      angle += this._computeAngle(i, mode2, defaultAngle);
    }
    for (i = start; i < start + count; i++) {
      const arc = arcs[i];
      let startAngle = angle;
      let endAngle = angle + this._computeAngle(i, mode2, defaultAngle);
      let outerRadius = chart.getDataVisibility(i) ? scale2.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
      angle = endAngle;
      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }
        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }
      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: this.resolveDataElementOptions(i, arc.active ? "active" : mode2)
      };
      this.updateElement(arc, i, properties, mode2);
    }
  }
  countVisibleElements() {
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element, index2) => {
      if (!isNaN(this.getParsed(index2).r) && this.chart.getDataVisibility(index2)) {
        count++;
      }
    });
    return count;
  }
  _computeAngle(index2, mode2, defaultAngle) {
    return this.chart.getDataVisibility(index2) ? toRadians(this.resolveDataElementOptions(index2, mode2).angle || defaultAngle) : 0;
  }
}
class PieController extends DoughnutController {
  static id = "pie";
  static defaults = {
    cutout: 0,
    rotation: 0,
    circumference: 360,
    radius: "100%"
  };
}
class RadarController extends DatasetController {
  static id = "radar";
  static defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    indexAxis: "r",
    showLine: true,
    elements: {
      line: {
        fill: "start"
      }
    }
  };
  static overrides = {
    aspectRatio: 1,
    scales: {
      r: {
        type: "radialLinear"
      }
    }
  };
  getLabelAndValue(index2) {
    const vScale = this._cachedMeta.vScale;
    const parsed = this.getParsed(index2);
    return {
      label: vScale.getLabels()[index2],
      value: "" + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }
  parseObjectData(meta, data, start, count) {
    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
  }
  update(mode2) {
    const meta = this._cachedMeta;
    const line2 = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line2.points = points;
    if (mode2 !== "resize") {
      const options = this.resolveDatasetElementOptions(mode2);
      if (!this.options.showLine) {
        options.borderWidth = 0;
      }
      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      this.updateElement(line2, void 0, properties, mode2);
    }
    this.updateElements(points, 0, points.length, mode2);
  }
  updateElements(points, start, count, mode2) {
    const scale2 = this._cachedMeta.rScale;
    const reset = mode2 === "reset";
    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const options = this.resolveDataElementOptions(i, point.active ? "active" : mode2);
      const pointPosition = scale2.getPointPositionForValue(i, this.getParsed(i).r);
      const x2 = reset ? scale2.xCenter : pointPosition.x;
      const y2 = reset ? scale2.yCenter : pointPosition.y;
      const properties = {
        x: x2,
        y: y2,
        angle: pointPosition.angle,
        skip: isNaN(x2) || isNaN(y2),
        options
      };
      this.updateElement(point, i, properties, mode2);
    }
  }
}
class ScatterController extends DatasetController {
  static id = "scatter";
  static defaults = {
    datasetElementType: false,
    dataElementType: "point",
    showLine: false,
    fill: false
  };
  static overrides = {
    interaction: {
      mode: "point"
    },
    scales: {
      x: {
        type: "linear"
      },
      y: {
        type: "linear"
      }
    }
  };
  getLabelAndValue(index2) {
    const meta = this._cachedMeta;
    const labels = this.chart.data.labels || [];
    const { xScale, yScale } = meta;
    const parsed = this.getParsed(index2);
    const x2 = xScale.getLabelForValue(parsed.x);
    const y2 = yScale.getLabelForValue(parsed.y);
    return {
      label: labels[index2] || "",
      value: "(" + x2 + ", " + y2 + ")"
    };
  }
  update(mode2) {
    const meta = this._cachedMeta;
    const { data: points = [] } = meta;
    const animationsDisabled = this.chart._animationsDisabled;
    let { start, count } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    this._drawStart = start;
    this._drawCount = count;
    if (_scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    if (this.options.showLine) {
      if (!this.datasetElementType) {
        this.addElements();
      }
      const { dataset: line2, _dataset } = meta;
      line2._chart = this.chart;
      line2._datasetIndex = this.index;
      line2._decimated = !!_dataset._decimated;
      line2.points = points;
      const options = this.resolveDatasetElementOptions(mode2);
      options.segment = this.options.segment;
      this.updateElement(line2, void 0, {
        animated: !animationsDisabled,
        options
      }, mode2);
    } else if (this.datasetElementType) {
      delete meta.dataset;
      this.datasetElementType = false;
    }
    this.updateElements(points, start, count, mode2);
  }
  addElements() {
    const { showLine } = this.options;
    if (!this.datasetElementType && showLine) {
      this.datasetElementType = this.chart.registry.getElement("line");
    }
    super.addElements();
  }
  updateElements(points, start, count, mode2) {
    const reset = mode2 === "reset";
    const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
    const firstOpts = this.resolveDataElementOptions(start, mode2);
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode2, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const { spanGaps, segment } = this.options;
    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = this.chart._animationsDisabled || reset || mode2 === "none";
    let prevParsed = start > 0 && this.getParsed(start - 1);
    for (let i = start; i < start + count; ++i) {
      const point = points[i];
      const parsed = this.getParsed(i);
      const properties = directUpdate ? point : {};
      const nullData = isNullOrUndef(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      if (segment) {
        properties.parsed = parsed;
        properties.raw = _dataset.data[i];
      }
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode2);
      }
      if (!directUpdate) {
        this.updateElement(point, i, properties, mode2);
      }
      prevParsed = parsed;
    }
    this.updateSharedOptions(sharedOptions, mode2, firstOpts);
  }
  getMaxOverflow() {
    const meta = this._cachedMeta;
    const data = meta.data || [];
    if (!this.options.showLine) {
      let max = 0;
      for (let i = data.length - 1; i >= 0; --i) {
        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
      }
      return max > 0 && max;
    }
    const dataset = meta.dataset;
    const border2 = dataset.options && dataset.options.borderWidth || 0;
    if (!data.length) {
      return border2;
    }
    const firstPoint = data[0].size(this.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
    return Math.max(border2, firstPoint, lastPoint) / 2;
  }
}
var controllers = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BarController,
  BubbleController,
  DoughnutController,
  LineController,
  PieController,
  PolarAreaController,
  RadarController,
  ScatterController
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
class DateAdapterBase {
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  options;
  constructor(options) {
    this.options = options || {};
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
}
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el2 = data[0];
      const range2 = typeof el2.getRange === "function" && el2.getRange(axis);
      if (range2) {
        const start = lookupMethod(data, axis, value - range2);
        const end = lookupMethod(data, axis, value + range2);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position2, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position2[axis];
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const { index: index2, data } = metasets[i];
    const { lo, hi: hi2 } = binarySearch(metasets[i], axis, value, intersect);
    for (let j = lo; j <= hi2; ++j) {
      const element = data[j];
      if (!element.skip) {
        handler(element, index2, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position2)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index2) {
    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
      return;
    }
    if (element.inRange(position2.x, position2.y, useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  };
  evaluateInteractionItems(chart, axis, position2, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position2, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element, datasetIndex, index2) {
    const { startAngle, endAngle } = element.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element, {
      x: position2.x,
      y: position2.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position2, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position2, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element, datasetIndex, index2) {
    const inRange2 = element.inRange(position2.x, position2.y, useFinalPosition);
    if (intersect && !inRange2) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange2) {
      return;
    }
    const distance2 = distanceMetric(position2, center);
    if (distance2 < minDistance) {
      items = [
        {
          element,
          datasetIndex,
          index: index2
        }
      ];
      minDistance = distance2;
    } else if (distance2 === minDistance) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
    }
  }
  evaluateInteractionItems(chart, axis, position2, evaluationFunc);
  return items;
}
function getNearestItems(chart, position2, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position2)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position2, axis, useFinalPosition) : getNearestCartesianItems(chart, position2, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position2, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position2, (element, datasetIndex, index2) => {
    if (element[rangeMethod](position2[axis], useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index: index2
      });
      intersectsItem = intersectsItem || element.inRange(position2.x, position2.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e2, options, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options.axis || "x";
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect ? getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position2, axis, false, useFinalPosition, includeInvisible);
      const elements2 = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index2 = items[0].index;
        const element = meta.data[index2];
        if (element && !element.skip) {
          elements2.push({
            element,
            datasetIndex: meta.index,
            index: index2
          });
        }
      });
      return elements2;
    },
    dataset(chart, e2, options, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect ? getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position2, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i = 0; i < data.length; ++i) {
          items.push({
            element: data[i],
            datasetIndex,
            index: i
          });
        }
      }
      return items;
    },
    point(chart, e2, options, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position2, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e2, options, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position2, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e2, options, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      return getAxisItems(chart, position2, "x", options.intersect, useFinalPosition);
    },
    y(chart, e2, options, useFinalPosition) {
      const position2 = getRelativePosition(e2, chart);
      return getAxisItems(chart, position2, "y", options.intersect, useFinalPosition);
    }
  }
};
const STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position2) {
  return array.filter((v2) => v2.pos === position2);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v2) => STATIC_POSITIONS.indexOf(v2.pos) === -1 && v2.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a, b2) => {
    const v0 = reverse ? b2 : a;
    const v1 = reverse ? a : b2;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap2 of layouts2) {
    const { stack, pos, stackWeight } = wrap2;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i, ilen, layout2;
  for (i = 0, ilen = layouts2.length; i < ilen; ++i) {
    layout2 = layouts2[i];
    const { fullSize } = layout2.box;
    const stack = stacks[layout2.stack];
    const factor = stack && layout2.stackWeight / stack.weight;
    if (layout2.horizontal) {
      layout2.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout2.height = hBoxMaxHeight;
    } else {
      layout2.width = vBoxMaxWidth;
      layout2.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap2) => wrap2.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b2) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b2], chartArea[b2]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout2, stacks) {
  const { pos, box } = layout2;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout2.size) {
      chartArea[pos] -= layout2.size;
    }
    const stack = stacks[layout2.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout2.horizontal ? box.height : box.width);
    layout2.size = stack.size / stack.count;
    chartArea[pos] += layout2.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout2.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout2, box, refit, changed;
  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout2 = boxes[i];
    box = layout2.box;
    box.update(layout2.width || chartArea.w, layout2.height || chartArea.h, getMargins(layout2.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout2, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout2);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x: x2, y: y2 } = chartArea;
  for (const layout2 of boxes) {
    const box = layout2.box;
    const stack = stacks[layout2.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout2.stackWeight / stack.weight || 1;
    if (layout2.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y2, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y2, width, height);
      }
      stack.start = y2;
      stack.placed += width;
      y2 = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if (defined(stack.start)) {
        x2 = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x2, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x2, chartArea.top + stack.placed, width, height);
      }
      stack.start = x2;
      stack.placed += height;
      x2 = box.right;
    }
  }
  chartArea.x = x2;
  chartArea.y = y2;
}
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || "top";
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index2 = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index2 !== -1) {
      chart.boxes.splice(index2, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap2) => wrap2.box.options && wrap2.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout2) => {
      const box = layout2.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
class BasePlatform {
  acquireContext(canvas, aspectRatio2) {
  }
  releaseContext(context2) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element, width, height, aspectRatio2) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio2 ? Math.floor(width / aspectRatio2) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config2) {
  }
}
class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext("2d") || null;
  }
  updateConfig(config2) {
    config2.options.animation = false;
  }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
const isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio2) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio2 || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node2, type, listener) {
  if (node2) {
    node2.addEventListener(type, listener, eventListenerOptions);
  }
}
function removeListener(chart, type, listener) {
  if (chart && chart.canvas) {
    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
  }
}
function fromNativeEvent(event2, chart) {
  const type = EVENT_TYPES[event2.type] || event2.type;
  const { x: x2, y: y2 } = getRelativePosition(event2, chart);
  return {
    type,
    chart,
    native: event2,
    x: x2 !== void 0 ? x2 : null,
    y: y2 !== void 0 ? y2 : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node2 of nodeList) {
    if (node2 === canvas || node2.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
const drpListeningCharts = /* @__PURE__ */ new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container2 = canvas && _getParentNode(canvas);
  if (!container2) {
    return;
  }
  const resize = throttled((width, height) => {
    const w2 = container2.clientWidth;
    listener(width, height);
    if (w2 < container2.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container2);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event2) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event2, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio2) {
    const context2 = canvas && canvas.getContext && canvas.getContext("2d");
    if (context2 && context2.canvas === canvas) {
      initCanvas(canvas, aspectRatio2);
      return context2;
    }
    return null;
  }
  releaseContext(context2) {
    const canvas = context2.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio2) {
    return getMaximumSize(canvas, width, height, aspectRatio2);
  }
  isAttached(canvas) {
    const container2 = _getParentNode(canvas);
    return !!(container2 && container2.isConnected);
  }
}
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
let Element$1 = class Element2 {
  static defaults = {};
  static defaultRoutes = void 0;
  x;
  y;
  active = false;
  options;
  $animations;
  tooltipPosition(useFinalPosition) {
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y2
    };
  }
  hasValue() {
    return isNumber(this.x) && isNumber(this.y);
  }
  getProps(props2, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props2.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
};
function autoSkip(scale2, ticks) {
  const tickOpts = scale2.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale2);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing2 = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing2, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing2, majorIndices[i], majorIndices[i + 1]);
    }
    skip(ticks, newTicks, spacing2, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing2);
  return newTicks;
}
function determineMaxTicks(scale2) {
  const offset = scale2.options.offset;
  const tickLength = scale2._tickSize();
  const maxScale = scale2._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale2._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing2 = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing2, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];
    if (factor > spacing2) {
      return factor;
    }
  }
  return Math.max(spacing2, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing2) {
  let count = 0;
  let next2 = majorIndices[0];
  let i;
  spacing2 = Math.ceil(spacing2);
  for (i = 0; i < ticks.length; i++) {
    if (i === next2) {
      newTicks.push(ticks[i]);
      count++;
      next2 = majorIndices[count * spacing2];
    }
  }
}
function skip(ticks, newTicks, spacing2, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length2, i, next2;
  spacing2 = Math.ceil(spacing2);
  if (majorEnd) {
    length2 = majorEnd - majorStart;
    spacing2 = length2 / Math.floor(length2 / spacing2);
  }
  next2 = start;
  while (next2 < 0) {
    count++;
    next2 = Math.round(start + count * spacing2);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next2) {
      newTicks.push(ticks[i]);
      count++;
      next2 = Math.round(start + count * spacing2);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
const reverseAlign = (align2) => align2 === "left" ? "right" : align2 === "right" ? "left" : align2;
const offsetFromEdge = (scale2, edge, offset) => edge === "top" || edge === "left" ? scale2[edge] + offset : scale2[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale2, index2, offsetGridLines) {
  const length2 = scale2.ticks.length;
  const validIndex2 = Math.min(index2, length2 - 1);
  const start = scale2._startPixel;
  const end = scale2._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale2.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length2 === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index2 === 0) {
      offset = (scale2.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale2.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index2 ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length2) {
  each(caches, (cache) => {
    const gc2 = cache.gc;
    const gcLen = gc2.length / 2;
    let i;
    if (gcLen > length2) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc2[i]];
      }
      gc2.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = toFont(options.font, fallback);
  const padding = toPadding(options.padding);
  const lines = isArray(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale2) {
  return createContext(parent, {
    scale: scale2,
    type: "scale"
  });
}
function createTickContext(parent, index2, tick) {
  return createContext(parent, {
    tick,
    index: index2,
    type: "tick"
  });
}
function titleAlign(align2, position2, reverse) {
  let ret = _toLeftRightCenter(align2);
  if (reverse && position2 !== "right" || !reverse && position2 === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale2, offset, position2, align2) {
  const { top, left, bottom, right, chart } = scale2;
  const { chartArea, scales: scales2 } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale2.isHorizontal()) {
    titleX = _alignStartEnd(align2, left, right);
    if (isObject(position2)) {
      const positionAxisID = Object.keys(position2)[0];
      const value = position2[positionAxisID];
      titleY = scales2[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position2 === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale2, position2, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position2)) {
      const positionAxisID = Object.keys(position2)[0];
      const value = position2[positionAxisID];
      titleX = scales2[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position2 === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale2, position2, offset);
    }
    titleY = _alignStartEnd(align2, bottom, top);
    rotation = position2 === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
class Scale extends Element$1 {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index2) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    let range2;
    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range2 = metas[i].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range2.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range2.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: finiteOrDefault(min, finiteOrDefault(max, min)),
      max: finiteOrDefault(max, finiteOrDefault(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name) {
    this.chart.notifyPlugins(name, this.getContext());
    callback(this.options[name], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = callback(tickOpts.callback, [
        tick.value,
        i,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align: align2, padding }, position: position2 } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position2 !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align2 === "start") {
        paddingRight = last.width;
      } else if (align2 === "end") {
        paddingLeft = first.width;
      } else if (align2 !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align2 === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align2 === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position: position2 } = this.options;
    return position2 === "top" || position2 === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i, ilen;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if (isNullOrUndef(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length2, maxTicksLimit) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    const increment = Math.floor(length2 / getTicksLimit(length2, maxTicksLimit));
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i = 0; i < length2; i += increment) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length2);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length2 - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index2) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min, max } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }
  getContext(index2) {
    const ticks = this.ticks || [];
    if (index2 >= 0 && index2 < ticks.length) {
      const tick = ticks[index2];
      return tick.$context || (tick.$context = createTickContext(this.getContext(), index2, tick));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w2 = labelSizes ? labelSizes.widest.width + padding : 0;
    const h3 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h3 * cos > w2 * sin ? w2 / cos : h3 / sin : h3 * sin < w2 * cos ? h3 / cos : w2 / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const { grid: grid2, position: position2, border: border2 } = options;
    const offset = grid2.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl2 = getTickMarkLength(grid2);
    const items = [];
    const borderOpts = border2.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
    if (position2 === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl2;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position2 === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl2;
    } else if (position2 === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl2;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position2 === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl2;
    } else if (axis === "x") {
      if (position2 === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl2;
    } else if (axis === "y") {
      if (position2 === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl2;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i = 0; i < ticksLength; i += step) {
      const context2 = this.getContext(i);
      const optsAtIndex = grid2.setContext(context2);
      const optsAtIndexBorder = border2.setContext(context2);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const { position: position2, ticks: optionTicks } = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align: align2, crossAlign, padding, mirror } = optionTicks;
    const tl2 = getTickMarkLength(options.grid);
    const tickAndPadding = tl2 + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i, ilen, tick, label, x2, y2, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position2 === "top") {
      y2 = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position2 === "bottom") {
      y2 = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position2 === "left") {
      const ret = this._getYAxisLabelAlignment(tl2);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (position2 === "right") {
      const ret = this._getYAxisLabelAlignment(tl2);
      textAlign = ret.textAlign;
      x2 = ret.x;
    } else if (axis === "x") {
      if (position2 === "center") {
        y2 = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        y2 = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position2 === "center") {
        x2 = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position2)) {
        const positionAxisID = Object.keys(position2)[0];
        const value = position2[positionAxisID];
        x2 = this.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = this._getYAxisLabelAlignment(tl2).textAlign;
    }
    if (axis === "y") {
      if (align2 === "start") {
        textBaseline = "top";
      } else if (align2 === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i));
      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = isArray(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x2 = pixel;
        if (textAlign === "inner") {
          if (i === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position2 === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x2 += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y2 = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
          case "inner":
            if (i === ilen - 1) {
              left -= width;
            } else if (i > 0) {
              left -= width / 2;
            }
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x2,
            y2
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position: position2, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position2 === "top" ? "left" : "right";
    }
    let align2 = "center";
    if (ticks.align === "start") {
      align2 = "left";
    } else if (ticks.align === "end") {
      align2 = "right";
    } else if (ticks.align === "inner") {
      align2 = "inner";
    }
    return align2;
  }
  _getYAxisLabelAlignment(tl2) {
    const { position: position2, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl2 + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x2;
    if (position2 === "left") {
      if (mirror) {
        x2 = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 += widest;
        }
      } else {
        x2 = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 = this.left;
        }
      }
    } else if (position2 === "right") {
      if (mirror) {
        x2 = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 -= widest / 2;
        } else {
          textAlign = "left";
          x2 -= widest;
        }
      } else {
        x2 = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x2 += widest / 2;
        } else {
          textAlign = "right";
          x2 = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x: x2
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position2 = this.options.position;
    if (position2 === "left" || position2 === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position2 === "top" || position2 === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid2 = this.options.grid;
    if (!this._isVisible() || !grid2.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index2 = ticks.findIndex((t2) => t2.value === value);
    if (index2 >= 0) {
      const opts = grid2.setContext(this.getContext(index2));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid2 = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid2.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item = items[i];
        if (grid2.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }
        if (grid2.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border: border2, grid: grid2 } } = this;
    const borderOpts = border2.setContext(this.getContext());
    const axisWidth = border2.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid2.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y2;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item of items) {
      const renderTextOptions = item.options;
      const tickFont = item.font;
      const label = item.label;
      const y2 = item.textOffset;
      renderText(ctx, label, 0, y2, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position: position2, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align2 = title.align;
    let offset = font.lineHeight / 2;
    if (position2 === "bottom" || position2 === "center" || isObject(position2)) {
      offset += padding.bottom;
      if (isArray(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position2, align2);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align2, position2, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index2) {
    const opts = this.options.ticks.setContext(this.getContext(index2));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
}
class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id2 = item.id;
    const scope = this.scope + "." + id2;
    if (!id2) {
      throw new Error("class does not have id: " + item);
    }
    if (id2 in items) {
      return scope;
    }
    items[id2] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      defaults.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id2) {
    return this.items[id2];
  }
  unregister(item) {
    const items = this.items;
    const id2 = item.id;
    const scope = this.scope;
    if (id2 in items) {
      delete items[id2];
    }
    if (scope && id2 in defaults[scope]) {
      delete defaults[scope][id2];
      if (this.override) {
        delete overrides[id2];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element$1, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id2) {
    return this._get(id2, this.controllers, "controller");
  }
  getElement(id2) {
    return this._get(id2, this.elements, "element");
  }
  getPlugin(id2) {
    return this._get(id2, this.plugins, "plugin");
  }
  getScale(id2) {
    return this._get(id2, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item) => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id2, typedRegistry, type) {
    const item = typedRegistry.get(id2);
    if (item === void 0) {
      throw new Error('"' + id2 + '" is not a registered ' + type + ".");
    }
    return item;
  }
}
var registry = /* @__PURE__ */ new Registry();
class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter3) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter3 ? this._descriptors(chart).filter(filter3) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all2) {
    const config2 = chart && chart.config;
    const options = valueOrDefault(config2.options && config2.options.plugins, {});
    const plugins2 = allPlugins(config2);
    return options === false && !all2 ? [] : createDescriptors(chart, plugins2, options, all2);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a, b2) => a.filter((x2) => !b2.some((y2) => x2.plugin.id === y2.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
}
function allPlugins(config2) {
  const localIds = {};
  const plugins2 = [];
  const keys2 = Object.keys(registry.plugins.items);
  for (let i = 0; i < keys2.length; i++) {
    plugins2.push(registry.getPlugin(keys2[i]));
  }
  const local = config2.plugins || [];
  for (let i = 0; i < local.length; i++) {
    const plugin = local[i];
    if (plugins2.indexOf(plugin) === -1) {
      plugins2.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins: plugins2,
    localIds
  };
}
function getOpts(options, all2) {
  if (!all2 && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, { plugins: plugins2, localIds }, options, all2) {
  const result = [];
  const context2 = chart.getContext();
  for (const plugin of plugins2) {
    const id2 = plugin.id;
    const opts = getOpts(options[id2], all2);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id2]
      }, opts, context2)
    });
  }
  return result;
}
function pluginOpts(config2, { plugin, local }, opts, context2) {
  const keys2 = config2.pluginScopeKeys(plugin);
  const scopes = config2.getOptionScopes(opts, keys2);
  if (local && plugin.defaults) {
    scopes.push(plugin.defaults);
  }
  return config2.createResolver(scopes, context2, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id2, indexAxis) {
  let axis = id2;
  if (id2 === "_index_") {
    axis = indexAxis;
  } else if (id2 === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id2) {
  if (id2 === "x" || id2 === "y" || id2 === "r") {
    return id2;
  }
}
function axisFromPosition(position2) {
  if (position2 === "top" || position2 === "bottom") {
    return "x";
  }
  if (position2 === "left" || position2 === "right") {
    return "y";
  }
}
function determineAxis(id2, ...scaleOptions) {
  if (idMatchesAxis(id2)) {
    return id2;
  }
  for (const opts of scaleOptions) {
    const axis = opts.axis || axisFromPosition(opts.position) || id2.length > 1 && idMatchesAxis(id2[0].toLowerCase());
    if (axis) {
      return axis;
    }
  }
  throw new Error(`Cannot determine type of '${id2}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id2, axis, dataset) {
  if (dataset[axis + "AxisID"] === id2) {
    return {
      axis
    };
  }
}
function retrieveAxisFromDatasets(id2, config2) {
  if (config2.data && config2.data.datasets) {
    const boundDs = config2.data.datasets.filter((d2) => d2.xAxisID === id2 || d2.yAxisID === id2);
    if (boundDs.length) {
      return getAxisFromDataset(id2, "x", boundDs[0]) || getAxisFromDataset(id2, "y", boundDs[0]);
    }
  }
  return {};
}
function mergeScaleConfig(config2, options) {
  const chartDefaults = overrides[config2.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config2.type, options);
  const scales2 = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id2) => {
    const scaleConf = configScales[id2];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id2}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id2}`);
    }
    const axis = determineAxis(id2, scaleConf, retrieveAxisFromDatasets(id2, config2), defaults.scales[scaleConf.type]);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales2[id2] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config2.data.datasets.forEach((dataset) => {
    const type = dataset.type || config2.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id2 = dataset[axis + "AxisID"] || axis;
      scales2[id2] = scales2[id2] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales2[id2], [
        {
          axis
        },
        configScales[id2],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales2).forEach((key) => {
    const scale2 = scales2[key];
    mergeIf(scale2, [
      defaults.scales[scale2.type],
      defaults.scale
    ]);
  });
  return scales2;
}
function initOptions(config2) {
  const options = config2.options || (config2.options = {});
  options.plugins = valueOrDefault(options.plugins, {});
  options.scales = mergeScaleConfig(config2, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config2) {
  config2 = config2 || {};
  config2.data = initData(config2.data);
  initOptions(config2);
  return config2;
}
const keyCache = /* @__PURE__ */ new Map();
const keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys2 = keyCache.get(cacheKey);
  if (!keys2) {
    keys2 = generate();
    keyCache.set(cacheKey, keys2);
    keysCached.add(keys2);
  }
  return keys2;
}
const addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
class Config {
  constructor(config2) {
    this._config = initConfig(config2);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config2 = this._config;
    this.clearCache();
    initOptions(config2);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition2) {
    return cachedKeys(`${datasetType}.transition.${transition2}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition2}`,
        `transitions.${transition2}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id2 = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id2}`, () => [
      [
        `plugins.${id2}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes = /* @__PURE__ */ new Set();
    keyLists.forEach((keys2) => {
      if (mainScope) {
        scopes.add(mainScope);
        keys2.forEach((key) => addIfFound(scopes, mainScope, key));
      }
      keys2.forEach((key) => addIfFound(scopes, options, key));
      keys2.forEach((key) => addIfFound(scopes, overrides[type] || {}, key));
      keys2.forEach((key) => addIfFound(scopes, defaults, key));
      keys2.forEach((key) => addIfFound(scopes, descriptors, key));
    });
    const array = Array.from(scopes);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options, type } = this;
    return [
      options,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes, names2, context2, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
    let options = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context2 = isFunction(context2) ? context2() : context2;
      const subResolver = this.createResolver(scopes, context2, subPrefixes);
      options = _attachContext(resolver, context2, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes, context2, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
    return isObject(context2) ? _attachContext(resolver, context2, void 0, descriptorDefaults) : resolver;
  }
}
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p2) => !p2.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
const hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.4.2";
const KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position2, axis) {
  return position2 === "top" || position2 === "bottom" || KNOWN_POSITIONS.indexOf(position2) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a, b2) {
    return a[l1] === b2[l1] ? a[l2] - b2[l2] : a[l1] - b2[l1];
  };
}
function onAnimationsComplete(context2) {
  const chart = context2.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context2
  ], chart);
}
function onAnimationProgress(context2) {
  const chart = context2.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context2
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c2) => c2.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys2 = Object.keys(obj);
  for (const key of keys2) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e2, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e2.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e2;
}
function getSizeForArea(scale2, chartArea, field) {
  return scale2.options.clip ? scale2[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: getSizeForArea(xScale, chartArea, "left"),
      right: getSizeForArea(xScale, chartArea, "right"),
      top: getSizeForArea(yScale, chartArea, "top"),
      bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
  }
  return chartArea;
}
let Chart$1 = class Chart {
  static defaults = defaults;
  static instances = instances;
  static overrides = overrides;
  static registry = registry;
  static version = version;
  static getChart = getChart;
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item, userConfig) {
    const config2 = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options = config2.createResolver(config2.chartOptionScopes(), this.getContext());
    this.platform = new (config2.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config2);
    const context2 = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context2 && context2.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context2;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce((mode2) => this.update(mode2), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context2 || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio: aspectRatio2, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio2)) {
      return aspectRatio2;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio2 = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio2);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode2 = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode2)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales2 = this.scales;
    const updated = Object.keys(scales2).reduce((obj, id2) => {
      obj[id2] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id2) => {
        const scaleOptions = scaleOpts[id2];
        const axis = determineAxis(id2, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item) => {
      const scaleOptions = item.options;
      const id2 = scaleOptions.id;
      const axis = determineAxis(id2, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id2] = true;
      let scale2 = null;
      if (id2 in scales2 && scales2[id2].type === scaleType) {
        scale2 = scales2[id2];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale2 = new scaleClass({
          id: id2,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales2[scale2.id] = scale2;
      }
      scale2.init(scaleOptions, options);
    });
    each(updated, (hasUpdated, id2) => {
      if (!hasUpdated) {
        delete scales2[id2];
      }
    });
    each(scales2, (scale2) => {
      layouts.configure(this, scale2, scale2.options);
      layouts.addBox(this, scale2);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b2) => a.index - b2.index);
    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        this._destroyDatasetMeta(i);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index2) => {
      if (datasets.filter((x2) => x2 === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index2);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i, ilen;
    this._removeUnreferencedMetasets();
    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = this.getDatasetMeta(i);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i);
        meta = this.getDatasetMeta(i);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i);
      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode2) {
    const config2 = this.config;
    config2.update();
    const options = this._options = config2.createResolver(config2.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode: mode2,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
      const { controller } = this.getDatasetMeta(i);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode2);
    this.notifyPlugins("afterUpdate", {
      mode: mode2
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale2) => {
      layouts.removeBox(this, scale2);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c2) => c2[0] === idx).map((c2, i) => i + "," + c2.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i = 1; i < datasetCount; i++) {
      if (!setsEqual(changeSet, makeSet(i))) {
        return;
      }
    }
    return Array.from(changeSet).map((c2) => c2.split(",")).map((a) => ({
      method: a[1],
      start: +a[2],
      count: +a[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index2) => {
      item._idx = index2;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode2) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode: mode2,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this.getDatasetMeta(i).controller.configure();
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._updateDataset(i, isFunction(mode2) ? mode2({
        datasetIndex: i
      }) : mode2);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode: mode2
    });
  }
  _updateDataset(index2, mode2) {
    const meta = this.getDatasetMeta(index2);
    const args = {
      meta,
      index: index2,
      mode: mode2,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode2);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resize(width, height);
      this._resizeBeforeDraw = null;
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i < layers.length; ++i) {
      layers[i].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      this._drawDataset(metasets[i]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = getDatasetArea(meta, this.chartArea);
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (useClip) {
      clipArea(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? this.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e2, mode2, options, useFinalPosition) {
    const method = Interaction.modes[mode2];
    if (typeof method === "function") {
      return method(this, e2, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x2) => x2 && x2._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index2) {
    this._hiddenIndices[index2] = !this._hiddenIndices[index2];
  }
  getDataVisibility(index2) {
    return !this._hiddenIndices[index2];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode2 = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode2);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode2 : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i, ilen;
    this.stop();
    animator.remove(this);
    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._destroyDatasetMeta(i);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform2 = this.platform;
    const _add = (type, listener2) => {
      platform2.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e2, x2, y2) => {
      e2.offsetX = x2;
      e2.offsetY = y2;
      this._eventHandler(e2);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform2 = this.platform;
    const _add = (type, listener2) => {
      platform2.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform2.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform2.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode2, enabled) {
    const prefix2 = enabled ? "set" : "remove";
    let meta, item, i, ilen;
    if (mode2 === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix2 + "DatasetHoverStyle"]();
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item = items[i];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix2 + "HoverStyle"](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter3) {
    return this._plugins.notify(this, hook, args, filter3);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p2) => p2.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a, b2) => a.filter((x2) => !b2.some((y2) => x2.datasetIndex === y2.datasetIndex && x2.index === y2.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e2, replay) {
    const args = {
      event: e2,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e2)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e2.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e2, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e2, replay, inChartArea) {
    const { _active: lastActive = [], options } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e2, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e2);
    const lastEvent = determineLastEvent(e2, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options.onHover, [
        e2,
        active,
        this
      ], this);
      if (isClick) {
        callback(options.onClick, [
          e2,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e2, lastActive, inChartArea, useFinalPosition) {
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e2, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
};
function invalidatePlugins() {
  return each(Chart$1.instances, (chart) => chart._plugins.invalidate());
}
function clipArc(ctx, element, endAngle) {
  const { startAngle, pixelMargin, x: x2, y: y2, outerRadius, innerRadius } = element;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x2, y2, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x2, y2, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x2, y2, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return _readValueToProps(value, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: _limitValue(o.innerStart, 0, innerLimit),
    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
  };
}
function rThetaToXY(r2, theta, x2, y2) {
  return {
    x: x2 + r2 * Math.cos(theta),
    y: y2 + r2 * Math.sin(theta)
  };
}
function pathArc(ctx, element, offset, spacing2, end, circular) {
  const { x: x2, y: y2, startAngle: start, pixelMargin, innerRadius: innerR } = element;
  const outerRadius = Math.max(element.outerRadius + spacing2 + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing2 + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha2 = end - start;
  if (spacing2) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing2 : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing2 : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing2) : alpha2;
    spacingOffset = (alpha2 - adjustedAngle) / 2;
  }
  const beta = Math.max(1e-3, alpha2 * outerRadius - offset / PI) / outerRadius;
  const angleOffset = (alpha2 - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
    ctx.arc(x2, y2, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
    ctx.arc(x2, y2, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x2, y2);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x2, y2);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x2, y2);
      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
    }
    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
    ctx.arc(x2, y2, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
    ctx.arc(x2, y2, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x2, y2);
      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x2, y2);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x2, y2);
      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x2, y2);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x2;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y2;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x2;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y2;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element, offset, spacing2, circular) {
  const { fullCircles, startAngle, circumference } = element;
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset, spacing2, endAngle, circular);
    for (let i = 0; i < fullCircles; ++i) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  pathArc(ctx, element, offset, spacing2, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawBorder(ctx, element, offset, spacing2, circular) {
  const { fullCircles, startAngle, circumference, options } = element;
  const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
  const inner = options.borderAlign === "inner";
  if (!borderWidth) {
    return;
  }
  ctx.setLineDash(borderDash || []);
  ctx.lineDashOffset = borderDashOffset;
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || "round";
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || "bevel";
  }
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset, spacing2, endAngle, circular);
    for (let i = 0; i < fullCircles; ++i) {
      ctx.stroke();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  if (inner) {
    clipArc(ctx, element, endAngle);
  }
  if (!fullCircles) {
    pathArc(ctx, element, offset, spacing2, endAngle, circular);
    ctx.stroke();
  }
}
class ArcElement extends Element$1 {
  static id = "arc";
  static defaults = {
    borderAlign: "center",
    borderColor: "#fff",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: void 0,
    borderRadius: 0,
    borderWidth: 2,
    offset: 0,
    spacing: 0,
    angle: void 0,
    circular: true
  };
  static defaultRoutes = {
    backgroundColor: "backgroundColor"
  };
  static descriptors = {
    _scriptable: true,
    _indexable: (name) => name !== "borderDash"
  };
  circumference;
  endAngle;
  fullCircles;
  innerRadius;
  outerRadius;
  pixelMargin;
  startAngle;
  constructor(cfg) {
    super();
    this.options = void 0;
    this.circumference = void 0;
    this.startAngle = void 0;
    this.endAngle = void 0;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    const { angle, distance: distance2 } = getAngleFromPoint(point, {
      x: chartX,
      y: chartY
    });
    const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], useFinalPosition);
    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
    const _circumference = valueOrDefault(circumference, endAngle - startAngle);
    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
    const withinRadius = _isBetween(distance2, innerRadius + rAdjust, outerRadius + rAdjust);
    return betweenAngles && withinRadius;
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y2, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
      "x",
      "y",
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius"
    ], useFinalPosition);
    const { offset, spacing: spacing2 } = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing2 + offset) / 2;
    return {
      x: x2 + Math.cos(halfAngle) * halfRadius,
      y: y2 + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const { options, circumference } = this;
    const offset = (options.offset || 0) / 4;
    const spacing2 = (options.spacing || 0) / 2;
    const circular = options.circular;
    this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
      return;
    }
    ctx.save();
    const halfAngle = (this.startAngle + this.endAngle) / 2;
    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
    const radiusOffset = offset * fix;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    drawArc(ctx, this, radiusOffset, spacing2, circular);
    drawBorder(ctx, this, radiusOffset, spacing2, circular);
    ctx.restore();
  }
}
function setStyle(ctx, options, style = options) {
  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _steppedLineTo;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierCurveTo;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
  const { start: segmentStart, end: segmentEnd } = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line2, segment, params) {
  const { points, options } = line2;
  const { count, start, loop, ilen } = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let { move = true, reverse } = params || {};
  let i, point, prev2;
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev2, point, reverse, options.stepped);
    }
    prev2 = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev2, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line2, segment, params) {
  const points = line2.points;
  const { count, start, ilen } = pathVars(points, segment, params);
  const { move = true, reverse } = params || {};
  let avgX = 0;
  let countX = 0;
  let i, point, prevX, minY, maxY, lastY;
  const pointIndex = (index2) => (start + (reverse ? ilen - index2 : index2)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i = 0; i <= ilen; ++i) {
    point = points[pointIndex(i)];
    if (point.skip) {
      continue;
    }
    const x2 = point.x;
    const y2 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y2 < minY) {
        minY = y2;
      } else if (y2 > maxY) {
        maxY = y2;
      }
      avgX = (countX * avgX + x2) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x2, y2);
      prevX = truncX;
      countX = 0;
      minY = maxY = y2;
    }
    lastY = y2;
  }
  drawX();
}
function _getSegmentMethod(line2) {
  const opts = line2.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line2._decimated && !line2._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _steppedInterpolation;
  }
  if (options.tension || options.cubicInterpolationMode === "monotone") {
    return _bezierInterpolation;
  }
  return _pointInLine;
}
function strokePathWithCache(ctx, line2, start, count) {
  let path = line2._path;
  if (!path) {
    path = line2._path = new Path2D();
    if (line2.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line2.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line2, start, count) {
  const { segments, options } = line2;
  const segmentMethod = _getSegmentMethod(line2);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line2, segment, {
      start,
      end: start + count - 1
    })) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line2, start, count) {
  if (usePath2D && !line2.options.segment) {
    strokePathWithCache(ctx, line2, start, count);
  } else {
    strokePathDirect(ctx, line2, start, count);
  }
}
class LineElement extends Element$1 {
  static id = "line";
  static defaults = {
    borderCapStyle: "butt",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: "miter",
    borderWidth: 3,
    capBezierPoints: true,
    cubicInterpolationMode: "default",
    fill: false,
    spanGaps: false,
    stepped: false,
    tension: 0
  };
  static defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  static descriptors = {
    _scriptable: true,
    _indexable: (name) => name !== "borderDash" && name !== "fill"
  };
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = void 0;
    this._chart = void 0;
    this._loop = void 0;
    this._fullLoop = void 0;
    this._path = void 0;
    this._points = void 0;
    this._segments = void 0;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const options = this.options;
    if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
      const loop = options.spanGaps ? this._loop : this._fullLoop;
      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
      this._pointsUpdated = true;
    }
  }
  set points(points) {
    this._points = points;
    delete this._segments;
    delete this._path;
    this._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = _computeSegments(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const options = this.options;
    const value = point[property];
    const points = this.points;
    const segments = _boundSegments(this, {
      property,
      start: value,
      end: value
    });
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i, ilen;
    for (i = 0, ilen = segments.length; i < ilen; ++i) {
      const { start, end } = segments[i];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t2 = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t2, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const segments = this.segments;
    const segmentMethod = _getSegmentMethod(this);
    let loop = this._loop;
    start = start || 0;
    count = count || this.points.length - start;
    for (const segment of segments) {
      loop &= segmentMethod(ctx, this, segment, {
        start,
        end: start + count - 1
      });
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const options = this.options || {};
    const points = this.points || [];
    if (points.length && options.borderWidth) {
      ctx.save();
      draw(ctx, this, start, count);
      ctx.restore();
    }
    if (this.animated) {
      this._pointsUpdated = false;
      this._path = void 0;
    }
  }
}
function inRange$1(el2, pos, axis, useFinalPosition) {
  const options = el2.options;
  const { [axis]: value } = el2.getProps([
    axis
  ], useFinalPosition);
  return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element$1 {
  static id = "point";
  parsed;
  skip;
  stop;
  /**
  * @type {any}
  */
  static defaults = {
    borderWidth: 1,
    hitRadius: 1,
    hoverBorderWidth: 1,
    hoverRadius: 4,
    pointStyle: "circle",
    radius: 3,
    rotation: 0
  };
  /**
  * @type {any}
  */
  static defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  constructor(cfg) {
    super();
    this.options = void 0;
    this.parsed = void 0;
    this.skip = void 0;
    this.stop = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return Math.pow(mouseX - x2, 2) + Math.pow(mouseY - y2, 2) < Math.pow(options.hitRadius + options.radius, 2);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, "x", useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, "y", useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y2 } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x: x2,
      y: y2
    };
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const options = this.options;
    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    drawPoint(ctx, options, this.x, this.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
function getBarBounds(bar, useFinalPosition) {
  const { x: x2, y: y2, base, width, height } = bar.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x2, base);
    right = Math.max(x2, base);
    top = y2 - half;
    bottom = y2 + half;
  } else {
    half = width / 2;
    left = x2 - half;
    right = x2 + half;
    top = Math.min(y2, base);
    bottom = Math.max(y2, base);
  }
  return {
    left,
    top,
    right,
    bottom
  };
}
function skipOrLimit(skip2, value, min, max) {
  return skip2 ? 0 : _limitValue(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip2 = bar.borderSkipped;
  const o = toTRBL(value);
  return {
    t: skipOrLimit(skip2.top, o.top, 0, maxH),
    r: skipOrLimit(skip2.right, o.right, 0, maxW),
    b: skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip2.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const { enableBorderRadius } = bar.getProps([
    "enableBorderRadius"
  ]);
  const value = bar.options.borderRadius;
  const o = toTRBLCorners(value);
  const maxR = Math.min(maxW, maxH);
  const skip2 = bar.borderSkipped;
  const enableBorder = enableBorderRadius || isObject(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border2 = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border2.l,
      y: bounds.top + border2.t,
      w: width - border2.l - border2.r,
      h: height - border2.t - border2.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border2.t, border2.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border2.t, border2.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border2.b, border2.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border2.b, border2.r))
      }
    }
  };
}
function inRange(bar, x2, y2, useFinalPosition) {
  const skipX = x2 === null;
  const skipY = y2 === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || _isBetween(x2, bounds.left, bounds.right)) && (skipY || _isBetween(y2, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x2 = rect.x !== refRect.x ? -amount : 0;
  const y2 = rect.y !== refRect.y ? -amount : 0;
  const w2 = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x2;
  const h3 = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y2;
  return {
    x: rect.x + x2,
    y: rect.y + y2,
    w: rect.w + w2,
    h: rect.h + h3,
    radius: rect.radius
  };
}
class BarElement extends Element$1 {
  static id = "bar";
  static defaults = {
    borderSkipped: "start",
    borderWidth: 0,
    borderRadius: 0,
    inflateAmount: "auto",
    pointStyle: void 0
  };
  static defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  constructor(cfg) {
    super();
    this.options = void 0;
    this.horizontal = void 0;
    this.base = void 0;
    this.width = void 0;
    this.height = void 0;
    this.inflateAmount = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const { inflateAmount, options: { borderColor, backgroundColor } } = this;
    const { inner, outer } = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = borderColor;
      ctx.fill("evenodd");
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount));
    ctx.fillStyle = backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x: x2, y: y2, base, horizontal } = this.getProps([
      "x",
      "y",
      "base",
      "horizontal"
    ], useFinalPosition);
    return {
      x: horizontal ? (x2 + base) / 2 : x2,
      y: horizontal ? y2 : (y2 + base) / 2
    };
  }
  getRange(axis) {
    return axis === "x" ? this.width / 2 : this.height / 2;
  }
}
var elements = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcElement,
  BarElement,
  LineElement,
  PointElement
});
const BORDER_COLORS = [
  "rgb(54, 162, 235)",
  "rgb(255, 99, 132)",
  "rgb(255, 159, 64)",
  "rgb(255, 205, 86)",
  "rgb(75, 192, 192)",
  "rgb(153, 102, 255)",
  "rgb(201, 203, 207)"
  // grey
];
const BACKGROUND_COLORS = /* @__PURE__ */ BORDER_COLORS.map((color2) => color2.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function getBorderColor(i) {
  return BORDER_COLORS[i % BORDER_COLORS.length];
}
function getBackgroundColor(i) {
  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i) {
  dataset.borderColor = getBorderColor(i);
  dataset.backgroundColor = getBackgroundColor(i);
  return ++i;
}
function colorizeDoughnutDataset(dataset, i) {
  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));
  return i;
}
function colorizePolarAreaDataset(dataset, i) {
  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));
  return i;
}
function getColorizer(chart) {
  let i = 0;
  return (dataset, datasetIndex) => {
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    if (controller instanceof DoughnutController) {
      i = colorizeDoughnutDataset(dataset, i);
    } else if (controller instanceof PolarAreaController) {
      i = colorizePolarAreaDataset(dataset, i);
    } else if (controller) {
      i = colorizeDefaultDataset(dataset, i);
    }
  };
}
function containsColorsDefinitions(descriptors2) {
  let k2;
  for (k2 in descriptors2) {
    if (descriptors2[k2].borderColor || descriptors2[k2].backgroundColor) {
      return true;
    }
  }
  return false;
}
function containsColorsDefinition(descriptor) {
  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
var plugin_colors = {
  id: "colors",
  defaults: {
    enabled: true,
    forceOverride: false
  },
  beforeLayout(chart, _args, options) {
    if (!options.enabled) {
      return;
    }
    const { data: { datasets }, options: chartOptions } = chart.config;
    const { elements: elements2 } = chartOptions;
    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements2 && containsColorsDefinitions(elements2))) {
      return;
    }
    const colorizer = getColorizer(chart);
    datasets.forEach(colorizer);
  }
};
function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a = start;
  let i, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a];
  for (i = 0; i < samples - 2; i++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
    const { x: pointAx, y: pointAy } = data[a];
    maxArea = area = -1;
    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i, point, x2, y2, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i = start; i < start + count; ++i) {
    point = data[i];
    x2 = (point.x - xMin) / dx * availableWidth;
    y2 = point.y;
    const truncX = x2 | 0;
    if (truncX === prevX) {
      if (y2 < minY) {
        minY = y2;
        minIndex = i;
      } else if (y2 > maxY) {
        maxY = y2;
        maxIndex = i;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i - 1;
      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y2;
      minIndex = maxIndex = startIndex = i;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: data
    });
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const { iScale } = meta;
  const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
  if (minDefined) {
    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {
    start,
    count
  };
}
var plugin_decimation = {
  id: "decimation",
  defaults: {
    algorithm: "min-max",
    enabled: false
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }
    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const { _data, indexAxis } = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;
      if (resolve([
        indexAxis,
        chart.options.indexAxis
      ]) === "y") {
        return;
      }
      if (!meta.controller.supportsDecimation) {
        return;
      }
      const xAxis = chart.scales[meta.xAxisID];
      if (xAxis.type !== "linear" && xAxis.type !== "time") {
        return;
      }
      if (chart.options.parsing) {
        return;
      }
      let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;
      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }
      if (isNullOrUndef(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, "data", {
          configurable: true,
          enumerable: true,
          get: function() {
            return this._decimated;
          },
          set: function(d2) {
            this._data = d2;
          }
        });
      }
      let decimated;
      switch (options.algorithm) {
        case "lttb":
          decimated = lttbDecimation(data, start, count, availableWidth, options);
          break;
        case "min-max":
          decimated = minMaxDecimation(data, start, count, availableWidth);
          break;
        default:
          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }
      dataset._decimated = decimated;
    });
  },
  destroy(chart) {
    cleanDecimatedData(chart);
  }
};
function _segments(line2, target, property) {
  const segments = line2.segments;
  const points = line2.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let { start, end } = segment;
    end = _findSegmentEnd(start, end, points);
    const bounds = _getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = _boundSegments(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = _boundSegment(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, "start", Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, "end", Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function _getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === "angle") {
    start = _normalizeAngle(start);
    end = _normalizeAngle(end);
  }
  return {
    property,
    start,
    end
  };
}
function _pointsFromSegments(boundary, line2) {
  const { x: x2 = null, y: y2 = null } = boundary || {};
  const linePoints = line2.points;
  const points = [];
  line2.segments.forEach(({ start, end }) => {
    end = _findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y2 !== null) {
      points.push({
        x: first.x,
        y: y2
      });
      points.push({
        x: last.x,
        y: y2
      });
    } else if (x2 !== null) {
      points.push({
        x: x2,
        y: first.y
      });
      points.push({
        x: x2,
        y: last.y
      });
    }
  });
  return points;
}
function _findSegmentEnd(start, end, points) {
  for (; end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function _getEdge(a, b2, prop, fn) {
  if (a && b2) {
    return fn(a[prop], b2[prop]);
  }
  return a ? a[prop] : b2 ? b2[prop] : 0;
}
function _createBoundaryLine(boundary, line2) {
  let points = [];
  let _loop = false;
  if (isArray(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = _pointsFromSegments(boundary, line2);
  }
  return points.length ? new LineElement({
    points,
    options: {
      tension: 0
    },
    _loop,
    _fullLoop: _loop
  }) : null;
}
function _shouldApplyFill(source) {
  return source && source.fill !== false;
}
function _resolveTarget(sources, index2, propagate) {
  const source = sources[index2];
  let fill2 = source.fill;
  const visited = [
    index2
  ];
  let target;
  if (!propagate) {
    return fill2;
  }
  while (fill2 !== false && visited.indexOf(fill2) === -1) {
    if (!isNumberFinite(fill2)) {
      return fill2;
    }
    target = sources[fill2];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill2;
    }
    visited.push(fill2);
    fill2 = target.fill;
  }
  return false;
}
function _decodeFill(line2, index2, count) {
  const fill2 = parseFillOption(line2);
  if (isObject(fill2)) {
    return isNaN(fill2.value) ? false : fill2;
  }
  let target = parseFloat(fill2);
  if (isNumberFinite(target) && Math.floor(target) === target) {
    return decodeTargetIndex(fill2[0], index2, target, count);
  }
  return [
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(fill2) >= 0 && fill2;
}
function decodeTargetIndex(firstCh, index2, target, count) {
  if (firstCh === "-" || firstCh === "+") {
    target = index2 + target;
  }
  if (target === index2 || target < 0 || target >= count) {
    return false;
  }
  return target;
}
function _getTargetPixel(fill2, scale2) {
  let pixel = null;
  if (fill2 === "start") {
    pixel = scale2.bottom;
  } else if (fill2 === "end") {
    pixel = scale2.top;
  } else if (isObject(fill2)) {
    pixel = scale2.getPixelForValue(fill2.value);
  } else if (scale2.getBasePixel) {
    pixel = scale2.getBasePixel();
  }
  return pixel;
}
function _getTargetValue(fill2, scale2, startValue) {
  let value;
  if (fill2 === "start") {
    value = startValue;
  } else if (fill2 === "end") {
    value = scale2.options.reverse ? scale2.min : scale2.max;
  } else if (isObject(fill2)) {
    value = fill2.value;
  } else {
    value = scale2.getBaseValue();
  }
  return value;
}
function parseFillOption(line2) {
  const options = line2.options;
  const fillOption = options.fill;
  let fill2 = valueOrDefault(fillOption && fillOption.target, fillOption);
  if (fill2 === void 0) {
    fill2 = !!options.backgroundColor;
  }
  if (fill2 === false || fill2 === null) {
    return false;
  }
  if (fill2 === true) {
    return "origin";
  }
  return fill2;
}
function _buildStackLine(source) {
  const { scale: scale2, index: index2, line: line2 } = source;
  const points = [];
  const segments = line2.segments;
  const sourcePoints = line2.points;
  const linesBelow = getLinesBelow(scale2, index2);
  linesBelow.push(_createBoundaryLine({
    x: null,
    y: scale2.bottom
  }, line2));
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({
    points,
    options: {}
  });
}
function getLinesBelow(scale2, index2) {
  const below = [];
  const metas = scale2.getMatchingVisibleMetas("line");
  for (let i = 0; i < metas.length; i++) {
    const meta = metas[i];
    if (meta.index === index2) {
      break;
    }
    if (!meta.hidden) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line2 = linesBelow[j];
    const { first, last, point } = findPoint(line2, sourcePoint, "x");
    if (!point || first && last) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line2, sourcePoint, property) {
  const point = line2.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line2.segments;
  const linePoints = line2.points;
  let first = false;
  let last = false;
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (_isBetween(pointValue, firstValue, lastValue)) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {
    first,
    last,
    point
  };
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const { x: x2, y: y2, radius } = this;
    bounds = bounds || {
      start: 0,
      end: TAU
    };
    ctx.arc(x2, y2, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const { x: x2, y: y2, radius } = this;
    const angle = point.angle;
    return {
      x: x2 + Math.cos(angle) * radius,
      y: y2 + Math.sin(angle) * radius,
      angle
    };
  }
}
function _getTarget(source) {
  const { chart, fill: fill2, line: line2 } = source;
  if (isNumberFinite(fill2)) {
    return getLineByIndex(chart, fill2);
  }
  if (fill2 === "stack") {
    return _buildStackLine(source);
  }
  if (fill2 === "shape") {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return _createBoundaryLine(boundary, line2);
}
function getLineByIndex(chart, index2) {
  const meta = chart.getDatasetMeta(index2);
  const visible = meta && chart.isDatasetVisible(index2);
  return visible ? meta.dataset : null;
}
function computeBoundary(source) {
  const scale2 = source.scale || {};
  if (scale2.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
  const { scale: scale2 = {}, fill: fill2 } = source;
  const pixel = _getTargetPixel(fill2, scale2);
  if (isNumberFinite(pixel)) {
    const horizontal = scale2.isHorizontal();
    return {
      x: horizontal ? pixel : null,
      y: horizontal ? null : pixel
    };
  }
  return null;
}
function computeCircularBoundary(source) {
  const { scale: scale2, fill: fill2 } = source;
  const options = scale2.options;
  const length2 = scale2.getLabels().length;
  const start = options.reverse ? scale2.max : scale2.min;
  const value = _getTargetValue(fill2, scale2, start);
  const target = [];
  if (options.grid.circular) {
    const center = scale2.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale2.getDistanceFromCenterForValue(value)
    });
  }
  for (let i = 0; i < length2; ++i) {
    target.push(scale2.getPointPositionForValue(i, value));
  }
  return target;
}
function _drawfill(ctx, source, area) {
  const target = _getTarget(source);
  const { line: line2, scale: scale2, axis } = source;
  const lineOpts = line2.options;
  const fillOption = lineOpts.fill;
  const color2 = lineOpts.backgroundColor;
  const { above = color2, below = color2 } = fillOption || {};
  if (target && line2.points.length) {
    clipArea(ctx, area);
    doFill(ctx, {
      line: line2,
      target,
      above,
      below,
      area,
      scale: scale2,
      axis
    });
    unclipArea(ctx);
  }
}
function doFill(ctx, cfg) {
  const { line: line2, target, above, below, area, scale: scale2 } = cfg;
  const property = line2._loop ? "angle" : cfg.axis;
  ctx.save();
  if (property === "x" && below !== above) {
    clipVertical(ctx, target, area.top);
    fill(ctx, {
      line: line2,
      target,
      color: above,
      scale: scale2,
      property
    });
    ctx.restore();
    ctx.save();
    clipVertical(ctx, target, area.bottom);
  }
  fill(ctx, {
    line: line2,
    target,
    color: below,
    scale: scale2,
    property
  });
  ctx.restore();
}
function clipVertical(ctx, target, clipY) {
  const { segments, points } = target;
  let first = true;
  let lineLoop = false;
  ctx.beginPath();
  for (const segment of segments) {
    const { start, end } = segment;
    const firstPoint = points[start];
    const lastPoint = points[_findSegmentEnd(start, end, points)];
    if (first) {
      ctx.moveTo(firstPoint.x, firstPoint.y);
      first = false;
    } else {
      ctx.lineTo(firstPoint.x, clipY);
      ctx.lineTo(firstPoint.x, firstPoint.y);
    }
    lineLoop = !!target.pathSegment(ctx, segment, {
      move: lineLoop
    });
    if (lineLoop) {
      ctx.closePath();
    } else {
      ctx.lineTo(lastPoint.x, clipY);
    }
  }
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function fill(ctx, cfg) {
  const { line: line2, target, property, color: color2, scale: scale2 } = cfg;
  const segments = _segments(line2, target, property);
  for (const { source: src2, target: tgt, start, end } of segments) {
    const { style: { backgroundColor = color2 } = {} } = src2;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale2, notShape && _getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line2.pathSegment(ctx, src2);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {
        move: lineLoop,
        reverse: true
      });
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? "evenodd" : "nonzero");
    ctx.restore();
  }
}
function clipBounds(ctx, scale2, bounds) {
  const { top, bottom } = scale2.chart.chartArea;
  const { property, start, end } = bounds || {};
  if (property === "x") {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
var index = {
  id: "filler",
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i, line2, source;
    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line2 = meta.dataset;
      source = null;
      if (line2 && line2.options && line2 instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i),
          index: i,
          fill: _decodeFill(line2, i, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line: line2
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i = 0; i < count; ++i) {
      source = sources[i];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = _resolveTarget(sources, i, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw2 = options.drawTime === "beforeDraw";
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw2 && source.fill) {
        _drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== "beforeDatasetsDraw") {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (_shouldApplyFill(source)) {
        _drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") {
      return;
    }
    _drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: "beforeDatasetDraw"
  }
};
const getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a, b2) => a !== null && b2 !== null && a.datasetIndex === b2.datasetIndex && a.index === b2.index;
class Legend extends Element$1 {
  constructor(config2) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config2.chart;
    this.options = config2.options;
    this.ctx = config2.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b2) => labelOpts.sort(a, b2, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options, ctx } = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align: align2, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align2, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align2, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align2, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = _alignStartEnd(align2, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += this.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align: align2, labels: labelOpts } = opts;
    const defaultColor = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor2;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x2, y2, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x2, boxWidth / 2);
        const centerY = y2 + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y2 + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x2, boxWidth);
        const borderRadius = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x2, y2, legendItem) {
      renderText(ctx, legendItem.text, x2, y2 + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor2 = {
        x: _alignStartEnd(align2, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor2 = {
        x: this.left + padding,
        y: _alignStartEnd(align2, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x2 = cursor2.x;
      let y2 = cursor2.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i > 0 && x2 + width + padding > this.right) {
          y2 = cursor2.y += lineHeight;
          cursor2.line++;
          x2 = cursor2.x = _alignStartEnd(align2, this.left + padding, this.right - lineWidths[cursor2.line]);
        }
      } else if (i > 0 && y2 + lineHeight > this.bottom) {
        x2 = cursor2.x = x2 + columnSizes[cursor2.line].width + padding;
        cursor2.line++;
        y2 = cursor2.y = _alignStartEnd(align2, this.top + titleHeight + padding, this.bottom - columnSizes[cursor2.line].height);
      }
      const realX = rtlHelper.x(x2);
      drawLegendBox(realX, y2, legendItem);
      x2 = _textX(textAlign, x2 + boxWidth + halfFontSize, isHorizontal ? x2 + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x2), y2, legendItem);
      if (isHorizontal) {
        cursor2.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor2.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
      } else {
        cursor2.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position2 = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y2;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y2 = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size2) => Math.max(acc, size2.height), 0);
      y2 = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x2 = _alignStartEnd(position2, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position2));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x2, y2, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x2, y2) {
    let i, hitBox, lh2;
    if (_isBetween(x2, this.left, this.right) && _isBetween(y2, this.top, this.bottom)) {
      lh2 = this.legendHitBoxes;
      for (i = 0; i < lh2.length; ++i) {
        hitBox = lh2[i];
        if (_isBetween(x2, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y2, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i];
        }
      }
    }
    return null;
  }
  handleEvent(e2) {
    const opts = this.options;
    if (!isListened(e2.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e2.x, e2.y);
    if (e2.type === "mousemove" || e2.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e2,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e2,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e2,
        hoveredItem,
        this
      ], this);
    }
  }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a, b2) => a.length > b2.length ? a : b2);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e2, legendItem, legend) {
      const index2 = legendItem.datasetIndex;
      const ci2 = legend.chart;
      if (ci2.isDatasetVisible(index2)) {
        ci2.hide(index2);
        legendItem.hidden = true;
      } else {
        ci2.show(index2);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith("on"),
    labels: {
      _scriptable: (name) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name)
    }
  }
};
class Title extends Element$1 {
  constructor(config2) {
    super();
    this.chart = config2.chart;
    this.options = config2.options;
    this.ctx = config2.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options } = this;
    const align2 = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align2, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align2, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align2, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const map = /* @__PURE__ */ new WeakMap();
var plugin_subtitle = {
  id: "subtitle",
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "normal"
    },
    fullSize: true,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i, len;
    let xSet = /* @__PURE__ */ new Set();
    let y2 = 0;
    let count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      const el2 = items[i].element;
      if (el2 && el2.hasValue()) {
        const pos = el2.tooltipPosition();
        xSet.add(pos.x);
        y2 += pos.y;
        ++count;
      }
    }
    const xAverage = [
      ...xSet
    ].reduce((a, b2) => a + b2) / xSet.size;
    return {
      x: xAverage,
      y: y2 / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x2 = eventPosition.x;
    let y2 = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      const el2 = items[i].element;
      if (el2 && el2.hasValue()) {
        const center = el2.getCenterPoint();
        const d2 = distanceBetweenPoints(eventPosition, center);
        if (d2 < minDistance) {
          minDistance = d2;
          nearestElement = el2;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x2 = tp.x;
      y2 = tp.y;
    }
    return {
      x: x2,
      y: y2
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if (isArray(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element, datasetIndex, index: index2 } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index2);
  return {
    chart,
    label,
    parsed: controller.getParsed(index2),
    raw: chart.data.datasets[datasetIndex].data[index2],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index2,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options;
  const bodyFont = toFont(options.bodyFont);
  const titleFont = toFont(options.titleFont);
  const footerFont = toFont(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line2) {
    width = Math.max(width, ctx.measureText(line2).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size2) {
  const { y: y2, height } = size2;
  if (y2 < height / 2) {
    return "top";
  } else if (y2 > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size2) {
  const { x: x2, width } = size2;
  const caret2 = options.caretSize + options.caretPadding;
  if (xAlign === "left" && x2 + width + caret2 > chart.width) {
    return true;
  }
  if (xAlign === "right" && x2 - width - caret2 < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size2, yAlign) {
  const { x: x2, width } = size2;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x2 <= (left + right) / 2 ? "left" : "right";
  } else if (x2 <= width / 2) {
    xAlign = "left";
  } else if (x2 >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size2)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options, size2) {
  const yAlign = size2.yAlign || options.yAlign || determineYAlign(chart, size2);
  return {
    xAlign: size2.xAlign || options.xAlign || determineXAlign(chart, options, size2, yAlign),
    yAlign
  };
}
function alignX(size2, xAlign) {
  let { x: x2, width } = size2;
  if (xAlign === "right") {
    x2 -= width;
  } else if (xAlign === "center") {
    x2 -= width / 2;
  }
  return x2;
}
function alignY(size2, yAlign, paddingAndSize) {
  let { y: y2, height } = size2;
  if (yAlign === "top") {
    y2 += paddingAndSize;
  } else if (yAlign === "bottom") {
    y2 -= height + paddingAndSize;
  } else {
    y2 -= height / 2;
  }
  return y2;
}
function getBackgroundPoint(options, size2, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x2 = alignX(size2, xAlign);
  const y2 = alignY(size2, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x2 += paddingAndSize;
    } else if (xAlign === "right") {
      x2 -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x2 -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x2 += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x2, 0, chart.width - size2.width),
    y: _limitValue(y2, 0, chart.height - size2.height)
  };
}
function getAlignedX(tooltip, align2, options) {
  const padding = toPadding(options.padding);
  return align2 === "center" ? tooltip.x + tooltip.width / 2 : align2 === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context2) {
  const override = context2 && context2.dataset && context2.dataset.tooltip && context2.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
  beforeTitle: noop,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item = tooltipItems[0];
      const labels = item.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item.dataset.label || "";
      } else if (item.label) {
        return item.label;
      } else if (labelCount > 0 && item.dataIndex < labelCount) {
        return labels[item.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop,
  beforeBody: noop,
  beforeLabel: noop,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options.borderColor,
      backgroundColor: options.backgroundColor,
      borderWidth: options.borderWidth,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options.pointStyle,
      rotation: options.rotation
    };
  },
  afterLabel: noop,
  afterBody: noop,
  beforeFooter: noop,
  footer: noop,
  afterFooter: noop
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
  const result = callbacks[name].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name].call(ctx, arg);
  }
  return result;
}
class Tooltip extends Element$1 {
  static positioners = positioners;
  constructor(config2) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config2.chart;
    this.options = config2.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations2 = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations2);
    }
    return animations2;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context2, options) {
    const { callbacks } = options;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context2);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context2);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context2);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options) {
    const { callbacks } = options;
    const bodyItems = [];
    each(tooltipItems, (context2) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context2);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context2)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context2));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context2)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options) {
    const { callbacks } = options;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;
    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(this.chart, active[i]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element, index2, array) => options.filter(element, index2, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a, b2) => options.itemSort(a, b2, data));
    }
    each(tooltipItems, (context2) => {
      const scoped = overrideCallbacks(options.callbacks, context2);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context2));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context2));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context2));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position2 = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size2 = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position2, size2);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size2.width,
        height: size2.height,
        caretX: position2.x,
        caretY: position2.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size2, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size2, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size2, options) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size2;
    let x1, x2, x3, y1, y2, y3;
    if (yAlign === "center") {
      y2 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2,
      y3
    };
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length2 = title.length;
    let titleFont, titleSpacing, i;
    if (length2) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i = 0; i < length2; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i + 1 === length2) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i, rtlHelper, options) {
    const labelColor = this.labelColors[i];
    const labelPointStyle = this.labelPointStyles[i];
    const { boxHeight, boxWidth } = options;
    const bodyFont = toFont(options.bodyFont);
    const colorX = getAlignedX(this, "left", options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColor.borderColor;
      ctx.fillStyle = labelColor.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
      ctx.strokeStyle = labelColor.borderColor;
      ctx.setLineDash(labelColor.borderDash || []);
      ctx.lineDashOffset = labelColor.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = toTRBLCorners(labelColor.borderRadius);
      if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColor.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i];
  }
  drawBody(pt, ctx, options) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
    const fillLineOfText = function(line2) {
      ctx.fillText(line2, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = this.labelTextColors[i];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length2 = footer.length;
    let footerFont, i;
    if (length2) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i = 0; i < length2; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const { xAlign, yAlign } = this;
    const { x: x2, y: y2 } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x2 + topLeft, y2);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width - topRight, y2);
    ctx.quadraticCurveTo(x2 + width, y2, x2 + width, y2 + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + width, y2 + height - bottomRight);
    ctx.quadraticCurveTo(x2 + width, y2 + height, x2 + width - bottomRight, y2 + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2 + bottomLeft, y2 + height);
    ctx.quadraticCurveTo(x2, y2 + height, x2, y2 + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x2, y2 + topLeft);
    ctx.quadraticCurveTo(x2, y2, x2 + topLeft, y2);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position2 = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position2) {
        return;
      }
      const size2 = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position2, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size2.width;
        this.height = size2.height;
        this.caretX = position2.x;
        this.caretY = position2.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      overrideTextDirection(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      restoreTextDirection(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index: index2 }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index2],
        index: index2
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e2, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e2, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e2);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e2.x,
          y: e2.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e2, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e2.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive.filter((i) => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== void 0);
    }
    const active = this.chart.getElementsAtEventForMode(e2, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e2) {
    const { caretX, caretY, options } = this;
    const position2 = positioners[options.position].call(this, active, e2);
    return position2 !== false && (caretX !== position2.x || caretY !== position2.y);
  }
}
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        chart,
        options
      });
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name) => name !== "filter" && name !== "itemSort" && name !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
var plugins = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Colors: plugin_colors,
  Decimation: plugin_decimation,
  Filler: index,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index2, addedLabels) => {
  if (typeof raw === "string") {
    index2 = labels.push(raw) - 1;
    addedLabels.unshift({
      index: index2,
      label: raw
    });
  } else if (isNaN(raw)) {
    index2 = null;
  }
  return index2;
};
function findOrAddLabel(labels, raw, index2, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index2, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index2 : first;
}
const validIndex = (index2, max) => index2 === null ? null : _limitValue(Math.round(index2), 0, max);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
class CategoryScale extends Scale {
  static id = "category";
  static defaults = {
    ticks: {
      callback: _getLabelForValue
    }
  };
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index: index2, label } of added) {
        if (labels[index2] === label) {
          labels.splice(index2, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index2 = isFinite(index2) && labels[index2] === raw ? index2 : findOrAddLabel(labels, raw, valueOrDefault(index2, raw), this._addedLabels);
    return validIndex(index2, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index2) {
    const ticks = this.ticks;
    if (index2 < 0 || index2 > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index2].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min);
  const maxDefined = !isNullOrUndef(max);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing2 = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing2 < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing2) - Math.floor(rmin / spacing2);
  if (numSpaces > maxSpaces) {
    spacing2 = niceNum(numSpaces * spacing2 / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing2 = Math.ceil(spacing2 * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing2) * spacing2;
    niceMax = Math.ceil(rmax / spacing2) * spacing2;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing2 / 1e3)) {
    numSpaces = Math.round(Math.min((max - min) / spacing2, maxTicks));
    spacing2 = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing2 = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing2;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing2 / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing2), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });
      if (niceMin < min) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing2) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    const tickValue = Math.round((niceMin + j * spacing2) * factor) / factor;
    if (maxDefined && tickValue > max) {
      break;
    }
    ticks.push({
      value: tickValue
    });
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length2 = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length2);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this;
    const setMin = (v2) => min = minDefined ? min : v2;
    const setMax = (v2) => max = maxDefined ? max : v2;
    if (beginAtZero) {
      const minSign = sign(min);
      const maxSign = sign(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = max === 0 ? 1 : Math.abs(max * 0.05);
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
}
class LinearScale extends LinearScaleBase {
  static id = "linear";
  static defaults = {
    ticks: {
      callback: Ticks.formatters.numeric
    }
  };
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? min : 0;
    this.max = isNumberFinite(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length2 = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length2 / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
const log10Floor = (v2) => Math.floor(log10(v2));
const changeExponent = (v2, m2) => Math.pow(10, log10Floor(v2) + m2);
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min, max, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min / rangeStep);
  const end = Math.ceil(max / rangeStep);
  return end - start;
}
function startExp(min, max) {
  const range2 = max - min;
  let rangeExp = log10Floor(range2);
  while (steps(min, max, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min, max, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
  min = finiteOrDefault(generationOptions.min, min);
  const ticks = [];
  const minExp = log10Floor(min);
  let exp = startExp(min, max);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min - base) * precision) / precision;
  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
class LogarithmicScale extends Scale {
  static id = "logarithmic";
  static defaults = {
    ticks: {
      callback: Ticks.formatters.logarithmic,
      major: {
        enabled: true
      }
    }
  };
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index2) {
    const value = LinearScaleBase.prototype.parse.apply(this, [
      raw,
      index2
    ]);
    if (value === 0) {
      this._zero = true;
      return void 0;
    }
    return isNumberFinite(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? Math.max(0, min) : null;
    this.max = isNumberFinite(max) ? Math.max(0, max) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let min = this.min;
    let max = this.max;
    const setMin = (v2) => min = minDefined ? min : v2;
    const setMax = (v2) => max = maxDefined ? max : v2;
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(changeExponent(min, -1));
        setMax(changeExponent(max, 1));
      }
    }
    if (min <= 0) {
      setMin(changeExponent(max, -1));
    }
    if (max <= 0) {
      setMax(changeExponent(min, 1));
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = log10(start);
    this._valueRange = log10(this.max) - log10(start);
  }
  getPixelForValue(value) {
    if (value === void 0 || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
}
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size2, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size2 / 2,
      end: pos + size2 / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size2,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size2
  };
}
function fitWithPointLabels(scale2) {
  const orig = {
    l: scale2.left + scale2._padding.left,
    r: scale2.right - scale2._padding.right,
    t: scale2.top + scale2._padding.top,
    b: scale2.bottom - scale2._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale2._pointLabels.length;
  const pointLabelOpts = scale2.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i = 0; i < valueCount; i++) {
    const opts = pointLabelOpts.setContext(scale2.getPointLabelContext(i));
    padding[i] = opts.padding;
    const pointPosition = scale2.getPointPosition(i, scale2.drawingArea + padding[i], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale2.ctx, plFont, scale2._pointLabels[i]);
    labelSizes[i] = textSize;
    const angleRadians = _normalizeAngle(scale2.getIndexAngle(i) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale2.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale2._pointLabelItems = buildPointLabelItems(scale2, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x2 = 0;
  let y2 = 0;
  if (hLimits.start < orig.l) {
    x2 = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x2);
  } else if (hLimits.end > orig.r) {
    x2 = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x2);
  }
  if (vLimits.start < orig.t) {
    y2 = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y2);
  } else if (vLimits.end > orig.b) {
    y2 = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y2);
  }
}
function createPointLabelItem(scale2, index2, itemOpts) {
  const outerDistance = scale2.drawingArea;
  const { extra, additionalAngle, padding, size: size2 } = itemOpts;
  const pointLabelPosition = scale2.getPointPosition(index2, outerDistance + extra + padding, additionalAngle);
  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
  const y2 = yForAngle(pointLabelPosition.y, size2.h, angle);
  const textAlign = getTextAlignForAngle(angle);
  const left = leftForTextAlign(pointLabelPosition.x, size2.w, textAlign);
  return {
    visible: true,
    x: pointLabelPosition.x,
    y: y2,
    textAlign,
    left,
    top: y2,
    right: left + size2.w,
    bottom: y2 + size2.h
  };
}
function isNotOverlapped(item, area) {
  if (!area) {
    return true;
  }
  const { left, top, right, bottom } = item;
  const apexesInArea = _isPointInArea({
    x: left,
    y: top
  }, area) || _isPointInArea({
    x: left,
    y: bottom
  }, area) || _isPointInArea({
    x: right,
    y: top
  }, area) || _isPointInArea({
    x: right,
    y: bottom
  }, area);
  return !apexesInArea;
}
function buildPointLabelItems(scale2, labelSizes, padding) {
  const items = [];
  const valueCount = scale2._pointLabels.length;
  const opts = scale2.options;
  const { centerPointLabels, display } = opts.pointLabels;
  const itemOpts = {
    extra: getTickBackdropHeight(opts) / 2,
    additionalAngle: centerPointLabels ? PI / valueCount : 0
  };
  let area;
  for (let i = 0; i < valueCount; i++) {
    itemOpts.padding = padding[i];
    itemOpts.size = labelSizes[i];
    const item = createPointLabelItem(scale2, i, itemOpts);
    items.push(item);
    if (display === "auto") {
      item.visible = isNotOverlapped(item, area);
      if (item.visible) {
        area = item;
      }
    }
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x2, w2, align2) {
  if (align2 === "right") {
    x2 -= w2;
  } else if (align2 === "center") {
    x2 -= w2 / 2;
  }
  return x2;
}
function yForAngle(y2, h3, angle) {
  if (angle === 90 || angle === 270) {
    y2 -= h3 / 2;
  } else if (angle > 270 || angle < 90) {
    y2 -= h3;
  }
  return y2;
}
function drawPointLabelBox(ctx, opts, item) {
  const { left, top, right, bottom } = item;
  const { backdropColor } = opts;
  if (!isNullOrUndef(backdropColor)) {
    const borderRadius = toTRBLCorners(opts.borderRadius);
    const padding = toPadding(opts.backdropPadding);
    ctx.fillStyle = backdropColor;
    const backdropLeft = left - padding.left;
    const backdropTop = top - padding.top;
    const backdropWidth = right - left + padding.width;
    const backdropHeight = bottom - top + padding.height;
    if (Object.values(borderRadius).some((v2) => v2 !== 0)) {
      ctx.beginPath();
      addRoundedRectPath(ctx, {
        x: backdropLeft,
        y: backdropTop,
        w: backdropWidth,
        h: backdropHeight,
        radius: borderRadius
      });
      ctx.fill();
    } else {
      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
  }
}
function drawPointLabels(scale2, labelCount) {
  const { ctx, options: { pointLabels } } = scale2;
  for (let i = labelCount - 1; i >= 0; i--) {
    const item = scale2._pointLabelItems[i];
    if (!item.visible) {
      continue;
    }
    const optsAtIndex = pointLabels.setContext(scale2.getPointLabelContext(i));
    drawPointLabelBox(ctx, optsAtIndex, item);
    const plFont = toFont(optsAtIndex.font);
    const { x: x2, y: y2, textAlign } = item;
    renderText(ctx, scale2._pointLabels[i], x2, y2 + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale2, radius, circular, labelCount) {
  const { ctx } = scale2;
  if (circular) {
    ctx.arc(scale2.xCenter, scale2.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale2.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i = 1; i < labelCount; i++) {
      pointPosition = scale2.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale2, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale2.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale2, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index2, label) {
  return createContext(parent, {
    label,
    index: index2,
    type: "pointLabel"
  });
}
class RadialLinearScale extends LinearScaleBase {
  static id = "radialLinear";
  static defaults = {
    display: true,
    animate: true,
    position: "chartArea",
    angleLines: {
      display: true,
      lineWidth: 1,
      borderDash: [],
      borderDashOffset: 0
    },
    grid: {
      circular: false
    },
    startAngle: 0,
    ticks: {
      showLabelBackdrop: true,
      callback: Ticks.formatters.numeric
    },
    pointLabels: {
      backdropColor: void 0,
      backdropPadding: 2,
      display: true,
      font: {
        size: 10
      },
      callback(label) {
        return label;
      },
      padding: 5,
      centerPointLabels: false
    }
  };
  static defaultRoutes = {
    "angleLines.color": "borderColor",
    "pointLabels.color": "color",
    "ticks.color": "color"
  };
  static descriptors = {
    angleLines: {
      _fallback: "grid"
    }
  };
  constructor(cfg) {
    super(cfg);
    this.xCenter = void 0;
    this.yCenter = void 0;
    this.drawingArea = void 0;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
    const w2 = this.width = this.maxWidth - padding.width;
    const h3 = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w2 / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h3 / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w2, h3) / 2);
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(false);
    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels().map((value, index2) => {
      const label = callback(this.options.pointLabels.callback, [
        value,
        index2
      ], this);
      return label || label === 0 ? label : "";
    }).filter((v2, i) => this.chart.getDataVisibility(i));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index2) {
    const angleMultiplier = TAU / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return _normalizeAngle(index2 * angleMultiplier + toRadians(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if (isNullOrUndef(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance2) {
    if (isNullOrUndef(distance2)) {
      return NaN;
    }
    const scaledDistance = distance2 / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index2) {
    const pointLabels = this._pointLabels || [];
    if (index2 >= 0 && index2 < pointLabels.length) {
      const pointLabel = pointLabels[index2];
      return createPointLabelContext(this.getContext(), index2, pointLabel);
    }
  }
  getPointPosition(index2, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index2) - HALF_PI + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index2, value) {
    return this.getPointPosition(index2, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index2) {
    return this.getPointPositionForValue(index2 || 0, this.getBaseValue());
  }
  getPointLabelPosition(index2) {
    const { left, top, right, bottom } = this._pointLabelItems[index2];
    return {
      left,
      top,
      right,
      bottom
    };
  }
  drawBackground() {
    const { backgroundColor, grid: { circular } } = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const { angleLines, grid: grid2, border: border2 } = opts;
    const labelCount = this._pointLabels.length;
    let i, offset, position2;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid2.display) {
      this.ticks.forEach((tick, index2) => {
        if (index2 !== 0 || index2 === 0 && this.min < 0) {
          offset = this.getDistanceFromCenterForValue(tick.value);
          const context2 = this.getContext(index2);
          const optsAtIndex = grid2.setContext(context2);
          const optsAtIndexBorder = border2.setContext(context2);
          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i = labelCount - 1; i >= 0; i--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
        const { color: color2, lineWidth } = optsAtIndex;
        if (!lineWidth || !color2) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color2;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
        position2 = this.getPointPosition(i, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position2.x, position2.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.ticks.forEach((tick, index2) => {
      if (index2 === 0 && this.min >= 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index2));
      const tickFont = toFont(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index2].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }
      renderText(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color,
        strokeColor: optsAtIndex.textStrokeColor,
        strokeWidth: optsAtIndex.textStrokeWidth
      });
    });
    ctx.restore();
  }
  drawTitle() {
  }
}
const INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
const UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b2) {
  return a - b2;
}
function parse(scale2, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale2._adapter;
  const { parser, round: round2, isoWeekday } = scale2._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale2, numTicks, minUnit, min, max) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];
    if (INTERVALS[unit].common && scale2._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(ticks, time2, timestamps) {
  if (!timestamps) {
    ticks[time2] = true;
  } else if (timestamps.length) {
    const { lo, hi: hi2 } = _lookup(timestamps, time2);
    const timestamp = timestamps[lo] >= time2 ? timestamps[lo] : timestamps[hi2];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale2, ticks, map2, majorUnit) {
  const adapter = scale2._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index2;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index2 = map2[major];
    if (index2 >= 0) {
      ticks[index2].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale2, values, majorUnit) {
  const ticks = [];
  const map2 = {};
  const ilen = values.length;
  let i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map2[value] = i;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale2, ticks, map2, majorUnit);
}
class TimeScale extends Scale {
  static id = "time";
  static defaults = {
    bounds: "data",
    adapters: {},
    time: {
      parser: false,
      unit: false,
      round: false,
      isoWeekday: false,
      minUnit: "millisecond",
      displayFormats: {}
    },
    ticks: {
      source: "auto",
      callback: false,
      major: {
        enabled: false
      }
    }
  };
  constructor(props2) {
    super(props2);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time2 = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time2.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time2.parser,
      round: time2.round,
      isoWeekday: time2.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index2) {
    if (raw === void 0) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || "day";
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {
      min,
      max
    };
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = _filterBetween(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick) => +tick.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit);
    end = _limitValue(end, 0, limit);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = valueOrDefault(options.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time2, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
      throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
    for (time2 = first, count = 0; time2 < max; time2 = +adapter.add(time2, stepSize, minor), count++) {
      addTick(ticks, time2, timestamps);
    }
    if (time2 === max || options.bounds === "ticks" || count === 1) {
      addTick(ticks, time2, timestamps);
    }
    return Object.keys(ticks).sort(sorter).map((x2) => +x2);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const fmt = format || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time2, index2, ticks, format) {
    const options = this.options;
    const formatter = options.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time2,
        index2,
        ticks
      ], this);
    }
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index2];
    const major = majorUnit && majorFormat && tick && tick.major;
    return this._adapter.format(time2, format || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format);
    const size2 = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size2.w : this.height / size2.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse(this, labels[i]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
}
function interpolate(table, val, reverse) {
  let lo = 0;
  let hi2 = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi2].pos) {
      ({ lo, hi: hi2 } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi2]);
  } else {
    if (val >= table[lo].time && val <= table[hi2].time) {
      ({ lo, hi: hi2 } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi2]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  static id = "timeseries";
  static defaults = TimeScale.defaults;
  constructor(props2) {
    super(props2);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate(table, this.min);
    this._tableRange = interpolate(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min, max } = this;
    const items = [];
    const table = [];
    let i, ilen, prev2, curr, next2;
    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min,
          pos: 0
        },
        {
          time: max,
          pos: 1
        }
      ];
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next2 = items[i + 1];
      prev2 = items[i - 1];
      curr = items[i];
      if (Math.round((next2 + prev2) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i / (ilen - 1)
        });
      }
    }
    return table;
  }
  _generate() {
    const min = this.min;
    const max = this.max;
    let timestamps = super.getDataTimestamps();
    if (!timestamps.includes(min) || !timestamps.length) {
      timestamps.splice(0, 0, min);
    }
    if (!timestamps.includes(max) || timestamps.length === 1) {
      timestamps.push(max);
    }
    return timestamps.sort((a, b2) => a - b2);
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
  }
}
var scales = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  CategoryScale,
  LinearScale,
  LogarithmicScale,
  RadialLinearScale,
  TimeScale,
  TimeSeriesScale
});
const registerables = [
  controllers,
  elements,
  plugins,
  scales
];
Chart$1.register(...registerables);
const defaultDatasetIdKey = "label";
function reforwardRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
function setOptions(chart, nextOptions) {
  const options = chart.options;
  if (options && nextOptions) {
    Object.assign(options, nextOptions);
  }
}
function setLabels(currentData, nextLabels) {
  currentData.labels = nextLabels;
}
function setDatasets(currentData, nextDatasets) {
  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;
  const addedDatasets = [];
  currentData.datasets = nextDatasets.map((nextDataset) => {
    const currentDataset = currentData.datasets.find((dataset) => dataset[datasetIdKey] === nextDataset[datasetIdKey]);
    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {
      return {
        ...nextDataset
      };
    }
    addedDatasets.push(currentDataset);
    Object.assign(currentDataset, nextDataset);
    return currentDataset;
  });
}
function cloneData(data) {
  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;
  const nextData = {
    labels: [],
    datasets: []
  };
  setLabels(nextData, data.labels);
  setDatasets(nextData, data.datasets, datasetIdKey);
  return nextData;
}
function ChartComponent(props2, ref) {
  const { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options, plugins: plugins2 = [], fallbackContent, updateMode, ...canvasProps } = props2;
  const canvasRef = reactExports.useRef(null);
  const chartRef = reactExports.useRef();
  const renderChart = () => {
    if (!canvasRef.current)
      return;
    chartRef.current = new Chart$1(canvasRef.current, {
      type,
      data: cloneData(data, datasetIdKey),
      options: options && {
        ...options
      },
      plugins: plugins2
    });
    reforwardRef(ref, chartRef.current);
  };
  const destroyChart = () => {
    reforwardRef(ref, null);
    if (chartRef.current) {
      chartRef.current.destroy();
      chartRef.current = null;
    }
  };
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current && options) {
      setOptions(chartRef.current, options);
    }
  }, [
    redraw,
    options
  ]);
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current) {
      setLabels(chartRef.current.config.data, data.labels);
    }
  }, [
    redraw,
    data.labels
  ]);
  reactExports.useEffect(() => {
    if (!redraw && chartRef.current && data.datasets) {
      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);
    }
  }, [
    redraw,
    data.datasets
  ]);
  reactExports.useEffect(() => {
    if (!chartRef.current)
      return;
    if (redraw) {
      destroyChart();
      setTimeout(renderChart);
    } else {
      chartRef.current.update(updateMode);
    }
  }, [
    redraw,
    options,
    data.labels,
    data.datasets,
    updateMode
  ]);
  reactExports.useEffect(() => {
    if (!chartRef.current)
      return;
    destroyChart();
    setTimeout(renderChart);
  }, [
    type
  ]);
  reactExports.useEffect(() => {
    renderChart();
    return () => destroyChart();
  }, []);
  return /* @__PURE__ */ React.createElement("canvas", Object.assign({
    ref: canvasRef,
    role: "img",
    height,
    width
  }, canvasProps), fallbackContent);
}
const Chart2 = /* @__PURE__ */ reactExports.forwardRef(ChartComponent);
function createTypedChart(type, registerables2) {
  Chart$1.register(registerables2);
  return /* @__PURE__ */ reactExports.forwardRef((props2, ref) => /* @__PURE__ */ React.createElement(Chart2, Object.assign({}, props2, {
    ref,
    type
  })));
}
const Bar = /* @__PURE__ */ createTypedChart("bar", BarController);
Chart$1.register(ArcElement, plugin_tooltip, plugin_legend);
function MarkEntry() {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const { isOpen: modal2IsOpen, onOpen: openModal2, onClose: closeModal2 } = useDisclosure();
  const { isOpen: modal3IsOpen, onOpen: openModal3, onClose: closeModal3 } = useDisclosure();
  const [studentDetails, setStudentDetails] = reactExports.useState([]);
  const [coMarks, setCoMarks] = reactExports.useState([]);
  const [totalMark, setTotalMark] = reactExports.useState(0);
  let deptt = localStorage.getItem("dept");
  let yearr = localStorage.getItem("year");
  const examType = localStorage.getItem("examtype");
  reactExports.useEffect(() => {
    const fetchData = async () => {
    };
    fetchData();
  }, []);
  reactExports.useEffect(() => {
    let dept = localStorage.getItem("dept");
    let year = localStorage.getItem("year");
    let sem = localStorage.getItem("sem");
    let subcode = localStorage.getItem("subcode");
    const fetchData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/getstudentdetails", {
          params: {
            dept,
            year,
            sem,
            subcode
          }
        });
        if (response.data) {
          console.log(response.data);
          setStudentDetails(response.data);
          const initialMarks = response.data.map((student) => ({
            Co1: student.Co1,
            Co2: student.Co2,
            Co3: student.Co3,
            Co4: student.Co4,
            Co5: student.Co5,
            Co6: student.Co6
          }));
          setCoMarks(initialMarks);
        }
      } catch (err) {
        console.log(err.toString());
      }
    };
    fetchData();
  }, []);
  const handleCoMarkChange = (index2, coNumber, value) => {
    const updatedCoMarks = [...coMarks];
    updatedCoMarks[index2][`Co${coNumber}`] = value;
    setCoMarks(updatedCoMarks);
    setTotalMark(totalMark + parseInt(value));
    sendMarksData(studentDetails[index2].Reg_No, studentDetails[index2].Student_name, studentDetails[index2].Department, studentDetails[index2].Course_name, studentDetails[index2].Year, studentDetails[index2].Sem, `${"Co" + coNumber}`, value, studentDetails[index2].Course_id);
  };
  const sendMarksData = async (regNo, studentName, department, subjectName, year, sem, conum, conumValue, courseid) => {
    try {
      const response = await axios.post("http://localhost:5000/postMark", {
        regNo,
        studentName,
        department,
        year,
        subjectName,
        courseid,
        conum,
        conumValue,
        sem
      });
      console.log(response.data);
    } catch (error) {
      console.error("Error sending marks data:", error);
    }
  };
  const calculateTotalMarks = (index2) => {
    let total = 0;
    for (let i = 1; i <= 6; i++) {
      total += parseInt(coMarks[index2][`Co${i}`]) || 0;
    }
    return total;
  };
  const handleKeyPress = (index2, coNumber, event2) => {
    if (event2.key === "Enter") {
      console.log(`Enter key pressed in CO${coNumber} for index ${index2}`);
    }
  };
  const componentRef = reactExports.useRef(null);
  const handlePrint = libExports.useReactToPrint({
    content: () => componentRef.current,
    documentTitle: "Department Report"
  });
  if (!deptt || !yearr || !studentDetails) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Error: Missing data for printing." });
  }
  const calculateAverageCoMarks = () => {
    let totalCoMarks = Array(6).fill(0);
    for (let i = 0; i < studentDetails.length; i++) {
      for (let j = 1; j <= 6; j++) {
        totalCoMarks[j - 1] += parseInt(coMarks[i][`Co${j}`]) || 0;
      }
    }
    return totalCoMarks.map((coTotal) => (coTotal / studentDetails.length).toFixed(2));
  };
  const averageCoMarks = calculateAverageCoMarks();
  const data = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Average Marks for Cycle Test 1",
      data: averageCoMarks,
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const data2 = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Average Marks for CYcle Test 2",
      data: [75, 82, 68, 90, 85, 78],
      // Replace with your desired average marks
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options2 = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const data3 = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Average Marks for University",
      data: [40, 75, 68, 90, 70, 40],
      // Replace with your desired average marks
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options3 = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const data4 = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Average Marks for Assignment 1",
      data: [5, 10, 15, 9],
      // Replace with your desired average marks
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options4 = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const data5 = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Average Marks for Assignment 2",
      data: [15, 11, 3, 8],
      // Replace with your desired average marks
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options5 = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const data6 = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Average Marks for Assignment 3",
      data: [9, 5, 13, 18],
      // Replace with your desired average marks
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options6 = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const data7 = {
    labels: ["CO1", "CO2", "CO3", "CO4", "CO5", "CO6"],
    datasets: [{
      label: "Overall Direct Attainment",
      data: [89, 56, 50, 40, 70, 30],
      // Replace with your desired average marks
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1
    }]
  };
  const options7 = {
    scales: {
      x: {
        type: "category",
        grid: {
          display: false
        }
      },
      y: {
        type: "linear",
        ticks: {
          beginAtZero: true
        }
      }
    }
  };
  const calculateStudentTotalMarks = (coMarks2) => {
    let total = 0;
    for (let i = 1; i <= 6; i++) {
      total += parseInt(coMarks2[`Co${i}`]) || 0;
    }
    return total;
  };
  const calculateAverageMarks = () => {
    let totalMarks2 = 0;
    let numberOfStudents = studentDetails.length;
    for (let i = 0; i < numberOfStudents; i++) {
      totalMarks2 += calculateStudentTotalMarks(coMarks[i]);
    }
    return totalMarks2 / numberOfStudents;
  };
  const determineLevel = (totalMarks2) => {
    if (totalMarks2 >= 80) {
      return "Level 1";
    } else if (totalMarks2 >= 50 && totalMarks2 < 80) {
      return "Level 2";
    } else {
      return "Level 3";
    }
  };
  const countStudentsByLevel = () => {
    let level1Count2 = 0;
    let level2Count2 = 0;
    let level3Count2 = 0;
    for (let i = 0; i < studentDetails.length; i++) {
      const totalMarks2 = calculateStudentTotalMarks(coMarks[i]);
      const level = determineLevel(totalMarks2);
      switch (level) {
        case "Level 1":
          level1Count2++;
          break;
        case "Level 2":
          level2Count2++;
          break;
        case "Level 3":
          level3Count2++;
          break;
      }
    }
    return { level1Count: level1Count2, level2Count: level2Count2, level3Count: level3Count2 };
  };
  calculateAverageMarks();
  countStudentsByLevel();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "home", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "homeContainer", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ml: "4.5rem", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Navbar, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ml: "5rem", flexDirection: "column", display: "flex", alignItems: "center", justifyContent: "center", className: "home-content", mt: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { maxW: "100%", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { ref: componentRef, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { className: "flex items-center justify-start p-10", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(SimpleGrid, { gap: 10, columns: 2, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
            "Department: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: deptt })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
            "Year: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: yearr })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
            "Subject handled by: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: studentDetails[0]?.staff_name })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
            "Subject code: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: studentDetails[0]?.Course_id })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
            "Exam: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: examType })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
            "Subject Name: ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: studentDetails[0]?.Course_name })
          ] }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Table, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Thead, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Tr, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Th, { className: "font-bold", children: "S.Nor" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Th, { className: "font-bold", children: "Register Number" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Th, { className: "font-bold", children: "Student Name" }),
            [1, 2, 3, 4, 5, 6].map((coNumber) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Th, { className: "font-bold", children: [
              "CO",
              coNumber,
              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { mt: 2, p: -1 })
            ] }, coNumber)),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Th, { className: "font-bold", children: [
              "Total Mark",
              /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { mt: 2, p: -1 })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tbody, { width: "100%", children: studentDetails.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Tr, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Td, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { className: "font-semibold", children: index2 + 1 }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Td, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { className: "font-semibold", children: item.Reg_No }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Td, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { className: "font-semibold", children: item.Student_name }) }),
            [1, 2, 3, 4, 5, 6].map((coNumber) => /* @__PURE__ */ jsxRuntimeExports.jsx(Td, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                textAlign: "center",
                p: -1,
                border: "2px solid dodgerblue",
                value: coMarks[index2][`Co${coNumber}`] === 0 ? "" : coMarks[index2][`Co${coNumber}`],
                onChange: (e2) => handleCoMarkChange(index2, coNumber, e2.target.value),
                onKeyPress: (e2) => handleKeyPress(index2, coNumber, e2)
              }
            ) }, coNumber)),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Td, { className: "font-semibold", children: calculateTotalMarks(index2) })
          ] }, index2)) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { p: 5, gap: 5, display: "flex", alignItems: "center", justifyContent: "center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { width: "30%" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { width: "30%" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { width: "30%" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { width: "30%" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { width: "30%" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { width: "30%" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { mb: 10, flexDirection: "row", gap: 10, display: "flex", alignItems: "center", justifyContent: "center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { className: "text-2xl font-semibold", children: "Total" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { children: [
              "Level 1 : ",
              countStudentsByLevel().level1Count,
              " ",
              countStudentsByLevel().level1Count == 1 || 0 ? "student" : "students"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { children: [
              "Level 2 : ",
              countStudentsByLevel().level2Count,
              " ",
              countStudentsByLevel().level2Count == 1 || 0 ? "student" : "students"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { children: [
              "Level 3 : ",
              countStudentsByLevel().level3Count,
              " ",
              countStudentsByLevel().level3Count == 1 || 0 ? "student" : "students"
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { gap: 5, p: "1rem", display: "flex", alignItems: "center", justifyContent: "center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { colorScheme: "gray", onClick: handlePrint, children: "Print Report" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { onClick: onOpen, colorScheme: "twitter", children: "Chart" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { onClick: openModal2, colorScheme: "twitter", children: "Chart for all test" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Modal, { isOpen, onClose, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ModalOverlay, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(ModalContent, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalHeader, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
                  "Subject code: ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: studentDetails[0]?.Course_id })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalCloseButton, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalBody, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Average for Cycle Test 1" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data, options })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalFooter, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { colorScheme: "blue", mr: 3, onClick: onClose, children: "Close" }) })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Modal, { isOpen: modal2IsOpen, onClose: closeModal2, children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ModalOverlay, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(ModalContent, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalHeader, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Text$2, { className: "font-semibold text-lg", children: [
                  "Subject code: ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { style: { color: "coral" }, children: studentDetails[0]?.Course_id })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalCloseButton, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(ModalBody, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Average for CT 2:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data: data2, options: options2 })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Average for University" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data: data3, options: options3 })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Average for Assignment 1:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data: data4, options: options4 })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Average for Assignment 2:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data: data5, options: options5 })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Average for Assignment 3:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data: data6, options: options6 })
                  ] })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(ModalFooter, { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { colorScheme: "blue", mr: 3, onClick: openModal3, children: "Overall Attainment" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { colorScheme: "blue", mr: 3, onClick: closeModal2, children: "Close" })
                ] })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Modal, { isOpen: modal3IsOpen, onClose: closeModal3, children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(ModalOverlay, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(ModalContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ModalCloseButton, {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx(ModalBody, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { className: "co-averages", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Text$2, { as: "h1", fontSize: "xl", fontWeight: "bold", children: "Overall Direct Attainment" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { data: data7, options: options7 })
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(ModalFooter, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button$2, { colorScheme: "blue", mr: 3, onClick: closeModal3, children: "Close" }) })
            ] })
          ] })
        ] })
      ] }) }) })
    ] })
  ] }) });
}
function App() {
  api.get("loggedIn");
  const local = localStorage.getItem("loggedIn");
  reactExports.useEffect(() => {
  }, [local]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(HashRouter, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: "/",
        element: local ? /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreen, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(LoginScreen, {})
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: "/login",
        element: local ? /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreen, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(LoginScreen, {})
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: "/home",
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreen, {})
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Route,
      {
        path: "/markentry",
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(MarkEntry, {})
      }
    )
  ] }) }) });
}
client.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChakraProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }) })
);
